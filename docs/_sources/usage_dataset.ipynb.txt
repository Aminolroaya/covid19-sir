{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('covid19-sir': pipenv)",
   "metadata": {
    "interpreter": {
     "hash": "aa53c8c6e6798222a2084c11cc25017700a8d3ad495b587e3a634f357767115f"
    }
   },
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (datasets)\n",
      "Here, we will review the raw/cleaned datasets. `Scenario` class performs data cleaning internally using `JHUData` class and so on, but it is important to review the features and data types before analysing them."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Preparation\n",
      "Prepare the packages."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "'2.12.0-phi.new.339.357.359.362.366.367.382.383.389.408.fix.360.373.406'"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" directory and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` instance will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically and download the datasets to \"input\" directory and load them."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu()\n",
      "# Linelist of case reports\n",
      "linelist = data_loader.linelist()\n",
      "# Population in each country\n",
      "population_data = data_loader.population()\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt()\n",
      "# The number of tests\n",
      "pcr_data = data_loader.pcr()"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Please set verbose=2 to see the detailed citation list.\n",
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving linelist from Open COVID-19 Data Working Group repository: https://github.com/beoutbreakprepared/nCoV2019\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving COVID-19 dataset in Japan from https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of cases (JHU style)\n",
      "The main dataset is that of the number of cases and was saved as `jhu_data`, an instance of `JHUData` class. This includes \"Confirmed\", \"Infected\", \"Recovered\" and \"Fatal\". \"Infected\" was calculated as \"Confirmed - Recovered - Fatal\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(jhu_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.cleaning.jhu_data.JHUData"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The dataset will be retrieved from [COVID-19 Data Hub](https://covid19datahub.io/) and [Data folder of CovsirPhy project](https://github.com/lisphilar/covid19-sir/tree/master/data). Description of these projects will be shown as follows."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Detailed citation list of COVID-19 Data Hub\n",
      "# print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>...</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>358446</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>4732</td>\n",
        "      <td>978.0</td>\n",
        "      <td>923</td>\n",
        "      <td>12</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358447</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>4819</td>\n",
        "      <td>1047.0</td>\n",
        "      <td>955</td>\n",
        "      <td>12</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358448</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>4819</td>\n",
        "      <td>1049.0</td>\n",
        "      <td>1024</td>\n",
        "      <td>12</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358449</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>4820</td>\n",
        "      <td>1058.0</td>\n",
        "      <td>1025</td>\n",
        "      <td>12</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358450</th>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>4820</td>\n",
        "      <td>1058.0</td>\n",
        "      <td>1025</td>\n",
        "      <td>12</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 21 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "       ObservationDate  Tests  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "358446      2020-12-08   4732      978.0        923      12    107808.0  COL   \n",
        "358447      2020-12-09   4819     1047.0        955      12    107808.0  COL   \n",
        "358448      2020-12-10   4819     1049.0       1024      12    107808.0  COL   \n",
        "358449      2020-12-11   4820     1058.0       1025      12    107808.0  COL   \n",
        "358450      2020-12-12   4820     1058.0       1025      12    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  ...  cancel_events  \\\n",
        "358446        Vichada       Colombia               3  ...              1   \n",
        "358447        Vichada       Colombia               3  ...              1   \n",
        "358448        Vichada       Colombia               3  ...              1   \n",
        "358449        Vichada       Colombia               3  ...              1   \n",
        "358450        Vichada       Colombia               3  ...              1   \n",
        "\n",
        "        gatherings_restrictions  transport_closing  stay_home_restrictions  \\\n",
        "358446                        3                  1                       1   \n",
        "358447                        3                  1                       1   \n",
        "358448                        3                  1                       1   \n",
        "358449                        3                  1                       1   \n",
        "358450                        3                  1                       1   \n",
        "\n",
        "        internal_movement_restrictions  international_movement_restrictions  \\\n",
        "358446                               1                                    4   \n",
        "358447                               1                                    4   \n",
        "358448                               1                                    4   \n",
        "358449                               1                                    4   \n",
        "358450                               1                                    4   \n",
        "\n",
        "        information_campaigns  testing_policy  contact_tracing  \\\n",
        "358446                      2               2                2   \n",
        "358447                      2               2                2   \n",
        "358448                      2               2                2   \n",
        "358449                      2               2                2   \n",
        "358450                      2               2                2   \n",
        "\n",
        "        stringency_index  \n",
        "358446             60.19  \n",
        "358447             60.19  \n",
        "358448             60.19  \n",
        "358449             60.19  \n",
        "358450             60.19  \n",
        "\n",
        "[5 rows x 21 columns]"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>13260</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>163929</td>\n",
        "      <td>22553</td>\n",
        "      <td>2382</td>\n",
        "      <td>138994</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13261</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>165840</td>\n",
        "      <td>22798</td>\n",
        "      <td>2420</td>\n",
        "      <td>140622</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13262</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>168573</td>\n",
        "      <td>23102</td>\n",
        "      <td>2465</td>\n",
        "      <td>143006</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13263</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>171542</td>\n",
        "      <td>24026</td>\n",
        "      <td>2502</td>\n",
        "      <td>145014</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13264</th>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>174299</td>\n",
        "      <td>24241</td>\n",
        "      <td>2534</td>\n",
        "      <td>147524</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Date Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "13260 2020-12-08   Japan        -     163929     22553   2382     138994\n",
        "13261 2020-12-09   Japan        -     165840     22798   2420     140622\n",
        "13262 2020-12-10   Japan        -     168573     23102   2465     143006\n",
        "13263 2020-12-11   Japan        -     171542     24026   2502     145014\n",
        "13264 2020-12-12   Japan        -     174299     24241   2534     147524"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.cleaned().info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 355060 entries, 0 to 13264\n",
        "Data columns (total 7 columns):\n",
        " #   Column     Non-Null Count   Dtype         \n",
        "---  ------     --------------   -----         \n",
        " 0   Date       355060 non-null  datetime64[ns]\n",
        " 1   Country    355060 non-null  object        \n",
        " 2   Province   355060 non-null  object        \n",
        " 3   Confirmed  355060 non-null  int64         \n",
        " 4   Infected   355060 non-null  int64         \n",
        " 5   Fatal      355060 non-null  int64         \n",
        " 6   Recovered  355060 non-null  int64         \n",
        "dtypes: datetime64[ns](1), int64(4), object(2)\n",
        "memory usage: 21.7+ MB\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Total number of cases in all countries with `JHUData.total()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculate total values\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-08</th>\n",
        "      <td>68286638</td>\n",
        "      <td>22833418</td>\n",
        "      <td>1559407</td>\n",
        "      <td>43893813</td>\n",
        "      <td>0.022836</td>\n",
        "      <td>0.642788</td>\n",
        "      <td>0.034308</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>68955772</td>\n",
        "      <td>23086439</td>\n",
        "      <td>1571345</td>\n",
        "      <td>44297988</td>\n",
        "      <td>0.022788</td>\n",
        "      <td>0.642412</td>\n",
        "      <td>0.034257</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>69642045</td>\n",
        "      <td>23293207</td>\n",
        "      <td>1582996</td>\n",
        "      <td>44765842</td>\n",
        "      <td>0.022730</td>\n",
        "      <td>0.642799</td>\n",
        "      <td>0.034154</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>71109752</td>\n",
        "      <td>24290757</td>\n",
        "      <td>1594942</td>\n",
        "      <td>45224053</td>\n",
        "      <td>0.022429</td>\n",
        "      <td>0.635975</td>\n",
        "      <td>0.034066</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>71122480</td>\n",
        "      <td>24300881</td>\n",
        "      <td>1595032</td>\n",
        "      <td>45226567</td>\n",
        "      <td>0.022427</td>\n",
        "      <td>0.635897</td>\n",
        "      <td>0.034066</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "            Confirmed  Infected    Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                       \n",
        "2020-12-08   68286638  22833418  1559407   43893813             0.022836   \n",
        "2020-12-09   68955772  23086439  1571345   44297988             0.022788   \n",
        "2020-12-10   69642045  23293207  1582996   44765842             0.022730   \n",
        "2020-12-11   71109752  24290757  1594942   45224053             0.022429   \n",
        "2020-12-12   71122480  24300881  1595032   45226567             0.022427   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-12-08                 0.642788                        0.034308  \n",
        "2020-12-09                 0.642412                        0.034257  \n",
        "2020-12-10                 0.642799                        0.034154  \n",
        "2020-12-11                 0.635975                        0.034066  \n",
        "2020-12-12                 0.635897                        0.034066  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Statistics of rate values in all countries\n",
      "total_df.loc[:, total_df.columns.str.contains(\"per\")].describe().T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>count</th>\n",
        "      <th>mean</th>\n",
        "      <th>std</th>\n",
        "      <th>min</th>\n",
        "      <th>25%</th>\n",
        "      <th>50%</th>\n",
        "      <th>75%</th>\n",
        "      <th>max</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <td>346.0</td>\n",
        "      <td>0.039218</td>\n",
        "      <td>0.017382</td>\n",
        "      <td>0.000000</td>\n",
        "      <td>0.026437</td>\n",
        "      <td>0.034344</td>\n",
        "      <td>0.050351</td>\n",
        "      <td>0.074258</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <td>346.0</td>\n",
        "      <td>0.420979</td>\n",
        "      <td>0.252679</td>\n",
        "      <td>0.001291</td>\n",
        "      <td>0.200000</td>\n",
        "      <td>0.499506</td>\n",
        "      <td>0.645487</td>\n",
        "      <td>1.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "      <td>346.0</td>\n",
        "      <td>0.210086</td>\n",
        "      <td>0.273325</td>\n",
        "      <td>0.000000</td>\n",
        "      <td>0.042084</td>\n",
        "      <td>0.085353</td>\n",
        "      <td>0.225524</td>\n",
        "      <td>0.943005</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "                                count      mean       std       min       25%  \\\n",
        "Fatal per Confirmed             346.0  0.039218  0.017382  0.000000  0.026437   \n",
        "Recovered per Confirmed         346.0  0.420979  0.252679  0.001291  0.200000   \n",
        "Fatal per (Fatal or Recovered)  346.0  0.210086  0.273325  0.000000  0.042084   \n",
        "\n",
        "                                     50%       75%       max  \n",
        "Fatal per Confirmed             0.034344  0.050351  0.074258  \n",
        "Recovered per Confirmed         0.499506  0.645487  1.000000  \n",
        "Fatal per (Fatal or Recovered)  0.085353  0.225524  0.943005  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can create a subset for a country using `JHUData.subset()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "df, _ = jhu_data.records(\"Japan\")\n",
      "df.tail()\n",
      "# We can use ISO3 code etc.\n",
      "# df, _ = jhu_data.records(\"JPN\")\n",
      "# df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>306</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>163929</td>\n",
        "      <td>22553</td>\n",
        "      <td>2382</td>\n",
        "      <td>138994</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>307</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>165840</td>\n",
        "      <td>22798</td>\n",
        "      <td>2420</td>\n",
        "      <td>140622</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>308</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>168573</td>\n",
        "      <td>23102</td>\n",
        "      <td>2465</td>\n",
        "      <td>143006</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>309</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>171542</td>\n",
        "      <td>24026</td>\n",
        "      <td>2502</td>\n",
        "      <td>145014</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>310</th>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>174299</td>\n",
        "      <td>24241</td>\n",
        "      <td>2534</td>\n",
        "      <td>147524</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "306 2020-12-08     163929     22553   2382     138994\n",
        "307 2020-12-09     165840     22798   2420     140622\n",
        "308 2020-12-10     168573     23102   2465     143006\n",
        "309 2020-12-11     171542     24026   2502     145014\n",
        "310 2020-12-12     174299     24241   2534     147524"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Province (\"prefecture\" for Japan) name can be specified."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df, _ = jhu_data.records(\"Japan\", province=\"Tokyo\")\n",
      "df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>264</th>\n",
        "      <td>2020-12-07</td>\n",
        "      <td>44003</td>\n",
        "      <td>4362</td>\n",
        "      <td>517</td>\n",
        "      <td>39124</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>265</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>44355</td>\n",
        "      <td>4274</td>\n",
        "      <td>523</td>\n",
        "      <td>39558</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>266</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>44927</td>\n",
        "      <td>4429</td>\n",
        "      <td>528</td>\n",
        "      <td>39970</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>267</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>45529</td>\n",
        "      <td>4624</td>\n",
        "      <td>530</td>\n",
        "      <td>40375</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>268</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>46124</td>\n",
        "      <td>4619</td>\n",
        "      <td>535</td>\n",
        "      <td>40970</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "264 2020-12-07      44003      4362    517      39124\n",
        "265 2020-12-08      44355      4274    523      39558\n",
        "266 2020-12-09      44927      4429    528      39970\n",
        "267 2020-12-10      45529      4624    530      40375\n",
        "268 2020-12-11      46124      4619    535      40970"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Countries we can select\n",
      "pprint(jhu_data.countries(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola',\n",
        " 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria',\n",
        " 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',\n",
        " 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n",
        " 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria',\n",
        " 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde',\n",
        " 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros',\n",
        " 'Costa Atlantica', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba', 'Cyprus',\n",
        " 'Czech Republic', 'Democratic Republic of the Congo', 'Denmark', 'Djibouti',\n",
        " 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador',\n",
        " 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji', 'Finland',\n",
        " 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Grand Princess',\n",
        " 'Greece', 'Grenada', 'Guam', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana',\n",
        " 'Haiti', 'Holy See', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia',\n",
        " 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan',\n",
        " 'Kazakhstan', 'Kenya', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia',\n",
        " 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania',\n",
        " 'Luxembourg', 'MS Zaandam', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives',\n",
        " 'Mali', 'Malta', 'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico',\n",
        " 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique',\n",
        " 'Myanmar', 'Namibia', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua',\n",
        " 'Niger', 'Nigeria', 'North Macedonia', 'Northern Mariana Islands', 'Norway',\n",
        " 'Oman', 'Pakistan', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay',\n",
        " 'Peru', 'Philippines', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar',\n",
        " 'Republic of the Congo', 'Romania', 'Russia', 'Rwanda',\n",
        " 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines',\n",
        " 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',\n",
        " 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia',\n",
        " 'Solomon Islands', 'Somalia', 'South Africa', 'South Korea', 'South Sudan',\n",
        " 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Swaziland', 'Sweden',\n",
        " 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',\n",
        " 'Timor-Leste', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Uganda',\n",
        " 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States',\n",
        " 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam',\n",
        " 'Virgin Islands, U.S.', 'Yemen', 'Zambia', 'Zimbabwe']\n"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Linelist of case reports\n",
      "The number of cases is important, but linelist of case reports will helpful to understand the situation deeply. Linelist data was saved as `linelist`, an instance of `LinelistData` class. This dataset is from [Open COVID-19 Data Working Group](https://github.com/beoutbreakprepared/nCoV2019)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(linelist)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "covsirphy.cleaning.linelist.LinelistData"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Citation\n",
      "print(linelist.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Xu, B., Gutierrez, B., Mekaru, S. et al. Epidemiological data from the COVID-19 outbreak, real-time case information. Sci Data 7, 106 (2020). https://doi.org/10.1038/s41597-020-0448-0\n"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw dataset\n",
      "linelist.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>age</th>\n",
        "      <th>sex</th>\n",
        "      <th>province</th>\n",
        "      <th>country</th>\n",
        "      <th>date_onset_symptoms</th>\n",
        "      <th>date_admission_hospital</th>\n",
        "      <th>date_confirmation</th>\n",
        "      <th>symptoms</th>\n",
        "      <th>chronic_disease</th>\n",
        "      <th>outcome</th>\n",
        "      <th>date_death_or_discharge</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Callao</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676311</th>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "         age     sex province country date_onset_symptoms  \\\n",
        "2676307   52  female     Lima    Peru                 NaN   \n",
        "2676308   52  female     Lima    Peru                 NaN   \n",
        "2676309   52    male   Callao    Peru                 NaN   \n",
        "2676310   52    male     Lima    Peru                 NaN   \n",
        "2676311  NaN     NaN      NaN     NaN                 NaN   \n",
        "\n",
        "        date_admission_hospital date_confirmation symptoms chronic_disease  \\\n",
        "2676307                     NaN        17.05.2020      NaN             NaN   \n",
        "2676308                     NaN        17.05.2020      NaN             NaN   \n",
        "2676309                     NaN        17.05.2020      NaN             NaN   \n",
        "2676310                     NaN        17.05.2020      NaN             NaN   \n",
        "2676311                     NaN               NaN      NaN             NaN   \n",
        "\n",
        "        outcome date_death_or_discharge  \n",
        "2676307     NaN                     NaN  \n",
        "2676308     NaN                     NaN  \n",
        "2676309     NaN                     NaN  \n",
        "2676310     NaN                     NaN  \n",
        "2676311     NaN                     NaN  "
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned dataset\n",
      "linelist.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676306</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Coronel Portillo</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Callao</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "        Country          Province Hospitalized_date Confirmation_date  \\\n",
        "2676306    Peru  Coronel Portillo               NaT        2020-05-17   \n",
        "2676307    Peru              Lima               NaT        2020-05-17   \n",
        "2676308    Peru              Lima               NaT        2020-05-17   \n",
        "2676309    Peru            Callao               NaT        2020-05-17   \n",
        "2676310    Peru              Lima               NaT        2020-05-17   \n",
        "\n",
        "        Outcome_date  Confirmed  Infected  Recovered  Fatal Symptoms  \\\n",
        "2676306          NaT       True     False      False  False      NaN   \n",
        "2676307          NaT       True     False      False  False      NaN   \n",
        "2676308          NaT       True     False      False  False      NaN   \n",
        "2676309          NaT       True     False      False  False      NaN   \n",
        "2676310          NaT       True     False      False  False      NaN   \n",
        "\n",
        "        Chronic_disease   Age     Sex  \n",
        "2676306             NaN  52.0  female  \n",
        "2676307             NaN  52.0  female  \n",
        "2676308             NaN  52.0  female  \n",
        "2676309             NaN  52.0    male  \n",
        "2676310             NaN  52.0    male  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for specified area\n",
      "linelist.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>107</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-30</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>108</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-24</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:pneumonia:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>109</th>\n",
        "      <td>2020-10-01</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>30.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>110</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>111</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-26</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:joint pain:pneumonia</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "    Hospitalized_date Confirmation_date Outcome_date  Confirmed  Infected  \\\n",
        "107               NaT        2020-01-30          NaT       True     False   \n",
        "108               NaT        2020-01-24          NaT       True     False   \n",
        "109        2020-10-01        2020-01-15   2020-01-15       True     False   \n",
        "110               NaT        2020-01-25          NaT       True     False   \n",
        "111               NaT        2020-01-26          NaT       True     False   \n",
        "\n",
        "     Recovered  Fatal                     Symptoms Chronic_disease   Age  \\\n",
        "107      False  False                          NaN             NaN   NaN   \n",
        "108       True  False  fever:pneumonia:sore throat             NaN  40.0   \n",
        "109       True  False      cough:fever:sore throat             NaN  30.0   \n",
        "110      False  False                  cough:fever             NaN   NaN   \n",
        "111      False  False   fever:joint pain:pneumonia             NaN  40.0   \n",
        "\n",
        "        Sex  \n",
        "107  female  \n",
        "108    male  \n",
        "109    male  \n",
        "110  female  \n",
        "111    male  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for outcome (\"Recovered\" or \"Fatal\")\n",
      "linelist.closed(outcome=\"Recovered\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Recovered_date</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>272</th>\n",
        "      <td>Singapore</td>\n",
        "      <td>-</td>\n",
        "      <td>2020-02-02</td>\n",
        "      <td>2020-02-06</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>39.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>273</th>\n",
        "      <td>Malaysia</td>\n",
        "      <td>Johor</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>274</th>\n",
        "      <td>China</td>\n",
        "      <td>Gansu</td>\n",
        "      <td>2020-07-02</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>diarrhea</td>\n",
        "      <td>NaN</td>\n",
        "      <td>1.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>275</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>NaN</td>\n",
        "      <td>hypertension</td>\n",
        "      <td>NaN</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>276</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>2020-02-19</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "       Country Province Hospitalized_date Confirmation_date Recovered_date  \\\n",
        "272  Singapore        -        2020-02-02        2020-02-06     2020-02-17   \n",
        "273   Malaysia    Johor               NaT        2020-01-25     2020-02-08   \n",
        "274      China    Gansu        2020-07-02        2020-02-08     2020-02-17   \n",
        "275     Canada  Ontario               NaT        2020-01-25     2020-01-31   \n",
        "276     Canada  Ontario               NaT        2020-01-31     2020-02-19   \n",
        "\n",
        "        Symptoms Chronic_disease   Age     Sex  \n",
        "272          NaN             NaN  39.0  female  \n",
        "273  cough:fever             NaN  40.0    male  \n",
        "274     diarrhea             NaN   1.0  female  \n",
        "275          NaN    hypertension   NaN    male  \n",
        "276          NaN             NaN   NaN  female  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "As the median value of the period from confirmation to recovery, we can calculate recovery period."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Recovery period (integer) [days]\n",
      "linelist.recovery_period()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population in each country\n",
      "Population values are necessary to calculate the number of susceptible people. Susceptible is a variable of SIR-derived models. This dataset was saved as `population_data`, an instance of `PopulationData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(population_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "covsirphy.cleaning.population.PopulationData"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>302232</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>302233</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>302234</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>302235</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>302236</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "302232  COL  Colombia  Vichada 2020-12-08      107808\n",
        "302233  COL  Colombia  Vichada 2020-12-09      107808\n",
        "302234  COL  Colombia  Vichada 2020-12-10      107808\n",
        "302235  COL  Colombia  Vichada 2020-12-11      107808\n",
        "302236  COL  Colombia  Vichada 2020-12-12      107808"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We will get the population values with `PopulationData.value()`."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# In a country\n",
      "population_data.value(\"Japan\", province=None)\n",
      "# In a country with ISO3 code\n",
      "# population_data.value(\"JPN\", province=None)\n",
      "# In a province (prefecture)\n",
      "# population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can update the population values."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Before\n",
      "population_before = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\"Before: {population_before}\")\n",
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_after = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\" After: {population_after}\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Before: 13942856\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        " After: 14002973\n"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Government Response Tracker (OxCGRT)\n",
      "Government responses are tracked with [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker). Because government responses and activities of persons change the parameter values of SIR-derived models, this dataset is significant when we try to forcast the number of cases.  \n",
      "With `DataLoader` class, the dataset was retrieved via [COVID-19 Data Hub](https://covid19datahub.io/) and saved as `oxcgrt_data`, an instance of `OxCGRTData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(oxcgrt_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "covsirphy.cleaning.oxcgrt.OxCGRTData"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>358446</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358447</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358448</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358449</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>358450</th>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "358446 2020-12-08  Colombia  COL               3                  1   \n",
        "358447 2020-12-09  Colombia  COL               3                  1   \n",
        "358448 2020-12-10  Colombia  COL               3                  1   \n",
        "358449 2020-12-11  Colombia  COL               3                  1   \n",
        "358450 2020-12-12  Colombia  COL               3                  1   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "358446              1                        3                  1   \n",
        "358447              1                        3                  1   \n",
        "358448              1                        3                  1   \n",
        "358449              1                        3                  1   \n",
        "358450              1                        3                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "358446                       1                               1   \n",
        "358447                       1                               1   \n",
        "358448                       1                               1   \n",
        "358449                       1                               1   \n",
        "358450                       1                               1   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "358446                                    4                      2   \n",
        "358447                                    4                      2   \n",
        "358448                                    4                      2   \n",
        "358449                                    4                      2   \n",
        "358450                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "358446               2                2             60.19  \n",
        "358447               2                2             60.19  \n",
        "358448               2                2             60.19  \n",
        "358449               2                2             60.19  \n",
        "358450               2                2             60.19  "
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>342</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>46.3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>343</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>46.3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>344</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>46.3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>345</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>46.3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>346</th>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>46.3</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "342 2020-12-08               1                  1              1   \n",
        "343 2020-12-09               1                  1              1   \n",
        "344 2020-12-10               1                  1              1   \n",
        "345 2020-12-11               1                  1              1   \n",
        "346 2020-12-12               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "342                        0                  1                       1   \n",
        "343                        0                  1                       1   \n",
        "344                        0                  1                       1   \n",
        "345                        0                  1                       1   \n",
        "346                        0                  1                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "342                               1                                    3   \n",
        "343                               1                                    3   \n",
        "344                               1                                    3   \n",
        "345                               1                                    3   \n",
        "346                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "342                      2               3                2              46.3  \n",
        "343                      2               3                2              46.3  \n",
        "344                      2               3                2              46.3  \n",
        "345                      2               3                2              46.3  \n",
        "346                      2               3                2              46.3  "
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of tests\n",
      "The number of tests is also key information to understand the situation.\n",
      "This dataset was saved as `pcr_data`, an instance of `PCRData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(pcr_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "covsirphy.cleaning.pcr_data.PCRData"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pcr_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# pcr_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "pcr_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>13260</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>3800689</td>\n",
        "      <td>163929</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13261</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>3842524</td>\n",
        "      <td>165840</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13262</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>3898969</td>\n",
        "      <td>168573</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13263</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>3945830</td>\n",
        "      <td>171542</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13264</th>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4001554</td>\n",
        "      <td>174299</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "            Date Country Province    Tests  Confirmed\n",
        "13260 2020-12-08   Japan        -  3800689     163929\n",
        "13261 2020-12-09   Japan        -  3842524     165840\n",
        "13262 2020-12-10   Japan        -  3898969     168573\n",
        "13263 2020-12-11   Japan        -  3945830     171542\n",
        "13264 2020-12-12   Japan        -  4001554     174299"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "pcr_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>306</th>\n",
        "      <td>2020-12-08</td>\n",
        "      <td>3800689</td>\n",
        "      <td>163929</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>307</th>\n",
        "      <td>2020-12-09</td>\n",
        "      <td>3842524</td>\n",
        "      <td>165840</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>308</th>\n",
        "      <td>2020-12-10</td>\n",
        "      <td>3898969</td>\n",
        "      <td>168573</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>309</th>\n",
        "      <td>2020-12-11</td>\n",
        "      <td>3945830</td>\n",
        "      <td>171542</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>310</th>\n",
        "      <td>2020-12-12</td>\n",
        "      <td>4001554</td>\n",
        "      <td>174299</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 40,
       "text": [
        "          Date    Tests  Confirmed\n",
        "306 2020-12-08  3800689     163929\n",
        "307 2020-12-09  3842524     165840\n",
        "308 2020-12-10  3898969     168573\n",
        "309 2020-12-11  3945830     171542\n",
        "310 2020-12-12  4001554     174299"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Under the assumption that all tests were PCR test, we can calculate the positive rate of PCR tests aas \"the number of confirmed cases per the number of tests\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Positive rate in Japan\n",
      "_ = pcr_data.positive_rate(\"Japan\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 41
    }
   ],
   "metadata": {}
  }
 ]
}
