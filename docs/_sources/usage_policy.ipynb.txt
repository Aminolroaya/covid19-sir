{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.13.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "196"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **16th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{2: ['Timor-Leste', 'Holy See', 'Solomon Islands'],\n",
        " 3: ['Saint Kitts and Nevis', 'Laos', 'Tanzania'],\n",
        " 4: ['Saint Lucia', 'Dominica', 'Brunei', 'Grenada'],\n",
        " 5: ['Fiji', 'Equatorial Guinea'],\n",
        " 6: ['Mauritius', 'Saint Vincent and the Grenadines', 'Antigua and Barbuda'],\n",
        " 7: ['Gambia'],\n",
        " 8: ['Seychelles', 'Liechtenstein', 'Northern Mariana Islands', 'Kyrgyzstan',\n",
        "     'Monaco', 'Bahamas', 'Cambodia', 'Madagascar', 'Trinidad and Tobago',\n",
        "     'Vietnam'],\n",
        " 9: ['Barbados', 'Suriname', 'Bolivia', 'Sao Tome and Principe', 'Australia',\n",
        "     'Malawi', 'South Africa', 'Kazakhstan', 'Virgin Islands, U.S.',\n",
        "     'Republic of the Congo', 'Burundi', 'Ghana', 'Djibouti', 'Oman', 'Zambia',\n",
        "     'Swaziland', 'Lesotho', 'Uzbekistan', 'Bermuda', 'Zimbabwe', 'Belize'],\n",
        " 10: ['Rwanda', 'Dominican Republic', 'Algeria', 'Mongolia', 'Namibia',\n",
        "      'Angola', 'Mozambique', 'Chile', 'Liberia', 'Bahrain', 'Eritrea',\n",
        "      'Saudi Arabia', 'Bhutan', 'Venezuela', 'Ethiopia', 'Guyana',\n",
        "      'New Zealand', 'Philippines', 'Benin', 'Comoros', 'Papua New Guinea',\n",
        "      'Guatemala', 'Kuwait', 'Botswana', 'Libya', 'Central African Republic',\n",
        "      'Syria', \"Cote d'Ivoire\", 'Gabon', 'Israel', 'Nigeria', 'Senegal',\n",
        "      'Honduras', 'Maldives', 'Jamaica', 'Singapore'],\n",
        " 11: ['Puerto Rico', 'Pakistan', 'Yemen', 'Jordan', 'Mexico', 'Guinea-Bissau',\n",
        "      'Sierra Leone', 'El Salvador', 'India', 'Iraq', 'Sudan', 'Guam',\n",
        "      'Colombia', 'Cape Verde', 'Bangladesh', 'Costa Rica', 'Peru', 'Nepal',\n",
        "      'Chad', 'Brazil', 'Guinea', 'Montenegro', 'Togo', 'Paraguay', 'Panama',\n",
        "      'Taiwan', 'Nicaragua', 'Ecuador', 'Cameroon', 'Kenya', 'Egypt'],\n",
        " 12: ['Indonesia', 'Qatar', 'Slovakia', 'Kosovo', 'United Arab Emirates',\n",
        "      'Iceland', 'Argentina', 'Japan', 'Tajikistan', 'Azerbaijan', 'Niger',\n",
        "      'South Sudan', 'Georgia', 'Democratic Republic of the Congo'],\n",
        " 13: ['China', 'Slovenia', 'Bulgaria', 'Myanmar', 'Hungary', 'Armenia',\n",
        "      'Serbia', 'San Marino', 'Mali', 'Moldova', 'Palestine', 'Haiti', 'Uganda',\n",
        "      'Mauritania', 'Malta', 'Cuba', 'Poland', 'Belarus', 'Somalia',\n",
        "      'United States', 'Sri Lanka', 'Burkina Faso', 'Andorra', 'Russia',\n",
        "      'Greece', 'Croatia', 'Cyprus', 'Luxembourg', 'Tunisia'],\n",
        " 14: ['Iran', 'Spain', 'Malaysia', 'Ireland', 'Bosnia and Herzegovina',\n",
        "      'Thailand', 'North Macedonia', 'Czech Republic', 'Turkey', 'Uruguay',\n",
        "      'Latvia', 'Norway', 'Lithuania', 'Afghanistan', 'Morocco', 'Albania'],\n",
        " 15: ['Estonia', 'Italy', 'Romania', 'Sweden', 'Finland', 'Germany', 'Canada',\n",
        "      'Switzerland', 'Lebanon'],\n",
        " 16: ['Ukraine', 'Netherlands', 'Belgium', 'United Kingdom', 'Portugal',\n",
        "      'Austria', 'Denmark'],\n",
        " 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=16)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "8"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{16: ['Ukraine', 'Netherlands', 'Belgium', 'United Kingdom', 'Portugal',\n",
        "      'Austria', 'Denmark'],\n",
        " 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>30Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>31Mar2020</td>\n",
        "      <td>22Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>19Aug2020</td>\n",
        "      <td>02Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Sep2020</td>\n",
        "      <td>14Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Sep2020</td>\n",
        "      <td>22Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>03Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Dec2020</td>\n",
        "      <td>13Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "France  0th    Past  07Feb2020  30Mar2020    66977107\n",
        "        1st    Past  31Mar2020  22Apr2020    66977107\n",
        "        2nd    Past  23Apr2020  08Jul2020    66977107\n",
        "        3rd    Past  09Jul2020  18Aug2020    66977107\n",
        "        4th    Past  19Aug2020  02Sep2020    66977107\n",
        "        5th    Past  03Sep2020  14Sep2020    66977107\n",
        "        6th    Past  15Sep2020  22Sep2020    66977107\n",
        "        7th    Past  23Sep2020  01Oct2020    66977107\n",
        "        8th    Past  02Oct2020  08Oct2020    66977107\n",
        "        9th    Past  09Oct2020  15Oct2020    66977107\n",
        "        10th   Past  16Oct2020  21Oct2020    66977107\n",
        "        11th   Past  22Oct2020  31Oct2020    66977107\n",
        "        12th   Past  01Nov2020  10Nov2020    66977107\n",
        "        13th   Past  11Nov2020  16Nov2020    66977107\n",
        "        14th   Past  17Nov2020  24Nov2020    66977107\n",
        "        15th   Past  25Nov2020  03Dec2020    66977107\n",
        "        16th   Past  04Dec2020  13Dec2020    66977107"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF, timeout=10)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>\n",
        "Running optimization with 4 CPUs...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 12th phase (14Nov2020 - 19Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 15th phase (05Dec2020 - 13Dec2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  1st phase (31May2020 - 08Jul2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (02Oct2020 - 13Oct2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 10th phase (26Oct2020 - 05Nov2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 10th phase (23Oct2020 - 01Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 11th phase (06Nov2020 - 11Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  0th phase (18Feb2020 - 06Apr2020): finished  346 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  4th phase (12Jun2020 - 17Aug2020): finished  341 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  3rd phase (13Jun2020 - 09Aug2020): finished  345 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (16Sep2020 - 01Oct2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  8th phase (07Oct2020 - 14Oct2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  5th phase (07Sep2020 - 16Sep2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (15Sep2020 - 22Sep2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  6th phase (21Sep2020 - 30Sep2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 11th phase (28Oct2020 - 02Nov2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (02Apr2020 - 18Apr2020): finished  329 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  7th phase (03Oct2020 - 11Oct2020): finished  328 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  7th phase (29Sep2020 - 06Oct2020): finished  330 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 14th phase (01Dec2020 - 06Dec2020): finished  330 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 15th phase (02Dec2020 - 13Dec2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 13th phase (17Nov2020 - 22Nov2020): finished  364 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (23Apr2020 - 08Jul2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  5th phase (05Sep2020 - 18Sep2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  4th phase (28Jul2020 - 22Aug2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  7th phase (28Sep2020 - 06Oct2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  7th phase (12Oct2020 - 21Oct2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (02Oct2020 - 08Oct2020): finished  364 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 11th phase (04Nov2020 - 13Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  0th phase (21Mar2020 - 30May2020): finished  342 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (09Jul2020 - 18Aug2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  3rd phase (12Aug2020 - 31Aug2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  5th phase (18Aug2020 - 17Sep2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  3rd phase (11Jul2020 - 17Aug2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 12th phase (08Nov2020 - 14Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  9th phase (15Oct2020 - 20Oct2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  6th phase (01Oct2020 - 11Oct2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  9th phase (30Oct2020 - 05Nov2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  6th phase (17Sep2020 - 27Sep2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  6th phase (15Sep2020 - 28Sep2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 16th phase (04Dec2020 - 13Dec2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  0th phase (05Mar2020 - 24Mar2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 14th phase (23Nov2020 - 01Dec2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (26Aug2020 - 15Sep2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  4th phase (18Aug2020 - 06Sep2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  3rd phase (12May2020 - 11Jun2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  1st phase (01Apr2020 - 16Apr2020): finished  350 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (19Apr2020 - 20May2020): finished  342 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 12th phase (03Nov2020 - 12Nov2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 11th phase (05Nov2020 - 10Nov2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (19Jun2020 - 14Jul2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (07Feb2020 - 30Mar2020): finished  346 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  4th phase (10Aug2020 - 08Sep2020): finished  353 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 13th phase (11Nov2020 - 16Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  8th phase (22Oct2020 - 29Oct2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 12th phase (10Nov2020 - 19Nov2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 12th phase (12Nov2020 - 17Nov2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 13th phase (18Nov2020 - 25Nov2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (03Sep2020 - 14Sep2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  1st phase (31Mar2020 - 13Apr2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  2nd phase (09Jul2020 - 11Aug2020): finished  348 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  2nd phase (03May2020 - 12Jun2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  6th phase (19Sep2020 - 27Sep2020): finished  342 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 10th phase (22Oct2020 - 27Oct2020): finished  332 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 10th phase (25Oct2020 - 03Nov2020): finished  342 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  9th phase (20Oct2020 - 25Oct2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  4th phase (08Aug2020 - 04Sep2020): finished  344 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (23Sep2020 - 01Oct2020): finished  349 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 14th phase (26Nov2020 - 04Dec2020): finished  351 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  3rd phase (22May2020 - 07Aug2020): finished  332 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 13th phase (25Nov2020 - 30Nov2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  0th phase (13Mar2020 - 30Mar2020): finished  348 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 10th phase (21Oct2020 - 30Oct2020): finished  353 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  8th phase (05Oct2020 - 14Oct2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  1st phase (13Apr2020 - 02May2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 12th phase (01Nov2020 - 10Nov2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  0th phase (14Mar2020 - 01Apr2020): finished  348 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  4th phase (01Sep2020 - 16Sep2020): finished  345 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 11th phase (31Oct2020 - 09Nov2020): finished  344 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  6th phase (18Sep2020 - 02Oct2020): finished  349 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (19Aug2020 - 02Sep2020): finished  350 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (21May2020 - 18Jun2020): finished  342 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  7th phase (01Oct2020 - 12Oct2020): finished  351 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 11th phase (02Nov2020 - 07Nov2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  1st phase (25Mar2020 - 08Apr2020): finished  351 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 15th phase (07Dec2020 - 13Dec2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  5th phase (23Aug2020 - 14Sep2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  9th phase (15Oct2020 - 24Oct2020): finished  345 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  8th phase (07Oct2020 - 12Oct2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  2nd phase (09Apr2020 - 10Jul2020): finished  325 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  9th phase (13Oct2020 - 22Oct2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  9th phase (23Oct2020 - 29Oct2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  1st phase (07Apr2020 - 23Apr2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  2nd phase (17Apr2020 - 21May2020): finished  337 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  0th phase (19Mar2020 - 12Apr2020): finished  343 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (31Mar2020 - 22Apr2020): finished  330 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  3rd phase (08May2020 - 27Jul2020): finished  323 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 14th phase (17Nov2020 - 24Nov2020): finished  351 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  2nd phase (24Apr2020 - 11May2020): finished  339 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  9th phase (14Oct2020 - 21Oct2020): finished  348 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 15th phase (25Nov2020 - 03Dec2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  0th phase (11Mar2020 - 31Mar2020): finished  349 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (16Oct2020 - 21Oct2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 13th phase (20Nov2020 - 25Nov2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  8th phase (12Oct2020 - 19Oct2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 13th phase (20Nov2020 - 30Nov2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 10th phase (06Nov2020 - 12Nov2020): finished  366 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 13th phase (15Nov2020 - 22Nov2020): finished  341 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 11th phase (13Nov2020 - 18Nov2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  2nd phase (14Apr2020 - 07May2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 14th phase (23Nov2020 - 02Dec2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (15Jul2020 - 25Aug2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  5th phase (17Sep2020 - 30Sep2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 12th phase (19Nov2020 - 24Nov2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 10th phase (30Oct2020 - 04Nov2020): finished  371 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (09Oct2020 - 15Oct2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  5th phase (09Sep2020 - 20Sep2020): finished  366 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 11th phase (22Oct2020 - 31Oct2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 15th phase (03Dec2020 - 13Dec2020): finished  366 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  7th phase (28Sep2020 - 04Oct2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 13th phase (13Nov2020 - 22Nov2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 14th phase (26Nov2020 - 02Dec2020): finished  366 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 5 min 46 sec\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>30Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>9.73</td>\n",
        "      <td>0.000491</td>\n",
        "      <td>0.000096</td>\n",
        "      <td>0.040774</td>\n",
        "      <td>0.004091</td>\n",
        "      <td>360</td>\n",
        "      <td>6</td>\n",
        "      <td>0.000</td>\n",
        "      <td>61</td>\n",
        "      <td>2595</td>\n",
        "      <td>1.302491</td>\n",
        "      <td>346</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>31Mar2020</td>\n",
        "      <td>22Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.71</td>\n",
        "      <td>0.346351</td>\n",
        "      <td>0.001473</td>\n",
        "      <td>0.024343</td>\n",
        "      <td>0.021055</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.346</td>\n",
        "      <td>11</td>\n",
        "      <td>169</td>\n",
        "      <td>0.187872</td>\n",
        "      <td>330</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.59</td>\n",
        "      <td>0.537173</td>\n",
        "      <td>0.000080</td>\n",
        "      <td>0.016951</td>\n",
        "      <td>0.013248</td>\n",
        "      <td>360</td>\n",
        "      <td>14</td>\n",
        "      <td>0.537</td>\n",
        "      <td>18</td>\n",
        "      <td>3111</td>\n",
        "      <td>0.340536</td>\n",
        "      <td>336</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.46</td>\n",
        "      <td>0.000136</td>\n",
        "      <td>0.000170</td>\n",
        "      <td>0.024477</td>\n",
        "      <td>0.016613</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.000</td>\n",
        "      <td>15</td>\n",
        "      <td>1473</td>\n",
        "      <td>0.096520</td>\n",
        "      <td>347</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>19Aug2020</td>\n",
        "      <td>02Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.04</td>\n",
        "      <td>0.001289</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.030650</td>\n",
        "      <td>0.014930</td>\n",
        "      <td>360</td>\n",
        "      <td>8</td>\n",
        "      <td>0.001</td>\n",
        "      <td>16</td>\n",
        "      <td>3514</td>\n",
        "      <td>0.031933</td>\n",
        "      <td>350</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Sep2020</td>\n",
        "      <td>14Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.68</td>\n",
        "      <td>0.000434</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.026872</td>\n",
        "      <td>0.015898</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>0.000</td>\n",
        "      <td>15</td>\n",
        "      <td>2549</td>\n",
        "      <td>0.023819</td>\n",
        "      <td>359</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Sep2020</td>\n",
        "      <td>22Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.48</td>\n",
        "      <td>0.000864</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>0.025987</td>\n",
        "      <td>0.017436</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>1666</td>\n",
        "      <td>0.019375</td>\n",
        "      <td>362</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.001278</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.024934</td>\n",
        "      <td>0.018240</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>13</td>\n",
        "      <td>3152</td>\n",
        "      <td>0.033578</td>\n",
        "      <td>349</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.000569</td>\n",
        "      <td>0.000426</td>\n",
        "      <td>0.028723</td>\n",
        "      <td>0.023946</td>\n",
        "      <td>360</td>\n",
        "      <td>8</td>\n",
        "      <td>0.001</td>\n",
        "      <td>10</td>\n",
        "      <td>586</td>\n",
        "      <td>0.033326</td>\n",
        "      <td>364</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.68</td>\n",
        "      <td>0.000130</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.025418</td>\n",
        "      <td>0.014956</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>0.000</td>\n",
        "      <td>16</td>\n",
        "      <td>1486</td>\n",
        "      <td>0.034461</td>\n",
        "      <td>368</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.89</td>\n",
        "      <td>0.000130</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.027840</td>\n",
        "      <td>0.014528</td>\n",
        "      <td>360</td>\n",
        "      <td>8</td>\n",
        "      <td>0.000</td>\n",
        "      <td>17</td>\n",
        "      <td>1488</td>\n",
        "      <td>0.031188</td>\n",
        "      <td>356</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.52</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>0.028712</td>\n",
        "      <td>0.011235</td>\n",
        "      <td>360</td>\n",
        "      <td>8</td>\n",
        "      <td>0.002</td>\n",
        "      <td>22</td>\n",
        "      <td>1666</td>\n",
        "      <td>0.044265</td>\n",
        "      <td>368</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.37</td>\n",
        "      <td>0.000202</td>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.025695</td>\n",
        "      <td>0.018538</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>974</td>\n",
        "      <td>0.026715</td>\n",
        "      <td>352</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.65</td>\n",
        "      <td>0.001978</td>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.013372</td>\n",
        "      <td>0.020379</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>0.002</td>\n",
        "      <td>12</td>\n",
        "      <td>1289</td>\n",
        "      <td>0.010552</td>\n",
        "      <td>361</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.41</td>\n",
        "      <td>0.000574</td>\n",
        "      <td>0.000426</td>\n",
        "      <td>0.013244</td>\n",
        "      <td>0.031996</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>586</td>\n",
        "      <td>0.029266</td>\n",
        "      <td>351</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>03Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.41</td>\n",
        "      <td>0.005087</td>\n",
        "      <td>0.000482</td>\n",
        "      <td>0.015334</td>\n",
        "      <td>0.036683</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>0.005</td>\n",
        "      <td>6</td>\n",
        "      <td>518</td>\n",
        "      <td>0.030546</td>\n",
        "      <td>352</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Dec2020</td>\n",
        "      <td>13Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.023</td>\n",
        "      <td>12</td>\n",
        "      <td>869</td>\n",
        "      <td>0.024513</td>\n",
        "      <td>362</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt     theta  \\\n",
        "Country Phase                                                                  \n",
        "France  0th    Past  07Feb2020  30Mar2020    66977107  SIR-F  9.73  0.000491   \n",
        "        1st    Past  31Mar2020  22Apr2020    66977107  SIR-F  0.71  0.346351   \n",
        "        2nd    Past  23Apr2020  08Jul2020    66977107  SIR-F  0.59  0.537173   \n",
        "        3rd    Past  09Jul2020  18Aug2020    66977107  SIR-F  1.46  0.000136   \n",
        "        4th    Past  19Aug2020  02Sep2020    66977107  SIR-F  2.04  0.001289   \n",
        "        5th    Past  03Sep2020  14Sep2020    66977107  SIR-F  1.68  0.000434   \n",
        "        6th    Past  15Sep2020  22Sep2020    66977107  SIR-F  1.48  0.000864   \n",
        "        7th    Past  23Sep2020  01Oct2020    66977107  SIR-F  1.36  0.001278   \n",
        "        8th    Past  02Oct2020  08Oct2020    66977107  SIR-F  1.18  0.000569   \n",
        "        9th    Past  09Oct2020  15Oct2020    66977107  SIR-F  1.68  0.000130   \n",
        "        10th   Past  16Oct2020  21Oct2020    66977107  SIR-F  1.89  0.000130   \n",
        "        11th   Past  22Oct2020  31Oct2020    66977107  SIR-F  2.52  0.001843   \n",
        "        12th   Past  01Nov2020  10Nov2020    66977107  SIR-F  1.37  0.000202   \n",
        "        13th   Past  11Nov2020  16Nov2020    66977107  SIR-F  0.65  0.001978   \n",
        "        14th   Past  17Nov2020  24Nov2020    66977107  SIR-F  0.41  0.000574   \n",
        "        15th   Past  25Nov2020  03Dec2020    66977107  SIR-F  0.41  0.005087   \n",
        "        16th   Past  04Dec2020  13Dec2020    66977107  SIR-F  1.13  0.022552   \n",
        "\n",
        "                  kappa       rho     sigma  tau  1/beta [day]  alpha1 [-]  \\\n",
        "Country Phase                                                                \n",
        "France  0th    0.000096  0.040774  0.004091  360             6       0.000   \n",
        "        1st    0.001473  0.024343  0.021055  360            10       0.346   \n",
        "        2nd    0.000080  0.016951  0.013248  360            14       0.537   \n",
        "        3rd    0.000170  0.024477  0.016613  360            10       0.000   \n",
        "        4th    0.000071  0.030650  0.014930  360             8       0.001   \n",
        "        5th    0.000098  0.026872  0.015898  360             9       0.000   \n",
        "        6th    0.000150  0.025987  0.017436  360             9       0.001   \n",
        "        7th    0.000079  0.024934  0.018240  360            10       0.001   \n",
        "        8th    0.000426  0.028723  0.023946  360             8       0.001   \n",
        "        9th    0.000168  0.025418  0.014956  360             9       0.000   \n",
        "        10th   0.000168  0.027840  0.014528  360             8       0.000   \n",
        "        11th   0.000150  0.028712  0.011235  360             8       0.002   \n",
        "        12th   0.000257  0.025695  0.018538  360             9       0.000   \n",
        "        13th   0.000194  0.013372  0.020379  360            18       0.002   \n",
        "        14th   0.000426  0.013244  0.031996  360            18       0.001   \n",
        "        15th   0.000482  0.015334  0.036683  360            16       0.005   \n",
        "        16th   0.000287  0.023494  0.020018  360            10       0.023   \n",
        "\n",
        "               1/gamma [day]  1/alpha2 [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                                 \n",
        "France  0th               61            2595  1.302491     346  0 min 10 sec  \n",
        "        1st               11             169  0.187872     330  0 min 10 sec  \n",
        "        2nd               18            3111  0.340536     336  0 min 10 sec  \n",
        "        3rd               15            1473  0.096520     347  0 min 10 sec  \n",
        "        4th               16            3514  0.031933     350  0 min 10 sec  \n",
        "        5th               15            2549  0.023819     359  0 min 10 sec  \n",
        "        6th               14            1666  0.019375     362  0 min 10 sec  \n",
        "        7th               13            3152  0.033578     349  0 min 10 sec  \n",
        "        8th               10             586  0.033326     364  0 min 10 sec  \n",
        "        9th               16            1486  0.034461     368  0 min 10 sec  \n",
        "        10th              17            1488  0.031188     356  0 min 10 sec  \n",
        "        11th              22            1666  0.044265     368  0 min 10 sec  \n",
        "        12th              13             974  0.026715     352  0 min 10 sec  \n",
        "        13th              12            1289  0.010552     361  0 min 10 sec  \n",
        "        14th               7             586  0.029266     351  0 min 10 sec  \n",
        "        15th               6             518  0.030546     352  0 min 10 sec  \n",
        "        16th              12             869  0.024513     362  0 min 10 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.00049108</td>\n",
        "      <td>9.6334e-05</td>\n",
        "      <td>0.040774</td>\n",
        "      <td>0.00409148</td>\n",
        "      <td>0</td>\n",
        "      <td>2595</td>\n",
        "      <td>6</td>\n",
        "      <td>61</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>11.11</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.00049108</td>\n",
        "      <td>9.6334e-05</td>\n",
        "      <td>0.040774</td>\n",
        "      <td>0.00409148</td>\n",
        "      <td>0</td>\n",
        "      <td>2595</td>\n",
        "      <td>6</td>\n",
        "      <td>61</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.00049108</td>\n",
        "      <td>9.6334e-05</td>\n",
        "      <td>0.040774</td>\n",
        "      <td>0.00409148</td>\n",
        "      <td>0</td>\n",
        "      <td>2595</td>\n",
        "      <td>6</td>\n",
        "      <td>61</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>11.11</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.00049108</td>\n",
        "      <td>9.6334e-05</td>\n",
        "      <td>0.040774</td>\n",
        "      <td>0.00409148</td>\n",
        "      <td>0</td>\n",
        "      <td>2595</td>\n",
        "      <td>6</td>\n",
        "      <td>61</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.00049108</td>\n",
        "      <td>9.6334e-05</td>\n",
        "      <td>0.040774</td>\n",
        "      <td>0.00409148</td>\n",
        "      <td>0</td>\n",
        "      <td>2595</td>\n",
        "      <td>6</td>\n",
        "      <td>61</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date Country       theta       kappa       rho       sigma alpha1 [-]  \\\n",
        "0 2020-02-07  France  0.00049108  9.6334e-05  0.040774  0.00409148          0   \n",
        "1 2020-02-07  France  0.00049108  9.6334e-05  0.040774  0.00409148          0   \n",
        "2 2020-02-07  France  0.00049108  9.6334e-05  0.040774  0.00409148          0   \n",
        "3 2020-02-07  France  0.00049108  9.6334e-05  0.040774  0.00409148          0   \n",
        "4 2020-02-07  France  0.00049108  9.6334e-05  0.040774  0.00409148          0   \n",
        "\n",
        "  1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0           2595            6            61  ...             0   \n",
        "1           2595            6            61  ...             0   \n",
        "2           2595            6            61  ...             0   \n",
        "3           2595            6            61  ...             0   \n",
        "4           2595            6            61  ...             0   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       0   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        0                  0                       0   \n",
        "4                        0                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    1   \n",
        "1                               0                                    0   \n",
        "2                               0                                    1   \n",
        "3                               0                                    0   \n",
        "4                               0                                    0   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               2                1             11.11  \n",
        "1                      0               0                0              0.00  \n",
        "2                      0               0                0             11.11  \n",
        "3                      0               0                0              0.00  \n",
        "4                      0               0                0              0.00  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>1.05</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.25</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.86</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>1.05</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.25</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.86</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>1.05</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.25</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.86</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>1.05</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.25</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.86</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>1.05</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.25</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.86</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Austria  Belgium  Denmark  France  Netherlands  Portugal  Ukraine  \\\n",
        "Date                                                                            \n",
        "2020-12-09     1.05     0.98     1.25    1.13         1.62      0.91     0.86   \n",
        "2020-12-10     1.05     0.98     1.25    1.13         1.62      0.91     0.86   \n",
        "2020-12-11     1.05     0.98     1.25    1.13         1.62      0.91     0.86   \n",
        "2020-12-12     1.05     0.98     1.25    1.13         1.62      0.91     0.86   \n",
        "2020-12-13     1.05     0.98     1.25    1.13         1.62      0.91     0.86   \n",
        "\n",
        "Country     United Kingdom  \n",
        "Date                        \n",
        "2020-12-09             1.2  \n",
        "2020-12-10             1.2  \n",
        "2020-12-11             1.2  \n",
        "2020-12-12             1.2  \n",
        "2020-12-13             1.2  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.012678</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.022887</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.013347</td>\n",
        "      <td>0.008334</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.012678</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.022887</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.013347</td>\n",
        "      <td>0.008334</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.012678</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.022887</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.013347</td>\n",
        "      <td>0.008334</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.012678</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.022887</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.013347</td>\n",
        "      <td>0.008334</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.012678</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.022887</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.013347</td>\n",
        "      <td>0.008334</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                        \n",
        "2020-12-09  0.012678  0.015006  0.022887  0.023494     0.028974  0.013347   \n",
        "2020-12-10  0.012678  0.015006  0.022887  0.023494     0.028974  0.013347   \n",
        "2020-12-11  0.012678  0.015006  0.022887  0.023494     0.028974  0.013347   \n",
        "2020-12-12  0.012678  0.015006  0.022887  0.023494     0.028974  0.013347   \n",
        "2020-12-13  0.012678  0.015006  0.022887  0.023494     0.028974  0.013347   \n",
        "\n",
        "Country      Ukraine  United Kingdom  \n",
        "Date                                  \n",
        "2020-12-09  0.008334        0.024527  \n",
        "2020-12-10  0.008334        0.024527  \n",
        "2020-12-11  0.008334        0.024527  \n",
        "2020-12-12  0.008334        0.024527  \n",
        "2020-12-13  0.008334        0.024527  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.011802</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.018227</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.014484</td>\n",
        "      <td>0.009495</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.011802</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.018227</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.014484</td>\n",
        "      <td>0.009495</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.011802</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.018227</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.014484</td>\n",
        "      <td>0.009495</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.011802</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.018227</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.014484</td>\n",
        "      <td>0.009495</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.011802</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.018227</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.014484</td>\n",
        "      <td>0.009495</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                        \n",
        "2020-12-09  0.011802  0.014189  0.018227  0.020018     0.017755  0.014484   \n",
        "2020-12-10  0.011802  0.014189  0.018227  0.020018     0.017755  0.014484   \n",
        "2020-12-11  0.011802  0.014189  0.018227  0.020018     0.017755  0.014484   \n",
        "2020-12-12  0.011802  0.014189  0.018227  0.020018     0.017755  0.014484   \n",
        "2020-12-13  0.011802  0.014189  0.018227  0.020018     0.017755  0.014484   \n",
        "\n",
        "Country      Ukraine  United Kingdom  \n",
        "Date                                  \n",
        "2020-12-09  0.009495        0.019873  \n",
        "2020-12-10  0.009495        0.019873  \n",
        "2020-12-11  0.009495        0.019873  \n",
        "2020-12-12  0.009495        0.019873  \n",
        "2020-12-13  0.009495        0.019873  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000048</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000048</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000048</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000048</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000048</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country     Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                       \n",
        "2020-12-09  0.00023  0.000553  0.000059  0.000287     0.000014  0.000192   \n",
        "2020-12-10  0.00023  0.000553  0.000059  0.000287     0.000014  0.000192   \n",
        "2020-12-11  0.00023  0.000553  0.000059  0.000287     0.000014  0.000192   \n",
        "2020-12-12  0.00023  0.000553  0.000059  0.000287     0.000014  0.000192   \n",
        "2020-12-13  0.00023  0.000553  0.000059  0.000287     0.000014  0.000192   \n",
        "\n",
        "Country      Ukraine  United Kingdom  \n",
        "Date                                  \n",
        "2020-12-09  0.000048        0.000201  \n",
        "2020-12-10  0.000048        0.000201  \n",
        "2020-12-11  0.000048        0.000201  \n",
        "2020-12-12  0.000048        0.000201  \n",
        "2020-12-13  0.000048        0.000201  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002689</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.00147</td>\n",
        "      <td>0.016326</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002689</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.00147</td>\n",
        "      <td>0.016326</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002689</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.00147</td>\n",
        "      <td>0.016326</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002689</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.00147</td>\n",
        "      <td>0.016326</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002689</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.00147</td>\n",
        "      <td>0.016326</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                        \n",
        "2020-12-09  0.000299  0.036571  0.002689  0.022552     0.004924   0.00147   \n",
        "2020-12-10  0.000299  0.036571  0.002689  0.022552     0.004924   0.00147   \n",
        "2020-12-11  0.000299  0.036571  0.002689  0.022552     0.004924   0.00147   \n",
        "2020-12-12  0.000299  0.036571  0.002689  0.022552     0.004924   0.00147   \n",
        "2020-12-13  0.000299  0.036571  0.002689  0.022552     0.004924   0.00147   \n",
        "\n",
        "Country      Ukraine  United Kingdom  \n",
        "Date                                  \n",
        "2020-12-09  0.016326        0.016736  \n",
        "2020-12-10  0.016326        0.016736  \n",
        "2020-12-11  0.016326        0.016736  \n",
        "2020-12-12  0.016326        0.016736  \n",
        "2020-12-13  0.016326        0.016736  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 25699 entries, 0 to 25796\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 25699 non-null  datetime64[ns]\n",
        " 1   Country                              25699 non-null  object        \n",
        " 2   Rt                                   25699 non-null  float64       \n",
        " 3   theta                                25699 non-null  float64       \n",
        " 4   kappa                                25699 non-null  float64       \n",
        " 5   rho                                  25699 non-null  float64       \n",
        " 6   sigma                                25699 non-null  float64       \n",
        " 7   School_closing                       25699 non-null  int64         \n",
        " 8   Workplace_closing                    25699 non-null  int64         \n",
        " 9   Cancel_events                        25699 non-null  int64         \n",
        " 10  Gatherings_restrictions              25699 non-null  int64         \n",
        " 11  Transport_closing                    25699 non-null  int64         \n",
        " 12  Stay_home_restrictions               25699 non-null  int64         \n",
        " 13  Internal_movement_restrictions       25699 non-null  int64         \n",
        " 14  International_movement_restrictions  25699 non-null  int64         \n",
        " 15  Information_campaigns                25699 non-null  int64         \n",
        " 16  Testing_policy                       25699 non-null  int64         \n",
        " 17  Contact_tracing                      25699 non-null  int64         \n",
        " 18  Stringency_index                     25699 non-null  float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 3.9+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col0,#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col3,#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col0,#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col0{\n",
        "            background-color:  #d1d2e6;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col0{\n",
        "            background-color:  #96b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col3,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col0,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col12{\n",
        "            background-color:  #2987bc;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col0{\n",
        "            background-color:  #f8f1f8;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col0,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col7{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col0{\n",
        "            background-color:  #c8cde4;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col0{\n",
        "            background-color:  #dedcec;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col3,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col0{\n",
        "            background-color:  #e7e3f0;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col0,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col3{\n",
        "            background-color:  #dddbec;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col0{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col0,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col0{\n",
        "            background-color:  #d2d2e7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col0,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col3{\n",
        "            background-color:  #e0deed;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col0{\n",
        "            background-color:  #d8d7e9;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col0{\n",
        "            background-color:  #d2d3e7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col1{\n",
        "            background-color:  #b1c2de;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col3,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col1{\n",
        "            background-color:  #d9d8ea;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col5{\n",
        "            background-color:  #a4bcda;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col1{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col6{\n",
        "            background-color:  #75a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col4{\n",
        "            background-color:  #6da6cd;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col1,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col1{\n",
        "            background-color:  #91b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col1{\n",
        "            background-color:  #9ebad9;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col1{\n",
        "            background-color:  #93b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col1{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col1{\n",
        "            background-color:  #e6e2ef;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col1{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col3,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col2{\n",
        "            background-color:  #4a98c5;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col2{\n",
        "            background-color:  #c6cce3;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col2{\n",
        "            background-color:  #9ab8d8;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col2{\n",
        "            background-color:  #d7d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col11{\n",
        "            background-color:  #a8bedc;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col14{\n",
        "            background-color:  #b8c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col2,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col3{\n",
        "            background-color:  #e8e4f0;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col2{\n",
        "            background-color:  #ede8f3;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col2{\n",
        "            background-color:  #dbdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col2{\n",
        "            background-color:  #acc0dd;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col3{\n",
        "            background-color:  #eee8f3;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col3{\n",
        "            background-color:  #efe9f3;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col3{\n",
        "            background-color:  #fcf4fa;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col3{\n",
        "            background-color:  #fdf5fa;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col3{\n",
        "            background-color:  #fef6fa;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col3{\n",
        "            background-color:  #f1ebf5;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col3,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col3{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col3{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col4{\n",
        "            background-color:  #7bacd1;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col9{\n",
        "            background-color:  #60a1ca;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col6{\n",
        "            background-color:  #3b92c1;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col4{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col4{\n",
        "            background-color:  #81aed2;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col12{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col4{\n",
        "            background-color:  #89b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col4,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col9{\n",
        "            background-color:  #97b7d7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col4{\n",
        "            background-color:  #63a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col4{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col5{\n",
        "            background-color:  #046299;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col5{\n",
        "            background-color:  #167bb6;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col7{\n",
        "            background-color:  #2383ba;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col5,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col13{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col5{\n",
        "            background-color:  #2786bb;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col5{\n",
        "            background-color:  #5ea0ca;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col5{\n",
        "            background-color:  #d5d5e8;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col5{\n",
        "            background-color:  #045c90;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col6{\n",
        "            background-color:  #04629a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col6{\n",
        "            background-color:  #0771b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col12{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col6{\n",
        "            background-color:  #0569a4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col6,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col10{\n",
        "            background-color:  #3d93c2;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col6{\n",
        "            background-color:  #d3d4e7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col6{\n",
        "            background-color:  #dad9ea;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col6{\n",
        "            background-color:  #034e7b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col7{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col9,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col7{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col7{\n",
        "            background-color:  #2484ba;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col7,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col13{\n",
        "            background-color:  #3991c1;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col7{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col7{\n",
        "            background-color:  #045a8d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col10,#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col8{\n",
        "            background-color:  #2c89bd;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col8{\n",
        "            background-color:  #056dab;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col8{\n",
        "            background-color:  #328dbf;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col8,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col9{\n",
        "            background-color:  #2081b9;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col8{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col8{\n",
        "            background-color:  #046198;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col11,#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col9{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col9{\n",
        "            background-color:  #62a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col9{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col10{\n",
        "            background-color:  #5c9fc9;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col10{\n",
        "            background-color:  #9fbad9;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col10{\n",
        "            background-color:  #c2cbe2;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col10{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col12,#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col11{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col13,#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col11{\n",
        "            background-color:  #529bc7;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col11{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col11{\n",
        "            background-color:  #1278b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col14,#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col12{\n",
        "            background-color:  #358fc0;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col13{\n",
        "            background-color:  #4897c4;\n",
        "            color:  #000000;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col15,#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col14{\n",
        "            background-color:  #1077b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col16,#T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col15{\n",
        "            background-color:  #ced0e6;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col1\" class=\"data row0 col1\" >-0.132874</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col2\" class=\"data row0 col2\" >0.122350</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col3\" class=\"data row0 col3\" >0.487717</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col4\" class=\"data row0 col4\" >-0.429374</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col5\" class=\"data row0 col5\" >-0.046320</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col6\" class=\"data row0 col6\" >-0.092090</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col7\" class=\"data row0 col7\" >-0.220877</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col8\" class=\"data row0 col8\" >-0.282081</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col9\" class=\"data row0 col9\" >-0.211585</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col10\" class=\"data row0 col10\" >-0.130169</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col11\" class=\"data row0 col11\" >-0.247732</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col12\" class=\"data row0 col12\" >-0.137614</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col13\" class=\"data row0 col13\" >-0.140517</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col14\" class=\"data row0 col14\" >-0.236018</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col15\" class=\"data row0 col15\" >-0.181400</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row0_col16\" class=\"data row0 col16\" >-0.143746</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col0\" class=\"data row1 col0\" >-0.132874</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col2\" class=\"data row1 col2\" >0.011949</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col3\" class=\"data row1 col3\" >-0.193090</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col4\" class=\"data row1 col4\" >0.066662</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col5\" class=\"data row1 col5\" >0.291922</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col6\" class=\"data row1 col6\" >0.243832</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col7\" class=\"data row1 col7\" >0.269471</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col8\" class=\"data row1 col8\" >0.139676</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col9\" class=\"data row1 col9\" >0.093652</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col10\" class=\"data row1 col10\" >0.130611</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col11\" class=\"data row1 col11\" >0.267394</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col12\" class=\"data row1 col12\" >0.141323</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col13\" class=\"data row1 col13\" >0.096453</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col14\" class=\"data row1 col14\" >-0.270315</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col15\" class=\"data row1 col15\" >-0.015368</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row1_col16\" class=\"data row1 col16\" >0.292537</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col0\" class=\"data row2 col0\" >0.122350</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col1\" class=\"data row2 col1\" >0.011949</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col3\" class=\"data row2 col3\" >0.371894</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col4\" class=\"data row2 col4\" >-0.085455</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col5\" class=\"data row2 col5\" >0.092307</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col6\" class=\"data row2 col6\" >0.103484</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col7\" class=\"data row2 col7\" >-0.013326</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col8\" class=\"data row2 col8\" >-0.130060</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col9\" class=\"data row2 col9\" >-0.170611</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col10\" class=\"data row2 col10\" >0.052365</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col11\" class=\"data row2 col11\" >-0.022509</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col12\" class=\"data row2 col12\" >-0.290229</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col13\" class=\"data row2 col13\" >0.048810</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col14\" class=\"data row2 col14\" >-0.325788</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col15\" class=\"data row2 col15\" >-0.203796</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row2_col16\" class=\"data row2 col16\" >0.032427</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col0\" class=\"data row3 col0\" >0.487717</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col1\" class=\"data row3 col1\" >-0.193090</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col2\" class=\"data row3 col2\" >0.371894</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col4\" class=\"data row3 col4\" >-0.330087</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col5\" class=\"data row3 col5\" >-0.281723</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col6\" class=\"data row3 col6\" >-0.344121</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col7\" class=\"data row3 col7\" >-0.471157</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col8\" class=\"data row3 col8\" >-0.480012</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col9\" class=\"data row3 col9\" >-0.490660</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col10\" class=\"data row3 col10\" >-0.366658</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col11\" class=\"data row3 col11\" >-0.213700</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col12\" class=\"data row3 col12\" >-0.502185</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col13\" class=\"data row3 col13\" >-0.291307</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col14\" class=\"data row3 col14\" >-0.505065</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col15\" class=\"data row3 col15\" >-0.238954</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row3_col16\" class=\"data row3 col16\" >-0.418032</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col0\" class=\"data row4 col0\" >-0.429374</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col1\" class=\"data row4 col1\" >0.066662</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col2\" class=\"data row4 col2\" >-0.085455</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col3\" class=\"data row4 col3\" >-0.330087</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col5\" class=\"data row4 col5\" >0.223452</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col6\" class=\"data row4 col6\" >0.289168</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col7\" class=\"data row4 col7\" >0.307697</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col8\" class=\"data row4 col8\" >0.422822</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col9\" class=\"data row4 col9\" >0.204810</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col10\" class=\"data row4 col10\" >0.198879</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col11\" class=\"data row4 col11\" >0.356483</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col12\" class=\"data row4 col12\" >0.166118</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col13\" class=\"data row4 col13\" >0.269416</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col14\" class=\"data row4 col14\" >0.112468</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col15\" class=\"data row4 col15\" >0.296485</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row4_col16\" class=\"data row4 col16\" >0.273708</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col0\" class=\"data row5 col0\" >-0.046320</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col1\" class=\"data row5 col1\" >0.291922</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col2\" class=\"data row5 col2\" >0.092307</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col3\" class=\"data row5 col3\" >-0.281723</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col4\" class=\"data row5 col4\" >0.223452</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col6\" class=\"data row5 col6\" >0.742424</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col7\" class=\"data row5 col7\" >0.554141</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col8\" class=\"data row5 col8\" >0.508246</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col9\" class=\"data row5 col9\" >0.418202</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col10\" class=\"data row5 col10\" >0.537415</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col11\" class=\"data row5 col11\" >0.490515</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col12\" class=\"data row5 col12\" >0.068242</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col13\" class=\"data row5 col13\" >0.313387</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col14\" class=\"data row5 col14\" >-0.203275</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col15\" class=\"data row5 col15\" >-0.162504</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row5_col16\" class=\"data row5 col16\" >0.791418</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col0\" class=\"data row6 col0\" >-0.092090</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col1\" class=\"data row6 col1\" >0.243832</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col2\" class=\"data row6 col2\" >0.103484</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col3\" class=\"data row6 col3\" >-0.344121</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col4\" class=\"data row6 col4\" >0.289168</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col5\" class=\"data row6 col5\" >0.742424</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col7\" class=\"data row6 col7\" >0.735831</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col8\" class=\"data row6 col8\" >0.612659</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col9\" class=\"data row6 col9\" >0.393893</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col10\" class=\"data row6 col10\" >0.685223</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col11\" class=\"data row6 col11\" >0.415882</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col12\" class=\"data row6 col12\" >0.247051</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col13\" class=\"data row6 col13\" >0.419532</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col14\" class=\"data row6 col14\" >-0.150938</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col15\" class=\"data row6 col15\" >-0.197044</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row6_col16\" class=\"data row6 col16\" >0.875927</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col0\" class=\"data row7 col0\" >-0.220877</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col1\" class=\"data row7 col1\" >0.269471</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col2\" class=\"data row7 col2\" >-0.013326</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col3\" class=\"data row7 col3\" >-0.471157</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col4\" class=\"data row7 col4\" >0.307697</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col5\" class=\"data row7 col5\" >0.554141</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col6\" class=\"data row7 col6\" >0.735831</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col8\" class=\"data row7 col8\" >0.638413</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col9\" class=\"data row7 col9\" >0.431009</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col10\" class=\"data row7 col10\" >0.505768</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col11\" class=\"data row7 col11\" >0.424751</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col12\" class=\"data row7 col12\" >0.291158</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col13\" class=\"data row7 col13\" >0.508701</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col14\" class=\"data row7 col14\" >0.071789</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col15\" class=\"data row7 col15\" >-0.043771</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row7_col16\" class=\"data row7 col16\" >0.807304</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col0\" class=\"data row8 col0\" >-0.282081</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col1\" class=\"data row8 col1\" >0.139676</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col2\" class=\"data row8 col2\" >-0.130060</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col3\" class=\"data row8 col3\" >-0.480012</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col4\" class=\"data row8 col4\" >0.422822</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col5\" class=\"data row8 col5\" >0.508246</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col6\" class=\"data row8 col6\" >0.612659</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col7\" class=\"data row8 col7\" >0.638413</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col9\" class=\"data row8 col9\" >0.537018</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col10\" class=\"data row8 col10\" >0.471723</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col11\" class=\"data row8 col11\" >0.648429</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col12\" class=\"data row8 col12\" >0.448007</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col13\" class=\"data row8 col13\" >0.522916</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col14\" class=\"data row8 col14\" >0.273502</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col15\" class=\"data row8 col15\" >0.175042</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row8_col16\" class=\"data row8 col16\" >0.752242</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col0\" class=\"data row9 col0\" >-0.211585</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col1\" class=\"data row9 col1\" >0.093652</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col2\" class=\"data row9 col2\" >-0.170611</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col3\" class=\"data row9 col3\" >-0.490660</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col4\" class=\"data row9 col4\" >0.204810</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col5\" class=\"data row9 col5\" >0.418202</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col6\" class=\"data row9 col6\" >0.393893</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col7\" class=\"data row9 col7\" >0.431009</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col8\" class=\"data row9 col8\" >0.537018</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col10\" class=\"data row9 col10\" >0.353620</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col11\" class=\"data row9 col11\" >0.446618</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col12\" class=\"data row9 col12\" >0.302269</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col13\" class=\"data row9 col13\" >0.410736</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col14\" class=\"data row9 col14\" >0.307610</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col15\" class=\"data row9 col15\" >0.117249</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row9_col16\" class=\"data row9 col16\" >0.518086</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col0\" class=\"data row10 col0\" >-0.130169</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col1\" class=\"data row10 col1\" >0.130611</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col2\" class=\"data row10 col2\" >0.052365</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col3\" class=\"data row10 col3\" >-0.366658</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col4\" class=\"data row10 col4\" >0.198879</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col5\" class=\"data row10 col5\" >0.537415</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col6\" class=\"data row10 col6\" >0.685223</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col7\" class=\"data row10 col7\" >0.505768</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col8\" class=\"data row10 col8\" >0.471723</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col9\" class=\"data row10 col9\" >0.353620</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col11\" class=\"data row10 col11\" >0.412366</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col12\" class=\"data row10 col12\" >0.322253</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col13\" class=\"data row10 col13\" >0.355903</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col14\" class=\"data row10 col14\" >0.087248</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col15\" class=\"data row10 col15\" >-0.067463</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row10_col16\" class=\"data row10 col16\" >0.654403</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col0\" class=\"data row11 col0\" >-0.247732</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col1\" class=\"data row11 col1\" >0.267394</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col2\" class=\"data row11 col2\" >-0.022509</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col3\" class=\"data row11 col3\" >-0.213700</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col4\" class=\"data row11 col4\" >0.356483</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col5\" class=\"data row11 col5\" >0.490515</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col6\" class=\"data row11 col6\" >0.415882</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col7\" class=\"data row11 col7\" >0.424751</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col8\" class=\"data row11 col8\" >0.648429</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col9\" class=\"data row11 col9\" >0.446618</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col10\" class=\"data row11 col10\" >0.412366</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col12\" class=\"data row11 col12\" >0.159478</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col13\" class=\"data row11 col13\" >0.348952</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col14\" class=\"data row11 col14\" >0.065024</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col15\" class=\"data row11 col15\" >0.049661</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row11_col16\" class=\"data row11 col16\" >0.575514</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col0\" class=\"data row12 col0\" >-0.137614</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col1\" class=\"data row12 col1\" >0.141323</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col2\" class=\"data row12 col2\" >-0.290229</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col3\" class=\"data row12 col3\" >-0.502185</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col4\" class=\"data row12 col4\" >0.166118</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col5\" class=\"data row12 col5\" >0.068242</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col6\" class=\"data row12 col6\" >0.247051</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col7\" class=\"data row12 col7\" >0.291158</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col8\" class=\"data row12 col8\" >0.448007</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col9\" class=\"data row12 col9\" >0.302269</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col10\" class=\"data row12 col10\" >0.322253</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col11\" class=\"data row12 col11\" >0.159478</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col13\" class=\"data row12 col13\" >0.392741</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col14\" class=\"data row12 col14\" >0.437053</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col15\" class=\"data row12 col15\" >0.487560</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row12_col16\" class=\"data row12 col16\" >0.358007</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col0\" class=\"data row13 col0\" >-0.140517</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col1\" class=\"data row13 col1\" >0.096453</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col2\" class=\"data row13 col2\" >0.048810</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col3\" class=\"data row13 col3\" >-0.291307</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col4\" class=\"data row13 col4\" >0.269416</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col5\" class=\"data row13 col5\" >0.313387</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col6\" class=\"data row13 col6\" >0.419532</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col7\" class=\"data row13 col7\" >0.508701</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col8\" class=\"data row13 col8\" >0.522916</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col9\" class=\"data row13 col9\" >0.410736</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col10\" class=\"data row13 col10\" >0.355903</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col11\" class=\"data row13 col11\" >0.348952</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col12\" class=\"data row13 col12\" >0.392741</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col14\" class=\"data row13 col14\" >0.427055</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col15\" class=\"data row13 col15\" >0.376864</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row13_col16\" class=\"data row13 col16\" >0.537311</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col0\" class=\"data row14 col0\" >-0.236018</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col1\" class=\"data row14 col1\" >-0.270315</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col2\" class=\"data row14 col2\" >-0.325788</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col3\" class=\"data row14 col3\" >-0.505065</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col4\" class=\"data row14 col4\" >0.112468</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col5\" class=\"data row14 col5\" >-0.203275</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col6\" class=\"data row14 col6\" >-0.150938</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col7\" class=\"data row14 col7\" >0.071789</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col8\" class=\"data row14 col8\" >0.273502</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col9\" class=\"data row14 col9\" >0.307610</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col10\" class=\"data row14 col10\" >0.087248</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col11\" class=\"data row14 col11\" >0.065024</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col12\" class=\"data row14 col12\" >0.437053</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col13\" class=\"data row14 col13\" >0.427055</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col15\" class=\"data row14 col15\" >0.577246</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row14_col16\" class=\"data row14 col16\" >-0.022652</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col0\" class=\"data row15 col0\" >-0.181400</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col1\" class=\"data row15 col1\" >-0.015368</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col2\" class=\"data row15 col2\" >-0.203796</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col3\" class=\"data row15 col3\" >-0.238954</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col4\" class=\"data row15 col4\" >0.296485</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col5\" class=\"data row15 col5\" >-0.162504</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col6\" class=\"data row15 col6\" >-0.197044</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col7\" class=\"data row15 col7\" >-0.043771</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col8\" class=\"data row15 col8\" >0.175042</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col9\" class=\"data row15 col9\" >0.117249</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col10\" class=\"data row15 col10\" >-0.067463</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col11\" class=\"data row15 col11\" >0.049661</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col12\" class=\"data row15 col12\" >0.487560</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col13\" class=\"data row15 col13\" >0.376864</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col14\" class=\"data row15 col14\" >0.577246</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row15_col16\" class=\"data row15 col16\" >-0.117230</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831level0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col0\" class=\"data row16 col0\" >-0.143746</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col1\" class=\"data row16 col1\" >0.292537</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col2\" class=\"data row16 col2\" >0.032427</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col3\" class=\"data row16 col3\" >-0.418032</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col4\" class=\"data row16 col4\" >0.273708</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col5\" class=\"data row16 col5\" >0.791418</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col6\" class=\"data row16 col6\" >0.875927</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col7\" class=\"data row16 col7\" >0.807304</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col8\" class=\"data row16 col8\" >0.752242</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col9\" class=\"data row16 col9\" >0.518086</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col10\" class=\"data row16 col10\" >0.654403</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col11\" class=\"data row16 col11\" >0.575514</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col12\" class=\"data row16 col12\" >0.358007</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col13\" class=\"data row16 col13\" >0.537311</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col14\" class=\"data row16 col14\" >-0.022652</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col15\" class=\"data row16 col15\" >-0.117230</td>\n",
        "                        <td id=\"T_06265dcc_3d61_11eb_8bb4_525400abe831row16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f1617cafa30>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
