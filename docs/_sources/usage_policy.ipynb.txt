{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.8.3'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "184"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **12th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Tanzania', 'Myanmar']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Antigua and Barbuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Trinidad and Tobago'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Libya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Seychelles'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Grenada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Dominica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uganda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Papua New Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritius'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jamaica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belize'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Georgia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brunei'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jordan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Fiji'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tunisia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "6"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Monaco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sao Tome and Principe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kazakhstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guyana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cambodia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Namibia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kosovo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ireland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Equatorial Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Netherlands'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Yemen'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lesotho'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lebanon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Hungary'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "7"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mozambique'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Colombia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'San Marino'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malawi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zambia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahamas'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kyrgyzstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iceland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Syria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mongolia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Gambia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cyprus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Comoros'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Vincent and the Grenadines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Central African Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Rwanda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Paraguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malta'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'New Zealand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burundi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nepal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Botswana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Spain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea-Bissau'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Australia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Vietnam'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Croatia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Afghanistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "8"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zimbabwe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovakia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Eritrea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ethiopia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Barbados'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Palestine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Venezuela'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Montenegro'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chad'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Taiwan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Luxembourg'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Thailand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Morocco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uruguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Costa Rica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ghana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Andorra'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Madagascar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kenya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Israel'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Norway'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liechtenstein'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bhutan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Suriname'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Djibouti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guatemala'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Philippines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Argentina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Lucia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Niger'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sri Lanka'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Maldives'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lithuania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Somalia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'India'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Switzerland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cuba'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tajikistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'China'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bermuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Finland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Oman'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Africa'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Benin'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Pakistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Congo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mali'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uzbekistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Angola'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Haiti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liberia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cape Verde'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Indonesia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Singapore'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Greece'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cameroon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Qatar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Japan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Albania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Honduras'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Senegal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Serbia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bosnia and Herzegovina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Swaziland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Gabon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'El Salvador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Togo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Romania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chile'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Estonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sierra Leone'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Armenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burkina Faso'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Azerbaijan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belarus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Denmark'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Germany'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nicaragua'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "11"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Turkey'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Peru'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kuwait'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Algeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ecuador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bangladesh'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Dominican Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Latvia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Egypt'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Macedonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iraq'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bulgaria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malaysia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Panama'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bolivia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nigeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belgium'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "12"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahrain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United States'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iran'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'France'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brazil'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "13"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Russia']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=12)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "8"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "12"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahrain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United States'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iran'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'France'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "      "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brazil'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "13"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Russia']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"13\" valign=\"top\">Russia</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Feb2020</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>07May2020</td>\n",
        "      <td>16May2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>17May2020</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>27May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>23Jun2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jun2020</td>\n",
        "      <td>04Jul2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jul2020</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>15Aug2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Sep2020</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>330457362</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Russia  0th    Past  12Feb2020  06May2020   330457362\n",
        "        1st    Past  07May2020  16May2020   330457362\n",
        "        2nd    Past  17May2020  26May2020   330457362\n",
        "        3rd    Past  27May2020  04Jun2020   330457362\n",
        "        4th    Past  05Jun2020  13Jun2020   330457362\n",
        "        5th    Past  14Jun2020  23Jun2020   330457362\n",
        "        6th    Past  24Jun2020  04Jul2020   330457362\n",
        "        7th    Past  05Jul2020  17Jul2020   330457362\n",
        "        8th    Past  18Jul2020  31Jul2020   330457362\n",
        "        9th    Past  01Aug2020  15Aug2020   330457362\n",
        "        10th   Past  16Aug2020  01Sep2020   330457362\n",
        "        11th   Past  02Sep2020  17Sep2020   330457362\n",
        "        12th   Past  18Sep2020  02Oct2020   330457362"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  9th phase (20Aug2020 - 02Sep2020): finished  251 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  6th phase (24Jun2020 - 04Jul2020): finished 1137 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  8th phase (14Aug2020 - 24Aug2020): finished 1150 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  3rd phase (27May2020 - 04Jun2020): finished 1134 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  0th phase (06Mar2020 - 11May2020): finished 1091 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (25Aug2020 - 08Sep2020): finished  464 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (09Sep2020 - 17Sep2020): finished  285 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  9th phase (25Aug2020 - 02Sep2020): finished  323 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  3rd phase (14Jun2020 - 24Jun2020): finished 1051 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  1st phase (30Mar2020 - 17Apr2020): finished 1056 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (29Apr2020 - 14May2020): finished  987 trials in 1 min  1 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  9th phase (16Aug2020 - 02Sep2020): finished  502 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS, 11th phase (02Sep2020 - 17Sep2020): finished 1041 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  5th phase (07Jul2020 - 18Jul2020): finished 1084 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  8th phase (18Jul2020 - 31Jul2020): finished 1094 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  7th phase (04Aug2020 - 17Aug2020): finished 1010 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  3rd phase (06Jun2020 - 25Jun2020): finished 1142 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  4th phase (01Jun2020 - 16Jun2020): finished 1127 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  8th phase (14Jul2020 - 24Aug2020): finished 1118 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  8th phase (31Jul2020 - 15Aug2020): finished  353 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (03Apr2020 - 12Apr2020): finished 1124 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  3rd phase (14May2020 - 31May2020): finished  342 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  0th phase (24Feb2020 - 20Mar2020): finished 1102 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  2nd phase (01Jun2020 - 13Jun2020): finished 1115 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (13Apr2020 - 21Apr2020): finished 1114 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN, 11th phase (20Sep2020 - 02Oct2020): finished 1087 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  9th phase (25Aug2020 - 11Sep2020): finished 1023 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 11th phase (24Sep2020 - 02Oct2020): finished 1025 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  4th phase (26Jun2020 - 07Jul2020): finished 1027 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA, 10th phase (12Sep2020 - 22Sep2020): finished  229 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  8th phase (08Aug2020 - 19Aug2020): finished  520 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  1st phase (20Apr2020 - 10May2020): finished 1010 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  5th phase (21Jul2020 - 28Jul2020): finished 1110 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (29May2020 - 06Jul2020): finished 1066 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  0th phase (14Mar2020 - 28Apr2020): finished 1064 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  2nd phase (11May2020 - 05Jun2020): finished 1077 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  1st phase (07May2020 - 16May2020): finished 1084 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (24Jul2020 - 14Aug2020): finished 1051 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  2nd phase (18Apr2020 - 13May2020): finished  297 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  0th phase (16Mar2020 - 26May2020): finished 1011 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 10th phase (15Sep2020 - 23Sep2020): finished 1043 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR, 11th phase (22Sep2020 - 02Oct2020): finished  216 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  0th phase (26Feb2020 - 29Mar2020): finished 1014 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  6th phase (19Jul2020 - 28Jul2020): finished  214 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  5th phase (14Jun2020 - 23Jun2020): finished 1053 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (09Jul2020 - 23Jul2020): finished 1028 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  3rd phase (27Jun2020 - 08Jul2020): finished 1044 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  0th phase (09Feb2020 - 19Apr2020): finished 1007 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  9th phase (03Sep2020 - 14Sep2020): finished 1053 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  9th phase (04Sep2020 - 13Sep2020): finished 1060 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  4th phase (25Jun2020 - 06Jul2020): finished  533 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  7th phase (16Jul2020 - 30Jul2020): finished 1081 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  3rd phase (09Apr2020 - 18Apr2020): finished  240 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA, 10th phase (03Sep2020 - 16Sep2020): finished  948 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  5th phase (01May2020 - 10May2020): finished  445 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  5th phase (17Jun2020 - 30Jun2020): finished 1113 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  7th phase (06Aug2020 - 13Aug2020): finished  362 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (22Apr2020 - 04May2020): finished 1149 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  2nd phase (17May2020 - 26May2020): finished 1136 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  7th phase (05Jul2020 - 17Jul2020): finished 1140 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  6th phase (01Jul2020 - 15Jul2020): finished  247 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS, 12th phase (18Sep2020 - 02Oct2020): finished 1133 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (31May2020 - 12Jun2020): finished 1125 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  2nd phase (29Mar2020 - 08Apr2020): finished 1137 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  1st phase (21Mar2020 - 28Mar2020): finished 1152 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  0th phase (12Feb2020 - 06May2020): finished 1153 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN, 10th phase (03Sep2020 - 19Sep2020): finished 1157 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  1st phase (27May2020 - 13Jun2020): finished 1121 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  7th phase (27May2020 - 13Jul2020): finished  407 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (24Mar2020 - 02Apr2020): finished 1100 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  6th phase (29Jul2020 - 05Aug2020): finished 1120 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR, 10th phase (14Sep2020 - 21Sep2020): finished  551 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  4th phase (19Apr2020 - 30Apr2020): finished  113 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (15May2020 - 30May2020): finished 1098 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  1st phase (12May2020 - 31May2020): finished 1120 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  6th phase (19Jul2020 - 03Aug2020): finished  247 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (06Aug2020 - 24Aug2020): finished  544 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (26Jun2020 - 08Jul2020): finished 1143 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  5th phase (08Jul2020 - 18Jul2020): finished  352 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA,  7th phase (29Jul2020 - 07Aug2020): finished  330 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA, 11th phase (23Sep2020 - 02Oct2020): finished  181 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (07Jul2020 - 05Aug2020): finished  251 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUSA, 11th phase (17Sep2020 - 02Oct2020): finished 1063 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  6th phase (11May2020 - 26May2020): finished  318 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  2nd phase (14Jun2020 - 26Jun2020): finished 1052 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS, 10th phase (16Aug2020 - 01Sep2020): finished 1115 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (13Jun2020 - 25Jun2020): finished 1119 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (15Aug2020 - 02Sep2020): finished 1157 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (05May2020 - 28May2020): finished 1149 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBRA,  4th phase (09Jul2020 - 20Jul2020): finished  463 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  8th phase (18Aug2020 - 03Sep2020): finished  511 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (12Feb2020 - 23Mar2020): finished 1263 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  9th phase (01Aug2020 - 15Aug2020): finished 1415 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tRUS,  4th phase (05Jun2020 - 13Jun2020): finished 1478 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 19 min 47 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"13\" valign=\"top\">Russia</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Feb2020</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.02</td>\n",
        "      <td>0.602763</td>\n",
        "      <td>0.544883</td>\n",
        "      <td>0.034081</td>\n",
        "      <td>0.002299</td>\n",
        "      <td>360</td>\n",
        "      <td>0.603</td>\n",
        "      <td>108</td>\n",
        "      <td>7</td>\n",
        "      <td>0</td>\n",
        "      <td>18.966727</td>\n",
        "      <td>1153</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>07May2020</td>\n",
        "      <td>16May2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.51</td>\n",
        "      <td>0.000729</td>\n",
        "      <td>0.000120</td>\n",
        "      <td>0.012958</td>\n",
        "      <td>0.005045</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>49</td>\n",
        "      <td>19</td>\n",
        "      <td>2088</td>\n",
        "      <td>0.074230</td>\n",
        "      <td>1084</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>17May2020</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.59</td>\n",
        "      <td>0.000438</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.007034</td>\n",
        "      <td>0.004313</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>57</td>\n",
        "      <td>35</td>\n",
        "      <td>2549</td>\n",
        "      <td>0.086918</td>\n",
        "      <td>1136</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>27May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.03</td>\n",
        "      <td>0.000708</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.005479</td>\n",
        "      <td>0.005196</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>48</td>\n",
        "      <td>45</td>\n",
        "      <td>2144</td>\n",
        "      <td>0.067224</td>\n",
        "      <td>1134</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.000825</td>\n",
        "      <td>0.000085</td>\n",
        "      <td>0.004647</td>\n",
        "      <td>0.003623</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>69</td>\n",
        "      <td>53</td>\n",
        "      <td>2957</td>\n",
        "      <td>0.048345</td>\n",
        "      <td>1478</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>23Jun2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.000348</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.003467</td>\n",
        "      <td>0.004138</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>60</td>\n",
        "      <td>72</td>\n",
        "      <td>3162</td>\n",
        "      <td>0.063847</td>\n",
        "      <td>1053</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jun2020</td>\n",
        "      <td>04Jul2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.93</td>\n",
        "      <td>0.021935</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.002574</td>\n",
        "      <td>0.002707</td>\n",
        "      <td>360</td>\n",
        "      <td>0.022</td>\n",
        "      <td>92</td>\n",
        "      <td>97</td>\n",
        "      <td>132403</td>\n",
        "      <td>0.050402</td>\n",
        "      <td>1137</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jul2020</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.71</td>\n",
        "      <td>0.015653</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.002194</td>\n",
        "      <td>0.003032</td>\n",
        "      <td>360</td>\n",
        "      <td>0.016</td>\n",
        "      <td>82</td>\n",
        "      <td>113</td>\n",
        "      <td>173719</td>\n",
        "      <td>0.078319</td>\n",
        "      <td>1140</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.76</td>\n",
        "      <td>0.000031</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.001834</td>\n",
        "      <td>0.002377</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>105</td>\n",
        "      <td>136</td>\n",
        "      <td>6131</td>\n",
        "      <td>0.060525</td>\n",
        "      <td>1094</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>15Aug2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.73</td>\n",
        "      <td>0.016638</td>\n",
        "      <td>0.000011</td>\n",
        "      <td>0.001426</td>\n",
        "      <td>0.001913</td>\n",
        "      <td>360</td>\n",
        "      <td>0.017</td>\n",
        "      <td>130</td>\n",
        "      <td>175</td>\n",
        "      <td>22598</td>\n",
        "      <td>0.056319</td>\n",
        "      <td>1415</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.89</td>\n",
        "      <td>0.000867</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.001255</td>\n",
        "      <td>0.001386</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>180</td>\n",
        "      <td>199</td>\n",
        "      <td>11760</td>\n",
        "      <td>0.048628</td>\n",
        "      <td>1115</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Sep2020</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.68</td>\n",
        "      <td>0.255356</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.001280</td>\n",
        "      <td>0.001389</td>\n",
        "      <td>360</td>\n",
        "      <td>0.255</td>\n",
        "      <td>179</td>\n",
        "      <td>195</td>\n",
        "      <td>11761</td>\n",
        "      <td>0.394116</td>\n",
        "      <td>1041</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>330457362</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.43</td>\n",
        "      <td>0.054712</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.001490</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>360</td>\n",
        "      <td>0.055</td>\n",
        "      <td>266</td>\n",
        "      <td>167</td>\n",
        "      <td>5468</td>\n",
        "      <td>0.134729</td>\n",
        "      <td>1133</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt     theta  \\\n",
        "Country Phase                                                                  \n",
        "Russia  0th    Past  12Feb2020  06May2020   330457362  SIR-F  0.02  0.602763   \n",
        "        1st    Past  07May2020  16May2020   330457362  SIR-F  2.51  0.000729   \n",
        "        2nd    Past  17May2020  26May2020   330457362  SIR-F  1.59  0.000438   \n",
        "        3rd    Past  27May2020  04Jun2020   330457362  SIR-F  1.03  0.000708   \n",
        "        4th    Past  05Jun2020  13Jun2020   330457362  SIR-F  1.25  0.000825   \n",
        "        5th    Past  14Jun2020  23Jun2020   330457362  SIR-F  0.82  0.000348   \n",
        "        6th    Past  24Jun2020  04Jul2020   330457362  SIR-F  0.93  0.021935   \n",
        "        7th    Past  05Jul2020  17Jul2020   330457362  SIR-F  0.71  0.015653   \n",
        "        8th    Past  18Jul2020  31Jul2020   330457362  SIR-F  0.76  0.000031   \n",
        "        9th    Past  01Aug2020  15Aug2020   330457362  SIR-F  0.73  0.016638   \n",
        "        10th   Past  16Aug2020  01Sep2020   330457362  SIR-F  0.89  0.000867   \n",
        "        11th   Past  02Sep2020  17Sep2020   330457362  SIR-F  0.68  0.255356   \n",
        "        12th   Past  18Sep2020  02Oct2020   330457362  SIR-F  1.43  0.054712   \n",
        "\n",
        "                  kappa       rho     sigma  tau  alpha1 [-]  1/gamma [day]  \\\n",
        "Country Phase                                                                 \n",
        "Russia  0th    0.544883  0.034081  0.002299  360       0.603            108   \n",
        "        1st    0.000120  0.012958  0.005045  360       0.001             49   \n",
        "        2nd    0.000098  0.007034  0.004313  360       0.000             57   \n",
        "        3rd    0.000117  0.005479  0.005196  360       0.001             48   \n",
        "        4th    0.000085  0.004647  0.003623  360       0.001             69   \n",
        "        5th    0.000079  0.003467  0.004138  360       0.000             60   \n",
        "        6th    0.000002  0.002574  0.002707  360       0.022             92   \n",
        "        7th    0.000001  0.002194  0.003032  360       0.016             82   \n",
        "        8th    0.000041  0.001834  0.002377  360       0.000            105   \n",
        "        9th    0.000011  0.001426  0.001913  360       0.017            130   \n",
        "        10th   0.000021  0.001255  0.001386  360       0.001            180   \n",
        "        11th   0.000021  0.001280  0.001389  360       0.255            179   \n",
        "        12th   0.000046  0.001490  0.000938  360       0.055            266   \n",
        "\n",
        "               1/beta [day]  1/alpha2 [day]      RMSLE  Trials       Runtime  \n",
        "Country Phase                                                                 \n",
        "Russia  0th               7               0  18.966727    1153  1 min  0 sec  \n",
        "        1st              19            2088   0.074230    1084  1 min  0 sec  \n",
        "        2nd              35            2549   0.086918    1136  1 min  0 sec  \n",
        "        3rd              45            2144   0.067224    1134  1 min  0 sec  \n",
        "        4th              53            2957   0.048345    1478  1 min  0 sec  \n",
        "        5th              72            3162   0.063847    1053  1 min  0 sec  \n",
        "        6th              97          132403   0.050402    1137  1 min  0 sec  \n",
        "        7th             113          173719   0.078319    1140  1 min  0 sec  \n",
        "        8th             136            6131   0.060525    1094  1 min  0 sec  \n",
        "        9th             175           22598   0.056319    1415  1 min  0 sec  \n",
        "        10th            199           11760   0.048628    1115  1 min  0 sec  \n",
        "        11th            195           11761   0.394116    1041  1 min  0 sec  \n",
        "        12th            167            5468   0.134729    1133  1 min  0 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-03-14</td>\n",
        "      <td>Portugal</td>\n",
        "      <td>0.018685</td>\n",
        "      <td>0.000839085</td>\n",
        "      <td>0.0318613</td>\n",
        "      <td>0.000261245</td>\n",
        "      <td>0.019</td>\n",
        "      <td>297</td>\n",
        "      <td>7</td>\n",
        "      <td>956</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-03-14</td>\n",
        "      <td>Portugal</td>\n",
        "      <td>0.018685</td>\n",
        "      <td>0.000839085</td>\n",
        "      <td>0.0318613</td>\n",
        "      <td>0.000261245</td>\n",
        "      <td>0.019</td>\n",
        "      <td>297</td>\n",
        "      <td>7</td>\n",
        "      <td>956</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-03-14</td>\n",
        "      <td>Portugal</td>\n",
        "      <td>0.018685</td>\n",
        "      <td>0.000839085</td>\n",
        "      <td>0.0318613</td>\n",
        "      <td>0.000261245</td>\n",
        "      <td>0.019</td>\n",
        "      <td>297</td>\n",
        "      <td>7</td>\n",
        "      <td>956</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-03-14</td>\n",
        "      <td>Portugal</td>\n",
        "      <td>0.018685</td>\n",
        "      <td>0.000839085</td>\n",
        "      <td>0.0318613</td>\n",
        "      <td>0.000261245</td>\n",
        "      <td>0.019</td>\n",
        "      <td>297</td>\n",
        "      <td>7</td>\n",
        "      <td>956</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-03-14</td>\n",
        "      <td>Portugal</td>\n",
        "      <td>0.018685</td>\n",
        "      <td>0.000839085</td>\n",
        "      <td>0.0318613</td>\n",
        "      <td>0.000261245</td>\n",
        "      <td>0.019</td>\n",
        "      <td>297</td>\n",
        "      <td>7</td>\n",
        "      <td>956</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date   Country     theta        kappa        rho        sigma  \\\n",
        "0 2020-03-14  Portugal  0.018685  0.000839085  0.0318613  0.000261245   \n",
        "1 2020-03-14  Portugal  0.018685  0.000839085  0.0318613  0.000261245   \n",
        "2 2020-03-14  Portugal  0.018685  0.000839085  0.0318613  0.000261245   \n",
        "3 2020-03-14  Portugal  0.018685  0.000839085  0.0318613  0.000261245   \n",
        "4 2020-03-14  Portugal  0.018685  0.000839085  0.0318613  0.000261245   \n",
        "\n",
        "  alpha1 [-] 1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0      0.019            297            7           956  ...             0   \n",
        "1      0.019            297            7           956  ...             0   \n",
        "2      0.019            297            7           956  ...             0   \n",
        "3      0.019            297            7           956  ...             0   \n",
        "4      0.019            297            7           956  ...             0   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       0   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        0                  0                       0   \n",
        "4                        0                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    3   \n",
        "1                               0                                    3   \n",
        "2                               0                                    3   \n",
        "3                               0                                    3   \n",
        "4                               0                                    3   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               1                2             32.41  \n",
        "1                      2               1                2             32.41  \n",
        "2                      2               1                2             32.41  \n",
        "3                      2               1                2             32.41  \n",
        "4                      2               1                2             32.41  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Brazil</th>\n",
        "      <th>France</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Russia</th>\n",
        "      <th>United States</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-09-28</th>\n",
        "      <td>0.79</td>\n",
        "      <td>1.03</td>\n",
        "      <td>25.12</td>\n",
        "      <td>1.57</td>\n",
        "      <td>1.64</td>\n",
        "      <td>1.96</td>\n",
        "      <td>1.43</td>\n",
        "      <td>2.31</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-29</th>\n",
        "      <td>0.79</td>\n",
        "      <td>1.03</td>\n",
        "      <td>25.12</td>\n",
        "      <td>1.57</td>\n",
        "      <td>1.64</td>\n",
        "      <td>1.96</td>\n",
        "      <td>1.43</td>\n",
        "      <td>2.31</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-30</th>\n",
        "      <td>0.79</td>\n",
        "      <td>1.03</td>\n",
        "      <td>25.12</td>\n",
        "      <td>1.57</td>\n",
        "      <td>1.64</td>\n",
        "      <td>1.96</td>\n",
        "      <td>1.43</td>\n",
        "      <td>2.31</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-01</th>\n",
        "      <td>0.79</td>\n",
        "      <td>1.03</td>\n",
        "      <td>25.12</td>\n",
        "      <td>1.57</td>\n",
        "      <td>1.64</td>\n",
        "      <td>1.96</td>\n",
        "      <td>1.43</td>\n",
        "      <td>2.31</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-02</th>\n",
        "      <td>0.79</td>\n",
        "      <td>1.03</td>\n",
        "      <td>25.12</td>\n",
        "      <td>1.57</td>\n",
        "      <td>1.64</td>\n",
        "      <td>1.96</td>\n",
        "      <td>1.43</td>\n",
        "      <td>2.31</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Bahrain  Brazil  France  Iran  Italy  Portugal  Russia  \\\n",
        "Date                                                                 \n",
        "2020-09-28     0.79    1.03   25.12  1.57   1.64      1.96    1.43   \n",
        "2020-09-29     0.79    1.03   25.12  1.57   1.64      1.96    1.43   \n",
        "2020-09-30     0.79    1.03   25.12  1.57   1.64      1.96    1.43   \n",
        "2020-10-01     0.79    1.03   25.12  1.57   1.64      1.96    1.43   \n",
        "2020-10-02     0.79    1.03   25.12  1.57   1.64      1.96    1.43   \n",
        "\n",
        "Country     United States  \n",
        "Date                       \n",
        "2020-09-28           2.31  \n",
        "2020-09-29           2.31  \n",
        "2020-09-30           2.31  \n",
        "2020-10-01           2.31  \n",
        "2020-10-02           2.31  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Brazil</th>\n",
        "      <th>France</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Russia</th>\n",
        "      <th>United States</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-09-28</th>\n",
        "      <td>0.021106</td>\n",
        "      <td>0.021866</td>\n",
        "      <td>0.009083</td>\n",
        "      <td>0.020178</td>\n",
        "      <td>0.008715</td>\n",
        "      <td>0.002353</td>\n",
        "      <td>0.00149</td>\n",
        "      <td>0.002658</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-29</th>\n",
        "      <td>0.021106</td>\n",
        "      <td>0.021866</td>\n",
        "      <td>0.009083</td>\n",
        "      <td>0.020178</td>\n",
        "      <td>0.008715</td>\n",
        "      <td>0.002353</td>\n",
        "      <td>0.00149</td>\n",
        "      <td>0.002658</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-30</th>\n",
        "      <td>0.021106</td>\n",
        "      <td>0.021866</td>\n",
        "      <td>0.009083</td>\n",
        "      <td>0.020178</td>\n",
        "      <td>0.008715</td>\n",
        "      <td>0.002353</td>\n",
        "      <td>0.00149</td>\n",
        "      <td>0.002658</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-01</th>\n",
        "      <td>0.021106</td>\n",
        "      <td>0.021866</td>\n",
        "      <td>0.009083</td>\n",
        "      <td>0.020178</td>\n",
        "      <td>0.008715</td>\n",
        "      <td>0.002353</td>\n",
        "      <td>0.00149</td>\n",
        "      <td>0.002658</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-02</th>\n",
        "      <td>0.021106</td>\n",
        "      <td>0.021866</td>\n",
        "      <td>0.009083</td>\n",
        "      <td>0.020178</td>\n",
        "      <td>0.008715</td>\n",
        "      <td>0.002353</td>\n",
        "      <td>0.00149</td>\n",
        "      <td>0.002658</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Bahrain    Brazil    France      Iran     Italy  Portugal  \\\n",
        "Date                                                                     \n",
        "2020-09-28  0.021106  0.021866  0.009083  0.020178  0.008715  0.002353   \n",
        "2020-09-29  0.021106  0.021866  0.009083  0.020178  0.008715  0.002353   \n",
        "2020-09-30  0.021106  0.021866  0.009083  0.020178  0.008715  0.002353   \n",
        "2020-10-01  0.021106  0.021866  0.009083  0.020178  0.008715  0.002353   \n",
        "2020-10-02  0.021106  0.021866  0.009083  0.020178  0.008715  0.002353   \n",
        "\n",
        "Country      Russia  United States  \n",
        "Date                                \n",
        "2020-09-28  0.00149       0.002658  \n",
        "2020-09-29  0.00149       0.002658  \n",
        "2020-09-30  0.00149       0.002658  \n",
        "2020-10-01  0.00149       0.002658  \n",
        "2020-10-02  0.00149       0.002658  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Brazil</th>\n",
        "      <th>France</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Russia</th>\n",
        "      <th>United States</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-09-28</th>\n",
        "      <td>0.026465</td>\n",
        "      <td>0.020842</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.012162</td>\n",
        "      <td>0.00523</td>\n",
        "      <td>0.001138</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.001124</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-29</th>\n",
        "      <td>0.026465</td>\n",
        "      <td>0.020842</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.012162</td>\n",
        "      <td>0.00523</td>\n",
        "      <td>0.001138</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.001124</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-30</th>\n",
        "      <td>0.026465</td>\n",
        "      <td>0.020842</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.012162</td>\n",
        "      <td>0.00523</td>\n",
        "      <td>0.001138</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.001124</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-01</th>\n",
        "      <td>0.026465</td>\n",
        "      <td>0.020842</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.012162</td>\n",
        "      <td>0.00523</td>\n",
        "      <td>0.001138</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.001124</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-02</th>\n",
        "      <td>0.026465</td>\n",
        "      <td>0.020842</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.012162</td>\n",
        "      <td>0.00523</td>\n",
        "      <td>0.001138</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.001124</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Bahrain    Brazil    France      Iran    Italy  Portugal  \\\n",
        "Date                                                                    \n",
        "2020-09-28  0.026465  0.020842  0.000301  0.012162  0.00523  0.001138   \n",
        "2020-09-29  0.026465  0.020842  0.000301  0.012162  0.00523  0.001138   \n",
        "2020-09-30  0.026465  0.020842  0.000301  0.012162  0.00523  0.001138   \n",
        "2020-10-01  0.026465  0.020842  0.000301  0.012162  0.00523  0.001138   \n",
        "2020-10-02  0.026465  0.020842  0.000301  0.012162  0.00523  0.001138   \n",
        "\n",
        "Country       Russia  United States  \n",
        "Date                                 \n",
        "2020-09-28  0.000938       0.001124  \n",
        "2020-09-29  0.000938       0.001124  \n",
        "2020-09-30  0.000938       0.001124  \n",
        "2020-10-01  0.000938       0.001124  \n",
        "2020-10-02  0.000938       0.001124  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Brazil</th>\n",
        "      <th>France</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Russia</th>\n",
        "      <th>United States</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-09-28</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000005</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-29</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000005</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-30</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000005</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-01</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000005</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-02</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000005</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Bahrain    Brazil    France     Iran     Italy  Portugal  \\\n",
        "Date                                                                    \n",
        "2020-09-28  0.000071  0.000005  0.000059  0.00006  0.000079   0.00006   \n",
        "2020-09-29  0.000071  0.000005  0.000059  0.00006  0.000079   0.00006   \n",
        "2020-09-30  0.000071  0.000005  0.000059  0.00006  0.000079   0.00006   \n",
        "2020-10-01  0.000071  0.000005  0.000059  0.00006  0.000079   0.00006   \n",
        "2020-10-02  0.000071  0.000005  0.000059  0.00006  0.000079   0.00006   \n",
        "\n",
        "Country       Russia  United States  \n",
        "Date                                 \n",
        "2020-09-28  0.000046       0.000024  \n",
        "2020-09-29  0.000046       0.000024  \n",
        "2020-09-30  0.000046       0.000024  \n",
        "2020-10-01  0.000046       0.000024  \n",
        "2020-10-02  0.000046       0.000024  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Brazil</th>\n",
        "      <th>France</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Russia</th>\n",
        "      <th>United States</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-09-28</th>\n",
        "      <td>0.001155</td>\n",
        "      <td>0.018106</td>\n",
        "      <td>0.003263</td>\n",
        "      <td>0.050766</td>\n",
        "      <td>0.001204</td>\n",
        "      <td>0.001007</td>\n",
        "      <td>0.054712</td>\n",
        "      <td>0.002811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-29</th>\n",
        "      <td>0.001155</td>\n",
        "      <td>0.018106</td>\n",
        "      <td>0.003263</td>\n",
        "      <td>0.050766</td>\n",
        "      <td>0.001204</td>\n",
        "      <td>0.001007</td>\n",
        "      <td>0.054712</td>\n",
        "      <td>0.002811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-09-30</th>\n",
        "      <td>0.001155</td>\n",
        "      <td>0.018106</td>\n",
        "      <td>0.003263</td>\n",
        "      <td>0.050766</td>\n",
        "      <td>0.001204</td>\n",
        "      <td>0.001007</td>\n",
        "      <td>0.054712</td>\n",
        "      <td>0.002811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-01</th>\n",
        "      <td>0.001155</td>\n",
        "      <td>0.018106</td>\n",
        "      <td>0.003263</td>\n",
        "      <td>0.050766</td>\n",
        "      <td>0.001204</td>\n",
        "      <td>0.001007</td>\n",
        "      <td>0.054712</td>\n",
        "      <td>0.002811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-10-02</th>\n",
        "      <td>0.001155</td>\n",
        "      <td>0.018106</td>\n",
        "      <td>0.003263</td>\n",
        "      <td>0.050766</td>\n",
        "      <td>0.001204</td>\n",
        "      <td>0.001007</td>\n",
        "      <td>0.054712</td>\n",
        "      <td>0.002811</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Bahrain    Brazil    France      Iran     Italy  Portugal  \\\n",
        "Date                                                                     \n",
        "2020-09-28  0.001155  0.018106  0.003263  0.050766  0.001204  0.001007   \n",
        "2020-09-29  0.001155  0.018106  0.003263  0.050766  0.001204  0.001007   \n",
        "2020-09-30  0.001155  0.018106  0.003263  0.050766  0.001204  0.001007   \n",
        "2020-10-01  0.001155  0.018106  0.003263  0.050766  0.001204  0.001007   \n",
        "2020-10-02  0.001155  0.018106  0.003263  0.050766  0.001204  0.001007   \n",
        "\n",
        "Country       Russia  United States  \n",
        "Date                                 \n",
        "2020-09-28  0.054712       0.002811  \n",
        "2020-09-29  0.054712       0.002811  \n",
        "2020-09-30  0.054712       0.002811  \n",
        "2020-10-01  0.054712       0.002811  \n",
        "2020-10-02  0.054712       0.002811  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 46511 entries, 0 to 46608\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 46511 non-null  datetime64[ns]\n",
        " 1   Country                              46511 non-null  object        \n",
        " 2   Rt                                   46511 non-null  float64       \n",
        " 3   theta                                46511 non-null  float64       \n",
        " 4   kappa                                46511 non-null  float64       \n",
        " 5   rho                                  46511 non-null  float64       \n",
        " 6   sigma                                46511 non-null  float64       \n",
        " 7   School_closing                       46511 non-null  int64         \n",
        " 8   Workplace_closing                    46511 non-null  int64         \n",
        " 9   Cancel_events                        46511 non-null  int64         \n",
        " 10  Gatherings_restrictions              46511 non-null  int64         \n",
        " 11  Transport_closing                    46511 non-null  int64         \n",
        " 12  Stay_home_restrictions               46511 non-null  int64         \n",
        " 13  Internal_movement_restrictions       46511 non-null  int64         \n",
        " 14  International_movement_restrictions  46511 non-null  int64         \n",
        " 15  Information_campaigns                46511 non-null  int64         \n",
        " 16  Testing_policy                       46511 non-null  int64         \n",
        " 17  Contact_tracing                      46511 non-null  int64         \n",
        " 18  Stringency_index                     46511 non-null  float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 7.1+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_3590b416_04c4_11eb_99e7_52540051b265row0_col0,#T_3590b416_04c4_11eb_99e7_52540051b265row1_col1,#T_3590b416_04c4_11eb_99e7_52540051b265row2_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col3,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col4,#T_3590b416_04c4_11eb_99e7_52540051b265row5_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row6_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col1,#T_3590b416_04c4_11eb_99e7_52540051b265row1_col0,#T_3590b416_04c4_11eb_99e7_52540051b265row2_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col2{\n",
        "            background-color:  #ede8f3;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row1_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row2_col0,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col1{\n",
        "            background-color:  #eae6f1;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col3,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col0{\n",
        "            background-color:  #99b8d8;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col4,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col0{\n",
        "            background-color:  #e6e2ef;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row5_col0{\n",
        "            background-color:  #c9cee4;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row6_col0,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col9{\n",
        "            background-color:  #b0c2de;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row0_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col0,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col0{\n",
        "            background-color:  #dcdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col0{\n",
        "            background-color:  #b5c4df;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row1_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col0,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col3,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col1{\n",
        "            background-color:  #d4d4e8;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col0{\n",
        "            background-color:  #cacee5;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row1_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row2_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row5_col1,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col0{\n",
        "            background-color:  #e0deed;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row1_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col1,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col0{\n",
        "            background-color:  #c1cae2;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row0_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col0,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col0{\n",
        "            background-color:  #ced0e6;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row0_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col0{\n",
        "            background-color:  #dddbec;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row2_col1{\n",
        "            background-color:  #023e62;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col3,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col1{\n",
        "            background-color:  #046299;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col4,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col1{\n",
        "            background-color:  #c0c9e2;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row6_col1{\n",
        "            background-color:  #d6d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col1{\n",
        "            background-color:  #e9e5f1;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col1{\n",
        "            background-color:  #ebe6f2;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col1,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col4{\n",
        "            background-color:  #91b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col1,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col11{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col1{\n",
        "            background-color:  #f2ecf5;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col1{\n",
        "            background-color:  #f4edf6;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row1_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col1{\n",
        "            background-color:  #b3c3de;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col3,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col9{\n",
        "            background-color:  #045f95;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col4,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col4{\n",
        "            background-color:  #cdd0e5;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row5_col2{\n",
        "            background-color:  #e3e0ee;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row6_col2{\n",
        "            background-color:  #dad9ea;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col2{\n",
        "            background-color:  #dedcec;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row5_col4,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col3{\n",
        "            background-color:  #86b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col2,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col3{\n",
        "            background-color:  #b4c4df;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col2{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col2{\n",
        "            background-color:  #f5eef6;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col2{\n",
        "            background-color:  #f1ebf4;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col2{\n",
        "            background-color:  #b9c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row2_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col2{\n",
        "            background-color:  #d2d3e7;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col4,#T_3590b416_04c4_11eb_99e7_52540051b265row4_col3{\n",
        "            background-color:  #a9bfdc;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row5_col3{\n",
        "            background-color:  #d8d7e9;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row3_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row6_col3,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col3{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col3{\n",
        "            background-color:  #f1ebf5;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col3{\n",
        "            background-color:  #d9d8ea;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col3{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col3{\n",
        "            background-color:  #afc1dd;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col3{\n",
        "            background-color:  #f8f1f8;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row3_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col3{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row6_col4{\n",
        "            background-color:  #acc0dd;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col4{\n",
        "            background-color:  #9fbad9;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col4{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col4{\n",
        "            background-color:  #b8c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col4{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col4{\n",
        "            background-color:  #bbc7e0;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col4{\n",
        "            background-color:  #a8bedc;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col4{\n",
        "            background-color:  #d7d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row4_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col4{\n",
        "            background-color:  #97b7d7;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row6_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col9{\n",
        "            background-color:  #05659f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col5{\n",
        "            background-color:  #046097;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col5{\n",
        "            background-color:  #0c74b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col5{\n",
        "            background-color:  #1379b5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col12{\n",
        "            background-color:  #167bb6;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col5{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col15{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col5{\n",
        "            background-color:  #056aa6;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col5{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col5,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col8{\n",
        "            background-color:  #79abd0;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row5_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col5{\n",
        "            background-color:  #045b8e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col6{\n",
        "            background-color:  #04649e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col8{\n",
        "            background-color:  #056ba7;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col6{\n",
        "            background-color:  #056fae;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col6{\n",
        "            background-color:  #0a73b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col13{\n",
        "            background-color:  #187cb6;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col6{\n",
        "            background-color:  #2f8bbe;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col6,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col10{\n",
        "            background-color:  #045e93;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col6{\n",
        "            background-color:  #2c89bd;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col6{\n",
        "            background-color:  #5ea0ca;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row6_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col6{\n",
        "            background-color:  #03517e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col9{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col8,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col8{\n",
        "            background-color:  #2484ba;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row7_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row10_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col14{\n",
        "            background-color:  #2a88bc;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col7{\n",
        "            background-color:  #2383ba;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row8_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col8{\n",
        "            background-color:  #045382;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col7,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col12{\n",
        "            background-color:  #0771b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col7{\n",
        "            background-color:  #197db7;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row7_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col7{\n",
        "            background-color:  #045a8d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row8_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row9_col8{\n",
        "            background-color:  #045d92;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row8_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col8{\n",
        "            background-color:  #04639b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row9_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col9,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col11{\n",
        "            background-color:  #3991c1;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row9_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col9{\n",
        "            background-color:  #328dbf;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row10_col11,#T_3590b416_04c4_11eb_99e7_52540051b265row11_col10,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col13{\n",
        "            background-color:  #045c90;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row10_col12,#T_3590b416_04c4_11eb_99e7_52540051b265row12_col10{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row10_col13,#T_3590b416_04c4_11eb_99e7_52540051b265row13_col10{\n",
        "            background-color:  #4897c4;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row10_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col10{\n",
        "            background-color:  #6da6cd;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row10_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col10{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row11_col16,#T_3590b416_04c4_11eb_99e7_52540051b265row16_col11{\n",
        "            background-color:  #046096;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row12_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col12{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row13_col14,#T_3590b416_04c4_11eb_99e7_52540051b265row14_col13{\n",
        "            background-color:  #056ba9;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_3590b416_04c4_11eb_99e7_52540051b265row14_col15,#T_3590b416_04c4_11eb_99e7_52540051b265row15_col14{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_3590b416_04c4_11eb_99e7_52540051b265\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col1\" class=\"data row0 col1\" >-0.287472</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col2\" class=\"data row0 col2\" >-0.263614</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col3\" class=\"data row0 col3\" >0.133422</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col4\" class=\"data row0 col4\" >-0.238050</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col5\" class=\"data row0 col5\" >-0.066768</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col6\" class=\"data row0 col6\" >0.043828</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col7\" class=\"data row0 col7\" >-0.173618</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col8\" class=\"data row0 col8\" >0.018542</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col9\" class=\"data row0 col9\" >-0.120829</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col10\" class=\"data row0 col10\" >-0.173017</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col11\" class=\"data row0 col11\" >-0.071037</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col12\" class=\"data row0 col12\" >-0.200696</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col13\" class=\"data row0 col13\" >-0.030380</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col14\" class=\"data row0 col14\" >-0.085604</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col15\" class=\"data row0 col15\" >-0.181164</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row0_col16\" class=\"data row0 col16\" >-0.086929</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col0\" class=\"data row1 col0\" >-0.287472</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col2\" class=\"data row1 col2\" >0.965058</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col3\" class=\"data row1 col3\" >0.750079</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col4\" class=\"data row1 col4\" >-0.025010</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col5\" class=\"data row1 col5\" >-0.204084</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col6\" class=\"data row1 col6\" >-0.132274</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col7\" class=\"data row1 col7\" >-0.259565</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col8\" class=\"data row1 col8\" >-0.270833</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col9\" class=\"data row1 col9\" >-0.264407</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col10\" class=\"data row1 col10\" >0.162427</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col11\" class=\"data row1 col11\" >-0.031531</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col12\" class=\"data row1 col12\" >0.196033</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col13\" class=\"data row1 col13\" >-0.340775</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col14\" class=\"data row1 col14\" >-0.348873</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col15\" class=\"data row1 col15\" >0.034296</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row1_col16\" class=\"data row1 col16\" >-0.123988</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col0\" class=\"data row2 col0\" >-0.263614</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col1\" class=\"data row2 col1\" >0.965058</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col3\" class=\"data row2 col3\" >0.773160</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col4\" class=\"data row2 col4\" >-0.078686</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col5\" class=\"data row2 col5\" >-0.220437</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col6\" class=\"data row2 col6\" >-0.159825</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col7\" class=\"data row2 col7\" >-0.287206</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col8\" class=\"data row2 col8\" >-0.185880</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col9\" class=\"data row2 col9\" >-0.201663</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col10\" class=\"data row2 col10\" >0.205752</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col11\" class=\"data row2 col11\" >0.027975</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col12\" class=\"data row2 col12\" >0.225064</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col13\" class=\"data row2 col13\" >-0.363626</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col14\" class=\"data row2 col14\" >-0.319980</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col15\" class=\"data row2 col15\" >0.004840</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row2_col16\" class=\"data row2 col16\" >-0.112757</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col0\" class=\"data row3 col0\" >0.133422</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col1\" class=\"data row3 col1\" >0.750079</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col2\" class=\"data row3 col2\" >0.773160</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col4\" class=\"data row3 col4\" >0.071162</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col5\" class=\"data row3 col5\" >-0.144923</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col6\" class=\"data row3 col6\" >-0.094756</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col7\" class=\"data row3 col7\" >-0.326790</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col8\" class=\"data row3 col8\" >-0.149021</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col9\" class=\"data row3 col9\" >-0.213275</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col10\" class=\"data row3 col10\" >0.202535</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col11\" class=\"data row3 col11\" >0.027163</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col12\" class=\"data row3 col12\" >0.047972</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col13\" class=\"data row3 col13\" >-0.388984</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col14\" class=\"data row3 col14\" >-0.460982</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col15\" class=\"data row3 col15\" >-0.122232</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row3_col16\" class=\"data row3 col16\" >-0.090919</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col0\" class=\"data row4 col0\" >-0.238050</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col1\" class=\"data row4 col1\" >-0.025010</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col2\" class=\"data row4 col2\" >-0.078686</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col3\" class=\"data row4 col3\" >0.071162</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col5\" class=\"data row4 col5\" >0.205255</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col6\" class=\"data row4 col6\" >0.062302</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col7\" class=\"data row4 col7\" >0.114501</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col8\" class=\"data row4 col8\" >-0.014883</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col9\" class=\"data row4 col9\" >0.009239</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col10\" class=\"data row4 col10\" >0.099806</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col11\" class=\"data row4 col11\" >-0.002149</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col12\" class=\"data row4 col12\" >-0.081474</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col13\" class=\"data row4 col13\" >0.079221</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col14\" class=\"data row4 col14\" >-0.137228</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col15\" class=\"data row4 col15\" >0.163757</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row4_col16\" class=\"data row4 col16\" >0.141458</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col0\" class=\"data row5 col0\" >-0.066768</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col1\" class=\"data row5 col1\" >-0.204084</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col2\" class=\"data row5 col2\" >-0.220437</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col3\" class=\"data row5 col3\" >-0.144923</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col4\" class=\"data row5 col4\" >0.205255</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col6\" class=\"data row5 col6\" >0.725037</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col7\" class=\"data row5 col7\" >0.763965</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col8\" class=\"data row5 col8\" >0.611692</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col9\" class=\"data row5 col9\" >0.580538</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col10\" class=\"data row5 col10\" >0.566351</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col11\" class=\"data row5 col11\" >0.526668</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col12\" class=\"data row5 col12\" >0.426517</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col13\" class=\"data row5 col13\" >0.682848</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col14\" class=\"data row5 col14\" >0.481605</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col15\" class=\"data row5 col15\" >0.248410</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row5_col16\" class=\"data row5 col16\" >0.809226</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col0\" class=\"data row6 col0\" >0.043828</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col1\" class=\"data row6 col1\" >-0.132274</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col2\" class=\"data row6 col2\" >-0.159825</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col3\" class=\"data row6 col3\" >-0.094756</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col4\" class=\"data row6 col4\" >0.062302</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col5\" class=\"data row6 col5\" >0.725037</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col7\" class=\"data row6 col7\" >0.730284</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col8\" class=\"data row6 col8\" >0.674944</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col9\" class=\"data row6 col9\" >0.641907</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col10\" class=\"data row6 col10\" >0.614619</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col11\" class=\"data row6 col11\" >0.565043</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col12\" class=\"data row6 col12\" >0.475446</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col13\" class=\"data row6 col13\" >0.788781</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col14\" class=\"data row6 col14\" >0.488271</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col15\" class=\"data row6 col15\" >0.334669</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row6_col16\" class=\"data row6 col16\" >0.866150</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col0\" class=\"data row7 col0\" >-0.173618</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col1\" class=\"data row7 col1\" >-0.259565</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col2\" class=\"data row7 col2\" >-0.287206</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col3\" class=\"data row7 col3\" >-0.326790</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col4\" class=\"data row7 col4\" >0.114501</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col5\" class=\"data row7 col5\" >0.763965</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col6\" class=\"data row7 col6\" >0.730284</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col8\" class=\"data row7 col8\" >0.646361</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col9\" class=\"data row7 col9\" >0.518594</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col10\" class=\"data row7 col10\" >0.494957</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col11\" class=\"data row7 col11\" >0.497162</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col12\" class=\"data row7 col12\" >0.520807</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col13\" class=\"data row7 col13\" >0.856848</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col14\" class=\"data row7 col14\" >0.626723</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col15\" class=\"data row7 col15\" >0.559295</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row7_col16\" class=\"data row7 col16\" >0.815816</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col0\" class=\"data row8 col0\" >0.018542</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col1\" class=\"data row8 col1\" >-0.270833</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col2\" class=\"data row8 col2\" >-0.185880</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col3\" class=\"data row8 col3\" >-0.149021</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col4\" class=\"data row8 col4\" >-0.014883</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col5\" class=\"data row8 col5\" >0.611692</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col6\" class=\"data row8 col6\" >0.674944</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col7\" class=\"data row8 col7\" >0.646361</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col9\" class=\"data row8 col9\" >0.792725</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col10\" class=\"data row8 col10\" >0.647900</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col11\" class=\"data row8 col11\" >0.742859</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col12\" class=\"data row8 col12\" >0.515460</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col13\" class=\"data row8 col13\" >0.676629</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col14\" class=\"data row8 col14\" >0.516324</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col15\" class=\"data row8 col15\" >0.247808</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row8_col16\" class=\"data row8 col16\" >0.857223</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col0\" class=\"data row9 col0\" >-0.120829</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col1\" class=\"data row9 col1\" >-0.264407</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col2\" class=\"data row9 col2\" >-0.201663</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col3\" class=\"data row9 col3\" >-0.213275</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col4\" class=\"data row9 col4\" >0.009239</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col5\" class=\"data row9 col5\" >0.580538</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col6\" class=\"data row9 col6\" >0.641907</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col7\" class=\"data row9 col7\" >0.518594</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col8\" class=\"data row9 col8\" >0.792725</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col10\" class=\"data row9 col10\" >0.651585</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col11\" class=\"data row9 col11\" >0.725011</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col12\" class=\"data row9 col12\" >0.440724</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col13\" class=\"data row9 col13\" >0.495632</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col14\" class=\"data row9 col14\" >0.467285</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col15\" class=\"data row9 col15\" >0.044273</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row9_col16\" class=\"data row9 col16\" >0.772625</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col0\" class=\"data row10 col0\" >-0.173017</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col1\" class=\"data row10 col1\" >0.162427</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col2\" class=\"data row10 col2\" >0.205752</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col3\" class=\"data row10 col3\" >0.202535</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col4\" class=\"data row10 col4\" >0.099806</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col5\" class=\"data row10 col5\" >0.566351</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col6\" class=\"data row10 col6\" >0.614619</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col7\" class=\"data row10 col7\" >0.494957</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col8\" class=\"data row10 col8\" >0.647900</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col9\" class=\"data row10 col9\" >0.651585</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col11\" class=\"data row10 col11\" >0.794903</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col12\" class=\"data row10 col12\" >0.550950</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col13\" class=\"data row10 col13\" >0.399306</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col14\" class=\"data row10 col14\" >0.288238</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col15\" class=\"data row10 col15\" >0.310887</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row10_col16\" class=\"data row10 col16\" >0.783321</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col0\" class=\"data row11 col0\" >-0.071037</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col1\" class=\"data row11 col1\" >-0.031531</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col2\" class=\"data row11 col2\" >0.027975</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col3\" class=\"data row11 col3\" >0.027163</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col4\" class=\"data row11 col4\" >-0.002149</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col5\" class=\"data row11 col5\" >0.526668</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col6\" class=\"data row11 col6\" >0.565043</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col7\" class=\"data row11 col7\" >0.497162</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col8\" class=\"data row11 col8\" >0.742859</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col9\" class=\"data row11 col9\" >0.725011</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col10\" class=\"data row11 col10\" >0.794903</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col12\" class=\"data row11 col12\" >0.493605</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col13\" class=\"data row11 col13\" >0.444900</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col14\" class=\"data row11 col14\" >0.332857</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col15\" class=\"data row11 col15\" >0.195807</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row11_col16\" class=\"data row11 col16\" >0.767712</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col0\" class=\"data row12 col0\" >-0.200696</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col1\" class=\"data row12 col1\" >0.196033</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col2\" class=\"data row12 col2\" >0.225064</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col3\" class=\"data row12 col3\" >0.047972</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col4\" class=\"data row12 col4\" >-0.081474</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col5\" class=\"data row12 col5\" >0.426517</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col6\" class=\"data row12 col6\" >0.475446</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col7\" class=\"data row12 col7\" >0.520807</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col8\" class=\"data row12 col8\" >0.515460</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col9\" class=\"data row12 col9\" >0.440724</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col10\" class=\"data row12 col10\" >0.550950</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col11\" class=\"data row12 col11\" >0.493605</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col13\" class=\"data row12 col13\" >0.493898</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col14\" class=\"data row12 col14\" >0.570130</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col15\" class=\"data row12 col15\" >0.514803</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row12_col16\" class=\"data row12 col16\" >0.628256</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col0\" class=\"data row13 col0\" >-0.030380</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col1\" class=\"data row13 col1\" >-0.340775</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col2\" class=\"data row13 col2\" >-0.363626</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col3\" class=\"data row13 col3\" >-0.388984</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col4\" class=\"data row13 col4\" >0.079221</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col5\" class=\"data row13 col5\" >0.682848</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col6\" class=\"data row13 col6\" >0.788781</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col7\" class=\"data row13 col7\" >0.856848</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col8\" class=\"data row13 col8\" >0.676629</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col9\" class=\"data row13 col9\" >0.495632</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col10\" class=\"data row13 col10\" >0.399306</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col11\" class=\"data row13 col11\" >0.444900</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col12\" class=\"data row13 col12\" >0.493898</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col14\" class=\"data row13 col14\" >0.669029</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col15\" class=\"data row13 col15\" >0.562111</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row13_col16\" class=\"data row13 col16\" >0.797278</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col0\" class=\"data row14 col0\" >-0.085604</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col1\" class=\"data row14 col1\" >-0.348873</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col2\" class=\"data row14 col2\" >-0.319980</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col3\" class=\"data row14 col3\" >-0.460982</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col4\" class=\"data row14 col4\" >-0.137228</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col5\" class=\"data row14 col5\" >0.481605</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col6\" class=\"data row14 col6\" >0.488271</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col7\" class=\"data row14 col7\" >0.626723</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col8\" class=\"data row14 col8\" >0.516324</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col9\" class=\"data row14 col9\" >0.467285</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col10\" class=\"data row14 col10\" >0.288238</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col11\" class=\"data row14 col11\" >0.332857</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col12\" class=\"data row14 col12\" >0.570130</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col13\" class=\"data row14 col13\" >0.669029</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col15\" class=\"data row14 col15\" >0.411196</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row14_col16\" class=\"data row14 col16\" >0.493478</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col0\" class=\"data row15 col0\" >-0.181164</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col1\" class=\"data row15 col1\" >0.034296</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col2\" class=\"data row15 col2\" >0.004840</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col3\" class=\"data row15 col3\" >-0.122232</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col4\" class=\"data row15 col4\" >0.163757</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col5\" class=\"data row15 col5\" >0.248410</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col6\" class=\"data row15 col6\" >0.334669</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col7\" class=\"data row15 col7\" >0.559295</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col8\" class=\"data row15 col8\" >0.247808</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col9\" class=\"data row15 col9\" >0.044273</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col10\" class=\"data row15 col10\" >0.310887</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col11\" class=\"data row15 col11\" >0.195807</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col12\" class=\"data row15 col12\" >0.514803</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col13\" class=\"data row15 col13\" >0.562111</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col14\" class=\"data row15 col14\" >0.411196</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row15_col16\" class=\"data row15 col16\" >0.426363</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_3590b416_04c4_11eb_99e7_52540051b265level0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col0\" class=\"data row16 col0\" >-0.086929</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col1\" class=\"data row16 col1\" >-0.123988</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col2\" class=\"data row16 col2\" >-0.112757</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col3\" class=\"data row16 col3\" >-0.090919</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col4\" class=\"data row16 col4\" >0.141458</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col5\" class=\"data row16 col5\" >0.809226</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col6\" class=\"data row16 col6\" >0.866150</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col7\" class=\"data row16 col7\" >0.815816</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col8\" class=\"data row16 col8\" >0.857223</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col9\" class=\"data row16 col9\" >0.772625</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col10\" class=\"data row16 col10\" >0.783321</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col11\" class=\"data row16 col11\" >0.767712</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col12\" class=\"data row16 col12\" >0.628256</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col13\" class=\"data row16 col13\" >0.797278</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col14\" class=\"data row16 col14\" >0.493478</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col15\" class=\"data row16 col15\" >0.426363</td>\n",
        "                        <td id=\"T_3590b416_04c4_11eb_99e7_52540051b265row16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f42312b97f0>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
