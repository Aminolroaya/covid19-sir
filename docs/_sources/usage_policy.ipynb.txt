{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.12.0-rho.new.339.357.359.362.366.367.383.fix.360.373'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "196"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **16th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{2: ['Solomon Islands', 'Holy See', 'Timor-Leste'],\n",
        " 3: ['Saint Kitts and Nevis', 'Tanzania', 'Laos'],\n",
        " 4: ['Grenada', 'Saint Lucia', 'Brunei', 'Dominica'],\n",
        " 5: ['Equatorial Guinea', 'Fiji'],\n",
        " 6: ['Mauritius', 'Antigua and Barbuda', 'Saint Vincent and the Grenadines'],\n",
        " 7: ['Gambia', 'Northern Mariana Islands'],\n",
        " 8: ['Trinidad and Tobago', 'Malawi', 'Monaco', 'Cambodia', 'Seychelles',\n",
        "     'Bahamas', 'Virgin Islands, U.S.', 'Liechtenstein', 'Barbados',\n",
        "     'Kyrgyzstan', 'Madagascar', 'Vietnam', 'Lesotho'],\n",
        " 9: ['Sao Tome and Principe', 'Bhutan', 'Zimbabwe', 'Ghana', 'Kazakhstan',\n",
        "     'Oman', 'Burundi', 'Swaziland', 'Benin', 'Namibia', 'South Africa',\n",
        "     'Djibouti', 'Zambia', 'Australia', 'Bolivia', 'Senegal', 'Suriname',\n",
        "     'Venezuela', 'Guyana', 'Republic of the Congo', 'Uzbekistan'],\n",
        " 10: ['Bermuda', 'Central African Republic', 'Colombia', 'Comoros', 'Guam',\n",
        "      'Gabon', 'Saudi Arabia', 'Mozambique', 'El Salvador', 'Peru', 'Egypt',\n",
        "      'Botswana', 'Rwanda', 'Myanmar', 'Honduras', 'Singapore', 'Israel',\n",
        "      'Philippines', 'Brazil', 'Belize', \"Cote d'Ivoire\", 'Papua New Guinea',\n",
        "      'Jamaica', 'Maldives', 'Liberia', 'Guatemala', 'Libya', 'Nigeria',\n",
        "      'Kuwait', 'Eritrea', 'Mongolia', 'Bahrain', 'Ethiopia', 'New Zealand',\n",
        "      'Syria', 'Chile'],\n",
        " 11: ['Ecuador', 'Cameroon', 'Guinea', 'Kenya', 'Yemen', 'Nicaragua', 'Chad',\n",
        "      'Sudan', 'Bangladesh', 'Cape Verde', 'Puerto Rico', 'Sierra Leone',\n",
        "      'Angola', 'Iraq', 'Taiwan', 'Paraguay', 'Guinea-Bissau', 'Kosovo',\n",
        "      'Argentina', 'Togo', 'Mexico', 'Panama', 'Pakistan', 'Andorra', 'India',\n",
        "      'Algeria', 'Costa Rica', 'Dominican Republic'],\n",
        " 12: ['Croatia', 'Haiti', 'San Marino', 'Tajikistan', 'Georgia', 'Tunisia',\n",
        "      'Democratic Republic of the Congo', 'Iceland', 'Japan',\n",
        "      'United Arab Emirates', 'Qatar', 'Serbia', 'Uganda', 'Azerbaijan',\n",
        "      'Nepal', 'Cuba', 'Niger', 'Jordan', 'Sri Lanka', 'Uruguay', 'South Sudan',\n",
        "      'Palestine'],\n",
        " 13: ['China', 'Czech Republic', 'Afghanistan', 'Burkina Faso', 'Belarus',\n",
        "      'Cyprus', 'Slovakia', 'Bosnia and Herzegovina', 'Russia', 'Hungary',\n",
        "      'United States', 'Luxembourg', 'Montenegro', 'Armenia', 'Ireland',\n",
        "      'Mauritania', 'Indonesia', 'Malta', 'Bulgaria', 'Moldova', 'Latvia',\n",
        "      'Slovenia', 'Mali'],\n",
        " 14: ['Spain', 'Turkey', 'Greece', 'Somalia', 'North Macedonia', 'Estonia',\n",
        "      'Malaysia', 'Morocco', 'Lithuania', 'Iran', 'Thailand', 'Poland',\n",
        "      'Albania'],\n",
        " 15: ['Switzerland', 'Germany', 'Finland', 'Belgium', 'Lebanon',\n",
        "      'United Kingdom', 'Ukraine', 'Netherlands', 'Norway', 'Austria', 'Italy',\n",
        "      'Portugal', 'Sweden', 'Denmark', 'Canada'],\n",
        " 16: ['Romania'],\n",
        " 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=16)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "2"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{16: ['Romania'], 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>26Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Aug2020</td>\n",
        "      <td>07Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Sep2020</td>\n",
        "      <td>16Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>06Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "France  0th    Past  07Feb2020  28Mar2020    66977107\n",
        "        1st    Past  29Mar2020  12Apr2020    66977107\n",
        "        2nd    Past  13Apr2020  28May2020    66977107\n",
        "        3rd    Past  29May2020  05Aug2020    66977107\n",
        "        4th    Past  06Aug2020  26Aug2020    66977107\n",
        "        5th    Past  27Aug2020  07Sep2020    66977107\n",
        "        6th    Past  08Sep2020  16Sep2020    66977107\n",
        "        7th    Past  17Sep2020  23Sep2020    66977107\n",
        "        8th    Past  24Sep2020  01Oct2020    66977107\n",
        "        9th    Past  02Oct2020  08Oct2020    66977107\n",
        "        10th   Past  09Oct2020  15Oct2020    66977107\n",
        "        11th   Past  16Oct2020  21Oct2020    66977107\n",
        "        12th   Past  22Oct2020  31Oct2020    66977107\n",
        "        13th   Past  01Nov2020  10Nov2020    66977107\n",
        "        14th   Past  11Nov2020  16Nov2020    66977107\n",
        "        15th   Past  17Nov2020  24Nov2020    66977107\n",
        "        16th   Past  25Nov2020  06Dec2020    66977107"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF, timeout=10)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>\n",
        "Running optimization with 4 CPUs...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (27Aug2020 - 07Sep2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (29May2020 - 05Aug2020): finished  209 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 11th phase (16Oct2020 - 21Oct2020): finished  237 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  0th phase (05Mar2020 - 25Apr2020): finished  214 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (02Oct2020 - 08Oct2020): finished  245 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 13th phase (01Nov2020 - 10Nov2020): finished  240 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  7th phase (02Oct2020 - 12Oct2020): finished  236 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (24Sep2020 - 01Oct2020): finished  242 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 14th phase (24Nov2020 - 29Nov2020): finished  219 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 12th phase (22Oct2020 - 31Oct2020): finished  215 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 16th phase (25Nov2020 - 06Dec2020): finished  217 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (29Mar2020 - 12Apr2020): finished  221 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  4th phase (11Aug2020 - 28Aug2020): finished  220 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (06Aug2020 - 26Aug2020): finished  218 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  8th phase (13Oct2020 - 20Oct2020): finished  235 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  1st phase (26Apr2020 - 25Jun2020): finished  219 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (09Oct2020 - 15Oct2020): finished  255 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  5th phase (29Aug2020 - 15Sep2020): finished  233 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 10th phase (29Oct2020 - 04Nov2020): finished  240 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (07Feb2020 - 28Mar2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 11th phase (05Nov2020 - 11Nov2020): finished  238 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 13th phase (18Nov2020 - 23Nov2020): finished  238 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 12th phase (12Nov2020 - 17Nov2020): finished  244 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  3rd phase (24Jul2020 - 10Aug2020): finished  235 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (13Apr2020 - 28May2020): finished  276 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 14th phase (11Nov2020 - 16Nov2020): finished  296 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  9th phase (21Oct2020 - 28Oct2020): finished  292 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (17Sep2020 - 23Sep2020): finished  273 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (08Sep2020 - 16Sep2020): finished  272 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 15th phase (30Nov2020 - 06Dec2020): finished  278 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  6th phase (16Sep2020 - 01Oct2020): finished  253 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  2nd phase (26Jun2020 - 23Jul2020): finished  273 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 15th phase (17Nov2020 - 24Nov2020): finished  287 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 41 sec\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>10.18</td>\n",
        "      <td>0.001132</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.041592</td>\n",
        "      <td>0.004010</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>6</td>\n",
        "      <td>62</td>\n",
        "      <td>3515</td>\n",
        "      <td>1.215322</td>\n",
        "      <td>227</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.061692</td>\n",
        "      <td>0.000899</td>\n",
        "      <td>0.029330</td>\n",
        "      <td>0.013738</td>\n",
        "      <td>360</td>\n",
        "      <td>0.062</td>\n",
        "      <td>8</td>\n",
        "      <td>18</td>\n",
        "      <td>278</td>\n",
        "      <td>1.428310</td>\n",
        "      <td>221</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.55</td>\n",
        "      <td>0.305456</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.021523</td>\n",
        "      <td>0.027250</td>\n",
        "      <td>360</td>\n",
        "      <td>0.305</td>\n",
        "      <td>11</td>\n",
        "      <td>9</td>\n",
        "      <td>6159</td>\n",
        "      <td>0.141307</td>\n",
        "      <td>276</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.08</td>\n",
        "      <td>0.303344</td>\n",
        "      <td>0.000715</td>\n",
        "      <td>0.023757</td>\n",
        "      <td>0.014581</td>\n",
        "      <td>360</td>\n",
        "      <td>0.303</td>\n",
        "      <td>10</td>\n",
        "      <td>17</td>\n",
        "      <td>349</td>\n",
        "      <td>0.184240</td>\n",
        "      <td>209</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>26Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.69</td>\n",
        "      <td>0.000350</td>\n",
        "      <td>0.000712</td>\n",
        "      <td>0.029639</td>\n",
        "      <td>0.016790</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>8</td>\n",
        "      <td>14</td>\n",
        "      <td>351</td>\n",
        "      <td>0.036125</td>\n",
        "      <td>218</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Aug2020</td>\n",
        "      <td>07Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.15</td>\n",
        "      <td>0.004613</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.027083</td>\n",
        "      <td>0.012234</td>\n",
        "      <td>360</td>\n",
        "      <td>0.005</td>\n",
        "      <td>9</td>\n",
        "      <td>20</td>\n",
        "      <td>836</td>\n",
        "      <td>0.033616</td>\n",
        "      <td>227</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Sep2020</td>\n",
        "      <td>16Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.49</td>\n",
        "      <td>0.001035</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.027173</td>\n",
        "      <td>0.018088</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>9</td>\n",
        "      <td>13</td>\n",
        "      <td>3152</td>\n",
        "      <td>0.019731</td>\n",
        "      <td>272</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.50</td>\n",
        "      <td>0.000810</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.027904</td>\n",
        "      <td>0.018499</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>13</td>\n",
        "      <td>3152</td>\n",
        "      <td>0.025690</td>\n",
        "      <td>273</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.57</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.024067</td>\n",
        "      <td>0.015279</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>10</td>\n",
        "      <td>16</td>\n",
        "      <td>3708</td>\n",
        "      <td>0.045409</td>\n",
        "      <td>242</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.001379</td>\n",
        "      <td>0.000191</td>\n",
        "      <td>0.029453</td>\n",
        "      <td>0.023312</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>10</td>\n",
        "      <td>1308</td>\n",
        "      <td>0.038653</td>\n",
        "      <td>245</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.001050</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.025168</td>\n",
        "      <td>0.014910</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>9</td>\n",
        "      <td>16</td>\n",
        "      <td>1645</td>\n",
        "      <td>0.035339</td>\n",
        "      <td>255</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.75</td>\n",
        "      <td>0.001811</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.027659</td>\n",
        "      <td>0.015725</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>9</td>\n",
        "      <td>15</td>\n",
        "      <td>4226</td>\n",
        "      <td>0.032896</td>\n",
        "      <td>237</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.52</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>0.028712</td>\n",
        "      <td>0.011235</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>8</td>\n",
        "      <td>22</td>\n",
        "      <td>1666</td>\n",
        "      <td>0.044265</td>\n",
        "      <td>215</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.47</td>\n",
        "      <td>0.001461</td>\n",
        "      <td>0.000191</td>\n",
        "      <td>0.026602</td>\n",
        "      <td>0.017866</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>9</td>\n",
        "      <td>13</td>\n",
        "      <td>1308</td>\n",
        "      <td>0.041189</td>\n",
        "      <td>240</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.65</td>\n",
        "      <td>0.001978</td>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.013372</td>\n",
        "      <td>0.020379</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>18</td>\n",
        "      <td>12</td>\n",
        "      <td>1289</td>\n",
        "      <td>0.010552</td>\n",
        "      <td>296</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.41</td>\n",
        "      <td>0.014157</td>\n",
        "      <td>0.000238</td>\n",
        "      <td>0.013429</td>\n",
        "      <td>0.031950</td>\n",
        "      <td>360</td>\n",
        "      <td>0.014</td>\n",
        "      <td>18</td>\n",
        "      <td>7</td>\n",
        "      <td>1051</td>\n",
        "      <td>0.029371</td>\n",
        "      <td>287</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>06Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.51</td>\n",
        "      <td>0.014214</td>\n",
        "      <td>0.000557</td>\n",
        "      <td>0.018193</td>\n",
        "      <td>0.034350</td>\n",
        "      <td>360</td>\n",
        "      <td>0.014</td>\n",
        "      <td>13</td>\n",
        "      <td>7</td>\n",
        "      <td>448</td>\n",
        "      <td>0.049715</td>\n",
        "      <td>217</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE     Rt     theta  \\\n",
        "Country Phase                                                                   \n",
        "France  0th    Past  07Feb2020  28Mar2020    66977107  SIR-F  10.18  0.001132   \n",
        "        1st    Past  29Mar2020  12Apr2020    66977107  SIR-F   1.88  0.061692   \n",
        "        2nd    Past  13Apr2020  28May2020    66977107  SIR-F   0.55  0.305456   \n",
        "        3rd    Past  29May2020  05Aug2020    66977107  SIR-F   1.08  0.303344   \n",
        "        4th    Past  06Aug2020  26Aug2020    66977107  SIR-F   1.69  0.000350   \n",
        "        5th    Past  27Aug2020  07Sep2020    66977107  SIR-F   2.15  0.004613   \n",
        "        6th    Past  08Sep2020  16Sep2020    66977107  SIR-F   1.49  0.001035   \n",
        "        7th    Past  17Sep2020  23Sep2020    66977107  SIR-F   1.50  0.000810   \n",
        "        8th    Past  24Sep2020  01Oct2020    66977107  SIR-F   1.57  0.000676   \n",
        "        9th    Past  02Oct2020  08Oct2020    66977107  SIR-F   1.25  0.001379   \n",
        "        10th   Past  09Oct2020  15Oct2020    66977107  SIR-F   1.67  0.001050   \n",
        "        11th   Past  16Oct2020  21Oct2020    66977107  SIR-F   1.75  0.001811   \n",
        "        12th   Past  22Oct2020  31Oct2020    66977107  SIR-F   2.52  0.001843   \n",
        "        13th   Past  01Nov2020  10Nov2020    66977107  SIR-F   1.47  0.001461   \n",
        "        14th   Past  11Nov2020  16Nov2020    66977107  SIR-F   0.65  0.001978   \n",
        "        15th   Past  17Nov2020  24Nov2020    66977107  SIR-F   0.41  0.014157   \n",
        "        16th   Past  25Nov2020  06Dec2020    66977107  SIR-F   0.51  0.014214   \n",
        "\n",
        "                  kappa       rho     sigma  tau  alpha1 [-]  1/beta [day]  \\\n",
        "Country Phase                                                                \n",
        "France  0th    0.000071  0.041592  0.004010  360       0.001             6   \n",
        "        1st    0.000899  0.029330  0.013738  360       0.062             8   \n",
        "        2nd    0.000041  0.021523  0.027250  360       0.305            11   \n",
        "        3rd    0.000715  0.023757  0.014581  360       0.303            10   \n",
        "        4th    0.000712  0.029639  0.016790  360       0.000             8   \n",
        "        5th    0.000299  0.027083  0.012234  360       0.005             9   \n",
        "        6th    0.000079  0.027173  0.018088  360       0.001             9   \n",
        "        7th    0.000079  0.027904  0.018499  360       0.001             8   \n",
        "        8th    0.000067  0.024067  0.015279  360       0.001            10   \n",
        "        9th    0.000191  0.029453  0.023312  360       0.001             8   \n",
        "        10th   0.000152  0.025168  0.014910  360       0.001             9   \n",
        "        11th   0.000059  0.027659  0.015725  360       0.002             9   \n",
        "        12th   0.000150  0.028712  0.011235  360       0.002             8   \n",
        "        13th   0.000191  0.026602  0.017866  360       0.001             9   \n",
        "        14th   0.000194  0.013372  0.020379  360       0.002            18   \n",
        "        15th   0.000238  0.013429  0.031950  360       0.014            18   \n",
        "        16th   0.000557  0.018193  0.034350  360       0.014            13   \n",
        "\n",
        "               1/gamma [day]  1/alpha2 [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                                 \n",
        "France  0th               62            3515  1.215322     227  0 min 10 sec  \n",
        "        1st               18             278  1.428310     221  0 min 10 sec  \n",
        "        2nd                9            6159  0.141307     276  0 min 10 sec  \n",
        "        3rd               17             349  0.184240     209  0 min 10 sec  \n",
        "        4th               14             351  0.036125     218  0 min 10 sec  \n",
        "        5th               20             836  0.033616     227  0 min 10 sec  \n",
        "        6th               13            3152  0.019731     272  0 min 10 sec  \n",
        "        7th               13            3152  0.025690     273  0 min 10 sec  \n",
        "        8th               16            3708  0.045409     242  0 min 10 sec  \n",
        "        9th               10            1308  0.038653     245  0 min 10 sec  \n",
        "        10th              16            1645  0.035339     255  0 min 10 sec  \n",
        "        11th              15            4226  0.032896     237  0 min 10 sec  \n",
        "        12th              22            1666  0.044265     215  0 min 10 sec  \n",
        "        13th              13            1308  0.041189     240  0 min 10 sec  \n",
        "        14th              12            1289  0.010552     296  0 min 10 sec  \n",
        "        15th               7            1051  0.029371     287  0 min 10 sec  \n",
        "        16th               7             448  0.049715     217  0 min 10 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.001132</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.041592</td>\n",
        "      <td>0.00401</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3515</td>\n",
        "      <td>6</td>\n",
        "      <td>62</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>8.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.001132</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.041592</td>\n",
        "      <td>0.00401</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3515</td>\n",
        "      <td>6</td>\n",
        "      <td>62</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.001132</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.041592</td>\n",
        "      <td>0.00401</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3515</td>\n",
        "      <td>6</td>\n",
        "      <td>62</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>8.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.001132</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.041592</td>\n",
        "      <td>0.00401</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3515</td>\n",
        "      <td>6</td>\n",
        "      <td>62</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.001132</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.041592</td>\n",
        "      <td>0.00401</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3515</td>\n",
        "      <td>6</td>\n",
        "      <td>62</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date Country     theta     kappa       rho    sigma  alpha1 [-]  \\\n",
        "0 2020-02-07  France  0.001132  0.000071  0.041592  0.00401       0.001   \n",
        "1 2020-02-07  France  0.001132  0.000071  0.041592  0.00401       0.001   \n",
        "2 2020-02-07  France  0.001132  0.000071  0.041592  0.00401       0.001   \n",
        "3 2020-02-07  France  0.001132  0.000071  0.041592  0.00401       0.001   \n",
        "4 2020-02-07  France  0.001132  0.000071  0.041592  0.00401       0.001   \n",
        "\n",
        "   1/alpha2 [day]  1/beta [day]  1/gamma [day]  ...  Cancel_events  \\\n",
        "0            3515             6             62  ...              0   \n",
        "1            3515             6             62  ...              0   \n",
        "2            3515             6             62  ...              0   \n",
        "3            3515             6             62  ...              0   \n",
        "4            3515             6             62  ...              0   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       0   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        0                  0                       0   \n",
        "4                        0                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    0   \n",
        "1                               0                                    0   \n",
        "2                               0                                    0   \n",
        "3                               0                                    0   \n",
        "4                               0                                    0   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               0                0              8.33  \n",
        "1                      0               0                0              0.00  \n",
        "2                      0               0                0              8.33  \n",
        "3                      0               0                0              0.00  \n",
        "4                      0               0                0              0.00  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.51</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.51</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.51</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.51</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.51</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     France  Romania\n",
        "Date                       \n",
        "2020-12-02    0.51      0.7\n",
        "2020-12-03    0.51      0.7\n",
        "2020-12-04    0.51      0.7\n",
        "2020-12-05    0.51      0.7\n",
        "2020-12-06    0.51      0.7"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.018193</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.018193</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.018193</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.018193</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.018193</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country       France   Romania\n",
        "Date                          \n",
        "2020-12-02  0.018193  0.014575\n",
        "2020-12-03  0.018193  0.014575\n",
        "2020-12-04  0.018193  0.014575\n",
        "2020-12-05  0.018193  0.014575\n",
        "2020-12-06  0.018193  0.014575"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.03435</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.03435</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.03435</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.03435</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.03435</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      France   Romania\n",
        "Date                         \n",
        "2020-12-02  0.03435  0.020302\n",
        "2020-12-03  0.03435  0.020302\n",
        "2020-12-04  0.03435  0.020302\n",
        "2020-12-05  0.03435  0.020302\n",
        "2020-12-06  0.03435  0.020302"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.000557</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.000557</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.000557</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.000557</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.000557</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country       France   Romania\n",
        "Date                          \n",
        "2020-12-02  0.000557  0.000096\n",
        "2020-12-03  0.000557  0.000096\n",
        "2020-12-04  0.000557  0.000096\n",
        "2020-12-05  0.000557  0.000096\n",
        "2020-12-06  0.000557  0.000096"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.014214</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.014214</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.014214</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.014214</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.014214</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country       France  Romania\n",
        "Date                         \n",
        "2020-12-02  0.014214   0.0172\n",
        "2020-12-03  0.014214   0.0172\n",
        "2020-12-04  0.014214   0.0172\n",
        "2020-12-05  0.014214   0.0172\n",
        "2020-12-06  0.014214   0.0172"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 7849 entries, 0 to 7862\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 7849 non-null   datetime64[ns]\n",
        " 1   Country                              7849 non-null   object        \n",
        " 2   Rt                                   7849 non-null   float64       \n",
        " 3   theta                                7849 non-null   float64       \n",
        " 4   kappa                                7849 non-null   float64       \n",
        " 5   rho                                  7849 non-null   float64       \n",
        " 6   sigma                                7849 non-null   float64       \n",
        " 7   School_closing                       7849 non-null   int64         \n",
        " 8   Workplace_closing                    7849 non-null   int64         \n",
        " 9   Cancel_events                        7849 non-null   int64         \n",
        " 10  Gatherings_restrictions              7849 non-null   int64         \n",
        " 11  Transport_closing                    7849 non-null   int64         \n",
        " 12  Stay_home_restrictions               7849 non-null   int64         \n",
        " 13  Internal_movement_restrictions       7849 non-null   int64         \n",
        " 14  International_movement_restrictions  7849 non-null   int64         \n",
        " 15  Information_campaigns                7849 non-null   int64         \n",
        " 16  Testing_policy                       7849 non-null   int64         \n",
        " 17  Contact_tracing                      7849 non-null   int64         \n",
        " 18  Stringency_index                     7849 non-null   float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 1.2+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_5998731a_37e8_11eb_953e_5254003618derow0_col0,#T_5998731a_37e8_11eb_953e_5254003618derow1_col1,#T_5998731a_37e8_11eb_953e_5254003618derow2_col2,#T_5998731a_37e8_11eb_953e_5254003618derow3_col3,#T_5998731a_37e8_11eb_953e_5254003618derow4_col4,#T_5998731a_37e8_11eb_953e_5254003618derow5_col5,#T_5998731a_37e8_11eb_953e_5254003618derow6_col6,#T_5998731a_37e8_11eb_953e_5254003618derow7_col7,#T_5998731a_37e8_11eb_953e_5254003618derow8_col8,#T_5998731a_37e8_11eb_953e_5254003618derow9_col9,#T_5998731a_37e8_11eb_953e_5254003618derow10_col10,#T_5998731a_37e8_11eb_953e_5254003618derow11_col11,#T_5998731a_37e8_11eb_953e_5254003618derow12_col12,#T_5998731a_37e8_11eb_953e_5254003618derow13_col13,#T_5998731a_37e8_11eb_953e_5254003618derow14_col14,#T_5998731a_37e8_11eb_953e_5254003618derow15_col15,#T_5998731a_37e8_11eb_953e_5254003618derow16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col1,#T_5998731a_37e8_11eb_953e_5254003618derow1_col0{\n",
        "            background-color:  #d7d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col2,#T_5998731a_37e8_11eb_953e_5254003618derow2_col0{\n",
        "            background-color:  #cccfe5;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col3,#T_5998731a_37e8_11eb_953e_5254003618derow3_col0{\n",
        "            background-color:  #034973;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col4,#T_5998731a_37e8_11eb_953e_5254003618derow0_col11,#T_5998731a_37e8_11eb_953e_5254003618derow4_col0,#T_5998731a_37e8_11eb_953e_5254003618derow11_col0{\n",
        "            background-color:  #f8f1f8;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col5,#T_5998731a_37e8_11eb_953e_5254003618derow5_col0{\n",
        "            background-color:  #dad9ea;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col6,#T_5998731a_37e8_11eb_953e_5254003618derow6_col0{\n",
        "            background-color:  #e0dded;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col7,#T_5998731a_37e8_11eb_953e_5254003618derow3_col7,#T_5998731a_37e8_11eb_953e_5254003618derow7_col0,#T_5998731a_37e8_11eb_953e_5254003618derow7_col3{\n",
        "            background-color:  #dfddec;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col8,#T_5998731a_37e8_11eb_953e_5254003618derow0_col12,#T_5998731a_37e8_11eb_953e_5254003618derow8_col0,#T_5998731a_37e8_11eb_953e_5254003618derow12_col0{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col9,#T_5998731a_37e8_11eb_953e_5254003618derow0_col13,#T_5998731a_37e8_11eb_953e_5254003618derow9_col0,#T_5998731a_37e8_11eb_953e_5254003618derow13_col0{\n",
        "            background-color:  #f3edf5;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col10,#T_5998731a_37e8_11eb_953e_5254003618derow3_col16,#T_5998731a_37e8_11eb_953e_5254003618derow10_col0,#T_5998731a_37e8_11eb_953e_5254003618derow16_col3{\n",
        "            background-color:  #e5e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col0{\n",
        "            background-color:  #dbdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col0{\n",
        "            background-color:  #f0eaf4;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow0_col16,#T_5998731a_37e8_11eb_953e_5254003618derow16_col0{\n",
        "            background-color:  #ebe6f2;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col2,#T_5998731a_37e8_11eb_953e_5254003618derow2_col1,#T_5998731a_37e8_11eb_953e_5254003618derow2_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col2{\n",
        "            background-color:  #3b92c1;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col3,#T_5998731a_37e8_11eb_953e_5254003618derow3_col1{\n",
        "            background-color:  #d4d4e8;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col4,#T_5998731a_37e8_11eb_953e_5254003618derow1_col9,#T_5998731a_37e8_11eb_953e_5254003618derow4_col1,#T_5998731a_37e8_11eb_953e_5254003618derow9_col1{\n",
        "            background-color:  #358fc0;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col5,#T_5998731a_37e8_11eb_953e_5254003618derow2_col9,#T_5998731a_37e8_11eb_953e_5254003618derow2_col13,#T_5998731a_37e8_11eb_953e_5254003618derow5_col1,#T_5998731a_37e8_11eb_953e_5254003618derow9_col2,#T_5998731a_37e8_11eb_953e_5254003618derow13_col2{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col6,#T_5998731a_37e8_11eb_953e_5254003618derow6_col1{\n",
        "            background-color:  #4897c4;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col7,#T_5998731a_37e8_11eb_953e_5254003618derow7_col1{\n",
        "            background-color:  #2786bb;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col8,#T_5998731a_37e8_11eb_953e_5254003618derow1_col16,#T_5998731a_37e8_11eb_953e_5254003618derow8_col1,#T_5998731a_37e8_11eb_953e_5254003618derow16_col1{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col10,#T_5998731a_37e8_11eb_953e_5254003618derow2_col16,#T_5998731a_37e8_11eb_953e_5254003618derow10_col1,#T_5998731a_37e8_11eb_953e_5254003618derow16_col2{\n",
        "            background-color:  #5ea0ca;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col11,#T_5998731a_37e8_11eb_953e_5254003618derow2_col8,#T_5998731a_37e8_11eb_953e_5254003618derow8_col2,#T_5998731a_37e8_11eb_953e_5254003618derow11_col1{\n",
        "            background-color:  #328dbf;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col12,#T_5998731a_37e8_11eb_953e_5254003618derow12_col1{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col13,#T_5998731a_37e8_11eb_953e_5254003618derow13_col1{\n",
        "            background-color:  #4697c4;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col1{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow1_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col1{\n",
        "            background-color:  #5c9fc9;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col3,#T_5998731a_37e8_11eb_953e_5254003618derow3_col2{\n",
        "            background-color:  #b0c2de;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col4,#T_5998731a_37e8_11eb_953e_5254003618derow4_col2,#T_5998731a_37e8_11eb_953e_5254003618derow10_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col10{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col5,#T_5998731a_37e8_11eb_953e_5254003618derow5_col2,#T_5998731a_37e8_11eb_953e_5254003618derow10_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col10{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col6,#T_5998731a_37e8_11eb_953e_5254003618derow6_col2{\n",
        "            background-color:  #6fa7ce;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col7,#T_5998731a_37e8_11eb_953e_5254003618derow7_col2{\n",
        "            background-color:  #549cc7;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col10,#T_5998731a_37e8_11eb_953e_5254003618derow10_col2{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col11,#T_5998731a_37e8_11eb_953e_5254003618derow11_col2{\n",
        "            background-color:  #3991c1;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col12,#T_5998731a_37e8_11eb_953e_5254003618derow9_col14,#T_5998731a_37e8_11eb_953e_5254003618derow12_col2,#T_5998731a_37e8_11eb_953e_5254003618derow14_col9{\n",
        "            background-color:  #308cbe;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow2_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col2{\n",
        "            background-color:  #63a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col4,#T_5998731a_37e8_11eb_953e_5254003618derow4_col3{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col5,#T_5998731a_37e8_11eb_953e_5254003618derow5_col3{\n",
        "            background-color:  #d9d8ea;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col6,#T_5998731a_37e8_11eb_953e_5254003618derow6_col3{\n",
        "            background-color:  #dedcec;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col8,#T_5998731a_37e8_11eb_953e_5254003618derow8_col3{\n",
        "            background-color:  #f2ecf5;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col9,#T_5998731a_37e8_11eb_953e_5254003618derow9_col3{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col10,#T_5998731a_37e8_11eb_953e_5254003618derow10_col3{\n",
        "            background-color:  #e1dfed;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col11,#T_5998731a_37e8_11eb_953e_5254003618derow11_col3{\n",
        "            background-color:  #e9e5f1;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col12,#T_5998731a_37e8_11eb_953e_5254003618derow12_col3{\n",
        "            background-color:  #f4eef6;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col13,#T_5998731a_37e8_11eb_953e_5254003618derow13_col3{\n",
        "            background-color:  #eae6f1;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col3{\n",
        "            background-color:  #d2d3e7;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow3_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col3{\n",
        "            background-color:  #e3e0ee;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col5,#T_5998731a_37e8_11eb_953e_5254003618derow5_col4{\n",
        "            background-color:  #187cb6;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col6,#T_5998731a_37e8_11eb_953e_5254003618derow5_col13,#T_5998731a_37e8_11eb_953e_5254003618derow6_col4,#T_5998731a_37e8_11eb_953e_5254003618derow13_col5{\n",
        "            background-color:  #0771b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col7,#T_5998731a_37e8_11eb_953e_5254003618derow7_col4{\n",
        "            background-color:  #1278b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col8,#T_5998731a_37e8_11eb_953e_5254003618derow8_col4{\n",
        "            background-color:  #056ba9;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col9,#T_5998731a_37e8_11eb_953e_5254003618derow6_col13,#T_5998731a_37e8_11eb_953e_5254003618derow9_col4,#T_5998731a_37e8_11eb_953e_5254003618derow13_col6{\n",
        "            background-color:  #0a73b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col10,#T_5998731a_37e8_11eb_953e_5254003618derow5_col11,#T_5998731a_37e8_11eb_953e_5254003618derow10_col4,#T_5998731a_37e8_11eb_953e_5254003618derow11_col5,#T_5998731a_37e8_11eb_953e_5254003618derow13_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col13{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col11,#T_5998731a_37e8_11eb_953e_5254003618derow11_col4{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col12,#T_5998731a_37e8_11eb_953e_5254003618derow4_col16,#T_5998731a_37e8_11eb_953e_5254003618derow6_col9,#T_5998731a_37e8_11eb_953e_5254003618derow9_col6,#T_5998731a_37e8_11eb_953e_5254003618derow10_col13,#T_5998731a_37e8_11eb_953e_5254003618derow12_col4,#T_5998731a_37e8_11eb_953e_5254003618derow13_col10,#T_5998731a_37e8_11eb_953e_5254003618derow16_col4{\n",
        "            background-color:  #056dac;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col13,#T_5998731a_37e8_11eb_953e_5254003618derow13_col4{\n",
        "            background-color:  #157ab5;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col4{\n",
        "            background-color:  #3d93c2;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow4_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col4{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col6,#T_5998731a_37e8_11eb_953e_5254003618derow6_col5,#T_5998731a_37e8_11eb_953e_5254003618derow6_col16,#T_5998731a_37e8_11eb_953e_5254003618derow16_col6{\n",
        "            background-color:  #034165;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col7,#T_5998731a_37e8_11eb_953e_5254003618derow7_col5{\n",
        "            background-color:  #04588a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col8,#T_5998731a_37e8_11eb_953e_5254003618derow6_col11,#T_5998731a_37e8_11eb_953e_5254003618derow8_col5,#T_5998731a_37e8_11eb_953e_5254003618derow11_col6{\n",
        "            background-color:  #0569a5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col9,#T_5998731a_37e8_11eb_953e_5254003618derow7_col9,#T_5998731a_37e8_11eb_953e_5254003618derow9_col5,#T_5998731a_37e8_11eb_953e_5254003618derow9_col7,#T_5998731a_37e8_11eb_953e_5254003618derow9_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col9{\n",
        "            background-color:  #056faf;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col10,#T_5998731a_37e8_11eb_953e_5254003618derow10_col5{\n",
        "            background-color:  #034a74;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col12,#T_5998731a_37e8_11eb_953e_5254003618derow12_col5{\n",
        "            background-color:  #0569a4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col5{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col5{\n",
        "            background-color:  #93b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow5_col16,#T_5998731a_37e8_11eb_953e_5254003618derow8_col11,#T_5998731a_37e8_11eb_953e_5254003618derow11_col8,#T_5998731a_37e8_11eb_953e_5254003618derow16_col5{\n",
        "            background-color:  #034369;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow6_col7,#T_5998731a_37e8_11eb_953e_5254003618derow7_col6{\n",
        "            background-color:  #045788;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow6_col8,#T_5998731a_37e8_11eb_953e_5254003618derow6_col12,#T_5998731a_37e8_11eb_953e_5254003618derow8_col6,#T_5998731a_37e8_11eb_953e_5254003618derow12_col6{\n",
        "            background-color:  #0567a1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow6_col10,#T_5998731a_37e8_11eb_953e_5254003618derow10_col6{\n",
        "            background-color:  #03446a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow6_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col6{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow6_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col6{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow7_col8,#T_5998731a_37e8_11eb_953e_5254003618derow8_col7{\n",
        "            background-color:  #056aa6;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow7_col10,#T_5998731a_37e8_11eb_953e_5254003618derow7_col13,#T_5998731a_37e8_11eb_953e_5254003618derow10_col7,#T_5998731a_37e8_11eb_953e_5254003618derow13_col7{\n",
        "            background-color:  #045f95;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow7_col11,#T_5998731a_37e8_11eb_953e_5254003618derow7_col12,#T_5998731a_37e8_11eb_953e_5254003618derow11_col7,#T_5998731a_37e8_11eb_953e_5254003618derow12_col7{\n",
        "            background-color:  #056ba7;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow7_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col7{\n",
        "            background-color:  #79abd0;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow7_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col7{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow7_col16,#T_5998731a_37e8_11eb_953e_5254003618derow14_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col14,#T_5998731a_37e8_11eb_953e_5254003618derow16_col7{\n",
        "            background-color:  #03456c;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow8_col9,#T_5998731a_37e8_11eb_953e_5254003618derow9_col8{\n",
        "            background-color:  #034d79;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow8_col10,#T_5998731a_37e8_11eb_953e_5254003618derow10_col8{\n",
        "            background-color:  #046097;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow8_col12,#T_5998731a_37e8_11eb_953e_5254003618derow12_col8{\n",
        "            background-color:  #023b5d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow8_col13,#T_5998731a_37e8_11eb_953e_5254003618derow12_col13,#T_5998731a_37e8_11eb_953e_5254003618derow13_col8,#T_5998731a_37e8_11eb_953e_5254003618derow13_col12{\n",
        "            background-color:  #045483;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow8_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col8{\n",
        "            background-color:  #1379b5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow8_col15,#T_5998731a_37e8_11eb_953e_5254003618derow9_col13,#T_5998731a_37e8_11eb_953e_5254003618derow13_col9,#T_5998731a_37e8_11eb_953e_5254003618derow15_col8{\n",
        "            background-color:  #04639b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow8_col16,#T_5998731a_37e8_11eb_953e_5254003618derow16_col8{\n",
        "            background-color:  #045c90;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow9_col10,#T_5998731a_37e8_11eb_953e_5254003618derow10_col9{\n",
        "            background-color:  #046198;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow9_col11,#T_5998731a_37e8_11eb_953e_5254003618derow11_col9{\n",
        "            background-color:  #034267;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow9_col12,#T_5998731a_37e8_11eb_953e_5254003618derow12_col9{\n",
        "            background-color:  #03517e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow9_col16,#T_5998731a_37e8_11eb_953e_5254003618derow10_col12,#T_5998731a_37e8_11eb_953e_5254003618derow12_col10,#T_5998731a_37e8_11eb_953e_5254003618derow16_col9{\n",
        "            background-color:  #046299;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow10_col11,#T_5998731a_37e8_11eb_953e_5254003618derow11_col10{\n",
        "            background-color:  #046096;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow10_col16,#T_5998731a_37e8_11eb_953e_5254003618derow16_col10{\n",
        "            background-color:  #03476f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow11_col12,#T_5998731a_37e8_11eb_953e_5254003618derow12_col11{\n",
        "            background-color:  #034871;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow11_col13,#T_5998731a_37e8_11eb_953e_5254003618derow12_col16,#T_5998731a_37e8_11eb_953e_5254003618derow13_col11,#T_5998731a_37e8_11eb_953e_5254003618derow16_col12{\n",
        "            background-color:  #045d92;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow11_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col11{\n",
        "            background-color:  #2081b9;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow11_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col11{\n",
        "            background-color:  #0567a2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow11_col16,#T_5998731a_37e8_11eb_953e_5254003618derow13_col16,#T_5998731a_37e8_11eb_953e_5254003618derow16_col11,#T_5998731a_37e8_11eb_953e_5254003618derow16_col13{\n",
        "            background-color:  #045e93;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow12_col14,#T_5998731a_37e8_11eb_953e_5254003618derow14_col12{\n",
        "            background-color:  #167bb6;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow12_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col12{\n",
        "            background-color:  #05659f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow13_col15,#T_5998731a_37e8_11eb_953e_5254003618derow15_col13{\n",
        "            background-color:  #04649d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow14_col16,#T_5998731a_37e8_11eb_953e_5254003618derow16_col14{\n",
        "            background-color:  #81aed2;\n",
        "            color:  #000000;\n",
        "        }#T_5998731a_37e8_11eb_953e_5254003618derow15_col16,#T_5998731a_37e8_11eb_953e_5254003618derow16_col15{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_5998731a_37e8_11eb_953e_5254003618de\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col1\" class=\"data row0 col1\" >-0.437030</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col2\" class=\"data row0 col2\" >-0.357244</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col3\" class=\"data row0 col3\" >0.883249</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col4\" class=\"data row0 col4\" >-0.751845</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col5\" class=\"data row0 col5\" >-0.464754</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col6\" class=\"data row0 col6\" >-0.505568</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col7\" class=\"data row0 col7\" >-0.498988</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col8\" class=\"data row0 col8\" >-0.835955</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col9\" class=\"data row0 col9\" >-0.690430</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col10\" class=\"data row0 col10\" >-0.548129</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col11\" class=\"data row0 col11\" >-0.760680</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col12\" class=\"data row0 col12\" >-0.840675</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col13\" class=\"data row0 col13\" >-0.693285</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col14\" class=\"data row0 col14\" >-0.473154</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col15\" class=\"data row0 col15\" >-0.650344</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow0_col16\" class=\"data row0 col16\" >-0.597046</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col0\" class=\"data row1 col0\" >-0.437030</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col2\" class=\"data row1 col2\" >0.290045</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col3\" class=\"data row1 col3\" >-0.416032</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col4\" class=\"data row1 col4\" >0.316392</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col5\" class=\"data row1 col5\" >0.280843</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col6\" class=\"data row1 col6\" >0.240916</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col7\" class=\"data row1 col7\" >0.376744</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col8\" class=\"data row1 col8\" >0.320175</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col9\" class=\"data row1 col9\" >0.311482</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col10\" class=\"data row1 col10\" >0.164126</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col11\" class=\"data row1 col11\" >0.330156</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col12\" class=\"data row1 col12\" >0.306804</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col13\" class=\"data row1 col13\" >0.250322</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col14\" class=\"data row1 col14\" >-0.135114</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col15\" class=\"data row1 col15\" >0.167418</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow1_col16\" class=\"data row1 col16\" >0.321654</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col0\" class=\"data row2 col0\" >-0.357244</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col1\" class=\"data row2 col1\" >0.290045</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col3\" class=\"data row2 col3\" >-0.203213</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col4\" class=\"data row2 col4\" >-0.021484</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col5\" class=\"data row2 col5\" >0.112504</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col6\" class=\"data row2 col6\" >0.098452</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col7\" class=\"data row2 col7\" >0.197025</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col8\" class=\"data row2 col8\" >0.329375</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col9\" class=\"data row2 col9\" >0.276567</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col10\" class=\"data row2 col10\" >0.130428</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col11\" class=\"data row2 col11\" >0.300262</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col12\" class=\"data row2 col12\" >0.333898</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col13\" class=\"data row2 col13\" >0.275471</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col14\" class=\"data row2 col14\" >0.142087</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col15\" class=\"data row2 col15\" >0.290547</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow2_col16\" class=\"data row2 col16\" >0.163734</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col0\" class=\"data row3 col0\" >0.883249</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col1\" class=\"data row3 col1\" >-0.416032</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col2\" class=\"data row3 col2\" >-0.203213</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col4\" class=\"data row3 col4\" >-0.742597</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col5\" class=\"data row3 col5\" >-0.457797</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col6\" class=\"data row3 col6\" >-0.493134</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col7\" class=\"data row3 col7\" >-0.499461</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col8\" class=\"data row3 col8\" >-0.675951</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col9\" class=\"data row3 col9\" >-0.524869</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col10\" class=\"data row3 col10\" >-0.517945</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col11\" class=\"data row3 col11\" >-0.583027</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col12\" class=\"data row3 col12\" >-0.706964</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col13\" class=\"data row3 col13\" >-0.589556</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col14\" class=\"data row3 col14\" >-0.397582</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col15\" class=\"data row3 col15\" >-0.532498</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow3_col16\" class=\"data row3 col16\" >-0.552487</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col0\" class=\"data row4 col0\" >-0.751845</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col1\" class=\"data row4 col1\" >0.316392</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col2\" class=\"data row4 col2\" >-0.021484</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col3\" class=\"data row4 col3\" >-0.742597</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col5\" class=\"data row4 col5\" >0.451550</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col6\" class=\"data row4 col6\" >0.531891</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col7\" class=\"data row4 col7\" >0.481725</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col8\" class=\"data row4 col8\" >0.590043</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col9\" class=\"data row4 col9\" >0.515217</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col10\" class=\"data row4 col10\" >0.554967</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col11\" class=\"data row4 col11\" >0.578409</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col12\" class=\"data row4 col12\" >0.567299</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col13\" class=\"data row4 col13\" >0.465019</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col14\" class=\"data row4 col14\" >0.286224</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col15\" class=\"data row4 col15\" >0.403316</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow4_col16\" class=\"data row4 col16\" >0.564297</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col0\" class=\"data row5 col0\" >-0.464754</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col1\" class=\"data row5 col1\" >0.280843</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col2\" class=\"data row5 col2\" >0.112504</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col3\" class=\"data row5 col3\" >-0.457797</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col4\" class=\"data row5 col4\" >0.451550</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col6\" class=\"data row5 col6\" >0.940325</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col7\" class=\"data row5 col7\" >0.777656</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col8\" class=\"data row5 col8\" >0.611209</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col9\" class=\"data row5 col9\" >0.544786</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col10\" class=\"data row5 col10\" >0.875381</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col11\" class=\"data row5 col11\" >0.556871</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col12\" class=\"data row5 col12\" >0.615670</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col13\" class=\"data row5 col13\" >0.526815</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col14\" class=\"data row5 col14\" >-0.239559</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col15\" class=\"data row5 col15\" >-0.062803</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow5_col16\" class=\"data row5 col16\" >0.925837</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col0\" class=\"data row6 col0\" >-0.505568</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col1\" class=\"data row6 col1\" >0.240916</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col2\" class=\"data row6 col2\" >0.098452</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col3\" class=\"data row6 col3\" >-0.493134</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col4\" class=\"data row6 col4\" >0.531891</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col5\" class=\"data row6 col5\" >0.940325</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col7\" class=\"data row6 col7\" >0.786074</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col8\" class=\"data row6 col8\" >0.637834</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col9\" class=\"data row6 col9\" >0.564703</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col10\" class=\"data row6 col10\" >0.920841</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col11\" class=\"data row6 col11\" >0.609795</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col12\" class=\"data row6 col12\" >0.637897</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col13\" class=\"data row6 col13\" >0.517712</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col14\" class=\"data row6 col14\" >-0.145467</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col15\" class=\"data row6 col15\" >0.024887</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow6_col16\" class=\"data row6 col16\" >0.936350</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col0\" class=\"data row7 col0\" >-0.498988</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col1\" class=\"data row7 col1\" >0.376744</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col2\" class=\"data row7 col2\" >0.197025</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col3\" class=\"data row7 col3\" >-0.499461</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col4\" class=\"data row7 col4\" >0.481725</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col5\" class=\"data row7 col5\" >0.777656</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col6\" class=\"data row7 col6\" >0.786074</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col8\" class=\"data row7 col8\" >0.599269</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col9\" class=\"data row7 col9\" >0.541010</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col10\" class=\"data row7 col10\" >0.715040</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col11\" class=\"data row7 col11\" >0.593573</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col12\" class=\"data row7 col12\" >0.594937</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col13\" class=\"data row7 col13\" >0.716122</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col14\" class=\"data row7 col14\" >0.052894</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col15\" class=\"data row7 col15\" >0.254207</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow7_col16\" class=\"data row7 col16\" >0.907253</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col0\" class=\"data row8 col0\" >-0.835955</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col1\" class=\"data row8 col1\" >0.320175</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col2\" class=\"data row8 col2\" >0.329375</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col3\" class=\"data row8 col3\" >-0.675951</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col4\" class=\"data row8 col4\" >0.590043</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col5\" class=\"data row8 col5\" >0.611209</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col6\" class=\"data row8 col6\" >0.637834</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col7\" class=\"data row8 col7\" >0.599269</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col9\" class=\"data row8 col9\" >0.850786</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col10\" class=\"data row8 col10\" >0.702213</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col11\" class=\"data row8 col11\" >0.922883</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col12\" class=\"data row8 col12\" >0.971606</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col13\" class=\"data row8 col13\" >0.808592</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col14\" class=\"data row8 col14\" >0.471984</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col15\" class=\"data row8 col15\" >0.673511</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow8_col16\" class=\"data row8 col16\" >0.743699</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col0\" class=\"data row9 col0\" >-0.690430</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col1\" class=\"data row9 col1\" >0.311482</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col2\" class=\"data row9 col2\" >0.276567</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col3\" class=\"data row9 col3\" >-0.524869</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col4\" class=\"data row9 col4\" >0.515217</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col5\" class=\"data row9 col5\" >0.544786</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col6\" class=\"data row9 col6\" >0.564703</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col7\" class=\"data row9 col7\" >0.541010</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col8\" class=\"data row9 col8\" >0.850786</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col10\" class=\"data row9 col10\" >0.697867</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col11\" class=\"data row9 col11\" >0.928721</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col12\" class=\"data row9 col12\" >0.829582</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col13\" class=\"data row9 col13\" >0.669979</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col14\" class=\"data row9 col14\" >0.337597</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col15\" class=\"data row9 col15\" >0.542096</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow9_col16\" class=\"data row9 col16\" >0.687948</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col0\" class=\"data row10 col0\" >-0.548129</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col1\" class=\"data row10 col1\" >0.164126</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col2\" class=\"data row10 col2\" >0.130428</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col3\" class=\"data row10 col3\" >-0.517945</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col4\" class=\"data row10 col4\" >0.554967</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col5\" class=\"data row10 col5\" >0.875381</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col6\" class=\"data row10 col6\" >0.920841</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col7\" class=\"data row10 col7\" >0.715040</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col8\" class=\"data row10 col8\" >0.702213</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col9\" class=\"data row10 col9\" >0.697867</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col11\" class=\"data row10 col11\" >0.707523</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col12\" class=\"data row10 col12\" >0.689549</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col13\" class=\"data row10 col13\" >0.563034</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col14\" class=\"data row10 col14\" >-0.025940</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col15\" class=\"data row10 col15\" >0.108836</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow10_col16\" class=\"data row10 col16\" >0.895895</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col0\" class=\"data row11 col0\" >-0.760680</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col1\" class=\"data row11 col1\" >0.330156</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col2\" class=\"data row11 col2\" >0.300262</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col3\" class=\"data row11 col3\" >-0.583027</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col4\" class=\"data row11 col4\" >0.578409</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col5\" class=\"data row11 col5\" >0.556871</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col6\" class=\"data row11 col6\" >0.609795</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col7\" class=\"data row11 col7\" >0.593573</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col8\" class=\"data row11 col8\" >0.922883</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col9\" class=\"data row11 col9\" >0.928721</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col10\" class=\"data row11 col10\" >0.707523</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col12\" class=\"data row11 col12\" >0.888559</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col13\" class=\"data row11 col13\" >0.739176</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col14\" class=\"data row11 col14\" >0.414875</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col15\" class=\"data row11 col15\" >0.626198</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow11_col16\" class=\"data row11 col16\" >0.732753</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col0\" class=\"data row12 col0\" >-0.840675</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col1\" class=\"data row12 col1\" >0.306804</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col2\" class=\"data row12 col2\" >0.333898</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col3\" class=\"data row12 col3\" >-0.706964</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col4\" class=\"data row12 col4\" >0.567299</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col5\" class=\"data row12 col5\" >0.615670</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col6\" class=\"data row12 col6\" >0.637897</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col7\" class=\"data row12 col7\" >0.594937</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col8\" class=\"data row12 col8\" >0.971606</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col9\" class=\"data row12 col9\" >0.829582</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col10\" class=\"data row12 col10\" >0.689549</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col11\" class=\"data row12 col11\" >0.888559</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col13\" class=\"data row12 col13\" >0.807579</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col14\" class=\"data row12 col14\" >0.459281</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col15\" class=\"data row12 col15\" >0.648903</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow12_col16\" class=\"data row12 col16\" >0.738515</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col0\" class=\"data row13 col0\" >-0.693285</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col1\" class=\"data row13 col1\" >0.250322</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col2\" class=\"data row13 col2\" >0.275471</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col3\" class=\"data row13 col3\" >-0.589556</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col4\" class=\"data row13 col4\" >0.465019</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col5\" class=\"data row13 col5\" >0.526815</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col6\" class=\"data row13 col6\" >0.517712</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col7\" class=\"data row13 col7\" >0.716122</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col8\" class=\"data row13 col8\" >0.808592</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col9\" class=\"data row13 col9\" >0.669979</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col10\" class=\"data row13 col10\" >0.563034</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col11\" class=\"data row13 col11\" >0.739176</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col12\" class=\"data row13 col12\" >0.807579</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col14\" class=\"data row13 col14\" >0.560205</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col15\" class=\"data row13 col15\" >0.668954</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow13_col16\" class=\"data row13 col16\" >0.729961</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col0\" class=\"data row14 col0\" >-0.473154</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col1\" class=\"data row14 col1\" >-0.135114</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col2\" class=\"data row14 col2\" >0.142087</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col3\" class=\"data row14 col3\" >-0.397582</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col4\" class=\"data row14 col4\" >0.286224</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col5\" class=\"data row14 col5\" >-0.239559</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col6\" class=\"data row14 col6\" >-0.145467</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col7\" class=\"data row14 col7\" >0.052894</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col8\" class=\"data row14 col8\" >0.471984</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col9\" class=\"data row14 col9\" >0.337597</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col10\" class=\"data row14 col10\" >-0.025940</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col11\" class=\"data row14 col11\" >0.414875</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col12\" class=\"data row14 col12\" >0.459281</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col13\" class=\"data row14 col13\" >0.560205</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col15\" class=\"data row14 col15\" >0.906776</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow14_col16\" class=\"data row14 col16\" >0.021641</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col0\" class=\"data row15 col0\" >-0.650344</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col1\" class=\"data row15 col1\" >0.167418</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col2\" class=\"data row15 col2\" >0.290547</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col3\" class=\"data row15 col3\" >-0.532498</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col4\" class=\"data row15 col4\" >0.403316</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col5\" class=\"data row15 col5\" >-0.062803</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col6\" class=\"data row15 col6\" >0.024887</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col7\" class=\"data row15 col7\" >0.254207</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col8\" class=\"data row15 col8\" >0.673511</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col9\" class=\"data row15 col9\" >0.542096</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col10\" class=\"data row15 col10\" >0.108836</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col11\" class=\"data row15 col11\" >0.626198</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col12\" class=\"data row15 col12\" >0.648903</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col13\" class=\"data row15 col13\" >0.668954</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col14\" class=\"data row15 col14\" >0.906776</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow15_col16\" class=\"data row15 col16\" >0.214667</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_5998731a_37e8_11eb_953e_5254003618delevel0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col0\" class=\"data row16 col0\" >-0.597046</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col1\" class=\"data row16 col1\" >0.321654</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col2\" class=\"data row16 col2\" >0.163734</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col3\" class=\"data row16 col3\" >-0.552487</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col4\" class=\"data row16 col4\" >0.564297</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col5\" class=\"data row16 col5\" >0.925837</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col6\" class=\"data row16 col6\" >0.936350</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col7\" class=\"data row16 col7\" >0.907253</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col8\" class=\"data row16 col8\" >0.743699</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col9\" class=\"data row16 col9\" >0.687948</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col10\" class=\"data row16 col10\" >0.895895</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col11\" class=\"data row16 col11\" >0.732753</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col12\" class=\"data row16 col12\" >0.738515</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col13\" class=\"data row16 col13\" >0.729961</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col14\" class=\"data row16 col14\" >0.021641</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col15\" class=\"data row16 col15\" >0.214667</td>\n",
        "                        <td id=\"T_5998731a_37e8_11eb_953e_5254003618derow16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f281cf34ee0>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
