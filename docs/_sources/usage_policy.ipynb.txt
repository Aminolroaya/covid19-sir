{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1596469977201"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-lambda.new.57.72.167.176.191.fix.120.155.157.163.164.165.174.188'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "184"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Senegal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kuwait'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Bahrain', 'Iran']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>15Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>15Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439\n",
        "        2nd    Past  26May2020  04Jun2020     1569439\n",
        "        3rd    Past  05Jun2020  13Jun2020     1569439\n",
        "        4th    Past  14Jun2020  21Jun2020     1569439\n",
        "        5th    Past  22Jun2020  29Jun2020     1569439\n",
        "        6th    Past  30Jun2020  07Jul2020     1569439\n",
        "        7th    Past  08Jul2020  15Jul2020     1569439\n",
        "        8th    Past  16Jul2020  24Jul2020     1569439\n",
        "        9th    Past  25Jul2020  04Aug2020     1569439\n",
        "        10th   Past  05Aug2020  15Aug2020     1569439\n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269\n",
        "        2nd    Past  13Apr2020  04May2020    81800269\n",
        "        3rd    Past  05May2020  20May2020    81800269\n",
        "        4th    Past  21May2020  02Jun2020    81800269\n",
        "        5th    Past  03Jun2020  15Jun2020    81800269\n",
        "        6th    Past  16Jun2020  27Jun2020    81800269\n",
        "        7th    Past  28Jun2020  08Jul2020    81800269\n",
        "        8th    Past  09Jul2020  20Jul2020    81800269\n",
        "        9th    Past  21Jul2020  31Jul2020    81800269\n",
        "        10th   Past  01Aug2020  15Aug2020    81800269"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  7th phase (06Jun2020 - 28Jun2020): finished  445 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  4th phase (22Apr2020 - 01May2020): finished  413 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  1st phase (12May2020 - 29May2020): finished 1369 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  2nd phase (15May2020 - 29May2020): finished 1411 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  3rd phase (24Apr2020 - 07May2020): finished  811 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  6th phase (16Jun2020 - 27Jun2020): finished 1364 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN, 10th phase (01Aug2020 - 15Aug2020): finished  345 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  8th phase (30Jul2020 - 06Aug2020): finished  511 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  2nd phase (01Apr2020 - 12Apr2020): finished  160 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  9th phase (04Aug2020 - 15Aug2020): finished  156 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  5th phase (13Jun2020 - 22Jun2020): finished  468 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  6th phase (01Jul2020 - 10Jul2020): finished 1541 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  1st phase (30Apr2020 - 14May2020): finished 1538 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  5th phase (07Jun2020 - 25Jun2020): finished 1585 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  2nd phase (12May2020 - 21May2020): finished 1617 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  8th phase (12Jul2020 - 26Jul2020): finished 1108 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  2nd phase (16Apr2020 - 23Apr2020): finished 1703 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  5th phase (24Jun2020 - 04Jul2020): finished 1693 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (08Jul2020 - 16Jul2020): finished  193 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  7th phase (14Jul2020 - 23Jul2020): finished 1574 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  3rd phase (28Apr2020 - 16May2020): finished 1685 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  3rd phase (11Jun2020 - 18Jun2020): finished  174 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  6th phase (30Jun2020 - 07Jul2020): finished  541 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  9th phase (02Aug2020 - 15Aug2020): finished 1673 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  3rd phase (22May2020 - 09Jun2020): finished 1680 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  1st phase (06May2020 - 25May2020): finished 1671 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  7th phase (09Jul2020 - 21Jul2020): finished 1682 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  6th phase (26Jun2020 - 08Jul2020): finished 1670 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  2nd phase (26May2020 - 04Jun2020): finished 1093 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  2nd phase (08May2020 - 20May2020): finished  386 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  2nd phase (17Apr2020 - 27Apr2020): finished  397 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  5th phase (18Jun2020 - 02Jul2020): finished 1668 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  8th phase (09Jul2020 - 20Jul2020): finished  170 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (30May2020 - 07Jun2020): finished  317 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  6th phase (10Jul2020 - 20Jul2020): finished  520 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  9th phase (09Jul2020 - 15Aug2020): finished 1590 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  1st phase (08Apr2020 - 15Apr2020): finished 1617 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (26Jun2020 - 07Jul2020): finished  202 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  1st phase (11May2020 - 23May2020): finished 1596 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  9th phase (30Jul2020 - 15Aug2020): finished  528 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  4th phase (19Jun2020 - 27Jun2020): finished  197 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  9th phase (29Jul2020 - 15Aug2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  6th phase (10May2020 - 20May2020): finished  510 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  4th phase (10Jun2020 - 17Jun2020): finished  531 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  7th phase (28Jun2020 - 08Jul2020): finished  510 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  3rd phase (05Jun2020 - 13Jun2020): finished 1651 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  6th phase (30Jun2020 - 12Jul2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  1st phase (24Mar2020 - 31Mar2020): finished  193 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  1st phase (28Apr2020 - 12May2020): finished 1655 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  5th phase (02May2020 - 09May2020): finished  200 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  6th phase (23Jun2020 - 02Jul2020): finished 1647 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  6th phase (05Jul2020 - 13Jul2020): finished  189 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  7th phase (03Jul2020 - 11Jul2020): finished 1656 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  5th phase (16May2020 - 24May2020): finished  191 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  5th phase (22Jun2020 - 29Jun2020): finished 1653 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  2nd phase (30May2020 - 10Jun2020): finished 1657 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  1st phase (28Mar2020 - 12Apr2020): finished 1638 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (08Jun2020 - 16Jun2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  4th phase (10Jun2020 - 19Jun2020): finished 1655 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  8th phase (24Jul2020 - 03Aug2020): finished  190 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (18May2020 - 29May2020): finished 1647 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  7th phase (21Jul2020 - 29Jul2020): finished  194 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  5th phase (28Jun2020 - 09Jul2020): finished 1664 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  8th phase (29Jun2020 - 22Jul2020): finished 1644 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  2nd phase (13May2020 - 25May2020): finished 1640 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  4th phase (14Jun2020 - 21Jun2020): finished 1652 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (05May2020 - 17May2020): finished 1647 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  9th phase (21Jul2020 - 31Jul2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  8th phase (22Jul2020 - 31Jul2020): finished 1630 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  7th phase (11Jul2020 - 20Jul2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  4th phase (05Jun2020 - 16Jun2020): finished  363 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  2nd phase (24May2020 - 05Jun2020): finished 1636 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  6th phase (03Jul2020 - 14Jul2020): finished 1643 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  1st phase (02May2020 - 11May2020): finished 1633 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  8th phase (24Jul2020 - 01Aug2020): finished  206 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR, 10th phase (05Aug2020 - 15Aug2020): finished  665 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  9th phase (07Aug2020 - 15Aug2020): finished  520 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  5th phase (03Jun2020 - 15Jun2020): finished  802 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  9th phase (25Jul2020 - 04Aug2020): finished  186 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  1st phase (08Apr2020 - 16Apr2020): finished 1642 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  5th phase (20Jun2020 - 30Jun2020): finished  521 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (17Jul2020 - 28Jul2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  1st phase (23Apr2020 - 07May2020): finished  794 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  7th phase (08Jul2020 - 15Jul2020): finished 1633 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  4th phase (08May2020 - 15May2020): finished  192 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  8th phase (05Jun2020 - 08Jul2020): finished  913 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  9th phase (27Jul2020 - 15Aug2020): finished 1178 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  4th phase (17May2020 - 06Jun2020): finished  807 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  4th phase (16Jun2020 - 23Jun2020): finished  196 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  7th phase (15Jul2020 - 23Jul2020): finished 1691 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  3rd phase (13Apr2020 - 21Apr2020): finished  207 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  3rd phase (30May2020 - 09Jun2020): finished 1699 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  9th phase (23Jul2020 - 15Aug2020): finished 1704 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  3rd phase (21May2020 - 04Jun2020): finished  691 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  5th phase (17Jun2020 - 29Jun2020): finished  391 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  3rd phase (06Jun2020 - 15Jun2020): finished  716 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  3rd phase (05May2020 - 20May2020): finished  390 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (17Jun2020 - 25Jun2020): finished  191 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  6th phase (25May2020 - 05Jun2020): finished  388 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  7th phase (13Jul2020 - 23Jul2020): finished  206 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  2nd phase (13Apr2020 - 04May2020): finished  706 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  4th phase (04Jun2020 - 12Jun2020): finished 1025 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  3rd phase (26May2020 - 03Jun2020): finished 1069 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  8th phase (16Jul2020 - 24Jul2020): finished  228 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  4th phase (21May2020 - 02Jun2020): finished 1947 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 15 min 39 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.63</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>12</td>\n",
        "      <td>31</td>\n",
        "      <td>174012</td>\n",
        "      <td>0.174479</td>\n",
        "      <td>1671</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.44</td>\n",
        "      <td>0.000019</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.022700</td>\n",
        "      <td>0.015726</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>11</td>\n",
        "      <td>15</td>\n",
        "      <td>6137</td>\n",
        "      <td>0.042331</td>\n",
        "      <td>1093</td>\n",
        "      <td>0 min 35 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.000455</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>0.022557</td>\n",
        "      <td>0.021142</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>11</td>\n",
        "      <td>11</td>\n",
        "      <td>2977</td>\n",
        "      <td>0.027833</td>\n",
        "      <td>1651</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.000636</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.022416</td>\n",
        "      <td>0.022518</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>11</td>\n",
        "      <td>11</td>\n",
        "      <td>2143</td>\n",
        "      <td>0.032996</td>\n",
        "      <td>1652</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.93</td>\n",
        "      <td>0.000433</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.024508</td>\n",
        "      <td>0.026288</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>10</td>\n",
        "      <td>9</td>\n",
        "      <td>2549</td>\n",
        "      <td>0.023426</td>\n",
        "      <td>1653</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.84</td>\n",
        "      <td>0.000252</td>\n",
        "      <td>0.000076</td>\n",
        "      <td>0.026814</td>\n",
        "      <td>0.032004</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>9</td>\n",
        "      <td>7</td>\n",
        "      <td>3296</td>\n",
        "      <td>0.019609</td>\n",
        "      <td>541</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.000637</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.030096</td>\n",
        "      <td>0.034677</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>7</td>\n",
        "      <td>2144</td>\n",
        "      <td>0.016334</td>\n",
        "      <td>1633</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.001797</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.029347</td>\n",
        "      <td>0.033726</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>8</td>\n",
        "      <td>7</td>\n",
        "      <td>4213</td>\n",
        "      <td>0.013650</td>\n",
        "      <td>228</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.000896</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.029384</td>\n",
        "      <td>0.033817</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>7</td>\n",
        "      <td>3514</td>\n",
        "      <td>0.027011</td>\n",
        "      <td>186</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>15Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.000589</td>\n",
        "      <td>0.000114</td>\n",
        "      <td>0.032101</td>\n",
        "      <td>0.025786</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>9</td>\n",
        "      <td>2199</td>\n",
        "      <td>0.016624</td>\n",
        "      <td>665</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.35</td>\n",
        "      <td>0.052383</td>\n",
        "      <td>0.000156</td>\n",
        "      <td>0.023055</td>\n",
        "      <td>0.016002</td>\n",
        "      <td>360</td>\n",
        "      <td>0.052</td>\n",
        "      <td>10</td>\n",
        "      <td>15</td>\n",
        "      <td>1599</td>\n",
        "      <td>0.195790</td>\n",
        "      <td>1638</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.70</td>\n",
        "      <td>0.026814</td>\n",
        "      <td>0.000725</td>\n",
        "      <td>0.018222</td>\n",
        "      <td>0.024623</td>\n",
        "      <td>360</td>\n",
        "      <td>0.027</td>\n",
        "      <td>13</td>\n",
        "      <td>10</td>\n",
        "      <td>344</td>\n",
        "      <td>0.030652</td>\n",
        "      <td>706</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.42</td>\n",
        "      <td>0.018373</td>\n",
        "      <td>0.000483</td>\n",
        "      <td>0.026592</td>\n",
        "      <td>0.017854</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>9</td>\n",
        "      <td>14</td>\n",
        "      <td>517</td>\n",
        "      <td>0.019420</td>\n",
        "      <td>390</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.17</td>\n",
        "      <td>0.000945</td>\n",
        "      <td>0.000603</td>\n",
        "      <td>0.024190</td>\n",
        "      <td>0.019984</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>10</td>\n",
        "      <td>12</td>\n",
        "      <td>414</td>\n",
        "      <td>0.013543</td>\n",
        "      <td>1947</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.10</td>\n",
        "      <td>0.016744</td>\n",
        "      <td>0.000212</td>\n",
        "      <td>0.020530</td>\n",
        "      <td>0.018062</td>\n",
        "      <td>360</td>\n",
        "      <td>0.017</td>\n",
        "      <td>12</td>\n",
        "      <td>13</td>\n",
        "      <td>1178</td>\n",
        "      <td>0.019591</td>\n",
        "      <td>802</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.96</td>\n",
        "      <td>0.000320</td>\n",
        "      <td>0.000970</td>\n",
        "      <td>0.020738</td>\n",
        "      <td>0.020516</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>12</td>\n",
        "      <td>12</td>\n",
        "      <td>257</td>\n",
        "      <td>0.022436</td>\n",
        "      <td>1364</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.92</td>\n",
        "      <td>0.058260</td>\n",
        "      <td>0.000236</td>\n",
        "      <td>0.023150</td>\n",
        "      <td>0.023466</td>\n",
        "      <td>360</td>\n",
        "      <td>0.058</td>\n",
        "      <td>10</td>\n",
        "      <td>10</td>\n",
        "      <td>1057</td>\n",
        "      <td>0.010207</td>\n",
        "      <td>510</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.85</td>\n",
        "      <td>0.026605</td>\n",
        "      <td>0.001580</td>\n",
        "      <td>0.024495</td>\n",
        "      <td>0.026506</td>\n",
        "      <td>360</td>\n",
        "      <td>0.027</td>\n",
        "      <td>10</td>\n",
        "      <td>9</td>\n",
        "      <td>158</td>\n",
        "      <td>0.012007</td>\n",
        "      <td>170</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.10</td>\n",
        "      <td>0.070534</td>\n",
        "      <td>0.000240</td>\n",
        "      <td>0.027828</td>\n",
        "      <td>0.023256</td>\n",
        "      <td>360</td>\n",
        "      <td>0.071</td>\n",
        "      <td>8</td>\n",
        "      <td>10</td>\n",
        "      <td>1041</td>\n",
        "      <td>0.012995</td>\n",
        "      <td>368</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>15Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.042956</td>\n",
        "      <td>0.000844</td>\n",
        "      <td>0.024324</td>\n",
        "      <td>0.021134</td>\n",
        "      <td>360</td>\n",
        "      <td>0.043</td>\n",
        "      <td>10</td>\n",
        "      <td>11</td>\n",
        "      <td>296</td>\n",
        "      <td>0.022578</td>\n",
        "      <td>345</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "               Type      Start        End  Population    ODE    Rt     theta  \\\n",
        "Country Phase                                                                  \n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439  SIR-F  2.63  0.001254   \n",
        "        2nd    Past  26May2020  04Jun2020     1569439  SIR-F  1.44  0.000019   \n",
        "        3rd    Past  05Jun2020  13Jun2020     1569439  SIR-F  1.06  0.000455   \n",
        "        4th    Past  14Jun2020  21Jun2020     1569439  SIR-F  0.99  0.000636   \n",
        "        5th    Past  22Jun2020  29Jun2020     1569439  SIR-F  0.93  0.000433   \n",
        "        6th    Past  30Jun2020  07Jul2020     1569439  SIR-F  0.84  0.000252   \n",
        "        7th    Past  08Jul2020  15Jul2020     1569439  SIR-F  0.86  0.000637   \n",
        "        8th    Past  16Jul2020  24Jul2020     1569439  SIR-F  0.87  0.001797   \n",
        "        9th    Past  25Jul2020  04Aug2020     1569439  SIR-F  0.87  0.000896   \n",
        "        10th   Past  05Aug2020  15Aug2020     1569439  SIR-F  1.24  0.000589   \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269  SIR-F  1.35  0.052383   \n",
        "        2nd    Past  13Apr2020  04May2020    81800269  SIR-F  0.70  0.026814   \n",
        "        3rd    Past  05May2020  20May2020    81800269  SIR-F  1.42  0.018373   \n",
        "        4th    Past  21May2020  02Jun2020    81800269  SIR-F  1.17  0.000945   \n",
        "        5th    Past  03Jun2020  15Jun2020    81800269  SIR-F  1.10  0.016744   \n",
        "        6th    Past  16Jun2020  27Jun2020    81800269  SIR-F  0.96  0.000320   \n",
        "        7th    Past  28Jun2020  08Jul2020    81800269  SIR-F  0.92  0.058260   \n",
        "        8th    Past  09Jul2020  20Jul2020    81800269  SIR-F  0.85  0.026605   \n",
        "        9th    Past  21Jul2020  31Jul2020    81800269  SIR-F  1.10  0.070534   \n",
        "        10th   Past  01Aug2020  15Aug2020    81800269  SIR-F  1.06  0.042956   \n",
        "\n",
        "                  kappa       rho     sigma  tau  alpha1 [-]  1/beta [day]  \\\n",
        "Country Phase                                                                \n",
        "Bahrain 1st    0.000001  0.020811  0.007911  360       0.001            12   \n",
        "        2nd    0.000041  0.022700  0.015726  360       0.000            11   \n",
        "        3rd    0.000084  0.022557  0.021142  360       0.000            11   \n",
        "        4th    0.000117  0.022416  0.022518  360       0.001            11   \n",
        "        5th    0.000098  0.024508  0.026288  360       0.000            10   \n",
        "        6th    0.000076  0.026814  0.032004  360       0.000             9   \n",
        "        7th    0.000117  0.030096  0.034677  360       0.001             8   \n",
        "        8th    0.000059  0.029347  0.033726  360       0.002             8   \n",
        "        9th    0.000071  0.029384  0.033817  360       0.001             8   \n",
        "        10th   0.000114  0.032101  0.025786  360       0.001             7   \n",
        "Iran    1st    0.000156  0.023055  0.016002  360       0.052            10   \n",
        "        2nd    0.000725  0.018222  0.024623  360       0.027            13   \n",
        "        3rd    0.000483  0.026592  0.017854  360       0.018             9   \n",
        "        4th    0.000603  0.024190  0.019984  360       0.001            10   \n",
        "        5th    0.000212  0.020530  0.018062  360       0.017            12   \n",
        "        6th    0.000970  0.020738  0.020516  360       0.000            12   \n",
        "        7th    0.000236  0.023150  0.023466  360       0.058            10   \n",
        "        8th    0.001580  0.024495  0.026506  360       0.027            10   \n",
        "        9th    0.000240  0.027828  0.023256  360       0.071             8   \n",
        "        10th   0.000844  0.024324  0.021134  360       0.043            10   \n",
        "\n",
        "               1/gamma [day]  1/alpha2 [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                                 \n",
        "Bahrain 1st               31          174012  0.174479    1671  1 min  0 sec  \n",
        "        2nd               15            6137  0.042331    1093  0 min 35 sec  \n",
        "        3rd               11            2977  0.027833    1651  1 min  0 sec  \n",
        "        4th               11            2143  0.032996    1652  1 min  0 sec  \n",
        "        5th                9            2549  0.023426    1653  1 min  0 sec  \n",
        "        6th                7            3296  0.019609     541  0 min 15 sec  \n",
        "        7th                7            2144  0.016334    1633  1 min  0 sec  \n",
        "        8th                7            4213  0.013650     228  0 min  5 sec  \n",
        "        9th                7            3514  0.027011     186  0 min  5 sec  \n",
        "        10th               9            2199  0.016624     665  0 min 20 sec  \n",
        "Iran    1st               15            1599  0.195790    1638  1 min  0 sec  \n",
        "        2nd               10             344  0.030652     706  0 min 20 sec  \n",
        "        3rd               14             517  0.019420     390  0 min 10 sec  \n",
        "        4th               12             414  0.013543    1947  1 min  0 sec  \n",
        "        5th               13            1178  0.019591     802  0 min 25 sec  \n",
        "        6th               12             257  0.022436    1364  1 min  0 sec  \n",
        "        7th               10            1057  0.010207     510  0 min 15 sec  \n",
        "        8th                9             158  0.012007     170  0 min  5 sec  \n",
        "        9th               10            1041  0.012995     368  0 min 10 sec  \n",
        "        10th              11             296  0.022578     345  0 min 10 sec  "
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-04-23</td>\n",
        "      <td>Poland</td>\n",
        "      <td>0.000961152</td>\n",
        "      <td>0.000604859</td>\n",
        "      <td>0.00911438</td>\n",
        "      <td>0.00609835</td>\n",
        "      <td>0.001</td>\n",
        "      <td>413</td>\n",
        "      <td>27</td>\n",
        "      <td>40</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>83.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-04-24</td>\n",
        "      <td>Poland</td>\n",
        "      <td>0.000961152</td>\n",
        "      <td>0.000604859</td>\n",
        "      <td>0.00911438</td>\n",
        "      <td>0.00609835</td>\n",
        "      <td>0.001</td>\n",
        "      <td>413</td>\n",
        "      <td>27</td>\n",
        "      <td>40</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>83.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-04-25</td>\n",
        "      <td>Poland</td>\n",
        "      <td>0.000961152</td>\n",
        "      <td>0.000604859</td>\n",
        "      <td>0.00911438</td>\n",
        "      <td>0.00609835</td>\n",
        "      <td>0.001</td>\n",
        "      <td>413</td>\n",
        "      <td>27</td>\n",
        "      <td>40</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>83.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-04-26</td>\n",
        "      <td>Poland</td>\n",
        "      <td>0.000961152</td>\n",
        "      <td>0.000604859</td>\n",
        "      <td>0.00911438</td>\n",
        "      <td>0.00609835</td>\n",
        "      <td>0.001</td>\n",
        "      <td>413</td>\n",
        "      <td>27</td>\n",
        "      <td>40</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>83.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-04-27</td>\n",
        "      <td>Poland</td>\n",
        "      <td>0.000961152</td>\n",
        "      <td>0.000604859</td>\n",
        "      <td>0.00911438</td>\n",
        "      <td>0.00609835</td>\n",
        "      <td>0.001</td>\n",
        "      <td>413</td>\n",
        "      <td>27</td>\n",
        "      <td>40</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>83.33</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "        Date Country        theta        kappa         rho       sigma  \\\n",
        "0 2020-04-23  Poland  0.000961152  0.000604859  0.00911438  0.00609835   \n",
        "1 2020-04-24  Poland  0.000961152  0.000604859  0.00911438  0.00609835   \n",
        "2 2020-04-25  Poland  0.000961152  0.000604859  0.00911438  0.00609835   \n",
        "3 2020-04-26  Poland  0.000961152  0.000604859  0.00911438  0.00609835   \n",
        "4 2020-04-27  Poland  0.000961152  0.000604859  0.00911438  0.00609835   \n",
        "\n",
        "  alpha1 [-] 1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0      0.001            413           27            40  ...             2   \n",
        "1      0.001            413           27            40  ...             2   \n",
        "2      0.001            413           27            40  ...             2   \n",
        "3      0.001            413           27            40  ...             2   \n",
        "4      0.001            413           27            40  ...             2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        4                  1                       1   \n",
        "1                        4                  1                       1   \n",
        "2                        4                  1                       1   \n",
        "3                        4                  1                       1   \n",
        "4                        4                  1                       1   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               2                                    4   \n",
        "1                               2                                    4   \n",
        "2                               2                                    4   \n",
        "3                               2                                    4   \n",
        "4                               2                                    4   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               1                0             83.33  \n",
        "1                      2               1                0             83.33  \n",
        "2                      2               1                0             83.33  \n",
        "3                      2               1                0             83.33  \n",
        "4                      2               1                0             83.33  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>1.24</td>\n",
        "      <td>0.93</td>\n",
        "      <td>2.37</td>\n",
        "      <td>0.51</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.44</td>\n",
        "      <td>2.26</td>\n",
        "      <td>0.8</td>\n",
        "      <td>1.95</td>\n",
        "      <td>0.86</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>1.24</td>\n",
        "      <td>0.93</td>\n",
        "      <td>2.37</td>\n",
        "      <td>0.51</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.44</td>\n",
        "      <td>2.26</td>\n",
        "      <td>0.8</td>\n",
        "      <td>1.95</td>\n",
        "      <td>0.86</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>1.24</td>\n",
        "      <td>0.93</td>\n",
        "      <td>2.37</td>\n",
        "      <td>0.51</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.44</td>\n",
        "      <td>2.26</td>\n",
        "      <td>0.8</td>\n",
        "      <td>1.95</td>\n",
        "      <td>0.86</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>1.24</td>\n",
        "      <td>0.93</td>\n",
        "      <td>2.37</td>\n",
        "      <td>0.51</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.44</td>\n",
        "      <td>2.26</td>\n",
        "      <td>0.8</td>\n",
        "      <td>1.95</td>\n",
        "      <td>0.86</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>1.24</td>\n",
        "      <td>0.93</td>\n",
        "      <td>2.37</td>\n",
        "      <td>0.51</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.44</td>\n",
        "      <td>2.26</td>\n",
        "      <td>0.8</td>\n",
        "      <td>1.95</td>\n",
        "      <td>0.86</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "Country     Bahrain  Canada  Czech Republic  Guinea  Iran  Italy  Kuwait  \\\n",
        "Date                                                                       \n",
        "2020-08-11     1.24    0.93            2.37    0.51  1.06   0.94    0.98   \n",
        "2020-08-12     1.24    0.93            2.37    0.51  1.06   0.94    0.98   \n",
        "2020-08-13     1.24    0.93            2.37    0.51  1.06   0.94    0.98   \n",
        "2020-08-14     1.24    0.93            2.37    0.51  1.06   0.94    0.98   \n",
        "2020-08-15     1.24    0.93            2.37    0.51  1.06   0.94    0.98   \n",
        "\n",
        "Country     Moldova  Poland  Portugal  Senegal  United Arab Emirates  \n",
        "Date                                                                  \n",
        "2020-08-11     1.44    2.26       0.8     1.95                  0.86  \n",
        "2020-08-12     1.44    2.26       0.8     1.95                  0.86  \n",
        "2020-08-13     1.44    2.26       0.8     1.95                  0.86  \n",
        "2020-08-14     1.44    2.26       0.8     1.95                  0.86  \n",
        "2020-08-15     1.44    2.26       0.8     1.95                  0.86  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>0.032101</td>\n",
        "      <td>0.016689</td>\n",
        "      <td>0.011801</td>\n",
        "      <td>0.016311</td>\n",
        "      <td>0.024324</td>\n",
        "      <td>0.00489</td>\n",
        "      <td>0.021451</td>\n",
        "      <td>0.010841</td>\n",
        "      <td>0.013813</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.007941</td>\n",
        "      <td>0.010788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.032101</td>\n",
        "      <td>0.016689</td>\n",
        "      <td>0.011801</td>\n",
        "      <td>0.016311</td>\n",
        "      <td>0.024324</td>\n",
        "      <td>0.00489</td>\n",
        "      <td>0.021451</td>\n",
        "      <td>0.010841</td>\n",
        "      <td>0.013813</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.007941</td>\n",
        "      <td>0.010788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.032101</td>\n",
        "      <td>0.016689</td>\n",
        "      <td>0.011801</td>\n",
        "      <td>0.016311</td>\n",
        "      <td>0.024324</td>\n",
        "      <td>0.00489</td>\n",
        "      <td>0.021451</td>\n",
        "      <td>0.010841</td>\n",
        "      <td>0.013813</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.007941</td>\n",
        "      <td>0.010788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.032101</td>\n",
        "      <td>0.016689</td>\n",
        "      <td>0.011801</td>\n",
        "      <td>0.016311</td>\n",
        "      <td>0.024324</td>\n",
        "      <td>0.00489</td>\n",
        "      <td>0.021451</td>\n",
        "      <td>0.010841</td>\n",
        "      <td>0.013813</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.007941</td>\n",
        "      <td>0.010788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.032101</td>\n",
        "      <td>0.016689</td>\n",
        "      <td>0.011801</td>\n",
        "      <td>0.016311</td>\n",
        "      <td>0.024324</td>\n",
        "      <td>0.00489</td>\n",
        "      <td>0.021451</td>\n",
        "      <td>0.010841</td>\n",
        "      <td>0.013813</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.007941</td>\n",
        "      <td>0.010788</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country      Bahrain    Canada  Czech Republic    Guinea      Iran    Italy  \\\n",
        "Date                                                                          \n",
        "2020-08-11  0.032101  0.016689        0.011801  0.016311  0.024324  0.00489   \n",
        "2020-08-12  0.032101  0.016689        0.011801  0.016311  0.024324  0.00489   \n",
        "2020-08-13  0.032101  0.016689        0.011801  0.016311  0.024324  0.00489   \n",
        "2020-08-14  0.032101  0.016689        0.011801  0.016311  0.024324  0.00489   \n",
        "2020-08-15  0.032101  0.016689        0.011801  0.016311  0.024324  0.00489   \n",
        "\n",
        "Country       Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                           \n",
        "2020-08-11  0.021451  0.010841  0.013813  0.003948  0.007941   \n",
        "2020-08-12  0.021451  0.010841  0.013813  0.003948  0.007941   \n",
        "2020-08-13  0.021451  0.010841  0.013813  0.003948  0.007941   \n",
        "2020-08-14  0.021451  0.010841  0.013813  0.003948  0.007941   \n",
        "2020-08-15  0.021451  0.010841  0.013813  0.003948  0.007941   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-11              0.010788  \n",
        "2020-08-12              0.010788  \n",
        "2020-08-13              0.010788  \n",
        "2020-08-14              0.010788  \n",
        "2020-08-15              0.010788  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>0.025786</td>\n",
        "      <td>0.017663</td>\n",
        "      <td>0.004897</td>\n",
        "      <td>0.031821</td>\n",
        "      <td>0.021134</td>\n",
        "      <td>0.005013</td>\n",
        "      <td>0.021799</td>\n",
        "      <td>0.007292</td>\n",
        "      <td>0.005884</td>\n",
        "      <td>0.00482</td>\n",
        "      <td>0.003947</td>\n",
        "      <td>0.012545</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.025786</td>\n",
        "      <td>0.017663</td>\n",
        "      <td>0.004897</td>\n",
        "      <td>0.031821</td>\n",
        "      <td>0.021134</td>\n",
        "      <td>0.005013</td>\n",
        "      <td>0.021799</td>\n",
        "      <td>0.007292</td>\n",
        "      <td>0.005884</td>\n",
        "      <td>0.00482</td>\n",
        "      <td>0.003947</td>\n",
        "      <td>0.012545</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.025786</td>\n",
        "      <td>0.017663</td>\n",
        "      <td>0.004897</td>\n",
        "      <td>0.031821</td>\n",
        "      <td>0.021134</td>\n",
        "      <td>0.005013</td>\n",
        "      <td>0.021799</td>\n",
        "      <td>0.007292</td>\n",
        "      <td>0.005884</td>\n",
        "      <td>0.00482</td>\n",
        "      <td>0.003947</td>\n",
        "      <td>0.012545</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.025786</td>\n",
        "      <td>0.017663</td>\n",
        "      <td>0.004897</td>\n",
        "      <td>0.031821</td>\n",
        "      <td>0.021134</td>\n",
        "      <td>0.005013</td>\n",
        "      <td>0.021799</td>\n",
        "      <td>0.007292</td>\n",
        "      <td>0.005884</td>\n",
        "      <td>0.00482</td>\n",
        "      <td>0.003947</td>\n",
        "      <td>0.012545</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.025786</td>\n",
        "      <td>0.017663</td>\n",
        "      <td>0.004897</td>\n",
        "      <td>0.031821</td>\n",
        "      <td>0.021134</td>\n",
        "      <td>0.005013</td>\n",
        "      <td>0.021799</td>\n",
        "      <td>0.007292</td>\n",
        "      <td>0.005884</td>\n",
        "      <td>0.00482</td>\n",
        "      <td>0.003947</td>\n",
        "      <td>0.012545</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Bahrain    Canada  Czech Republic    Guinea      Iran     Italy  \\\n",
        "Date                                                                           \n",
        "2020-08-11  0.025786  0.017663        0.004897  0.031821  0.021134  0.005013   \n",
        "2020-08-12  0.025786  0.017663        0.004897  0.031821  0.021134  0.005013   \n",
        "2020-08-13  0.025786  0.017663        0.004897  0.031821  0.021134  0.005013   \n",
        "2020-08-14  0.025786  0.017663        0.004897  0.031821  0.021134  0.005013   \n",
        "2020-08-15  0.025786  0.017663        0.004897  0.031821  0.021134  0.005013   \n",
        "\n",
        "Country       Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                           \n",
        "2020-08-11  0.021799  0.007292  0.005884   0.00482  0.003947   \n",
        "2020-08-12  0.021799  0.007292  0.005884   0.00482  0.003947   \n",
        "2020-08-13  0.021799  0.007292  0.005884   0.00482  0.003947   \n",
        "2020-08-14  0.021799  0.007292  0.005884   0.00482  0.003947   \n",
        "2020-08-15  0.021799  0.007292  0.005884   0.00482  0.003947   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-11              0.012545  \n",
        "2020-08-12              0.012545  \n",
        "2020-08-13              0.012545  \n",
        "2020-08-14              0.012545  \n",
        "2020-08-15              0.012545  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>0.000114</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.000844</td>\n",
        "      <td>0.000138</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000039</td>\n",
        "      <td>0.000041</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.000114</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.000844</td>\n",
        "      <td>0.000138</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000039</td>\n",
        "      <td>0.000041</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.000114</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.000844</td>\n",
        "      <td>0.000138</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000039</td>\n",
        "      <td>0.000041</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.000114</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.000844</td>\n",
        "      <td>0.000138</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000039</td>\n",
        "      <td>0.000041</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.000114</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.000844</td>\n",
        "      <td>0.000138</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000232</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000039</td>\n",
        "      <td>0.000041</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Bahrain    Canada  Czech Republic    Guinea      Iran     Italy  \\\n",
        "Date                                                                           \n",
        "2020-08-11  0.000114  0.000232        0.000084  0.000082  0.000844  0.000138   \n",
        "2020-08-12  0.000114  0.000232        0.000084  0.000082  0.000844  0.000138   \n",
        "2020-08-13  0.000114  0.000232        0.000084  0.000082  0.000844  0.000138   \n",
        "2020-08-14  0.000114  0.000232        0.000084  0.000082  0.000844  0.000138   \n",
        "2020-08-15  0.000114  0.000232        0.000084  0.000082  0.000844  0.000138   \n",
        "\n",
        "Country       Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                           \n",
        "2020-08-11  0.000079  0.000215  0.000232   0.00007  0.000039   \n",
        "2020-08-12  0.000079  0.000215  0.000232   0.00007  0.000039   \n",
        "2020-08-13  0.000079  0.000215  0.000232   0.00007  0.000039   \n",
        "2020-08-14  0.000079  0.000215  0.000232   0.00007  0.000039   \n",
        "2020-08-15  0.000079  0.000215  0.000232   0.00007  0.000039   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-11              0.000041  \n",
        "2020-08-12              0.000041  \n",
        "2020-08-13              0.000041  \n",
        "2020-08-14              0.000041  \n",
        "2020-08-15              0.000041  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>0.000589</td>\n",
        "      <td>0.000197</td>\n",
        "      <td>0.001608</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.042956</td>\n",
        "      <td>0.014624</td>\n",
        "      <td>0.000897</td>\n",
        "      <td>0.001013</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.006226</td>\n",
        "      <td>0.018748</td>\n",
        "      <td>0.000019</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.000589</td>\n",
        "      <td>0.000197</td>\n",
        "      <td>0.001608</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.042956</td>\n",
        "      <td>0.014624</td>\n",
        "      <td>0.000897</td>\n",
        "      <td>0.001013</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.006226</td>\n",
        "      <td>0.018748</td>\n",
        "      <td>0.000019</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.000589</td>\n",
        "      <td>0.000197</td>\n",
        "      <td>0.001608</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.042956</td>\n",
        "      <td>0.014624</td>\n",
        "      <td>0.000897</td>\n",
        "      <td>0.001013</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.006226</td>\n",
        "      <td>0.018748</td>\n",
        "      <td>0.000019</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.000589</td>\n",
        "      <td>0.000197</td>\n",
        "      <td>0.001608</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.042956</td>\n",
        "      <td>0.014624</td>\n",
        "      <td>0.000897</td>\n",
        "      <td>0.001013</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.006226</td>\n",
        "      <td>0.018748</td>\n",
        "      <td>0.000019</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.000589</td>\n",
        "      <td>0.000197</td>\n",
        "      <td>0.001608</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.042956</td>\n",
        "      <td>0.014624</td>\n",
        "      <td>0.000897</td>\n",
        "      <td>0.001013</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.006226</td>\n",
        "      <td>0.018748</td>\n",
        "      <td>0.000019</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Bahrain    Canada  Czech Republic    Guinea      Iran     Italy  \\\n",
        "Date                                                                           \n",
        "2020-08-11  0.000589  0.000197        0.001608  0.001267  0.042956  0.014624   \n",
        "2020-08-12  0.000589  0.000197        0.001608  0.001267  0.042956  0.014624   \n",
        "2020-08-13  0.000589  0.000197        0.001608  0.001267  0.042956  0.014624   \n",
        "2020-08-14  0.000589  0.000197        0.001608  0.001267  0.042956  0.014624   \n",
        "2020-08-15  0.000589  0.000197        0.001608  0.001267  0.042956  0.014624   \n",
        "\n",
        "Country       Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                           \n",
        "2020-08-11  0.000897  0.001013  0.000122  0.006226  0.018748   \n",
        "2020-08-12  0.000897  0.001013  0.000122  0.006226  0.018748   \n",
        "2020-08-13  0.000897  0.001013  0.000122  0.006226  0.018748   \n",
        "2020-08-14  0.000897  0.001013  0.000122  0.006226  0.018748   \n",
        "2020-08-15  0.000897  0.001013  0.000122  0.006226  0.018748   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-11              0.000019  \n",
        "2020-08-12              0.000019  \n",
        "2020-08-13              0.000019  \n",
        "2020-08-14              0.000019  \n",
        "2020-08-15              0.000019  "
       ]
      }
     ],
     "prompt_number": 17
    }
   ],
   "metadata": {}
  }
 ]
}
