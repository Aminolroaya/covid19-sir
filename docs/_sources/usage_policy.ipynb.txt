{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1596469977201"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-zeta.new.72.fix.120.155.157.163.164.165.174'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "185"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "8"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahrain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Romania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Senegal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Iran']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>03May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>19May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>12Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jun2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>13Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269\n",
        "        2nd    Past  13Apr2020  03May2020    81800269\n",
        "        3rd    Past  04May2020  19May2020    81800269\n",
        "        4th    Past  20May2020  01Jun2020    81800269\n",
        "        5th    Past  02Jun2020  12Jun2020    81800269\n",
        "        6th    Past  13Jun2020  22Jun2020    81800269\n",
        "        7th    Past  23Jun2020  02Jul2020    81800269\n",
        "        8th    Past  03Jul2020  13Jul2020    81800269\n",
        "        9th    Past  14Jul2020  24Jul2020    81800269\n",
        "        10th   Past  25Jul2020  07Aug2020    81800269"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Poland--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 657 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 649 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 441 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 920 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 488 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 1644 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 1633 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 824 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 1196 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 31 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Bahrain--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 1427 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 1639 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 1656 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 321 trials in 1 min 6 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 665 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 1672 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 1176 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 1694 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 1681 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 2 min 7 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Romania--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 422 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 925 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 637 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 502 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 1317 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 510 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 1634 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 1676 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 1695 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 51 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Moldova--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 434 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 622 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 630 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 339 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 673 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 678 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 1621 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 1136 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Canada--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 295 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 663 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 337 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 329 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 557 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 1662 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 1675 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 1456 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 1628 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 42 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Iran--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 756 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 678 trials in 0 min 26 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 1594 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 1627 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 326 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t10th phase with SIR-F model: finished 648 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 1679 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 1205 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 27 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------United Arab Emirates--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 957 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 1196 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 497 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 1586 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 1611 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 1035 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 814 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 1540 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 1446 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 2 min 1 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Senegal--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 892 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 1157 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 1339 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 1113 trials in 1 min 1 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 784 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model: finished 678 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 789 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 1440 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model: finished 1615 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 2 min 22 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>tau</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>Rt</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>144</td>\n",
        "      <td>0.008718</td>\n",
        "      <td>0.007258</td>\n",
        "      <td>0.051556</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.052</td>\n",
        "      <td>857</td>\n",
        "      <td>11</td>\n",
        "      <td>13</td>\n",
        "      <td>0.254163</td>\n",
        "      <td>1594</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>03May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.023721</td>\n",
        "      <td>0.031794</td>\n",
        "      <td>0.064299</td>\n",
        "      <td>0.000076</td>\n",
        "      <td>0.70</td>\n",
        "      <td>0.064</td>\n",
        "      <td>4367</td>\n",
        "      <td>14</td>\n",
        "      <td>10</td>\n",
        "      <td>0.027063</td>\n",
        "      <td>678</td>\n",
        "      <td>0 min 26 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>19May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.053753</td>\n",
        "      <td>0.037616</td>\n",
        "      <td>0.020004</td>\n",
        "      <td>0.000610</td>\n",
        "      <td>1.38</td>\n",
        "      <td>0.020</td>\n",
        "      <td>820</td>\n",
        "      <td>9</td>\n",
        "      <td>13</td>\n",
        "      <td>0.021897</td>\n",
        "      <td>756</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.032439</td>\n",
        "      <td>0.026468</td>\n",
        "      <td>0.016752</td>\n",
        "      <td>0.000266</td>\n",
        "      <td>1.19</td>\n",
        "      <td>0.017</td>\n",
        "      <td>1252</td>\n",
        "      <td>10</td>\n",
        "      <td>12</td>\n",
        "      <td>0.012907</td>\n",
        "      <td>1627</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>12Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.040844</td>\n",
        "      <td>0.035949</td>\n",
        "      <td>0.001168</td>\n",
        "      <td>0.000008</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.001</td>\n",
        "      <td>62987</td>\n",
        "      <td>12</td>\n",
        "      <td>13</td>\n",
        "      <td>0.049002</td>\n",
        "      <td>1679</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>90</td>\n",
        "      <td>0.005054</td>\n",
        "      <td>0.004342</td>\n",
        "      <td>0.001399</td>\n",
        "      <td>0.000242</td>\n",
        "      <td>1.10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>257</td>\n",
        "      <td>12</td>\n",
        "      <td>14</td>\n",
        "      <td>0.014452</td>\n",
        "      <td>336</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jun2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.087874</td>\n",
        "      <td>0.096559</td>\n",
        "      <td>0.032817</td>\n",
        "      <td>0.001393</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.033</td>\n",
        "      <td>717</td>\n",
        "      <td>11</td>\n",
        "      <td>10</td>\n",
        "      <td>0.007823</td>\n",
        "      <td>336</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>13Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>240</td>\n",
        "      <td>0.015292</td>\n",
        "      <td>0.016440</td>\n",
        "      <td>0.018210</td>\n",
        "      <td>0.000922</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.018</td>\n",
        "      <td>180</td>\n",
        "      <td>10</td>\n",
        "      <td>10</td>\n",
        "      <td>0.014793</td>\n",
        "      <td>1205</td>\n",
        "      <td>0 min 40 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>360</td>\n",
        "      <td>0.026709</td>\n",
        "      <td>0.026533</td>\n",
        "      <td>0.083843</td>\n",
        "      <td>0.000252</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.084</td>\n",
        "      <td>992</td>\n",
        "      <td>9</td>\n",
        "      <td>9</td>\n",
        "      <td>0.016925</td>\n",
        "      <td>326</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.035963</td>\n",
        "      <td>0.029566</td>\n",
        "      <td>0.075517</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.076</td>\n",
        "      <td>2489</td>\n",
        "      <td>9</td>\n",
        "      <td>11</td>\n",
        "      <td>0.012792</td>\n",
        "      <td>648</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "               Type      Start        End  Population    ODE   tau       rho  \\\n",
        "Country Phase                                                                  \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269  SIR-F   144  0.008718   \n",
        "        2nd    Past  13Apr2020  03May2020    81800269  SIR-F   480  0.023721   \n",
        "        3rd    Past  04May2020  19May2020    81800269  SIR-F   720  0.053753   \n",
        "        4th    Past  20May2020  01Jun2020    81800269  SIR-F   480  0.032439   \n",
        "        5th    Past  02Jun2020  12Jun2020    81800269  SIR-F   720  0.040844   \n",
        "        6th    Past  13Jun2020  22Jun2020    81800269  SIR-F    90  0.005054   \n",
        "        7th    Past  23Jun2020  02Jul2020    81800269  SIR-F  1440  0.087874   \n",
        "        8th    Past  03Jul2020  13Jul2020    81800269  SIR-F   240  0.015292   \n",
        "        9th    Past  14Jul2020  24Jul2020    81800269  SIR-F   360  0.026709   \n",
        "        10th   Past  25Jul2020  07Aug2020    81800269  SIR-F   480  0.035963   \n",
        "\n",
        "                  sigma     theta     kappa    Rt  alpha1 [-]  1/alpha2 [day]  \\\n",
        "Country Phase                                                                   \n",
        "Iran    1st    0.007258  0.051556  0.000117  1.12       0.052             857   \n",
        "        2nd    0.031794  0.064299  0.000076  0.70       0.064            4367   \n",
        "        3rd    0.037616  0.020004  0.000610  1.38       0.020             820   \n",
        "        4th    0.026468  0.016752  0.000266  1.19       0.017            1252   \n",
        "        5th    0.035949  0.001168  0.000008  1.13       0.001           62987   \n",
        "        6th    0.004342  0.001399  0.000242  1.10       0.001             257   \n",
        "        7th    0.096559  0.032817  0.001393  0.87       0.033             717   \n",
        "        8th    0.016440  0.018210  0.000922  0.86       0.018             180   \n",
        "        9th    0.026533  0.083843  0.000252  0.91       0.084             992   \n",
        "        10th   0.029566  0.075517  0.000134  1.12       0.076            2489   \n",
        "\n",
        "               1/beta [day]  1/gamma [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                               \n",
        "Iran    1st              11             13  0.254163    1594   1 min 0 sec  \n",
        "        2nd              14             10  0.027063     678  0 min 26 sec  \n",
        "        3rd               9             13  0.021897     756  0 min 25 sec  \n",
        "        4th              10             12  0.012907    1627   1 min 0 sec  \n",
        "        5th              12             13  0.049002    1679   1 min 0 sec  \n",
        "        6th              12             14  0.014452     336  0 min 10 sec  \n",
        "        7th              11             10  0.007823     336  0 min 10 sec  \n",
        "        8th              10             10  0.014793    1205  0 min 40 sec  \n",
        "        9th               9              9  0.016925     326  0 min 10 sec  \n",
        "        10th              9             11  0.012792     648  0 min 20 sec  "
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-03</th>\n",
        "      <td>0.89</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.12</td>\n",
        "      <td>1.53</td>\n",
        "      <td>1.66</td>\n",
        "      <td>3.74</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.82</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-04</th>\n",
        "      <td>0.89</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.12</td>\n",
        "      <td>1.53</td>\n",
        "      <td>1.66</td>\n",
        "      <td>3.74</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.82</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-05</th>\n",
        "      <td>0.89</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.12</td>\n",
        "      <td>1.53</td>\n",
        "      <td>1.66</td>\n",
        "      <td>3.74</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.82</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-06</th>\n",
        "      <td>0.89</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.12</td>\n",
        "      <td>1.53</td>\n",
        "      <td>1.66</td>\n",
        "      <td>3.74</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.82</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-07</th>\n",
        "      <td>0.89</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.12</td>\n",
        "      <td>1.53</td>\n",
        "      <td>1.66</td>\n",
        "      <td>3.74</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.82</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "Country     Bahrain  Canada  Iran  Moldova  Poland  Romania  Senegal  \\\n",
        "Date                                                                   \n",
        "2020-08-03     0.89     1.3  1.12     1.53    1.66     3.74     1.39   \n",
        "2020-08-04     0.89     1.3  1.12     1.53    1.66     3.74     1.39   \n",
        "2020-08-05     0.89     1.3  1.12     1.53    1.66     3.74     1.39   \n",
        "2020-08-06     0.89     1.3  1.12     1.53    1.66     3.74     1.39   \n",
        "2020-08-07     0.89     1.3  1.12     1.53    1.66     3.74     1.39   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-03                  0.82  \n",
        "2020-08-04                  0.82  \n",
        "2020-08-05                  0.82  \n",
        "2020-08-06                  0.82  \n",
        "2020-08-07                  0.82  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-03</th>\n",
        "      <td>0.056263</td>\n",
        "      <td>0.004194</td>\n",
        "      <td>0.035963</td>\n",
        "      <td>0.021508</td>\n",
        "      <td>0.00854</td>\n",
        "      <td>0.01765</td>\n",
        "      <td>0.022832</td>\n",
        "      <td>0.005681</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-04</th>\n",
        "      <td>0.056263</td>\n",
        "      <td>0.004194</td>\n",
        "      <td>0.035963</td>\n",
        "      <td>0.021508</td>\n",
        "      <td>0.00854</td>\n",
        "      <td>0.01765</td>\n",
        "      <td>0.022832</td>\n",
        "      <td>0.005681</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-05</th>\n",
        "      <td>0.056263</td>\n",
        "      <td>0.004194</td>\n",
        "      <td>0.035963</td>\n",
        "      <td>0.021508</td>\n",
        "      <td>0.00854</td>\n",
        "      <td>0.01765</td>\n",
        "      <td>0.022832</td>\n",
        "      <td>0.005681</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-06</th>\n",
        "      <td>0.056263</td>\n",
        "      <td>0.004194</td>\n",
        "      <td>0.035963</td>\n",
        "      <td>0.021508</td>\n",
        "      <td>0.00854</td>\n",
        "      <td>0.01765</td>\n",
        "      <td>0.022832</td>\n",
        "      <td>0.005681</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-07</th>\n",
        "      <td>0.056263</td>\n",
        "      <td>0.004194</td>\n",
        "      <td>0.035963</td>\n",
        "      <td>0.021508</td>\n",
        "      <td>0.00854</td>\n",
        "      <td>0.01765</td>\n",
        "      <td>0.022832</td>\n",
        "      <td>0.005681</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "Country      Bahrain    Canada      Iran   Moldova   Poland  Romania  \\\n",
        "Date                                                                   \n",
        "2020-08-03  0.056263  0.004194  0.035963  0.021508  0.00854  0.01765   \n",
        "2020-08-04  0.056263  0.004194  0.035963  0.021508  0.00854  0.01765   \n",
        "2020-08-05  0.056263  0.004194  0.035963  0.021508  0.00854  0.01765   \n",
        "2020-08-06  0.056263  0.004194  0.035963  0.021508  0.00854  0.01765   \n",
        "2020-08-07  0.056263  0.004194  0.035963  0.021508  0.00854  0.01765   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-03  0.022832              0.005681  \n",
        "2020-08-04  0.022832              0.005681  \n",
        "2020-08-05  0.022832              0.005681  \n",
        "2020-08-06  0.022832              0.005681  \n",
        "2020-08-07  0.022832              0.005681  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-03</th>\n",
        "      <td>0.062794</td>\n",
        "      <td>0.003122</td>\n",
        "      <td>0.029566</td>\n",
        "      <td>0.013609</td>\n",
        "      <td>0.005061</td>\n",
        "      <td>0.004419</td>\n",
        "      <td>0.015842</td>\n",
        "      <td>0.006881</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-04</th>\n",
        "      <td>0.062794</td>\n",
        "      <td>0.003122</td>\n",
        "      <td>0.029566</td>\n",
        "      <td>0.013609</td>\n",
        "      <td>0.005061</td>\n",
        "      <td>0.004419</td>\n",
        "      <td>0.015842</td>\n",
        "      <td>0.006881</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-05</th>\n",
        "      <td>0.062794</td>\n",
        "      <td>0.003122</td>\n",
        "      <td>0.029566</td>\n",
        "      <td>0.013609</td>\n",
        "      <td>0.005061</td>\n",
        "      <td>0.004419</td>\n",
        "      <td>0.015842</td>\n",
        "      <td>0.006881</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-06</th>\n",
        "      <td>0.062794</td>\n",
        "      <td>0.003122</td>\n",
        "      <td>0.029566</td>\n",
        "      <td>0.013609</td>\n",
        "      <td>0.005061</td>\n",
        "      <td>0.004419</td>\n",
        "      <td>0.015842</td>\n",
        "      <td>0.006881</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-07</th>\n",
        "      <td>0.062794</td>\n",
        "      <td>0.003122</td>\n",
        "      <td>0.029566</td>\n",
        "      <td>0.013609</td>\n",
        "      <td>0.005061</td>\n",
        "      <td>0.004419</td>\n",
        "      <td>0.015842</td>\n",
        "      <td>0.006881</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country      Bahrain    Canada      Iran   Moldova    Poland   Romania  \\\n",
        "Date                                                                     \n",
        "2020-08-03  0.062794  0.003122  0.029566  0.013609  0.005061  0.004419   \n",
        "2020-08-04  0.062794  0.003122  0.029566  0.013609  0.005061  0.004419   \n",
        "2020-08-05  0.062794  0.003122  0.029566  0.013609  0.005061  0.004419   \n",
        "2020-08-06  0.062794  0.003122  0.029566  0.013609  0.005061  0.004419   \n",
        "2020-08-07  0.062794  0.003122  0.029566  0.013609  0.005061  0.004419   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-03  0.015842              0.006881  \n",
        "2020-08-04  0.015842              0.006881  \n",
        "2020-08-05  0.015842              0.006881  \n",
        "2020-08-06  0.015842              0.006881  \n",
        "2020-08-07  0.015842              0.006881  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-03</th>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.0001</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000085</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000573</td>\n",
        "      <td>0.00004</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-04</th>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.0001</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000085</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000573</td>\n",
        "      <td>0.00004</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-05</th>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.0001</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000085</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000573</td>\n",
        "      <td>0.00004</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-06</th>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.0001</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000085</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000573</td>\n",
        "      <td>0.00004</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-07</th>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.0001</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.000085</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000573</td>\n",
        "      <td>0.00004</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Bahrain  Canada      Iran  Moldova    Poland   Romania   Senegal  \\\n",
        "Date                                                                            \n",
        "2020-08-03  0.000154  0.0001  0.000134  0.00006  0.000085  0.000223  0.000573   \n",
        "2020-08-04  0.000154  0.0001  0.000134  0.00006  0.000085  0.000223  0.000573   \n",
        "2020-08-05  0.000154  0.0001  0.000134  0.00006  0.000085  0.000223  0.000573   \n",
        "2020-08-06  0.000154  0.0001  0.000134  0.00006  0.000085  0.000223  0.000573   \n",
        "2020-08-07  0.000154  0.0001  0.000134  0.00006  0.000085  0.000223  0.000573   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-03               0.00004  \n",
        "2020-08-04               0.00004  \n",
        "2020-08-05               0.00004  \n",
        "2020-08-06               0.00004  \n",
        "2020-08-07               0.00004  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-03</th>\n",
        "      <td>0.000836</td>\n",
        "      <td>0.000269</td>\n",
        "      <td>0.075517</td>\n",
        "      <td>0.026597</td>\n",
        "      <td>0.000169</td>\n",
        "      <td>0.015287</td>\n",
        "      <td>0.000302</td>\n",
        "      <td>0.000815</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-04</th>\n",
        "      <td>0.000836</td>\n",
        "      <td>0.000269</td>\n",
        "      <td>0.075517</td>\n",
        "      <td>0.026597</td>\n",
        "      <td>0.000169</td>\n",
        "      <td>0.015287</td>\n",
        "      <td>0.000302</td>\n",
        "      <td>0.000815</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-05</th>\n",
        "      <td>0.000836</td>\n",
        "      <td>0.000269</td>\n",
        "      <td>0.075517</td>\n",
        "      <td>0.026597</td>\n",
        "      <td>0.000169</td>\n",
        "      <td>0.015287</td>\n",
        "      <td>0.000302</td>\n",
        "      <td>0.000815</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-06</th>\n",
        "      <td>0.000836</td>\n",
        "      <td>0.000269</td>\n",
        "      <td>0.075517</td>\n",
        "      <td>0.026597</td>\n",
        "      <td>0.000169</td>\n",
        "      <td>0.015287</td>\n",
        "      <td>0.000302</td>\n",
        "      <td>0.000815</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-07</th>\n",
        "      <td>0.000836</td>\n",
        "      <td>0.000269</td>\n",
        "      <td>0.075517</td>\n",
        "      <td>0.026597</td>\n",
        "      <td>0.000169</td>\n",
        "      <td>0.015287</td>\n",
        "      <td>0.000302</td>\n",
        "      <td>0.000815</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Bahrain    Canada      Iran   Moldova    Poland   Romania  \\\n",
        "Date                                                                     \n",
        "2020-08-03  0.000836  0.000269  0.075517  0.026597  0.000169  0.015287   \n",
        "2020-08-04  0.000836  0.000269  0.075517  0.026597  0.000169  0.015287   \n",
        "2020-08-05  0.000836  0.000269  0.075517  0.026597  0.000169  0.015287   \n",
        "2020-08-06  0.000836  0.000269  0.075517  0.026597  0.000169  0.015287   \n",
        "2020-08-07  0.000836  0.000269  0.075517  0.026597  0.000169  0.015287   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-03  0.000302              0.000815  \n",
        "2020-08-04  0.000302              0.000815  \n",
        "2020-08-05  0.000302              0.000815  \n",
        "2020-08-06  0.000302              0.000815  \n",
        "2020-08-07  0.000302              0.000815  "
       ]
      }
     ],
     "prompt_number": 16
    }
   ],
   "metadata": {}
  }
 ]
}
