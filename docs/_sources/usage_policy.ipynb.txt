{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.12.0-rho.new.339.357.359.362.366.367.383.fix.360.373'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "196"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **16th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{2: ['Solomon Islands', 'Holy See', 'Timor-Leste'],\n",
        " 3: ['Laos', 'Tanzania', 'Saint Kitts and Nevis'],\n",
        " 4: ['Grenada', 'Dominica', 'Saint Lucia', 'Brunei'],\n",
        " 5: ['Fiji', 'Equatorial Guinea'],\n",
        " 6: ['Antigua and Barbuda', 'Saint Vincent and the Grenadines', 'Mauritius'],\n",
        " 7: ['Northern Mariana Islands', 'Gambia'],\n",
        " 8: ['Monaco', 'Liechtenstein', 'Barbados', 'Virgin Islands, U.S.', 'Lesotho',\n",
        "     'Seychelles', 'Malawi', 'Vietnam', 'Cambodia', 'Kyrgyzstan', 'Bahamas',\n",
        "     'Trinidad and Tobago', 'Madagascar'],\n",
        " 9: ['Burundi', 'Benin', 'Guyana', 'Ghana', 'Djibouti', 'Australia',\n",
        "     'Swaziland', 'Zimbabwe', 'Venezuela', 'Uzbekistan', 'Zambia', 'Senegal',\n",
        "     'Oman', 'Suriname', 'Bolivia', 'South Africa', 'Kazakhstan', 'Bhutan',\n",
        "     'Namibia', 'Republic of the Congo', 'Sao Tome and Principe'],\n",
        " 10: ['Syria', 'Central African Republic', 'Israel', 'Libya', 'Kuwait',\n",
        "      'Belize', 'Botswana', 'Guatemala', 'Myanmar', 'El Salvador', 'Egypt',\n",
        "      'Honduras', 'New Zealand', 'Guam', 'Philippines', 'Bahrain', 'Comoros',\n",
        "      \"Cote d'Ivoire\", 'Chile', 'Saudi Arabia', 'Nigeria', 'Jamaica', 'Peru',\n",
        "      'Colombia', 'Papua New Guinea', 'Mongolia', 'Eritrea', 'Rwanda',\n",
        "      'Singapore', 'Gabon', 'Ethiopia', 'Brazil', 'Maldives', 'Liberia',\n",
        "      'Bermuda', 'Mozambique'],\n",
        " 11: ['Mexico', 'Panama', 'Togo', 'Kenya', 'Iraq', 'Nicaragua', 'Taiwan',\n",
        "      'Sierra Leone', 'Pakistan', 'Andorra', 'Paraguay', 'Yemen', 'Puerto Rico',\n",
        "      'Guinea-Bissau', 'Argentina', 'Costa Rica', 'Dominican Republic',\n",
        "      'Cameroon', 'Guinea', 'Algeria', 'Ecuador', 'Kosovo', 'Sudan',\n",
        "      'Cape Verde', 'India', 'Bangladesh', 'Chad', 'Angola'],\n",
        " 12: ['Qatar', 'Tajikistan', 'Nepal', 'Haiti', 'Jordan', 'Serbia', 'Georgia',\n",
        "      'Iceland', 'Democratic Republic of the Congo', 'Croatia', 'Palestine',\n",
        "      'San Marino', 'Cuba', 'United Arab Emirates', 'South Sudan', 'Azerbaijan',\n",
        "      'Niger', 'Tunisia', 'Japan', 'Uganda', 'Sri Lanka', 'Uruguay'],\n",
        " 13: ['Ireland', 'Cyprus', 'Latvia', 'Bosnia and Herzegovina', 'Bulgaria',\n",
        "      'Moldova', 'Czech Republic', 'Burkina Faso', 'Luxembourg', 'China',\n",
        "      'United States', 'Hungary', 'Belarus', 'Montenegro', 'Armenia',\n",
        "      'Mauritania', 'Slovenia', 'Malta', 'Russia', 'Mali', 'Indonesia',\n",
        "      'Slovakia', 'Afghanistan'],\n",
        " 14: ['Iran', 'Poland', 'Somalia', 'Greece', 'Albania', 'Spain', 'Thailand',\n",
        "      'Malaysia', 'Morocco', 'North Macedonia', 'Lithuania', 'Estonia',\n",
        "      'Turkey'],\n",
        " 15: ['United Kingdom', 'Lebanon', 'Netherlands', 'Belgium', 'Austria',\n",
        "      'Canada', 'Ukraine', 'Germany', 'Denmark', 'Portugal', 'Italy', 'Sweden',\n",
        "      'Finland', 'Norway', 'Switzerland'],\n",
        " 16: ['Romania'],\n",
        " 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=16)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "2"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{16: ['Romania'], 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>26Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Aug2020</td>\n",
        "      <td>07Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Sep2020</td>\n",
        "      <td>16Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>06Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "France  0th    Past  07Feb2020  28Mar2020    66977107\n",
        "        1st    Past  29Mar2020  12Apr2020    66977107\n",
        "        2nd    Past  13Apr2020  28May2020    66977107\n",
        "        3rd    Past  29May2020  05Aug2020    66977107\n",
        "        4th    Past  06Aug2020  26Aug2020    66977107\n",
        "        5th    Past  27Aug2020  07Sep2020    66977107\n",
        "        6th    Past  08Sep2020  16Sep2020    66977107\n",
        "        7th    Past  17Sep2020  23Sep2020    66977107\n",
        "        8th    Past  24Sep2020  01Oct2020    66977107\n",
        "        9th    Past  02Oct2020  08Oct2020    66977107\n",
        "        10th   Past  09Oct2020  15Oct2020    66977107\n",
        "        11th   Past  16Oct2020  21Oct2020    66977107\n",
        "        12th   Past  22Oct2020  31Oct2020    66977107\n",
        "        13th   Past  01Nov2020  10Nov2020    66977107\n",
        "        14th   Past  11Nov2020  16Nov2020    66977107\n",
        "        15th   Past  17Nov2020  24Nov2020    66977107\n",
        "        16th   Past  25Nov2020  06Dec2020    66977107"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF, timeout=10)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>\n",
        "Running optimization with 4 CPUs...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  5th phase (29Aug2020 - 15Sep2020): finished  363 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (29May2020 - 05Aug2020): finished  348 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 13th phase (01Nov2020 - 10Nov2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (24Sep2020 - 01Oct2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 14th phase (24Nov2020 - 29Nov2020): finished  366 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (06Aug2020 - 26Aug2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 16th phase (25Nov2020 - 06Dec2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 14th phase (11Nov2020 - 16Nov2020): finished  364 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (13Apr2020 - 28May2020): finished  351 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 15th phase (17Nov2020 - 24Nov2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 15th phase (30Nov2020 - 06Dec2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 13th phase (18Nov2020 - 23Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  1st phase (26Apr2020 - 25Jun2020): finished  350 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  0th phase (05Mar2020 - 25Apr2020): finished  349 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 10th phase (29Oct2020 - 04Nov2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  6th phase (16Sep2020 - 01Oct2020): finished  364 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (17Sep2020 - 23Sep2020): finished  347 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (02Oct2020 - 08Oct2020): finished  341 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 11th phase (16Oct2020 - 21Oct2020): finished  345 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (29Mar2020 - 12Apr2020): finished  325 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (27Aug2020 - 07Sep2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (09Oct2020 - 15Oct2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (07Feb2020 - 28Mar2020): finished  349 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  4th phase (11Aug2020 - 28Aug2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 11th phase (05Nov2020 - 11Nov2020): finished  374 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  3rd phase (24Jul2020 - 10Aug2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  8th phase (13Oct2020 - 20Oct2020): finished  374 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 12th phase (12Nov2020 - 17Nov2020): finished  375 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 12th phase (22Oct2020 - 31Oct2020): finished  372 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (08Sep2020 - 16Sep2020): finished  374 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  2nd phase (26Jun2020 - 23Jul2020): finished  366 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  7th phase (02Oct2020 - 12Oct2020): finished  370 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  9th phase (21Oct2020 - 28Oct2020): finished  375 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 37 sec\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>10.59</td>\n",
        "      <td>0.000282</td>\n",
        "      <td>0.000080</td>\n",
        "      <td>0.042663</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>3124</td>\n",
        "      <td>5</td>\n",
        "      <td>63</td>\n",
        "      <td>1.147923</td>\n",
        "      <td>349</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.061692</td>\n",
        "      <td>0.000899</td>\n",
        "      <td>0.029330</td>\n",
        "      <td>0.013738</td>\n",
        "      <td>360</td>\n",
        "      <td>0.062</td>\n",
        "      <td>278</td>\n",
        "      <td>8</td>\n",
        "      <td>18</td>\n",
        "      <td>1.428310</td>\n",
        "      <td>325</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.59</td>\n",
        "      <td>0.263792</td>\n",
        "      <td>0.000486</td>\n",
        "      <td>0.023307</td>\n",
        "      <td>0.028831</td>\n",
        "      <td>360</td>\n",
        "      <td>0.264</td>\n",
        "      <td>513</td>\n",
        "      <td>10</td>\n",
        "      <td>8</td>\n",
        "      <td>0.140439</td>\n",
        "      <td>351</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.08</td>\n",
        "      <td>0.125108</td>\n",
        "      <td>0.000843</td>\n",
        "      <td>0.021939</td>\n",
        "      <td>0.016882</td>\n",
        "      <td>360</td>\n",
        "      <td>0.125</td>\n",
        "      <td>296</td>\n",
        "      <td>11</td>\n",
        "      <td>14</td>\n",
        "      <td>0.146599</td>\n",
        "      <td>348</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>26Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.72</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.029559</td>\n",
        "      <td>0.017016</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1641</td>\n",
        "      <td>8</td>\n",
        "      <td>14</td>\n",
        "      <td>0.034941</td>\n",
        "      <td>361</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Aug2020</td>\n",
        "      <td>07Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000433</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.026896</td>\n",
        "      <td>0.012698</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>2549</td>\n",
        "      <td>9</td>\n",
        "      <td>19</td>\n",
        "      <td>0.029504</td>\n",
        "      <td>365</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Sep2020</td>\n",
        "      <td>16Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.004030</td>\n",
        "      <td>0.000048</td>\n",
        "      <td>0.026168</td>\n",
        "      <td>0.016881</td>\n",
        "      <td>360</td>\n",
        "      <td>0.004</td>\n",
        "      <td>5171</td>\n",
        "      <td>9</td>\n",
        "      <td>14</td>\n",
        "      <td>0.019581</td>\n",
        "      <td>374</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.028003</td>\n",
        "      <td>0.018062</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1650</td>\n",
        "      <td>8</td>\n",
        "      <td>13</td>\n",
        "      <td>0.025541</td>\n",
        "      <td>347</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.45</td>\n",
        "      <td>0.018035</td>\n",
        "      <td>0.000070</td>\n",
        "      <td>0.024123</td>\n",
        "      <td>0.016247</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>3586</td>\n",
        "      <td>10</td>\n",
        "      <td>15</td>\n",
        "      <td>0.039605</td>\n",
        "      <td>367</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.000569</td>\n",
        "      <td>0.000426</td>\n",
        "      <td>0.028723</td>\n",
        "      <td>0.023946</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>586</td>\n",
        "      <td>8</td>\n",
        "      <td>10</td>\n",
        "      <td>0.033326</td>\n",
        "      <td>341</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.68</td>\n",
        "      <td>0.000130</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.025418</td>\n",
        "      <td>0.014956</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1486</td>\n",
        "      <td>9</td>\n",
        "      <td>16</td>\n",
        "      <td>0.034461</td>\n",
        "      <td>365</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.89</td>\n",
        "      <td>0.000130</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.027840</td>\n",
        "      <td>0.014528</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1488</td>\n",
        "      <td>8</td>\n",
        "      <td>17</td>\n",
        "      <td>0.031188</td>\n",
        "      <td>345</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.52</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>0.028712</td>\n",
        "      <td>0.011235</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>1666</td>\n",
        "      <td>8</td>\n",
        "      <td>22</td>\n",
        "      <td>0.044265</td>\n",
        "      <td>372</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.37</td>\n",
        "      <td>0.000202</td>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.025695</td>\n",
        "      <td>0.018538</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>974</td>\n",
        "      <td>9</td>\n",
        "      <td>13</td>\n",
        "      <td>0.026715</td>\n",
        "      <td>367</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.65</td>\n",
        "      <td>0.001978</td>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.013372</td>\n",
        "      <td>0.020379</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>1289</td>\n",
        "      <td>18</td>\n",
        "      <td>12</td>\n",
        "      <td>0.010552</td>\n",
        "      <td>364</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.41</td>\n",
        "      <td>0.000574</td>\n",
        "      <td>0.000426</td>\n",
        "      <td>0.013244</td>\n",
        "      <td>0.031996</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>586</td>\n",
        "      <td>18</td>\n",
        "      <td>7</td>\n",
        "      <td>0.029266</td>\n",
        "      <td>367</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>06Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.50</td>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.035030</td>\n",
        "      <td>360</td>\n",
        "      <td>0.030</td>\n",
        "      <td>5146</td>\n",
        "      <td>13</td>\n",
        "      <td>7</td>\n",
        "      <td>0.047743</td>\n",
        "      <td>362</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE     Rt     theta  \\\n",
        "Country Phase                                                                   \n",
        "France  0th    Past  07Feb2020  28Mar2020    66977107  SIR-F  10.59  0.000282   \n",
        "        1st    Past  29Mar2020  12Apr2020    66977107  SIR-F   1.88  0.061692   \n",
        "        2nd    Past  13Apr2020  28May2020    66977107  SIR-F   0.59  0.263792   \n",
        "        3rd    Past  29May2020  05Aug2020    66977107  SIR-F   1.08  0.125108   \n",
        "        4th    Past  06Aug2020  26Aug2020    66977107  SIR-F   1.72  0.000066   \n",
        "        5th    Past  27Aug2020  07Sep2020    66977107  SIR-F   2.10  0.000433   \n",
        "        6th    Past  08Sep2020  16Sep2020    66977107  SIR-F   1.54  0.004030   \n",
        "        7th    Past  17Sep2020  23Sep2020    66977107  SIR-F   1.54  0.000066   \n",
        "        8th    Past  24Sep2020  01Oct2020    66977107  SIR-F   1.45  0.018035   \n",
        "        9th    Past  02Oct2020  08Oct2020    66977107  SIR-F   1.18  0.000569   \n",
        "        10th   Past  09Oct2020  15Oct2020    66977107  SIR-F   1.68  0.000130   \n",
        "        11th   Past  16Oct2020  21Oct2020    66977107  SIR-F   1.89  0.000130   \n",
        "        12th   Past  22Oct2020  31Oct2020    66977107  SIR-F   2.52  0.001843   \n",
        "        13th   Past  01Nov2020  10Nov2020    66977107  SIR-F   1.37  0.000202   \n",
        "        14th   Past  11Nov2020  16Nov2020    66977107  SIR-F   0.65  0.001978   \n",
        "        15th   Past  17Nov2020  24Nov2020    66977107  SIR-F   0.41  0.000574   \n",
        "        16th   Past  25Nov2020  06Dec2020    66977107  SIR-F   0.50  0.030038   \n",
        "\n",
        "                  kappa       rho     sigma  tau  alpha1 [-]  1/alpha2 [day]  \\\n",
        "Country Phase                                                                  \n",
        "France  0th    0.000080  0.042663  0.003948  360       0.000            3124   \n",
        "        1st    0.000899  0.029330  0.013738  360       0.062             278   \n",
        "        2nd    0.000486  0.023307  0.028831  360       0.264             513   \n",
        "        3rd    0.000843  0.021939  0.016882  360       0.125             296   \n",
        "        4th    0.000152  0.029559  0.017016  360       0.000            1641   \n",
        "        5th    0.000098  0.026896  0.012698  360       0.000            2549   \n",
        "        6th    0.000048  0.026168  0.016881  360       0.004            5171   \n",
        "        7th    0.000151  0.028003  0.018062  360       0.000            1650   \n",
        "        8th    0.000070  0.024123  0.016247  360       0.018            3586   \n",
        "        9th    0.000426  0.028723  0.023946  360       0.001             586   \n",
        "        10th   0.000168  0.025418  0.014956  360       0.000            1486   \n",
        "        11th   0.000168  0.027840  0.014528  360       0.000            1488   \n",
        "        12th   0.000150  0.028712  0.011235  360       0.002            1666   \n",
        "        13th   0.000257  0.025695  0.018538  360       0.000             974   \n",
        "        14th   0.000194  0.013372  0.020379  360       0.002            1289   \n",
        "        15th   0.000426  0.013244  0.031996  360       0.001             586   \n",
        "        16th   0.000049  0.018128  0.035030  360       0.030            5146   \n",
        "\n",
        "               1/beta [day]  1/gamma [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                               \n",
        "France  0th               5             63  1.147923     349  0 min 10 sec  \n",
        "        1st               8             18  1.428310     325  0 min 10 sec  \n",
        "        2nd              10              8  0.140439     351  0 min 10 sec  \n",
        "        3rd              11             14  0.146599     348  0 min 10 sec  \n",
        "        4th               8             14  0.034941     361  0 min 10 sec  \n",
        "        5th               9             19  0.029504     365  0 min 10 sec  \n",
        "        6th               9             14  0.019581     374  0 min 10 sec  \n",
        "        7th               8             13  0.025541     347  0 min 10 sec  \n",
        "        8th              10             15  0.039605     367  0 min 10 sec  \n",
        "        9th               8             10  0.033326     341  0 min 10 sec  \n",
        "        10th              9             16  0.034461     365  0 min 10 sec  \n",
        "        11th              8             17  0.031188     345  0 min 10 sec  \n",
        "        12th              8             22  0.044265     372  0 min 10 sec  \n",
        "        13th              9             13  0.026715     367  0 min 10 sec  \n",
        "        14th             18             12  0.010552     364  0 min 10 sec  \n",
        "        15th             18              7  0.029266     367  0 min 10 sec  \n",
        "        16th             13              7  0.047743     362  0 min 10 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.000282</td>\n",
        "      <td>0.00008</td>\n",
        "      <td>0.042663</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.0</td>\n",
        "      <td>3124</td>\n",
        "      <td>5</td>\n",
        "      <td>63</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>8.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.000282</td>\n",
        "      <td>0.00008</td>\n",
        "      <td>0.042663</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.0</td>\n",
        "      <td>3124</td>\n",
        "      <td>5</td>\n",
        "      <td>63</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.000282</td>\n",
        "      <td>0.00008</td>\n",
        "      <td>0.042663</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.0</td>\n",
        "      <td>3124</td>\n",
        "      <td>5</td>\n",
        "      <td>63</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>8.33</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.000282</td>\n",
        "      <td>0.00008</td>\n",
        "      <td>0.042663</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.0</td>\n",
        "      <td>3124</td>\n",
        "      <td>5</td>\n",
        "      <td>63</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-02-07</td>\n",
        "      <td>France</td>\n",
        "      <td>0.000282</td>\n",
        "      <td>0.00008</td>\n",
        "      <td>0.042663</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>0.0</td>\n",
        "      <td>3124</td>\n",
        "      <td>5</td>\n",
        "      <td>63</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0.00</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date Country     theta    kappa       rho     sigma  alpha1 [-]  \\\n",
        "0 2020-02-07  France  0.000282  0.00008  0.042663  0.003948         0.0   \n",
        "1 2020-02-07  France  0.000282  0.00008  0.042663  0.003948         0.0   \n",
        "2 2020-02-07  France  0.000282  0.00008  0.042663  0.003948         0.0   \n",
        "3 2020-02-07  France  0.000282  0.00008  0.042663  0.003948         0.0   \n",
        "4 2020-02-07  France  0.000282  0.00008  0.042663  0.003948         0.0   \n",
        "\n",
        "   1/alpha2 [day]  1/beta [day]  1/gamma [day]  ...  Cancel_events  \\\n",
        "0            3124             5             63  ...              0   \n",
        "1            3124             5             63  ...              0   \n",
        "2            3124             5             63  ...              0   \n",
        "3            3124             5             63  ...              0   \n",
        "4            3124             5             63  ...              0   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       0   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        0                  0                       0   \n",
        "4                        0                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    0   \n",
        "1                               0                                    0   \n",
        "2                               0                                    0   \n",
        "3                               0                                    0   \n",
        "4                               0                                    0   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               0                0              8.33  \n",
        "1                      0               0                0              0.00  \n",
        "2                      0               0                0              8.33  \n",
        "3                      0               0                0              0.00  \n",
        "4                      0               0                0              0.00  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     France  Romania\n",
        "Date                       \n",
        "2020-12-02     0.5      0.7\n",
        "2020-12-03     0.5      0.7\n",
        "2020-12-04     0.5      0.7\n",
        "2020-12-05     0.5      0.7\n",
        "2020-12-06     0.5      0.7"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country       France   Romania\n",
        "Date                          \n",
        "2020-12-02  0.018128  0.014575\n",
        "2020-12-03  0.018128  0.014575\n",
        "2020-12-04  0.018128  0.014575\n",
        "2020-12-05  0.018128  0.014575\n",
        "2020-12-06  0.018128  0.014575"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      France   Romania\n",
        "Date                         \n",
        "2020-12-02  0.03503  0.020302\n",
        "2020-12-03  0.03503  0.020302\n",
        "2020-12-04  0.03503  0.020302\n",
        "2020-12-05  0.03503  0.020302\n",
        "2020-12-06  0.03503  0.020302"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country       France   Romania\n",
        "Date                          \n",
        "2020-12-02  0.000049  0.000096\n",
        "2020-12-03  0.000049  0.000096\n",
        "2020-12-04  0.000049  0.000096\n",
        "2020-12-05  0.000049  0.000096\n",
        "2020-12-06  0.000049  0.000096"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country       France  Romania\n",
        "Date                         \n",
        "2020-12-02  0.030038   0.0172\n",
        "2020-12-03  0.030038   0.0172\n",
        "2020-12-04  0.030038   0.0172\n",
        "2020-12-05  0.030038   0.0172\n",
        "2020-12-06  0.030038   0.0172"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 7849 entries, 0 to 7862\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 7849 non-null   datetime64[ns]\n",
        " 1   Country                              7849 non-null   object        \n",
        " 2   Rt                                   7849 non-null   float64       \n",
        " 3   theta                                7849 non-null   float64       \n",
        " 4   kappa                                7849 non-null   float64       \n",
        " 5   rho                                  7849 non-null   float64       \n",
        " 6   sigma                                7849 non-null   float64       \n",
        " 7   School_closing                       7849 non-null   int64         \n",
        " 8   Workplace_closing                    7849 non-null   int64         \n",
        " 9   Cancel_events                        7849 non-null   int64         \n",
        " 10  Gatherings_restrictions              7849 non-null   int64         \n",
        " 11  Transport_closing                    7849 non-null   int64         \n",
        " 12  Stay_home_restrictions               7849 non-null   int64         \n",
        " 13  Internal_movement_restrictions       7849 non-null   int64         \n",
        " 14  International_movement_restrictions  7849 non-null   int64         \n",
        " 15  Information_campaigns                7849 non-null   int64         \n",
        " 16  Testing_policy                       7849 non-null   int64         \n",
        " 17  Contact_tracing                      7849 non-null   int64         \n",
        " 18  Stringency_index                     7849 non-null   float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 1.2+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col0,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col2,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col3,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col0{\n",
        "            background-color:  #d5d5e8;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col2,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col0,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col0,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col3{\n",
        "            background-color:  #dad9ea;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col3,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col0,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col10{\n",
        "            background-color:  #03476f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col0{\n",
        "            background-color:  #faf2f8;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col0{\n",
        "            background-color:  #e0dded;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col0,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col3{\n",
        "            background-color:  #dfddec;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col0,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col0{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col3,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col0,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col0{\n",
        "            background-color:  #f3edf5;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col0{\n",
        "            background-color:  #e5e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col0{\n",
        "            background-color:  #f9f2f8;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col0{\n",
        "            background-color:  #dcdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col0{\n",
        "            background-color:  #f0eaf4;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col0{\n",
        "            background-color:  #eae6f1;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col2,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col4{\n",
        "            background-color:  #056dab;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col3,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col1{\n",
        "            background-color:  #ced0e6;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col10{\n",
        "            background-color:  #056dac;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col1{\n",
        "            background-color:  #2484ba;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col1{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col1{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col2,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col2{\n",
        "            background-color:  #3991c1;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col1,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col7{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col1{\n",
        "            background-color:  #358fc0;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col1{\n",
        "            background-color:  #3d93c2;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col2,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col1{\n",
        "            background-color:  #4a98c5;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col1{\n",
        "            background-color:  #b0c2de;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col1{\n",
        "            background-color:  #79abd0;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col3,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col2{\n",
        "            background-color:  #d9d8ea;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col2{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col2{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col2{\n",
        "            background-color:  #2987bc;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col2,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col2{\n",
        "            background-color:  #2f8bbe;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col2,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col15{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col2{\n",
        "            background-color:  #2a88bc;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col2{\n",
        "            background-color:  #2786bb;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col2{\n",
        "            background-color:  #94b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col2{\n",
        "            background-color:  #529bc7;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col3{\n",
        "            background-color:  #f5eef6;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col3,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col3{\n",
        "            background-color:  #d6d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col3{\n",
        "            background-color:  #dedcec;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col3{\n",
        "            background-color:  #e4e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col3{\n",
        "            background-color:  #ebe6f2;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col3{\n",
        "            background-color:  #f5eff6;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col3{\n",
        "            background-color:  #ece7f2;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col3{\n",
        "            background-color:  #e8e4f0;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col3{\n",
        "            background-color:  #e3e0ee;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col12{\n",
        "            background-color:  #167bb6;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col4{\n",
        "            background-color:  #0570b0;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col4{\n",
        "            background-color:  #0c74b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col6{\n",
        "            background-color:  #0569a5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col5{\n",
        "            background-color:  #0771b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col4{\n",
        "            background-color:  #056fae;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col4,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col7{\n",
        "            background-color:  #056ba7;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col4{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col4{\n",
        "            background-color:  #1278b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col4{\n",
        "            background-color:  #4094c3;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col4{\n",
        "            background-color:  #1e80b8;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col6{\n",
        "            background-color:  #034165;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col5{\n",
        "            background-color:  #04588a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col9{\n",
        "            background-color:  #056faf;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col5{\n",
        "            background-color:  #034a74;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col5,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col13{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col5{\n",
        "            background-color:  #0569a4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col5{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col5{\n",
        "            background-color:  #93b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col5{\n",
        "            background-color:  #034369;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col6{\n",
        "            background-color:  #045788;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col6,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col6{\n",
        "            background-color:  #0567a1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col6{\n",
        "            background-color:  #03446a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col6{\n",
        "            background-color:  #0a73b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col6{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col6{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col7{\n",
        "            background-color:  #056aa6;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col7,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col7{\n",
        "            background-color:  #045f95;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col7{\n",
        "            background-color:  #03456c;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col8{\n",
        "            background-color:  #034d79;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col8{\n",
        "            background-color:  #046097;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col8{\n",
        "            background-color:  #023b5d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col8,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col12{\n",
        "            background-color:  #045483;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col8{\n",
        "            background-color:  #1379b5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col9,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col8{\n",
        "            background-color:  #04639b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col8{\n",
        "            background-color:  #045c90;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col9{\n",
        "            background-color:  #046198;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col9{\n",
        "            background-color:  #034267;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col9{\n",
        "            background-color:  #03517e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col9{\n",
        "            background-color:  #308cbe;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col10,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col9{\n",
        "            background-color:  #046299;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col10{\n",
        "            background-color:  #046096;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col10{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col10{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col12,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col11{\n",
        "            background-color:  #034871;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col13,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col12{\n",
        "            background-color:  #045d92;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col14,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col11{\n",
        "            background-color:  #2081b9;\n",
        "            color:  #000000;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col11{\n",
        "            background-color:  #0568a3;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col11,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col13{\n",
        "            background-color:  #045e93;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col12{\n",
        "            background-color:  #05659f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col15,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col13{\n",
        "            background-color:  #04649d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col16,#T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col14{\n",
        "            background-color:  #81aed2;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col1\" class=\"data row0 col1\" >-0.419328</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col2\" class=\"data row0 col2\" >-0.465037</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col3\" class=\"data row0 col3\" >0.894629</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col4\" class=\"data row0 col4\" >-0.770782</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col5\" class=\"data row0 col5\" >-0.462108</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col6\" class=\"data row0 col6\" >-0.504175</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col7\" class=\"data row0 col7\" >-0.496558</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col8\" class=\"data row0 col8\" >-0.836495</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col9\" class=\"data row0 col9\" >-0.689854</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col10\" class=\"data row0 col10\" >-0.547269</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col11\" class=\"data row0 col11\" >-0.761365</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col12\" class=\"data row0 col12\" >-0.840234</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col13\" class=\"data row0 col13\" >-0.693309</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col14\" class=\"data row0 col14\" >-0.477273</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col15\" class=\"data row0 col15\" >-0.653322</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row0_col16\" class=\"data row0 col16\" >-0.595164</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col0\" class=\"data row1 col0\" >-0.419328</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col2\" class=\"data row1 col2\" >0.572976</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col3\" class=\"data row1 col3\" >-0.368471</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col4\" class=\"data row1 col4\" >0.565192</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col5\" class=\"data row1 col5\" >0.389718</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col6\" class=\"data row1 col6\" >0.346849</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col7\" class=\"data row1 col7\" >0.408684</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col8\" class=\"data row1 col8\" >0.300163</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col9\" class=\"data row1 col9\" >0.298373</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col10\" class=\"data row1 col10\" >0.258776</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col11\" class=\"data row1 col11\" >0.311278</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col12\" class=\"data row1 col12\" >0.287673</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col13\" class=\"data row1 col13\" >0.236416</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col14\" class=\"data row1 col14\" >-0.202777</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col15\" class=\"data row1 col15\" >0.056354</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row1_col16\" class=\"data row1 col16\" >0.405297</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col0\" class=\"data row2 col0\" >-0.465037</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col1\" class=\"data row2 col1\" >0.572976</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col3\" class=\"data row2 col3\" >-0.450769</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col4\" class=\"data row2 col4\" >0.231396</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col5\" class=\"data row2 col5\" >0.300572</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col6\" class=\"data row2 col6\" >0.276236</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col7\" class=\"data row2 col7\" >0.387847</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col8\" class=\"data row2 col8\" >0.371984</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col9\" class=\"data row2 col9\" >0.342622</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col10\" class=\"data row2 col10\" >0.213754</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col11\" class=\"data row2 col11\" >0.365475</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col12\" class=\"data row2 col12\" >0.377022</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col13\" class=\"data row2 col13\" >0.301377</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col14\" class=\"data row2 col14\" >-0.070442</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col15\" class=\"data row2 col15\" >0.205471</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row2_col16\" class=\"data row2 col16\" >0.341168</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col0\" class=\"data row3 col0\" >0.894629</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col1\" class=\"data row3 col1\" >-0.368471</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col2\" class=\"data row3 col2\" >-0.450769</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col4\" class=\"data row3 col4\" >-0.716774</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col5\" class=\"data row3 col5\" >-0.427434</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col6\" class=\"data row3 col6\" >-0.465199</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col7\" class=\"data row3 col7\" >-0.489372</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col8\" class=\"data row3 col8\" >-0.694391</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col9\" class=\"data row3 col9\" >-0.539416</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col10\" class=\"data row3 col10\" >-0.497513</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col11\" class=\"data row3 col11\" >-0.599981</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col12\" class=\"data row3 col12\" >-0.724187</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col13\" class=\"data row3 col13\" >-0.603561</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col14\" class=\"data row3 col14\" >-0.430432</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col15\" class=\"data row3 col15\" >-0.575409</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row3_col16\" class=\"data row3 col16\" >-0.532049</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col0\" class=\"data row4 col0\" >-0.770782</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col1\" class=\"data row4 col1\" >0.565192</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col2\" class=\"data row4 col2\" >0.231396</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col3\" class=\"data row4 col3\" >-0.716774</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col5\" class=\"data row4 col5\" >0.458134</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col6\" class=\"data row4 col6\" >0.534201</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col7\" class=\"data row4 col7\" >0.504676</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col8\" class=\"data row4 col8\" >0.606549</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col9\" class=\"data row4 col9\" >0.532276</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col10\" class=\"data row4 col10\" >0.550117</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col11\" class=\"data row4 col11\" >0.596797</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col12\" class=\"data row4 col12\" >0.582325</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col13\" class=\"data row4 col13\" >0.477454</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col14\" class=\"data row4 col14\" >0.272027</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col15\" class=\"data row4 col15\" >0.418443</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row4_col16\" class=\"data row4 col16\" >0.574838</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col0\" class=\"data row5 col0\" >-0.462108</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col1\" class=\"data row5 col1\" >0.389718</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col2\" class=\"data row5 col2\" >0.300572</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col3\" class=\"data row5 col3\" >-0.427434</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col4\" class=\"data row5 col4\" >0.458134</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col6\" class=\"data row5 col6\" >0.940325</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col7\" class=\"data row5 col7\" >0.777656</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col8\" class=\"data row5 col8\" >0.611209</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col9\" class=\"data row5 col9\" >0.544786</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col10\" class=\"data row5 col10\" >0.875381</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col11\" class=\"data row5 col11\" >0.556871</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col12\" class=\"data row5 col12\" >0.615670</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col13\" class=\"data row5 col13\" >0.526815</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col14\" class=\"data row5 col14\" >-0.239559</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col15\" class=\"data row5 col15\" >-0.062803</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row5_col16\" class=\"data row5 col16\" >0.925837</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col0\" class=\"data row6 col0\" >-0.504175</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col1\" class=\"data row6 col1\" >0.346849</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col2\" class=\"data row6 col2\" >0.276236</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col3\" class=\"data row6 col3\" >-0.465199</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col4\" class=\"data row6 col4\" >0.534201</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col5\" class=\"data row6 col5\" >0.940325</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col7\" class=\"data row6 col7\" >0.786074</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col8\" class=\"data row6 col8\" >0.637834</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col9\" class=\"data row6 col9\" >0.564703</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col10\" class=\"data row6 col10\" >0.920841</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col11\" class=\"data row6 col11\" >0.609795</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col12\" class=\"data row6 col12\" >0.637897</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col13\" class=\"data row6 col13\" >0.517712</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col14\" class=\"data row6 col14\" >-0.145467</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col15\" class=\"data row6 col15\" >0.024887</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row6_col16\" class=\"data row6 col16\" >0.936350</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col0\" class=\"data row7 col0\" >-0.496558</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col1\" class=\"data row7 col1\" >0.408684</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col2\" class=\"data row7 col2\" >0.387847</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col3\" class=\"data row7 col3\" >-0.489372</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col4\" class=\"data row7 col4\" >0.504676</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col5\" class=\"data row7 col5\" >0.777656</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col6\" class=\"data row7 col6\" >0.786074</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col8\" class=\"data row7 col8\" >0.599269</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col9\" class=\"data row7 col9\" >0.541010</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col10\" class=\"data row7 col10\" >0.715040</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col11\" class=\"data row7 col11\" >0.593573</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col12\" class=\"data row7 col12\" >0.594937</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col13\" class=\"data row7 col13\" >0.716122</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col14\" class=\"data row7 col14\" >0.052894</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col15\" class=\"data row7 col15\" >0.254207</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row7_col16\" class=\"data row7 col16\" >0.907253</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col0\" class=\"data row8 col0\" >-0.836495</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col1\" class=\"data row8 col1\" >0.300163</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col2\" class=\"data row8 col2\" >0.371984</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col3\" class=\"data row8 col3\" >-0.694391</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col4\" class=\"data row8 col4\" >0.606549</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col5\" class=\"data row8 col5\" >0.611209</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col6\" class=\"data row8 col6\" >0.637834</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col7\" class=\"data row8 col7\" >0.599269</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col9\" class=\"data row8 col9\" >0.850786</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col10\" class=\"data row8 col10\" >0.702213</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col11\" class=\"data row8 col11\" >0.922883</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col12\" class=\"data row8 col12\" >0.971606</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col13\" class=\"data row8 col13\" >0.808592</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col14\" class=\"data row8 col14\" >0.471984</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col15\" class=\"data row8 col15\" >0.673511</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row8_col16\" class=\"data row8 col16\" >0.743699</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col0\" class=\"data row9 col0\" >-0.689854</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col1\" class=\"data row9 col1\" >0.298373</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col2\" class=\"data row9 col2\" >0.342622</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col3\" class=\"data row9 col3\" >-0.539416</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col4\" class=\"data row9 col4\" >0.532276</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col5\" class=\"data row9 col5\" >0.544786</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col6\" class=\"data row9 col6\" >0.564703</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col7\" class=\"data row9 col7\" >0.541010</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col8\" class=\"data row9 col8\" >0.850786</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col10\" class=\"data row9 col10\" >0.697867</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col11\" class=\"data row9 col11\" >0.928721</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col12\" class=\"data row9 col12\" >0.829582</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col13\" class=\"data row9 col13\" >0.669979</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col14\" class=\"data row9 col14\" >0.337597</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col15\" class=\"data row9 col15\" >0.542096</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row9_col16\" class=\"data row9 col16\" >0.687948</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col0\" class=\"data row10 col0\" >-0.547269</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col1\" class=\"data row10 col1\" >0.258776</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col2\" class=\"data row10 col2\" >0.213754</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col3\" class=\"data row10 col3\" >-0.497513</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col4\" class=\"data row10 col4\" >0.550117</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col5\" class=\"data row10 col5\" >0.875381</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col6\" class=\"data row10 col6\" >0.920841</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col7\" class=\"data row10 col7\" >0.715040</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col8\" class=\"data row10 col8\" >0.702213</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col9\" class=\"data row10 col9\" >0.697867</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col11\" class=\"data row10 col11\" >0.707523</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col12\" class=\"data row10 col12\" >0.689549</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col13\" class=\"data row10 col13\" >0.563034</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col14\" class=\"data row10 col14\" >-0.025940</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col15\" class=\"data row10 col15\" >0.108836</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row10_col16\" class=\"data row10 col16\" >0.895895</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col0\" class=\"data row11 col0\" >-0.761365</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col1\" class=\"data row11 col1\" >0.311278</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col2\" class=\"data row11 col2\" >0.365475</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col3\" class=\"data row11 col3\" >-0.599981</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col4\" class=\"data row11 col4\" >0.596797</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col5\" class=\"data row11 col5\" >0.556871</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col6\" class=\"data row11 col6\" >0.609795</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col7\" class=\"data row11 col7\" >0.593573</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col8\" class=\"data row11 col8\" >0.922883</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col9\" class=\"data row11 col9\" >0.928721</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col10\" class=\"data row11 col10\" >0.707523</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col12\" class=\"data row11 col12\" >0.888559</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col13\" class=\"data row11 col13\" >0.739176</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col14\" class=\"data row11 col14\" >0.414875</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col15\" class=\"data row11 col15\" >0.626198</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row11_col16\" class=\"data row11 col16\" >0.732753</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col0\" class=\"data row12 col0\" >-0.840234</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col1\" class=\"data row12 col1\" >0.287673</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col2\" class=\"data row12 col2\" >0.377022</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col3\" class=\"data row12 col3\" >-0.724187</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col4\" class=\"data row12 col4\" >0.582325</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col5\" class=\"data row12 col5\" >0.615670</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col6\" class=\"data row12 col6\" >0.637897</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col7\" class=\"data row12 col7\" >0.594937</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col8\" class=\"data row12 col8\" >0.971606</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col9\" class=\"data row12 col9\" >0.829582</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col10\" class=\"data row12 col10\" >0.689549</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col11\" class=\"data row12 col11\" >0.888559</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col13\" class=\"data row12 col13\" >0.807579</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col14\" class=\"data row12 col14\" >0.459281</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col15\" class=\"data row12 col15\" >0.648903</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row12_col16\" class=\"data row12 col16\" >0.738515</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col0\" class=\"data row13 col0\" >-0.693309</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col1\" class=\"data row13 col1\" >0.236416</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col2\" class=\"data row13 col2\" >0.301377</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col3\" class=\"data row13 col3\" >-0.603561</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col4\" class=\"data row13 col4\" >0.477454</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col5\" class=\"data row13 col5\" >0.526815</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col6\" class=\"data row13 col6\" >0.517712</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col7\" class=\"data row13 col7\" >0.716122</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col8\" class=\"data row13 col8\" >0.808592</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col9\" class=\"data row13 col9\" >0.669979</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col10\" class=\"data row13 col10\" >0.563034</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col11\" class=\"data row13 col11\" >0.739176</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col12\" class=\"data row13 col12\" >0.807579</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col14\" class=\"data row13 col14\" >0.560205</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col15\" class=\"data row13 col15\" >0.668954</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row13_col16\" class=\"data row13 col16\" >0.729961</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col0\" class=\"data row14 col0\" >-0.477273</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col1\" class=\"data row14 col1\" >-0.202777</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col2\" class=\"data row14 col2\" >-0.070442</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col3\" class=\"data row14 col3\" >-0.430432</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col4\" class=\"data row14 col4\" >0.272027</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col5\" class=\"data row14 col5\" >-0.239559</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col6\" class=\"data row14 col6\" >-0.145467</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col7\" class=\"data row14 col7\" >0.052894</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col8\" class=\"data row14 col8\" >0.471984</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col9\" class=\"data row14 col9\" >0.337597</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col10\" class=\"data row14 col10\" >-0.025940</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col11\" class=\"data row14 col11\" >0.414875</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col12\" class=\"data row14 col12\" >0.459281</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col13\" class=\"data row14 col13\" >0.560205</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col15\" class=\"data row14 col15\" >0.906776</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row14_col16\" class=\"data row14 col16\" >0.021641</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col0\" class=\"data row15 col0\" >-0.653322</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col1\" class=\"data row15 col1\" >0.056354</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col2\" class=\"data row15 col2\" >0.205471</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col3\" class=\"data row15 col3\" >-0.575409</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col4\" class=\"data row15 col4\" >0.418443</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col5\" class=\"data row15 col5\" >-0.062803</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col6\" class=\"data row15 col6\" >0.024887</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col7\" class=\"data row15 col7\" >0.254207</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col8\" class=\"data row15 col8\" >0.673511</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col9\" class=\"data row15 col9\" >0.542096</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col10\" class=\"data row15 col10\" >0.108836</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col11\" class=\"data row15 col11\" >0.626198</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col12\" class=\"data row15 col12\" >0.648903</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col13\" class=\"data row15 col13\" >0.668954</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col14\" class=\"data row15 col14\" >0.906776</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row15_col16\" class=\"data row15 col16\" >0.214667</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287level0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col0\" class=\"data row16 col0\" >-0.595164</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col1\" class=\"data row16 col1\" >0.405297</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col2\" class=\"data row16 col2\" >0.341168</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col3\" class=\"data row16 col3\" >-0.532049</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col4\" class=\"data row16 col4\" >0.574838</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col5\" class=\"data row16 col5\" >0.925837</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col6\" class=\"data row16 col6\" >0.936350</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col7\" class=\"data row16 col7\" >0.907253</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col8\" class=\"data row16 col8\" >0.743699</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col9\" class=\"data row16 col9\" >0.687948</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col10\" class=\"data row16 col10\" >0.895895</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col11\" class=\"data row16 col11\" >0.732753</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col12\" class=\"data row16 col12\" >0.738515</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col13\" class=\"data row16 col13\" >0.729961</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col14\" class=\"data row16 col14\" >0.021641</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col15\" class=\"data row16 col15\" >0.214667</td>\n",
        "                        <td id=\"T_71dcc63a_37d2_11eb_a56c_5254003bd287row16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f792494d3d0>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
