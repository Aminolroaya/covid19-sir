{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1596284809232"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-delta.new.72.fix.120.155.157'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "185"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "6"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Senegal', 'United Arab Emirates', 'Guinea', 'Romania', 'Iran']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Poland']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>17May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>18May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>25Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jun2020</td>\n",
        "      <td>05Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Poland  1st    Past  23Apr2020  05May2020    37974750\n",
        "        2nd    Past  06May2020  17May2020    37974750\n",
        "        3rd    Past  18May2020  25May2020    37974750\n",
        "        4th    Past  26May2020  05Jun2020    37974750\n",
        "        5th    Past  06Jun2020  15Jun2020    37974750\n",
        "        6th    Past  16Jun2020  25Jun2020    37974750\n",
        "        7th    Past  26Jun2020  05Jul2020    37974750\n",
        "        8th    Past  06Jul2020  16Jul2020    37974750\n",
        "        9th    Past  17Jul2020  24Jul2020    37974750\n",
        "        10th   Past  25Jul2020  02Aug2020    37974750"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Poland--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t10th phase with SIR-F model finished 236 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 211 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 211 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 209 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 210 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 215 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 236 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Senegal--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 452 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 213 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 213 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 213 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 211 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 216 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 212 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 215 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------United Arab Emirates--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 234 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 202 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 206 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 210 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 399 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 216 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 226 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 422 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Guinea--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 234 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 212 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 215 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 213 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 213 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 220 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 411 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 589 trials in 0 min 15 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Romania--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 237 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 206 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 213 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 212 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 208 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 211 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 216 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Iran--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 238 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 208 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 212 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 212 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 212 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 213 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 214 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 225 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 1951 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>tau</th>\n",
        "      <th>Rt</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.010377</td>\n",
        "      <td>0.005980</td>\n",
        "      <td>0.052091</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>360</td>\n",
        "      <td>1.60</td>\n",
        "      <td>0.052</td>\n",
        "      <td>1662</td>\n",
        "      <td>24</td>\n",
        "      <td>41</td>\n",
        "      <td>0.042406</td>\n",
        "      <td>211</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>17May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.007802</td>\n",
        "      <td>0.006927</td>\n",
        "      <td>0.060234</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>360</td>\n",
        "      <td>1.05</td>\n",
        "      <td>0.060</td>\n",
        "      <td>3153</td>\n",
        "      <td>32</td>\n",
        "      <td>36</td>\n",
        "      <td>0.038652</td>\n",
        "      <td>211</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>18May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.009611</td>\n",
        "      <td>0.006182</td>\n",
        "      <td>0.002359</td>\n",
        "      <td>0.000192</td>\n",
        "      <td>360</td>\n",
        "      <td>1.50</td>\n",
        "      <td>0.002</td>\n",
        "      <td>1304</td>\n",
        "      <td>26</td>\n",
        "      <td>40</td>\n",
        "      <td>0.007497</td>\n",
        "      <td>214</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.007846</td>\n",
        "      <td>0.005423</td>\n",
        "      <td>0.067013</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>360</td>\n",
        "      <td>1.35</td>\n",
        "      <td>0.067</td>\n",
        "      <td>134911</td>\n",
        "      <td>31</td>\n",
        "      <td>46</td>\n",
        "      <td>0.051462</td>\n",
        "      <td>209</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.007773</td>\n",
        "      <td>0.003611</td>\n",
        "      <td>0.067013</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>360</td>\n",
        "      <td>2.01</td>\n",
        "      <td>0.067</td>\n",
        "      <td>134911</td>\n",
        "      <td>32</td>\n",
        "      <td>69</td>\n",
        "      <td>0.045803</td>\n",
        "      <td>210</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>25Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.005565</td>\n",
        "      <td>0.007602</td>\n",
        "      <td>0.002183</td>\n",
        "      <td>0.000191</td>\n",
        "      <td>360</td>\n",
        "      <td>0.71</td>\n",
        "      <td>0.002</td>\n",
        "      <td>1305</td>\n",
        "      <td>44</td>\n",
        "      <td>32</td>\n",
        "      <td>0.019442</td>\n",
        "      <td>214</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jun2020</td>\n",
        "      <td>05Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.006623</td>\n",
        "      <td>0.010842</td>\n",
        "      <td>0.005756</td>\n",
        "      <td>0.000180</td>\n",
        "      <td>360</td>\n",
        "      <td>0.60</td>\n",
        "      <td>0.006</td>\n",
        "      <td>1388</td>\n",
        "      <td>37</td>\n",
        "      <td>23</td>\n",
        "      <td>0.012775</td>\n",
        "      <td>214</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.007235</td>\n",
        "      <td>0.014678</td>\n",
        "      <td>0.001247</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>360</td>\n",
        "      <td>0.49</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1666</td>\n",
        "      <td>34</td>\n",
        "      <td>17</td>\n",
        "      <td>0.035477</td>\n",
        "      <td>215</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.011437</td>\n",
        "      <td>0.011664</td>\n",
        "      <td>0.031330</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>360</td>\n",
        "      <td>0.95</td>\n",
        "      <td>0.031</td>\n",
        "      <td>4228</td>\n",
        "      <td>21</td>\n",
        "      <td>21</td>\n",
        "      <td>0.016800</td>\n",
        "      <td>236</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.014145</td>\n",
        "      <td>0.008539</td>\n",
        "      <td>0.004249</td>\n",
        "      <td>0.000401</td>\n",
        "      <td>360</td>\n",
        "      <td>1.58</td>\n",
        "      <td>0.004</td>\n",
        "      <td>623</td>\n",
        "      <td>17</td>\n",
        "      <td>29</td>\n",
        "      <td>0.022549</td>\n",
        "      <td>236</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "               Type      Start        End  Population    ODE       rho  \\\n",
        "Country Phase                                                            \n",
        "Poland  1st    Past  23Apr2020  05May2020    37974750  SIR-F  0.010377   \n",
        "        2nd    Past  06May2020  17May2020    37974750  SIR-F  0.007802   \n",
        "        3rd    Past  18May2020  25May2020    37974750  SIR-F  0.009611   \n",
        "        4th    Past  26May2020  05Jun2020    37974750  SIR-F  0.007846   \n",
        "        5th    Past  06Jun2020  15Jun2020    37974750  SIR-F  0.007773   \n",
        "        6th    Past  16Jun2020  25Jun2020    37974750  SIR-F  0.005565   \n",
        "        7th    Past  26Jun2020  05Jul2020    37974750  SIR-F  0.006623   \n",
        "        8th    Past  06Jul2020  16Jul2020    37974750  SIR-F  0.007235   \n",
        "        9th    Past  17Jul2020  24Jul2020    37974750  SIR-F  0.011437   \n",
        "        10th   Past  25Jul2020  02Aug2020    37974750  SIR-F  0.014145   \n",
        "\n",
        "                  sigma     theta     kappa  tau    Rt  alpha1 [-]  \\\n",
        "Country Phase                                                        \n",
        "Poland  1st    0.005980  0.052091  0.000150  360  1.60       0.052   \n",
        "        2nd    0.006927  0.060234  0.000079  360  1.05       0.060   \n",
        "        3rd    0.006182  0.002359  0.000192  360  1.50       0.002   \n",
        "        4th    0.005423  0.067013  0.000002  360  1.35       0.067   \n",
        "        5th    0.003611  0.067013  0.000002  360  2.01       0.067   \n",
        "        6th    0.007602  0.002183  0.000191  360  0.71       0.002   \n",
        "        7th    0.010842  0.005756  0.000180  360  0.60       0.006   \n",
        "        8th    0.014678  0.001247  0.000150  360  0.49       0.001   \n",
        "        9th    0.011664  0.031330  0.000059  360  0.95       0.031   \n",
        "        10th   0.008539  0.004249  0.000401  360  1.58       0.004   \n",
        "\n",
        "               1/alpha2 [day]  1/beta [day]  1/gamma [day]     RMSLE  Trials  \\\n",
        "Country Phase                                                                  \n",
        "Poland  1st              1662            24             41  0.042406     211   \n",
        "        2nd              3153            32             36  0.038652     211   \n",
        "        3rd              1304            26             40  0.007497     214   \n",
        "        4th            134911            31             46  0.051462     209   \n",
        "        5th            134911            32             69  0.045803     210   \n",
        "        6th              1305            44             32  0.019442     214   \n",
        "        7th              1388            37             23  0.012775     214   \n",
        "        8th              1666            34             17  0.035477     215   \n",
        "        9th              4228            21             21  0.016800     236   \n",
        "        10th              623            17             29  0.022549     236   \n",
        "\n",
        "                   Runtime  \n",
        "Country Phase               \n",
        "Poland  1st    0 min 5 sec  \n",
        "        2nd    0 min 5 sec  \n",
        "        3rd    0 min 5 sec  \n",
        "        4th    0 min 5 sec  \n",
        "        5th    0 min 5 sec  \n",
        "        6th    0 min 5 sec  \n",
        "        7th    0 min 5 sec  \n",
        "        8th    0 min 5 sec  \n",
        "        9th    0 min 5 sec  \n",
        "        10th   0 min 5 sec  "
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.94</td>\n",
        "      <td>1.1</td>\n",
        "      <td>1.58</td>\n",
        "      <td>4.15</td>\n",
        "      <td>1.59</td>\n",
        "      <td>0.77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.94</td>\n",
        "      <td>1.1</td>\n",
        "      <td>1.58</td>\n",
        "      <td>4.15</td>\n",
        "      <td>1.59</td>\n",
        "      <td>0.77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.94</td>\n",
        "      <td>1.1</td>\n",
        "      <td>1.58</td>\n",
        "      <td>4.15</td>\n",
        "      <td>1.59</td>\n",
        "      <td>0.77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.94</td>\n",
        "      <td>1.1</td>\n",
        "      <td>1.58</td>\n",
        "      <td>4.15</td>\n",
        "      <td>1.59</td>\n",
        "      <td>0.77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.94</td>\n",
        "      <td>1.1</td>\n",
        "      <td>1.58</td>\n",
        "      <td>4.15</td>\n",
        "      <td>1.59</td>\n",
        "      <td>0.77</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "Country     Guinea  Iran  Poland  Romania  Senegal  United Arab Emirates\n",
        "Date                                                                    \n",
        "2020-07-29    0.94   1.1    1.58     4.15     1.59                  0.77\n",
        "2020-07-30    0.94   1.1    1.58     4.15     1.59                  0.77\n",
        "2020-07-31    0.94   1.1    1.58     4.15     1.59                  0.77\n",
        "2020-08-01    0.94   1.1    1.58     4.15     1.59                  0.77\n",
        "2020-08-02    0.94   1.1    1.58     4.15     1.59                  0.77"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.019242</td>\n",
        "      <td>0.028515</td>\n",
        "      <td>0.014145</td>\n",
        "      <td>0.016926</td>\n",
        "      <td>0.009074</td>\n",
        "      <td>0.011509</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.019242</td>\n",
        "      <td>0.028515</td>\n",
        "      <td>0.014145</td>\n",
        "      <td>0.016926</td>\n",
        "      <td>0.009074</td>\n",
        "      <td>0.011509</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.019242</td>\n",
        "      <td>0.028515</td>\n",
        "      <td>0.014145</td>\n",
        "      <td>0.016926</td>\n",
        "      <td>0.009074</td>\n",
        "      <td>0.011509</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.019242</td>\n",
        "      <td>0.028515</td>\n",
        "      <td>0.014145</td>\n",
        "      <td>0.016926</td>\n",
        "      <td>0.009074</td>\n",
        "      <td>0.011509</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.019242</td>\n",
        "      <td>0.028515</td>\n",
        "      <td>0.014145</td>\n",
        "      <td>0.016926</td>\n",
        "      <td>0.009074</td>\n",
        "      <td>0.011509</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "Country       Guinea      Iran    Poland   Romania   Senegal  \\\n",
        "Date                                                           \n",
        "2020-07-29  0.019242  0.028515  0.014145  0.016926  0.009074   \n",
        "2020-07-30  0.019242  0.028515  0.014145  0.016926  0.009074   \n",
        "2020-07-31  0.019242  0.028515  0.014145  0.016926  0.009074   \n",
        "2020-08-01  0.019242  0.028515  0.014145  0.016926  0.009074   \n",
        "2020-08-02  0.019242  0.028515  0.014145  0.016926  0.009074   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29              0.011509  \n",
        "2020-07-30              0.011509  \n",
        "2020-07-31              0.011509  \n",
        "2020-08-01              0.011509  \n",
        "2020-08-02              0.011509  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.020411</td>\n",
        "      <td>0.022833</td>\n",
        "      <td>0.008539</td>\n",
        "      <td>0.003878</td>\n",
        "      <td>0.00545</td>\n",
        "      <td>0.014934</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.020411</td>\n",
        "      <td>0.022833</td>\n",
        "      <td>0.008539</td>\n",
        "      <td>0.003878</td>\n",
        "      <td>0.00545</td>\n",
        "      <td>0.014934</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.020411</td>\n",
        "      <td>0.022833</td>\n",
        "      <td>0.008539</td>\n",
        "      <td>0.003878</td>\n",
        "      <td>0.00545</td>\n",
        "      <td>0.014934</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.020411</td>\n",
        "      <td>0.022833</td>\n",
        "      <td>0.008539</td>\n",
        "      <td>0.003878</td>\n",
        "      <td>0.00545</td>\n",
        "      <td>0.014934</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.020411</td>\n",
        "      <td>0.022833</td>\n",
        "      <td>0.008539</td>\n",
        "      <td>0.003878</td>\n",
        "      <td>0.00545</td>\n",
        "      <td>0.014934</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country       Guinea      Iran    Poland   Romania  Senegal  \\\n",
        "Date                                                          \n",
        "2020-07-29  0.020411  0.022833  0.008539  0.003878  0.00545   \n",
        "2020-07-30  0.020411  0.022833  0.008539  0.003878  0.00545   \n",
        "2020-07-31  0.020411  0.022833  0.008539  0.003878  0.00545   \n",
        "2020-08-01  0.020411  0.022833  0.008539  0.003878  0.00545   \n",
        "2020-08-02  0.020411  0.022833  0.008539  0.003878  0.00545   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29              0.014934  \n",
        "2020-07-30              0.014934  \n",
        "2020-07-31              0.014934  \n",
        "2020-08-01              0.014934  \n",
        "2020-08-02              0.014934  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000598</td>\n",
        "      <td>0.000401</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000255</td>\n",
        "      <td>0.000067</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000598</td>\n",
        "      <td>0.000401</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000255</td>\n",
        "      <td>0.000067</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000598</td>\n",
        "      <td>0.000401</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000255</td>\n",
        "      <td>0.000067</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000598</td>\n",
        "      <td>0.000401</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000255</td>\n",
        "      <td>0.000067</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000598</td>\n",
        "      <td>0.000401</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000255</td>\n",
        "      <td>0.000067</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country       Guinea      Iran    Poland   Romania   Senegal  \\\n",
        "Date                                                           \n",
        "2020-07-29  0.000079  0.000598  0.000401  0.000059  0.000255   \n",
        "2020-07-30  0.000079  0.000598  0.000401  0.000059  0.000255   \n",
        "2020-07-31  0.000079  0.000598  0.000401  0.000059  0.000255   \n",
        "2020-08-01  0.000079  0.000598  0.000401  0.000059  0.000255   \n",
        "2020-08-02  0.000079  0.000598  0.000401  0.000059  0.000255   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29              0.000067  \n",
        "2020-07-30              0.000067  \n",
        "2020-07-31              0.000067  \n",
        "2020-08-01              0.000067  \n",
        "2020-08-02              0.000067  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      " ### $\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.000898</td>\n",
        "      <td>0.099356</td>\n",
        "      <td>0.004249</td>\n",
        "      <td>0.035034</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.000764</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.000898</td>\n",
        "      <td>0.099356</td>\n",
        "      <td>0.004249</td>\n",
        "      <td>0.035034</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.000764</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.000898</td>\n",
        "      <td>0.099356</td>\n",
        "      <td>0.004249</td>\n",
        "      <td>0.035034</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.000764</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.000898</td>\n",
        "      <td>0.099356</td>\n",
        "      <td>0.004249</td>\n",
        "      <td>0.035034</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.000764</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.000898</td>\n",
        "      <td>0.099356</td>\n",
        "      <td>0.004249</td>\n",
        "      <td>0.035034</td>\n",
        "      <td>0.000938</td>\n",
        "      <td>0.000764</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country       Guinea      Iran    Poland   Romania   Senegal  \\\n",
        "Date                                                           \n",
        "2020-07-29  0.000898  0.099356  0.004249  0.035034  0.000938   \n",
        "2020-07-30  0.000898  0.099356  0.004249  0.035034  0.000938   \n",
        "2020-07-31  0.000898  0.099356  0.004249  0.035034  0.000938   \n",
        "2020-08-01  0.000898  0.099356  0.004249  0.035034  0.000938   \n",
        "2020-08-02  0.000898  0.099356  0.004249  0.035034  0.000938   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29              0.000764  \n",
        "2020-07-30              0.000764  \n",
        "2020-07-31              0.000764  \n",
        "2020-08-01              0.000764  \n",
        "2020-08-02              0.000764  "
       ]
      }
     ],
     "prompt_number": 16
    }
   ],
   "metadata": {}
  }
 ]
}
