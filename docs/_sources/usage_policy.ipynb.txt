{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1596284809232"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-delta.new.72.fix.120.155.157'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "185"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "6"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Iran', 'United Arab Emirates', 'Romania', 'Senegal', 'Guinea']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Poland']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>17May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>18May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>25Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jun2020</td>\n",
        "      <td>05Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Poland  1st    Past  23Apr2020  05May2020    37974750\n",
        "        2nd    Past  06May2020  17May2020    37974750\n",
        "        3rd    Past  18May2020  25May2020    37974750\n",
        "        4th    Past  26May2020  05Jun2020    37974750\n",
        "        5th    Past  06Jun2020  15Jun2020    37974750\n",
        "        6th    Past  16Jun2020  25Jun2020    37974750\n",
        "        7th    Past  26Jun2020  05Jul2020    37974750\n",
        "        8th    Past  06Jul2020  16Jul2020    37974750\n",
        "        9th    Past  17Jul2020  24Jul2020    37974750\n",
        "        10th   Past  25Jul2020  02Aug2020    37974750"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Iran--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 647 trials in 0 min 15 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 212 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 495 trials in 0 min 15 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 880 trials in 0 min 30 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 413 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 216 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 1699 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 1706 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 1782 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 31 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------United Arab Emirates--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 1155 trials in 0 min 30 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 1074 trials in 0 min 30 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 1834 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 1837 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 1046 trials in 0 min 30 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 1836 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 606 trials in 0 min 15 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 1213 trials in 0 min 35 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 1907 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 2 min 31 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Romania--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 1604 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 171 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 306 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 260 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 487 trials in 0 min 20 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 260 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 1281 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 1280 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 1282 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 2 min 7 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Senegal--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 393 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 804 trials in 0 min 30 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 1484 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 1445 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 1490 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 565 trials in 0 min 20 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 569 trials in 0 min 20 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 1528 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 1336 trials in 0 min 45 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 56 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Guinea--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 1933 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 1818 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 1819 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 1821 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 1806 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 1814 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 1807 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 1811 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 1813 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 3 min 2 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "--------------------Poland--------------------"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t10th phase with SIR-F model finished 1985 trials in 1 min 0 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 220 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 415 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 415 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 414 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 415 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 410 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t8th phase with SIR-F model finished 215 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 919 trials in 0 min 25 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t9th phase with SIR-F model finished 992 trials in 0 min 25 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 46 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>tau</th>\n",
        "      <th>Rt</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.009004</td>\n",
        "      <td>0.006333</td>\n",
        "      <td>0.000266</td>\n",
        "      <td>0.000618</td>\n",
        "      <td>360</td>\n",
        "      <td>1.29</td>\n",
        "      <td>0.000</td>\n",
        "      <td>404</td>\n",
        "      <td>27</td>\n",
        "      <td>39</td>\n",
        "      <td>0.043514</td>\n",
        "      <td>415</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>17May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.008640</td>\n",
        "      <td>0.006398</td>\n",
        "      <td>0.029233</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>360</td>\n",
        "      <td>1.28</td>\n",
        "      <td>0.029</td>\n",
        "      <td>1642</td>\n",
        "      <td>28</td>\n",
        "      <td>39</td>\n",
        "      <td>0.018411</td>\n",
        "      <td>415</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>18May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.009889</td>\n",
        "      <td>0.006421</td>\n",
        "      <td>0.023906</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>360</td>\n",
        "      <td>1.50</td>\n",
        "      <td>0.024</td>\n",
        "      <td>17575</td>\n",
        "      <td>25</td>\n",
        "      <td>38</td>\n",
        "      <td>0.011600</td>\n",
        "      <td>220</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.007740</td>\n",
        "      <td>0.005298</td>\n",
        "      <td>0.032890</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>360</td>\n",
        "      <td>1.41</td>\n",
        "      <td>0.033</td>\n",
        "      <td>103525</td>\n",
        "      <td>32</td>\n",
        "      <td>47</td>\n",
        "      <td>0.011575</td>\n",
        "      <td>919</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.007695</td>\n",
        "      <td>0.003544</td>\n",
        "      <td>0.018110</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>360</td>\n",
        "      <td>2.08</td>\n",
        "      <td>0.018</td>\n",
        "      <td>2965</td>\n",
        "      <td>32</td>\n",
        "      <td>70</td>\n",
        "      <td>0.012976</td>\n",
        "      <td>414</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>25Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.005544</td>\n",
        "      <td>0.007808</td>\n",
        "      <td>0.043092</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>360</td>\n",
        "      <td>0.68</td>\n",
        "      <td>0.043</td>\n",
        "      <td>6171</td>\n",
        "      <td>45</td>\n",
        "      <td>32</td>\n",
        "      <td>0.018263</td>\n",
        "      <td>415</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jun2020</td>\n",
        "      <td>05Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.006644</td>\n",
        "      <td>0.010861</td>\n",
        "      <td>0.001235</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>360</td>\n",
        "      <td>0.60</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1081</td>\n",
        "      <td>37</td>\n",
        "      <td>23</td>\n",
        "      <td>0.013766</td>\n",
        "      <td>410</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.007759</td>\n",
        "      <td>0.014667</td>\n",
        "      <td>0.001514</td>\n",
        "      <td>0.000191</td>\n",
        "      <td>360</td>\n",
        "      <td>0.52</td>\n",
        "      <td>0.002</td>\n",
        "      <td>1309</td>\n",
        "      <td>32</td>\n",
        "      <td>17</td>\n",
        "      <td>0.030746</td>\n",
        "      <td>215</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.011912</td>\n",
        "      <td>0.011294</td>\n",
        "      <td>0.000673</td>\n",
        "      <td>0.000112</td>\n",
        "      <td>360</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2235</td>\n",
        "      <td>20</td>\n",
        "      <td>22</td>\n",
        "      <td>0.008239</td>\n",
        "      <td>992</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.014756</td>\n",
        "      <td>0.008023</td>\n",
        "      <td>0.000441</td>\n",
        "      <td>0.000285</td>\n",
        "      <td>360</td>\n",
        "      <td>1.78</td>\n",
        "      <td>0.000</td>\n",
        "      <td>878</td>\n",
        "      <td>16</td>\n",
        "      <td>31</td>\n",
        "      <td>0.010016</td>\n",
        "      <td>1985</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "               Type      Start        End  Population    ODE       rho  \\\n",
        "Country Phase                                                            \n",
        "Poland  1st    Past  23Apr2020  05May2020    37974750  SIR-F  0.009004   \n",
        "        2nd    Past  06May2020  17May2020    37974750  SIR-F  0.008640   \n",
        "        3rd    Past  18May2020  25May2020    37974750  SIR-F  0.009889   \n",
        "        4th    Past  26May2020  05Jun2020    37974750  SIR-F  0.007740   \n",
        "        5th    Past  06Jun2020  15Jun2020    37974750  SIR-F  0.007695   \n",
        "        6th    Past  16Jun2020  25Jun2020    37974750  SIR-F  0.005544   \n",
        "        7th    Past  26Jun2020  05Jul2020    37974750  SIR-F  0.006644   \n",
        "        8th    Past  06Jul2020  16Jul2020    37974750  SIR-F  0.007759   \n",
        "        9th    Past  17Jul2020  24Jul2020    37974750  SIR-F  0.011912   \n",
        "        10th   Past  25Jul2020  02Aug2020    37974750  SIR-F  0.014756   \n",
        "\n",
        "                  sigma     theta     kappa  tau    Rt  alpha1 [-]  \\\n",
        "Country Phase                                                        \n",
        "Poland  1st    0.006333  0.000266  0.000618  360  1.29       0.000   \n",
        "        2nd    0.006398  0.029233  0.000152  360  1.28       0.029   \n",
        "        3rd    0.006421  0.023906  0.000014  360  1.50       0.024   \n",
        "        4th    0.005298  0.032890  0.000002  360  1.41       0.033   \n",
        "        5th    0.003544  0.018110  0.000084  360  2.08       0.018   \n",
        "        6th    0.007808  0.043092  0.000041  360  0.68       0.043   \n",
        "        7th    0.010861  0.001235  0.000231  360  0.60       0.001   \n",
        "        8th    0.014667  0.001514  0.000191  360  0.52       0.002   \n",
        "        9th    0.011294  0.000673  0.000112  360  1.04       0.001   \n",
        "        10th   0.008023  0.000441  0.000285  360  1.78       0.000   \n",
        "\n",
        "               1/alpha2 [day]  1/beta [day]  1/gamma [day]     RMSLE  Trials  \\\n",
        "Country Phase                                                                  \n",
        "Poland  1st               404            27             39  0.043514     415   \n",
        "        2nd              1642            28             39  0.018411     415   \n",
        "        3rd             17575            25             38  0.011600     220   \n",
        "        4th            103525            32             47  0.011575     919   \n",
        "        5th              2965            32             70  0.012976     414   \n",
        "        6th              6171            45             32  0.018263     415   \n",
        "        7th              1081            37             23  0.013766     410   \n",
        "        8th              1309            32             17  0.030746     215   \n",
        "        9th              2235            20             22  0.008239     992   \n",
        "        10th              878            16             31  0.010016    1985   \n",
        "\n",
        "                    Runtime  \n",
        "Country Phase                \n",
        "Poland  1st    0 min 10 sec  \n",
        "        2nd    0 min 10 sec  \n",
        "        3rd     0 min 5 sec  \n",
        "        4th    0 min 25 sec  \n",
        "        5th    0 min 10 sec  \n",
        "        6th    0 min 10 sec  \n",
        "        7th    0 min 10 sec  \n",
        "        8th     0 min 5 sec  \n",
        "        9th    0 min 25 sec  \n",
        "        10th    1 min 0 sec  "
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.98</td>\n",
        "      <td>1.09</td>\n",
        "      <td>1.78</td>\n",
        "      <td>3.87</td>\n",
        "      <td>1.57</td>\n",
        "      <td>0.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.98</td>\n",
        "      <td>1.09</td>\n",
        "      <td>1.78</td>\n",
        "      <td>3.87</td>\n",
        "      <td>1.57</td>\n",
        "      <td>0.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.98</td>\n",
        "      <td>1.09</td>\n",
        "      <td>1.78</td>\n",
        "      <td>3.87</td>\n",
        "      <td>1.57</td>\n",
        "      <td>0.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.98</td>\n",
        "      <td>1.09</td>\n",
        "      <td>1.78</td>\n",
        "      <td>3.87</td>\n",
        "      <td>1.57</td>\n",
        "      <td>0.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.98</td>\n",
        "      <td>1.09</td>\n",
        "      <td>1.78</td>\n",
        "      <td>3.87</td>\n",
        "      <td>1.57</td>\n",
        "      <td>0.78</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "Country     Guinea  Iran  Poland  Romania  Senegal  United Arab Emirates\n",
        "Date                                                                    \n",
        "2020-07-29    0.98  1.09    1.78     3.87     1.57                  0.78\n",
        "2020-07-30    0.98  1.09    1.78     3.87     1.57                  0.78\n",
        "2020-07-31    0.98  1.09    1.78     3.87     1.57                  0.78\n",
        "2020-08-01    0.98  1.09    1.78     3.87     1.57                  0.78\n",
        "2020-08-02    0.98  1.09    1.78     3.87     1.57                  0.78"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.01952</td>\n",
        "      <td>0.028289</td>\n",
        "      <td>0.014756</td>\n",
        "      <td>0.015241</td>\n",
        "      <td>0.008791</td>\n",
        "      <td>0.011668</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.01952</td>\n",
        "      <td>0.028289</td>\n",
        "      <td>0.014756</td>\n",
        "      <td>0.015241</td>\n",
        "      <td>0.008791</td>\n",
        "      <td>0.011668</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.01952</td>\n",
        "      <td>0.028289</td>\n",
        "      <td>0.014756</td>\n",
        "      <td>0.015241</td>\n",
        "      <td>0.008791</td>\n",
        "      <td>0.011668</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.01952</td>\n",
        "      <td>0.028289</td>\n",
        "      <td>0.014756</td>\n",
        "      <td>0.015241</td>\n",
        "      <td>0.008791</td>\n",
        "      <td>0.011668</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.01952</td>\n",
        "      <td>0.028289</td>\n",
        "      <td>0.014756</td>\n",
        "      <td>0.015241</td>\n",
        "      <td>0.008791</td>\n",
        "      <td>0.011668</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "Country      Guinea      Iran    Poland   Romania   Senegal  \\\n",
        "Date                                                          \n",
        "2020-07-29  0.01952  0.028289  0.014756  0.015241  0.008791   \n",
        "2020-07-30  0.01952  0.028289  0.014756  0.015241  0.008791   \n",
        "2020-07-31  0.01952  0.028289  0.014756  0.015241  0.008791   \n",
        "2020-08-01  0.01952  0.028289  0.014756  0.015241  0.008791   \n",
        "2020-08-02  0.01952  0.028289  0.014756  0.015241  0.008791   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29              0.011668  \n",
        "2020-07-30              0.011668  \n",
        "2020-07-31              0.011668  \n",
        "2020-08-01              0.011668  \n",
        "2020-08-02              0.011668  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.019787</td>\n",
        "      <td>0.023883</td>\n",
        "      <td>0.008023</td>\n",
        "      <td>0.003776</td>\n",
        "      <td>0.005378</td>\n",
        "      <td>0.01492</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.019787</td>\n",
        "      <td>0.023883</td>\n",
        "      <td>0.008023</td>\n",
        "      <td>0.003776</td>\n",
        "      <td>0.005378</td>\n",
        "      <td>0.01492</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.019787</td>\n",
        "      <td>0.023883</td>\n",
        "      <td>0.008023</td>\n",
        "      <td>0.003776</td>\n",
        "      <td>0.005378</td>\n",
        "      <td>0.01492</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.019787</td>\n",
        "      <td>0.023883</td>\n",
        "      <td>0.008023</td>\n",
        "      <td>0.003776</td>\n",
        "      <td>0.005378</td>\n",
        "      <td>0.01492</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.019787</td>\n",
        "      <td>0.023883</td>\n",
        "      <td>0.008023</td>\n",
        "      <td>0.003776</td>\n",
        "      <td>0.005378</td>\n",
        "      <td>0.01492</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country       Guinea      Iran    Poland   Romania   Senegal  \\\n",
        "Date                                                           \n",
        "2020-07-29  0.019787  0.023883  0.008023  0.003776  0.005378   \n",
        "2020-07-30  0.019787  0.023883  0.008023  0.003776  0.005378   \n",
        "2020-07-31  0.019787  0.023883  0.008023  0.003776  0.005378   \n",
        "2020-08-01  0.019787  0.023883  0.008023  0.003776  0.005378   \n",
        "2020-08-02  0.019787  0.023883  0.008023  0.003776  0.005378   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29               0.01492  \n",
        "2020-07-30               0.01492  \n",
        "2020-07-31               0.01492  \n",
        "2020-08-01               0.01492  \n",
        "2020-08-02               0.01492  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.000165</td>\n",
        "      <td>0.000592</td>\n",
        "      <td>0.000285</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000031</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.000165</td>\n",
        "      <td>0.000592</td>\n",
        "      <td>0.000285</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000031</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.000165</td>\n",
        "      <td>0.000592</td>\n",
        "      <td>0.000285</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000031</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.000165</td>\n",
        "      <td>0.000592</td>\n",
        "      <td>0.000285</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000031</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.000165</td>\n",
        "      <td>0.000592</td>\n",
        "      <td>0.000285</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.00023</td>\n",
        "      <td>0.000031</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country       Guinea      Iran    Poland   Romania  Senegal  \\\n",
        "Date                                                          \n",
        "2020-07-29  0.000165  0.000592  0.000285  0.000082  0.00023   \n",
        "2020-07-30  0.000165  0.000592  0.000285  0.000082  0.00023   \n",
        "2020-07-31  0.000165  0.000592  0.000285  0.000082  0.00023   \n",
        "2020-08-01  0.000165  0.000592  0.000285  0.000082  0.00023   \n",
        "2020-08-02  0.000165  0.000592  0.000285  0.000082  0.00023   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29              0.000031  \n",
        "2020-07-30              0.000031  \n",
        "2020-07-31              0.000031  \n",
        "2020-08-01              0.000031  \n",
        "2020-08-02              0.000031  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>0.000172</td>\n",
        "      <td>0.060439</td>\n",
        "      <td>0.000441</td>\n",
        "      <td>0.01976</td>\n",
        "      <td>0.0003</td>\n",
        "      <td>0.000935</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>0.000172</td>\n",
        "      <td>0.060439</td>\n",
        "      <td>0.000441</td>\n",
        "      <td>0.01976</td>\n",
        "      <td>0.0003</td>\n",
        "      <td>0.000935</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>0.000172</td>\n",
        "      <td>0.060439</td>\n",
        "      <td>0.000441</td>\n",
        "      <td>0.01976</td>\n",
        "      <td>0.0003</td>\n",
        "      <td>0.000935</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>0.000172</td>\n",
        "      <td>0.060439</td>\n",
        "      <td>0.000441</td>\n",
        "      <td>0.01976</td>\n",
        "      <td>0.0003</td>\n",
        "      <td>0.000935</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>0.000172</td>\n",
        "      <td>0.060439</td>\n",
        "      <td>0.000441</td>\n",
        "      <td>0.01976</td>\n",
        "      <td>0.0003</td>\n",
        "      <td>0.000935</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country       Guinea      Iran    Poland  Romania  Senegal  \\\n",
        "Date                                                         \n",
        "2020-07-29  0.000172  0.060439  0.000441  0.01976   0.0003   \n",
        "2020-07-30  0.000172  0.060439  0.000441  0.01976   0.0003   \n",
        "2020-07-31  0.000172  0.060439  0.000441  0.01976   0.0003   \n",
        "2020-08-01  0.000172  0.060439  0.000441  0.01976   0.0003   \n",
        "2020-08-02  0.000172  0.060439  0.000441  0.01976   0.0003   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-07-29              0.000935  \n",
        "2020-07-30              0.000935  \n",
        "2020-07-31              0.000935  \n",
        "2020-08-01              0.000935  \n",
        "2020-08-02              0.000935  "
       ]
      }
     ],
     "prompt_number": 16
    }
   ],
   "metadata": {}
  }
 ]
}
