{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.7.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "184"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "2"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Papua New Guinea', 'Gambia', 'Lesotho']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "3"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Norway'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Antigua and Barbuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Botswana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Grenada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tanzania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brunei'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Peru'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritius'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Seychelles'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kyrgyzstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Palestine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Equatorial Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guyana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Eritrea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kosovo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malawi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sao Tome and Principe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guatemala'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iceland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Philippines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zambia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ethiopia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Yemen'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zimbabwe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ireland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Comoros'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belize'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'New Zealand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Venezuela'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Suriname'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Central African Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Montenegro'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Croatia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Japan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Haiti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iraq'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Madagascar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Lucia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kenya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chad'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Libya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Vincent and the Grenadines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malta'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mozambique'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Congo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovakia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Argentina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Benin'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liechtenstein'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Angola'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea-Bissau'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Morocco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Colombia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Syria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kazakhstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Costa Rica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Andorra'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Paraguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Swaziland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Spain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bermuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lebanon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bosnia and Herzegovina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "6"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Thailand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Finland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Estonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cambodia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Panama'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cyprus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Latvia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Netherlands'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cameroon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Trinidad and Tobago'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Taiwan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uzbekistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'San Marino'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'El Salvador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sri Lanka'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Israel'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'India'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Australia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nepal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Togo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Germany'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Maldives'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Switzerland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Afghanistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bulgaria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tunisia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mongolia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Honduras'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Luxembourg'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cape Verde'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Oman'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Africa'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nicaragua'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tajikistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ecuador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Algeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bolivia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uganda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Rwanda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burundi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "7"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Dominican Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Albania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Armenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cuba'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Egypt'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Serbia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Niger'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ghana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jordan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bhutan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Greece'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'China'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Somalia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burkina Faso'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Barbados'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belarus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belgium'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Monaco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bangladesh'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Macedonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sierra Leone'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Qatar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lithuania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Myanmar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Indonesia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Azerbaijan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mali'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Pakistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Djibouti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brazil'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "8"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Singapore'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Turkey'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liberia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Vietnam'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Gabon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Russia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uruguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nigeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Hungary'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'France'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jamaica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chile'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United States'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Romania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Georgia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malaysia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Denmark'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Bahrain', 'Kuwait', 'Senegal', 'Iran']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "15"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Denmark'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Bahrain', 'Kuwait', 'Senegal', 'Iran']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jun2020</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>06Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Kuwait</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24May2020</td>\n",
        "      <td>31May2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jul2020</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Jul2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>19Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>08Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439\n",
        "        2nd    Past  26May2020  03Jun2020     1569439\n",
        "        3rd    Past  04Jun2020  11Jun2020     1569439\n",
        "        4th    Past  12Jun2020  20Jun2020     1569439\n",
        "        5th    Past  21Jun2020  28Jun2020     1569439\n",
        "        6th    Past  29Jun2020  06Jul2020     1569439\n",
        "        7th    Past  07Jul2020  14Jul2020     1569439\n",
        "        8th    Past  15Jul2020  23Jul2020     1569439\n",
        "        9th    Past  24Jul2020  04Aug2020     1569439\n",
        "        10th   Past  05Aug2020  17Aug2020     1569439\n",
        "Kuwait  1st    Past  11May2020  23May2020     4137309\n",
        "        2nd    Past  24May2020  31May2020     4137309\n",
        "        3rd    Past  01Jun2020  09Jun2020     4137309\n",
        "        4th    Past  10Jun2020  21Jun2020     4137309\n",
        "        5th    Past  22Jun2020  30Jun2020     4137309\n",
        "        6th    Past  01Jul2020  08Jul2020     4137309\n",
        "        7th    Past  09Jul2020  17Jul2020     4137309\n",
        "        8th    Past  18Jul2020  26Jul2020     4137309\n",
        "        9th    Past  27Jul2020  05Aug2020     4137309\n",
        "        10th   Past  06Aug2020  17Aug2020     4137309\n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360\n",
        "        2nd    Past  15May2020  29May2020    15854360\n",
        "        3rd    Past  30May2020  09Jun2020    15854360\n",
        "        4th    Past  10Jun2020  19Jun2020    15854360\n",
        "        5th    Past  20Jun2020  30Jun2020    15854360\n",
        "        6th    Past  01Jul2020  10Jul2020    15854360\n",
        "        7th    Past  11Jul2020  19Jul2020    15854360\n",
        "        8th    Past  20Jul2020  28Jul2020    15854360\n",
        "        9th    Past  29Jul2020  08Aug2020    15854360\n",
        "        10th   Past  09Aug2020  17Aug2020    15854360\n",
        "Iran    1st    Past  29Mar2020  12Apr2020    81800269\n",
        "        2nd    Past  13Apr2020  04May2020    81800269\n",
        "        3rd    Past  05May2020  21May2020    81800269\n",
        "        4th    Past  22May2020  02Jun2020    81800269\n",
        "        5th    Past  03Jun2020  15Jun2020    81800269\n",
        "        6th    Past  16Jun2020  27Jun2020    81800269\n",
        "        7th    Past  28Jun2020  09Jul2020    81800269\n",
        "        8th    Past  10Jul2020  21Jul2020    81800269\n",
        "        9th    Past  22Jul2020  02Aug2020    81800269\n",
        "        10th   Past  03Aug2020  17Aug2020    81800269"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  4th phase (24Apr2020 - 13May2020): finished  566 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  8th phase (25Jul2020 - 02Aug2020): finished  481 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  2nd phase (29May2020 - 09Jun2020): finished 1221 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  5th phase (10Jun2020 - 28Jun2020): finished 1234 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  4th phase (10Jun2020 - 21Jun2020): finished 1230 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  3rd phase (20Apr2020 - 01May2020): finished  270 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  9th phase (06Aug2020 - 17Aug2020): finished 1231 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (18May2020 - 28May2020): finished 1218 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  7th phase (07Jul2020 - 14Jul2020): finished 1209 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  6th phase (23Jun2020 - 02Jul2020): finished 1206 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  9th phase (02Aug2020 - 17Aug2020): finished 1181 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (17Jun2020 - 25Jun2020): finished  209 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  7th phase (12Jun2020 - 12Jul2020): finished 1118 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  2nd phase (23May2020 - 08Jun2020): finished 1160 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  5th phase (16May2020 - 24May2020): finished  232 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  1st phase (06May2020 - 25May2020): finished 1156 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  9th phase (07Aug2020 - 17Aug2020): finished  232 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  6th phase (23May2020 - 11Jun2020): finished  240 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  1st phase (11May2020 - 23May2020): finished 1158 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  5th phase (21Jun2020 - 28Jun2020): finished 1161 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  8th phase (30Jun2020 - 24Jul2020): finished 1158 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  1st phase (08Apr2020 - 15Apr2020): finished 1113 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  4th phase (20Jun2020 - 27Jun2020): finished  292 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  6th phase (16Jun2020 - 27Jun2020): finished 1025 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  3rd phase (05May2020 - 21May2020): finished  827 trials in 0 min 45 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  3rd phase (04Jun2020 - 11Jun2020): finished 1040 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  8th phase (25Jul2020 - 05Aug2020): finished 1084 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  4th phase (19May2020 - 09Jun2020): finished  706 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  8th phase (23Jul2020 - 01Aug2020): finished 1087 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  8th phase (28Jul2020 - 06Aug2020): finished 1031 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  7th phase (09Jul2020 - 17Jul2020): finished 1041 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  3rd phase (14Apr2020 - 23Apr2020): finished  335 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  7th phase (18Jul2020 - 27Jul2020): finished  271 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  1st phase (12May2020 - 28May2020): finished 1069 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  9th phase (25Jul2020 - 17Aug2020): finished 1134 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  4th phase (07May2020 - 15May2020): finished  241 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR, 10th phase (05Aug2020 - 17Aug2020): finished 1235 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  5th phase (10May2020 - 22May2020): finished  535 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  2nd phase (16Apr2020 - 23Apr2020): finished 1162 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  4th phase (12Jun2020 - 20Jun2020): finished  216 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  6th phase (04Jul2020 - 13Jul2020): finished 1143 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  9th phase (24Jul2020 - 04Aug2020): finished  200 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  1st phase (29Mar2020 - 05Apr2020): finished  204 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  7th phase (20May2020 - 05Jun2020): finished  391 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  3rd phase (22May2020 - 09Jun2020): finished 1134 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  6th phase (01Jul2020 - 10Jul2020): finished 1192 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  6th phase (29Jun2020 - 13Jul2020): finished 1208 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  5th phase (19Jun2020 - 03Jul2020): finished 1199 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  5th phase (28Jun2020 - 07Jul2020): finished  359 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  8th phase (20Jul2020 - 28Jul2020): finished  457 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  7th phase (17Jul2020 - 25Jul2020): finished  758 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  8th phase (10Jul2020 - 21Jul2020): finished  129 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  1st phase (29Mar2020 - 12Apr2020): finished 1176 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  2nd phase (06Apr2020 - 13Apr2020): finished  360 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  6th phase (29Jun2020 - 17Jul2020): finished 1178 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  7th phase (28Jun2020 - 09Jul2020): finished  245 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  7th phase (21Jul2020 - 29Jul2020): finished  251 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  2nd phase (11Apr2020 - 19Apr2020): finished  352 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  3rd phase (30May2020 - 09Jun2020): finished 1195 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  1st phase (07May2020 - 22May2020): finished 1182 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (18Jul2020 - 31Jul2020): finished  358 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  1st phase (30Apr2020 - 14May2020): finished 1197 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  9th phase (26Jul2020 - 17Aug2020): finished 1009 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  6th phase (01Jul2020 - 13Jul2020): finished  348 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  6th phase (08Jul2020 - 16Jul2020): finished  348 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  4th phase (10Jun2020 - 19Jun2020): finished 1182 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  5th phase (17Jun2020 - 30Jun2020): finished  330 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  4th phase (10Jun2020 - 18Jun2020): finished 1159 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  7th phase (11Jul2020 - 19Jul2020): finished  447 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  2nd phase (01Apr2020 - 12Apr2020): finished  241 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  1st phase (03May2020 - 11May2020): finished 1164 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  9th phase (29Jul2020 - 08Aug2020): finished  451 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  3rd phase (10Jun2020 - 17Jun2020): finished  359 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  2nd phase (13May2020 - 24May2020): finished 1168 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  9th phase (11Jul2020 - 17Aug2020): finished 1132 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  5th phase (12Jun2020 - 22Jun2020): finished 1102 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  4th phase (05Jun2020 - 16Jun2020): finished  244 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  7th phase (07Jun2020 - 29Jun2020): finished  450 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (26Jun2020 - 07Jul2020): finished  229 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  8th phase (13Jul2020 - 05Aug2020): finished 1157 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (08Jul2020 - 17Jul2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  7th phase (14Jul2020 - 22Jul2020): finished 1000 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  1st phase (28Apr2020 - 12May2020): finished 1149 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  7th phase (14Jul2020 - 24Jul2020): finished  215 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  3rd phase (29Apr2020 - 18May2020): finished 1097 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  4th phase (22May2020 - 02Jun2020): finished 1163 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  2nd phase (24May2020 - 31May2020): finished 1156 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  3rd phase (09Jun2020 - 19Jun2020): finished 1083 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  5th phase (22Jun2020 - 30Jun2020): finished  328 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  6th phase (10May2020 - 19May2020): finished  425 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  5th phase (27Jun2020 - 09Jul2020): finished 1149 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  9th phase (03Aug2020 - 17Aug2020): finished 1132 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (05May2020 - 17May2020): finished 1140 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  2nd phase (12May2020 - 21May2020): finished 1122 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  1st phase (24Mar2020 - 31Mar2020): finished  127 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  8th phase (11Jul2020 - 25Jul2020): finished 1109 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  9th phase (01Aug2020 - 17Aug2020): finished  790 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  6th phase (10Jul2020 - 20Jul2020): finished  535 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  8th phase (30Jul2020 - 06Aug2020): finished  478 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  1st phase (07Apr2020 - 16Apr2020): finished 1155 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  5th phase (14May2020 - 28Jun2020): finished  209 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  1st phase (23Apr2020 - 08May2020): finished 1151 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  8th phase (06Jun2020 - 10Jul2020): finished  501 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  2nd phase (15May2020 - 29May2020): finished 1129 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  4th phase (22Apr2020 - 01May2020): finished  457 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  5th phase (20Jun2020 - 30Jun2020): finished  542 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  2nd phase (09May2020 - 20May2020): finished 1128 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  6th phase (29Jun2020 - 06Jul2020): finished 1131 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  6th phase (01Jul2020 - 08Jul2020): finished  357 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  6th phase (25May2020 - 06Jun2020): finished  140 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (29May2020 - 06Jun2020): finished  483 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  3rd phase (21May2020 - 04Jun2020): finished  706 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  9th phase (22Jul2020 - 02Aug2020): finished  176 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  2nd phase (26May2020 - 03Jun2020): finished 1342 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  4th phase (18Jun2020 - 26Jun2020): finished  738 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  8th phase (15Jul2020 - 23Jul2020): finished  151 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  4th phase (02May2020 - 09May2020): finished 1384 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  3rd phase (13Apr2020 - 21Apr2020): finished  412 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  8th phase (18Jul2020 - 26Jul2020): finished  211 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  3rd phase (01Jun2020 - 09Jun2020): finished  218 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (07Jun2020 - 16Jun2020): finished  754 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  8th phase (26Jul2020 - 08Aug2020): finished  407 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  5th phase (03Jun2020 - 15Jun2020): finished  729 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  2nd phase (17Apr2020 - 28Apr2020): finished 1715 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  3rd phase (24Apr2020 - 06May2020): finished 1694 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  2nd phase (13Apr2020 - 04May2020): finished  617 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  7th phase (03Jul2020 - 10Jul2020): finished 1458 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  9th phase (09Aug2020 - 17Aug2020): finished  392 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  9th phase (27Jul2020 - 05Aug2020): finished  425 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  3rd phase (25May2020 - 03Jun2020): finished 1070 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  1st phase (03Apr2020 - 10Apr2020): finished 1470 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 23 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.63</td>\n",
        "      <td>0.0012539</td>\n",
        "      <td>1.43668e-06</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.00791052</td>\n",
        "      <td>360</td>\n",
        "      <td>31</td>\n",
        "      <td>0.001</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>0.174479</td>\n",
        "      <td>1156</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.47</td>\n",
        "      <td>1.87953e-05</td>\n",
        "      <td>4.07469e-05</td>\n",
        "      <td>0.0222022</td>\n",
        "      <td>0.0150294</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>0</td>\n",
        "      <td>6135</td>\n",
        "      <td>11</td>\n",
        "      <td>0.0461241</td>\n",
        "      <td>1342</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.000251967</td>\n",
        "      <td>7.58478e-05</td>\n",
        "      <td>0.0245003</td>\n",
        "      <td>0.0279052</td>\n",
        "      <td>360</td>\n",
        "      <td>8</td>\n",
        "      <td>0</td>\n",
        "      <td>3296</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0251283</td>\n",
        "      <td>1040</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jun2020</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.1</td>\n",
        "      <td>0.00220653</td>\n",
        "      <td>9.34559e-05</td>\n",
        "      <td>0.0234495</td>\n",
        "      <td>0.0211901</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>0.002</td>\n",
        "      <td>2675</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0266207</td>\n",
        "      <td>216</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.000590562</td>\n",
        "      <td>0.000113702</td>\n",
        "      <td>0.0288956</td>\n",
        "      <td>0.0271091</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2198</td>\n",
        "      <td>8</td>\n",
        "      <td>0.028379</td>\n",
        "      <td>1161</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>06Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.000539815</td>\n",
        "      <td>9.44823e-05</td>\n",
        "      <td>0.0266817</td>\n",
        "      <td>0.0310229</td>\n",
        "      <td>360</td>\n",
        "      <td>8</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2645</td>\n",
        "      <td>9</td>\n",
        "      <td>0.02546</td>\n",
        "      <td>1131</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.9</td>\n",
        "      <td>0.000805679</td>\n",
        "      <td>6.76319e-05</td>\n",
        "      <td>0.0300494</td>\n",
        "      <td>0.0331213</td>\n",
        "      <td>360</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3696</td>\n",
        "      <td>8</td>\n",
        "      <td>0.0270507</td>\n",
        "      <td>1209</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.9</td>\n",
        "      <td>0.00212136</td>\n",
        "      <td>9.35645e-05</td>\n",
        "      <td>0.0290766</td>\n",
        "      <td>0.0323011</td>\n",
        "      <td>360</td>\n",
        "      <td>7</td>\n",
        "      <td>0.002</td>\n",
        "      <td>2671</td>\n",
        "      <td>8</td>\n",
        "      <td>0.0213416</td>\n",
        "      <td>151</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.000896299</td>\n",
        "      <td>7.11256e-05</td>\n",
        "      <td>0.0288213</td>\n",
        "      <td>0.0330601</td>\n",
        "      <td>360</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3514</td>\n",
        "      <td>8</td>\n",
        "      <td>0.0300212</td>\n",
        "      <td>200</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.000966338</td>\n",
        "      <td>0.000117077</td>\n",
        "      <td>0.0308154</td>\n",
        "      <td>0.0242753</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2135</td>\n",
        "      <td>8</td>\n",
        "      <td>0.0200755</td>\n",
        "      <td>1235</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Kuwait</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>4.02</td>\n",
        "      <td>0.000153243</td>\n",
        "      <td>0.000176142</td>\n",
        "      <td>0.0229426</td>\n",
        "      <td>0.00552477</td>\n",
        "      <td>360</td>\n",
        "      <td>45</td>\n",
        "      <td>0</td>\n",
        "      <td>1419</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0916484</td>\n",
        "      <td>1158</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24May2020</td>\n",
        "      <td>31May2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.000285064</td>\n",
        "      <td>0.000136544</td>\n",
        "      <td>0.0125342</td>\n",
        "      <td>0.0110951</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>0</td>\n",
        "      <td>1830</td>\n",
        "      <td>19</td>\n",
        "      <td>0.0200877</td>\n",
        "      <td>1156</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.64</td>\n",
        "      <td>0.00396506</td>\n",
        "      <td>7.9409e-05</td>\n",
        "      <td>0.0143779</td>\n",
        "      <td>0.0223116</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>0.004</td>\n",
        "      <td>3148</td>\n",
        "      <td>17</td>\n",
        "      <td>0.0357433</td>\n",
        "      <td>218</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.72</td>\n",
        "      <td>0.000455986</td>\n",
        "      <td>8.40585e-05</td>\n",
        "      <td>0.015352</td>\n",
        "      <td>0.0213505</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>0</td>\n",
        "      <td>2974</td>\n",
        "      <td>16</td>\n",
        "      <td>0.0288748</td>\n",
        "      <td>1230</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.000437809</td>\n",
        "      <td>9.82164e-05</td>\n",
        "      <td>0.0229555</td>\n",
        "      <td>0.0181222</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>0</td>\n",
        "      <td>2545</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0298774</td>\n",
        "      <td>328</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.14</td>\n",
        "      <td>0.00043636</td>\n",
        "      <td>9.80207e-05</td>\n",
        "      <td>0.0202784</td>\n",
        "      <td>0.017612</td>\n",
        "      <td>360</td>\n",
        "      <td>14</td>\n",
        "      <td>0</td>\n",
        "      <td>2550</td>\n",
        "      <td>12</td>\n",
        "      <td>0.00969344</td>\n",
        "      <td>357</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.98</td>\n",
        "      <td>0.000344103</td>\n",
        "      <td>7.91242e-05</td>\n",
        "      <td>0.0175316</td>\n",
        "      <td>0.0178521</td>\n",
        "      <td>360</td>\n",
        "      <td>14</td>\n",
        "      <td>0</td>\n",
        "      <td>3159</td>\n",
        "      <td>14</td>\n",
        "      <td>0.00949028</td>\n",
        "      <td>1041</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jul2020</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.95</td>\n",
        "      <td>0.000683665</td>\n",
        "      <td>6.73203e-05</td>\n",
        "      <td>0.0176686</td>\n",
        "      <td>0.0184737</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3713</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0147377</td>\n",
        "      <td>211</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Jul2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.89</td>\n",
        "      <td>0.000379446</td>\n",
        "      <td>8.69548e-05</td>\n",
        "      <td>0.0175393</td>\n",
        "      <td>0.0195239</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>0</td>\n",
        "      <td>2875</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0140277</td>\n",
        "      <td>425</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.45</td>\n",
        "      <td>0.000828016</td>\n",
        "      <td>0.00022511</td>\n",
        "      <td>0.0254261</td>\n",
        "      <td>0.0101503</td>\n",
        "      <td>360</td>\n",
        "      <td>24</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1110</td>\n",
        "      <td>9</td>\n",
        "      <td>0.102115</td>\n",
        "      <td>1197</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.000436417</td>\n",
        "      <td>0.000184608</td>\n",
        "      <td>0.0128783</td>\n",
        "      <td>0.0100796</td>\n",
        "      <td>360</td>\n",
        "      <td>24</td>\n",
        "      <td>0</td>\n",
        "      <td>1354</td>\n",
        "      <td>19</td>\n",
        "      <td>0.03714</td>\n",
        "      <td>1129</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.000665483</td>\n",
        "      <td>0.000111751</td>\n",
        "      <td>0.0132656</td>\n",
        "      <td>0.013307</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2237</td>\n",
        "      <td>18</td>\n",
        "      <td>0.0454241</td>\n",
        "      <td>1195</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.03</td>\n",
        "      <td>0.0215852</td>\n",
        "      <td>9.6334e-05</td>\n",
        "      <td>0.0160865</td>\n",
        "      <td>0.0151289</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>0.022</td>\n",
        "      <td>2595</td>\n",
        "      <td>15</td>\n",
        "      <td>0.0241375</td>\n",
        "      <td>1182</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.75</td>\n",
        "      <td>0.000647561</td>\n",
        "      <td>0.000361218</td>\n",
        "      <td>0.0124644</td>\n",
        "      <td>0.00677269</td>\n",
        "      <td>360</td>\n",
        "      <td>36</td>\n",
        "      <td>0.001</td>\n",
        "      <td>692</td>\n",
        "      <td>20</td>\n",
        "      <td>0.0159258</td>\n",
        "      <td>542</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.28</td>\n",
        "      <td>0.0176877</td>\n",
        "      <td>0.000173241</td>\n",
        "      <td>0.0114017</td>\n",
        "      <td>0.00855209</td>\n",
        "      <td>360</td>\n",
        "      <td>29</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1443</td>\n",
        "      <td>21</td>\n",
        "      <td>0.0197567</td>\n",
        "      <td>1192</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>19Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.44</td>\n",
        "      <td>0.0175545</td>\n",
        "      <td>6.61061e-05</td>\n",
        "      <td>0.00992789</td>\n",
        "      <td>0.00670897</td>\n",
        "      <td>360</td>\n",
        "      <td>37</td>\n",
        "      <td>0.018</td>\n",
        "      <td>3781</td>\n",
        "      <td>25</td>\n",
        "      <td>0.0135191</td>\n",
        "      <td>447</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.63</td>\n",
        "      <td>0.0209433</td>\n",
        "      <td>8.43054e-05</td>\n",
        "      <td>0.0100962</td>\n",
        "      <td>0.00597177</td>\n",
        "      <td>360</td>\n",
        "      <td>41</td>\n",
        "      <td>0.021</td>\n",
        "      <td>2965</td>\n",
        "      <td>24</td>\n",
        "      <td>0.0109283</td>\n",
        "      <td>457</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>08Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.62</td>\n",
        "      <td>0.018048</td>\n",
        "      <td>6.96604e-05</td>\n",
        "      <td>0.00778099</td>\n",
        "      <td>0.00465945</td>\n",
        "      <td>360</td>\n",
        "      <td>53</td>\n",
        "      <td>0.018</td>\n",
        "      <td>3588</td>\n",
        "      <td>32</td>\n",
        "      <td>0.0105616</td>\n",
        "      <td>451</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.23</td>\n",
        "      <td>0.0546607</td>\n",
        "      <td>0.000116602</td>\n",
        "      <td>0.0214228</td>\n",
        "      <td>0.016338</td>\n",
        "      <td>360</td>\n",
        "      <td>15</td>\n",
        "      <td>0.055</td>\n",
        "      <td>2144</td>\n",
        "      <td>11</td>\n",
        "      <td>0.175598</td>\n",
        "      <td>1176</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.7</td>\n",
        "      <td>0.0268142</td>\n",
        "      <td>0.000725311</td>\n",
        "      <td>0.0182223</td>\n",
        "      <td>0.0246228</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.027</td>\n",
        "      <td>344</td>\n",
        "      <td>13</td>\n",
        "      <td>0.030652</td>\n",
        "      <td>617</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.0016288</td>\n",
        "      <td>0.00083429</td>\n",
        "      <td>0.0278066</td>\n",
        "      <td>0.0191237</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>0.002</td>\n",
        "      <td>299</td>\n",
        "      <td>8</td>\n",
        "      <td>0.0191705</td>\n",
        "      <td>827</td>\n",
        "      <td>0 min 45 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.16</td>\n",
        "      <td>0.000985777</td>\n",
        "      <td>0.000577805</td>\n",
        "      <td>0.023635</td>\n",
        "      <td>0.019755</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>0.001</td>\n",
        "      <td>432</td>\n",
        "      <td>10</td>\n",
        "      <td>0.015562</td>\n",
        "      <td>1163</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.1</td>\n",
        "      <td>0.0167436</td>\n",
        "      <td>0.000212143</td>\n",
        "      <td>0.0205304</td>\n",
        "      <td>0.0180615</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>0.017</td>\n",
        "      <td>1178</td>\n",
        "      <td>12</td>\n",
        "      <td>0.0195909</td>\n",
        "      <td>729</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.96</td>\n",
        "      <td>0.000319984</td>\n",
        "      <td>0.000969646</td>\n",
        "      <td>0.0207385</td>\n",
        "      <td>0.0205161</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>0</td>\n",
        "      <td>257</td>\n",
        "      <td>12</td>\n",
        "      <td>0.0224358</td>\n",
        "      <td>1025</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.92</td>\n",
        "      <td>0.0588965</td>\n",
        "      <td>7.1218e-05</td>\n",
        "      <td>0.0234549</td>\n",
        "      <td>0.0239652</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.059</td>\n",
        "      <td>3510</td>\n",
        "      <td>10</td>\n",
        "      <td>0.00769501</td>\n",
        "      <td>245</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.0266054</td>\n",
        "      <td>0.00158046</td>\n",
        "      <td>0.024656</td>\n",
        "      <td>0.0259693</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>0.027</td>\n",
        "      <td>158</td>\n",
        "      <td>10</td>\n",
        "      <td>0.00909399</td>\n",
        "      <td>129</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.0823872</td>\n",
        "      <td>6.74045e-05</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.0229893</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>0.082</td>\n",
        "      <td>3708</td>\n",
        "      <td>8</td>\n",
        "      <td>0.008688</td>\n",
        "      <td>176</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt  \\\n",
        "Country Phase                                                        \n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439  SIR-F  2.63   \n",
        "        2nd    Past  26May2020  03Jun2020     1569439  SIR-F  1.47   \n",
        "        3rd    Past  04Jun2020  11Jun2020     1569439  SIR-F  0.88   \n",
        "        4th    Past  12Jun2020  20Jun2020     1569439  SIR-F   1.1   \n",
        "        5th    Past  21Jun2020  28Jun2020     1569439  SIR-F  1.06   \n",
        "        6th    Past  29Jun2020  06Jul2020     1569439  SIR-F  0.86   \n",
        "        7th    Past  07Jul2020  14Jul2020     1569439  SIR-F   0.9   \n",
        "        8th    Past  15Jul2020  23Jul2020     1569439  SIR-F   0.9   \n",
        "        9th    Past  24Jul2020  04Aug2020     1569439  SIR-F  0.87   \n",
        "        10th   Past  05Aug2020  17Aug2020     1569439  SIR-F  1.26   \n",
        "Kuwait  1st    Past  11May2020  23May2020     4137309  SIR-F  4.02   \n",
        "        2nd    Past  24May2020  31May2020     4137309  SIR-F  1.12   \n",
        "        3rd    Past  01Jun2020  09Jun2020     4137309  SIR-F  0.64   \n",
        "        4th    Past  10Jun2020  21Jun2020     4137309  SIR-F  0.72   \n",
        "        5th    Past  22Jun2020  30Jun2020     4137309  SIR-F  1.26   \n",
        "        6th    Past  01Jul2020  08Jul2020     4137309  SIR-F  1.14   \n",
        "        7th    Past  09Jul2020  17Jul2020     4137309  SIR-F  0.98   \n",
        "        8th    Past  18Jul2020  26Jul2020     4137309  SIR-F  0.95   \n",
        "        9th    Past  27Jul2020  05Aug2020     4137309  SIR-F  0.89   \n",
        "        10th   Past  06Aug2020  17Aug2020     4137309      -     -   \n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360  SIR-F  2.45   \n",
        "        2nd    Past  15May2020  29May2020    15854360  SIR-F  1.25   \n",
        "        3rd    Past  30May2020  09Jun2020    15854360  SIR-F  0.99   \n",
        "        4th    Past  10Jun2020  19Jun2020    15854360  SIR-F  1.03   \n",
        "        5th    Past  20Jun2020  30Jun2020    15854360  SIR-F  1.75   \n",
        "        6th    Past  01Jul2020  10Jul2020    15854360  SIR-F  1.28   \n",
        "        7th    Past  11Jul2020  19Jul2020    15854360  SIR-F  1.44   \n",
        "        8th    Past  20Jul2020  28Jul2020    15854360  SIR-F  1.63   \n",
        "        9th    Past  29Jul2020  08Aug2020    15854360  SIR-F  1.62   \n",
        "        10th   Past  09Aug2020  17Aug2020    15854360      -     -   \n",
        "Iran    1st    Past  29Mar2020  12Apr2020    81800269  SIR-F  1.23   \n",
        "        2nd    Past  13Apr2020  04May2020    81800269  SIR-F   0.7   \n",
        "        3rd    Past  05May2020  21May2020    81800269  SIR-F  1.39   \n",
        "        4th    Past  22May2020  02Jun2020    81800269  SIR-F  1.16   \n",
        "        5th    Past  03Jun2020  15Jun2020    81800269  SIR-F   1.1   \n",
        "        6th    Past  16Jun2020  27Jun2020    81800269  SIR-F  0.96   \n",
        "        7th    Past  28Jun2020  09Jul2020    81800269  SIR-F  0.92   \n",
        "        8th    Past  10Jul2020  21Jul2020    81800269  SIR-F  0.87   \n",
        "        9th    Past  22Jul2020  02Aug2020    81800269  SIR-F  1.12   \n",
        "        10th   Past  03Aug2020  17Aug2020    81800269      -     -   \n",
        "\n",
        "                     theta        kappa         rho       sigma  tau  \\\n",
        "Country Phase                                                          \n",
        "Bahrain 1st      0.0012539  1.43668e-06    0.020811  0.00791052  360   \n",
        "        2nd    1.87953e-05  4.07469e-05   0.0222022   0.0150294  360   \n",
        "        3rd    0.000251967  7.58478e-05   0.0245003   0.0279052  360   \n",
        "        4th     0.00220653  9.34559e-05   0.0234495   0.0211901  360   \n",
        "        5th    0.000590562  0.000113702   0.0288956   0.0271091  360   \n",
        "        6th    0.000539815  9.44823e-05   0.0266817   0.0310229  360   \n",
        "        7th    0.000805679  6.76319e-05   0.0300494   0.0331213  360   \n",
        "        8th     0.00212136  9.35645e-05   0.0290766   0.0323011  360   \n",
        "        9th    0.000896299  7.11256e-05   0.0288213   0.0330601  360   \n",
        "        10th   0.000966338  0.000117077   0.0308154   0.0242753  360   \n",
        "Kuwait  1st    0.000153243  0.000176142   0.0229426  0.00552477  360   \n",
        "        2nd    0.000285064  0.000136544   0.0125342   0.0110951  360   \n",
        "        3rd     0.00396506   7.9409e-05   0.0143779   0.0223116  360   \n",
        "        4th    0.000455986  8.40585e-05    0.015352   0.0213505  360   \n",
        "        5th    0.000437809  9.82164e-05   0.0229555   0.0181222  360   \n",
        "        6th     0.00043636  9.80207e-05   0.0202784    0.017612  360   \n",
        "        7th    0.000344103  7.91242e-05   0.0175316   0.0178521  360   \n",
        "        8th    0.000683665  6.73203e-05   0.0176686   0.0184737  360   \n",
        "        9th    0.000379446  8.69548e-05   0.0175393   0.0195239  360   \n",
        "        10th             -            -           -           -    -   \n",
        "Senegal 1st    0.000828016   0.00022511   0.0254261   0.0101503  360   \n",
        "        2nd    0.000436417  0.000184608   0.0128783   0.0100796  360   \n",
        "        3rd    0.000665483  0.000111751   0.0132656    0.013307  360   \n",
        "        4th      0.0215852   9.6334e-05   0.0160865   0.0151289  360   \n",
        "        5th    0.000647561  0.000361218   0.0124644  0.00677269  360   \n",
        "        6th      0.0176877  0.000173241   0.0114017  0.00855209  360   \n",
        "        7th      0.0175545  6.61061e-05  0.00992789  0.00670897  360   \n",
        "        8th      0.0209433  8.43054e-05   0.0100962  0.00597177  360   \n",
        "        9th       0.018048  6.96604e-05  0.00778099  0.00465945  360   \n",
        "        10th             -            -           -           -    -   \n",
        "Iran    1st      0.0546607  0.000116602   0.0214228    0.016338  360   \n",
        "        2nd      0.0268142  0.000725311   0.0182223   0.0246228  360   \n",
        "        3rd      0.0016288   0.00083429   0.0278066   0.0191237  360   \n",
        "        4th    0.000985777  0.000577805    0.023635    0.019755  360   \n",
        "        5th      0.0167436  0.000212143   0.0205304   0.0180615  360   \n",
        "        6th    0.000319984  0.000969646   0.0207385   0.0205161  360   \n",
        "        7th      0.0588965   7.1218e-05   0.0234549   0.0239652  360   \n",
        "        8th      0.0266054   0.00158046    0.024656   0.0259693  360   \n",
        "        9th      0.0823872  6.74045e-05    0.028204   0.0229893  360   \n",
        "        10th             -            -           -           -    -   \n",
        "\n",
        "              1/gamma [day] alpha1 [-] 1/alpha2 [day] 1/beta [day]  \\\n",
        "Country Phase                                                        \n",
        "Bahrain 1st              31      0.001         174012           12   \n",
        "        2nd              16          0           6135           11   \n",
        "        3rd               8          0           3296           10   \n",
        "        4th              11      0.002           2675           10   \n",
        "        5th               9      0.001           2198            8   \n",
        "        6th               8      0.001           2645            9   \n",
        "        7th               7      0.001           3696            8   \n",
        "        8th               7      0.002           2671            8   \n",
        "        9th               7      0.001           3514            8   \n",
        "        10th             10      0.001           2135            8   \n",
        "Kuwait  1st              45          0           1419           10   \n",
        "        2nd              22          0           1830           19   \n",
        "        3rd              11      0.004           3148           17   \n",
        "        4th              11          0           2974           16   \n",
        "        5th              13          0           2545           10   \n",
        "        6th              14          0           2550           12   \n",
        "        7th              14          0           3159           14   \n",
        "        8th              13      0.001           3713           14   \n",
        "        9th              12          0           2875           14   \n",
        "        10th              -          -              -            -   \n",
        "Senegal 1st              24      0.001           1110            9   \n",
        "        2nd              24          0           1354           19   \n",
        "        3rd              18      0.001           2237           18   \n",
        "        4th              16      0.022           2595           15   \n",
        "        5th              36      0.001            692           20   \n",
        "        6th              29      0.018           1443           21   \n",
        "        7th              37      0.018           3781           25   \n",
        "        8th              41      0.021           2965           24   \n",
        "        9th              53      0.018           3588           32   \n",
        "        10th              -          -              -            -   \n",
        "Iran    1st              15      0.055           2144           11   \n",
        "        2nd              10      0.027            344           13   \n",
        "        3rd              13      0.002            299            8   \n",
        "        4th              12      0.001            432           10   \n",
        "        5th              13      0.017           1178           12   \n",
        "        6th              12          0            257           12   \n",
        "        7th              10      0.059           3510           10   \n",
        "        8th               9      0.027            158           10   \n",
        "        9th              10      0.082           3708            8   \n",
        "        10th              -          -              -            -   \n",
        "\n",
        "                    RMSLE Trials       Runtime  \n",
        "Country Phase                                   \n",
        "Bahrain 1st      0.174479   1156  1 min  0 sec  \n",
        "        2nd     0.0461241   1342  1 min  0 sec  \n",
        "        3rd     0.0251283   1040  1 min  0 sec  \n",
        "        4th     0.0266207    216  0 min 10 sec  \n",
        "        5th      0.028379   1161  1 min  0 sec  \n",
        "        6th       0.02546   1131  1 min  0 sec  \n",
        "        7th     0.0270507   1209  1 min  0 sec  \n",
        "        8th     0.0213416    151  0 min  5 sec  \n",
        "        9th     0.0300212    200  0 min 10 sec  \n",
        "        10th    0.0200755   1235  1 min  0 sec  \n",
        "Kuwait  1st     0.0916484   1158  1 min  0 sec  \n",
        "        2nd     0.0200877   1156  1 min  0 sec  \n",
        "        3rd     0.0357433    218  0 min  5 sec  \n",
        "        4th     0.0288748   1230  1 min  0 sec  \n",
        "        5th     0.0298774    328  0 min 15 sec  \n",
        "        6th    0.00969344    357  0 min 15 sec  \n",
        "        7th    0.00949028   1041  1 min  0 sec  \n",
        "        8th     0.0147377    211  0 min  5 sec  \n",
        "        9th     0.0140277    425  0 min 15 sec  \n",
        "        10th            -      -             -  \n",
        "Senegal 1st      0.102115   1197  1 min  0 sec  \n",
        "        2nd       0.03714   1129  1 min  0 sec  \n",
        "        3rd     0.0454241   1195  1 min  0 sec  \n",
        "        4th     0.0241375   1182  1 min  0 sec  \n",
        "        5th     0.0159258    542  0 min 25 sec  \n",
        "        6th     0.0197567   1192  1 min  0 sec  \n",
        "        7th     0.0135191    447  0 min 20 sec  \n",
        "        8th     0.0109283    457  0 min 20 sec  \n",
        "        9th     0.0105616    451  0 min 20 sec  \n",
        "        10th            -      -             -  \n",
        "Iran    1st      0.175598   1176  1 min  0 sec  \n",
        "        2nd      0.030652    617  0 min 25 sec  \n",
        "        3rd     0.0191705    827  0 min 45 sec  \n",
        "        4th      0.015562   1163  1 min  0 sec  \n",
        "        5th     0.0195909    729  0 min 20 sec  \n",
        "        6th     0.0224358   1025  1 min  0 sec  \n",
        "        7th    0.00769501    245  0 min 10 sec  \n",
        "        8th    0.00909399    129  0 min  5 sec  \n",
        "        9th      0.008688    176  0 min  5 sec  \n",
        "        10th            -      -             -  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-03-29</td>\n",
        "      <td>Austria</td>\n",
        "      <td>0.0184828</td>\n",
        "      <td>0.000237264</td>\n",
        "      <td>0.0139209</td>\n",
        "      <td>0.00864381</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1053</td>\n",
        "      <td>17</td>\n",
        "      <td>28</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>85.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-03-30</td>\n",
        "      <td>Austria</td>\n",
        "      <td>0.0184828</td>\n",
        "      <td>0.000237264</td>\n",
        "      <td>0.0139209</td>\n",
        "      <td>0.00864381</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1053</td>\n",
        "      <td>17</td>\n",
        "      <td>28</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>85.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-03-31</td>\n",
        "      <td>Austria</td>\n",
        "      <td>0.0184828</td>\n",
        "      <td>0.000237264</td>\n",
        "      <td>0.0139209</td>\n",
        "      <td>0.00864381</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1053</td>\n",
        "      <td>17</td>\n",
        "      <td>28</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>85.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-04-01</td>\n",
        "      <td>Austria</td>\n",
        "      <td>0.0184828</td>\n",
        "      <td>0.000237264</td>\n",
        "      <td>0.0139209</td>\n",
        "      <td>0.00864381</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1053</td>\n",
        "      <td>17</td>\n",
        "      <td>28</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>85.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-04-02</td>\n",
        "      <td>Austria</td>\n",
        "      <td>0.0184828</td>\n",
        "      <td>0.000237264</td>\n",
        "      <td>0.0139209</td>\n",
        "      <td>0.00864381</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1053</td>\n",
        "      <td>17</td>\n",
        "      <td>28</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>85.19</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date  Country      theta        kappa        rho       sigma  \\\n",
        "0 2020-03-29  Austria  0.0184828  0.000237264  0.0139209  0.00864381   \n",
        "1 2020-03-30  Austria  0.0184828  0.000237264  0.0139209  0.00864381   \n",
        "2 2020-03-31  Austria  0.0184828  0.000237264  0.0139209  0.00864381   \n",
        "3 2020-04-01  Austria  0.0184828  0.000237264  0.0139209  0.00864381   \n",
        "4 2020-04-02  Austria  0.0184828  0.000237264  0.0139209  0.00864381   \n",
        "\n",
        "  alpha1 [-] 1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0      0.018           1053           17            28  ...             2   \n",
        "1      0.018           1053           17            28  ...             2   \n",
        "2      0.018           1053           17            28  ...             2   \n",
        "3      0.018           1053           17            28  ...             2   \n",
        "4      0.018           1053           17            28  ...             2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        4                  1                       2   \n",
        "1                        4                  1                       2   \n",
        "2                        4                  1                       2   \n",
        "3                        4                  1                       2   \n",
        "4                        4                  1                       2   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               2                                    3   \n",
        "1                               2                                    3   \n",
        "2                               2                                    3   \n",
        "3                               2                                    3   \n",
        "4                               2                                    3   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               2                1             85.19  \n",
        "1                      2               2                2             85.19  \n",
        "2                      2               2                2             85.19  \n",
        "3                      2               2                2             85.19  \n",
        "4                      2               2                2             85.19  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>1.5</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.88</td>\n",
        "      <td>1.51</td>\n",
        "      <td>2.42</td>\n",
        "      <td>1.06</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.89</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.22</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.62</td>\n",
        "      <td>2.38</td>\n",
        "      <td>0.91</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>1.5</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.88</td>\n",
        "      <td>1.51</td>\n",
        "      <td>2.42</td>\n",
        "      <td>1.06</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.89</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.22</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.62</td>\n",
        "      <td>2.38</td>\n",
        "      <td>0.91</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>1.5</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.88</td>\n",
        "      <td>1.51</td>\n",
        "      <td>2.42</td>\n",
        "      <td>1.06</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.89</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.22</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.62</td>\n",
        "      <td>2.38</td>\n",
        "      <td>0.91</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>1.5</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.88</td>\n",
        "      <td>1.51</td>\n",
        "      <td>2.42</td>\n",
        "      <td>1.06</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.89</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.22</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.62</td>\n",
        "      <td>2.38</td>\n",
        "      <td>0.91</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>1.5</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.88</td>\n",
        "      <td>1.51</td>\n",
        "      <td>2.42</td>\n",
        "      <td>1.06</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.89</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.22</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.62</td>\n",
        "      <td>2.38</td>\n",
        "      <td>0.91</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Austria  Bahrain  Canada  Czech Republic  Denmark  Guinea  Iran  \\\n",
        "Date                                                                          \n",
        "2020-08-13      1.5     1.26    0.88            1.51     2.42    1.06  1.12   \n",
        "2020-08-14      1.5     1.26    0.88            1.51     2.42    1.06  1.12   \n",
        "2020-08-15      1.5     1.26    0.88            1.51     2.42    1.06  1.12   \n",
        "2020-08-16      1.5     1.26    0.88            1.51     2.42    1.06  1.12   \n",
        "2020-08-17      1.5     1.26    0.88            1.51     2.42    1.06  1.12   \n",
        "\n",
        "Country     Italy  Kuwait  Moldova  Poland  Portugal  Senegal  Ukraine  \\\n",
        "Date                                                                     \n",
        "2020-08-13   0.99    0.89     1.34    2.22      0.85     1.62     2.38   \n",
        "2020-08-14   0.99    0.89     1.34    2.22      0.85     1.62     2.38   \n",
        "2020-08-15   0.99    0.89     1.34    2.22      0.85     1.62     2.38   \n",
        "2020-08-16   0.99    0.89     1.34    2.22      0.85     1.62     2.38   \n",
        "2020-08-17   0.99    0.89     1.34    2.22      0.85     1.62     2.38   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-13                  0.91  \n",
        "2020-08-14                  0.91  \n",
        "2020-08-15                  0.91  \n",
        "2020-08-16                  0.91  \n",
        "2020-08-17                  0.91  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.024714</td>\n",
        "      <td>0.030815</td>\n",
        "      <td>0.015718</td>\n",
        "      <td>0.009587</td>\n",
        "      <td>0.026734</td>\n",
        "      <td>0.017308</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.005344</td>\n",
        "      <td>0.017539</td>\n",
        "      <td>0.012886</td>\n",
        "      <td>0.013211</td>\n",
        "      <td>0.003195</td>\n",
        "      <td>0.007781</td>\n",
        "      <td>0.009269</td>\n",
        "      <td>0.01082</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.024714</td>\n",
        "      <td>0.030815</td>\n",
        "      <td>0.015718</td>\n",
        "      <td>0.009587</td>\n",
        "      <td>0.026734</td>\n",
        "      <td>0.017308</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.005344</td>\n",
        "      <td>0.017539</td>\n",
        "      <td>0.012886</td>\n",
        "      <td>0.013211</td>\n",
        "      <td>0.003195</td>\n",
        "      <td>0.007781</td>\n",
        "      <td>0.009269</td>\n",
        "      <td>0.01082</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.024714</td>\n",
        "      <td>0.030815</td>\n",
        "      <td>0.015718</td>\n",
        "      <td>0.009587</td>\n",
        "      <td>0.026734</td>\n",
        "      <td>0.017308</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.005344</td>\n",
        "      <td>0.017539</td>\n",
        "      <td>0.012886</td>\n",
        "      <td>0.013211</td>\n",
        "      <td>0.003195</td>\n",
        "      <td>0.007781</td>\n",
        "      <td>0.009269</td>\n",
        "      <td>0.01082</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.024714</td>\n",
        "      <td>0.030815</td>\n",
        "      <td>0.015718</td>\n",
        "      <td>0.009587</td>\n",
        "      <td>0.026734</td>\n",
        "      <td>0.017308</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.005344</td>\n",
        "      <td>0.017539</td>\n",
        "      <td>0.012886</td>\n",
        "      <td>0.013211</td>\n",
        "      <td>0.003195</td>\n",
        "      <td>0.007781</td>\n",
        "      <td>0.009269</td>\n",
        "      <td>0.01082</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.024714</td>\n",
        "      <td>0.030815</td>\n",
        "      <td>0.015718</td>\n",
        "      <td>0.009587</td>\n",
        "      <td>0.026734</td>\n",
        "      <td>0.017308</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.005344</td>\n",
        "      <td>0.017539</td>\n",
        "      <td>0.012886</td>\n",
        "      <td>0.013211</td>\n",
        "      <td>0.003195</td>\n",
        "      <td>0.007781</td>\n",
        "      <td>0.009269</td>\n",
        "      <td>0.01082</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Austria   Bahrain    Canada  Czech Republic   Denmark    Guinea  \\\n",
        "Date                                                                           \n",
        "2020-08-13  0.024714  0.030815  0.015718        0.009587  0.026734  0.017308   \n",
        "2020-08-14  0.024714  0.030815  0.015718        0.009587  0.026734  0.017308   \n",
        "2020-08-15  0.024714  0.030815  0.015718        0.009587  0.026734  0.017308   \n",
        "2020-08-16  0.024714  0.030815  0.015718        0.009587  0.026734  0.017308   \n",
        "2020-08-17  0.024714  0.030815  0.015718        0.009587  0.026734  0.017308   \n",
        "\n",
        "Country         Iran     Italy    Kuwait   Moldova    Poland  Portugal  \\\n",
        "Date                                                                     \n",
        "2020-08-13  0.028204  0.005344  0.017539  0.012886  0.013211  0.003195   \n",
        "2020-08-14  0.028204  0.005344  0.017539  0.012886  0.013211  0.003195   \n",
        "2020-08-15  0.028204  0.005344  0.017539  0.012886  0.013211  0.003195   \n",
        "2020-08-16  0.028204  0.005344  0.017539  0.012886  0.013211  0.003195   \n",
        "2020-08-17  0.028204  0.005344  0.017539  0.012886  0.013211  0.003195   \n",
        "\n",
        "Country      Senegal   Ukraine  United Arab Emirates  \n",
        "Date                                                  \n",
        "2020-08-13  0.007781  0.009269               0.01082  \n",
        "2020-08-14  0.007781  0.009269               0.01082  \n",
        "2020-08-15  0.007781  0.009269               0.01082  \n",
        "2020-08-16  0.007781  0.009269               0.01082  \n",
        "2020-08-17  0.007781  0.009269               0.01082  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.016309</td>\n",
        "      <td>0.024275</td>\n",
        "      <td>0.017326</td>\n",
        "      <td>0.006318</td>\n",
        "      <td>0.011013</td>\n",
        "      <td>0.016251</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.005176</td>\n",
        "      <td>0.019524</td>\n",
        "      <td>0.009337</td>\n",
        "      <td>0.005785</td>\n",
        "      <td>0.003725</td>\n",
        "      <td>0.004659</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.011843</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.016309</td>\n",
        "      <td>0.024275</td>\n",
        "      <td>0.017326</td>\n",
        "      <td>0.006318</td>\n",
        "      <td>0.011013</td>\n",
        "      <td>0.016251</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.005176</td>\n",
        "      <td>0.019524</td>\n",
        "      <td>0.009337</td>\n",
        "      <td>0.005785</td>\n",
        "      <td>0.003725</td>\n",
        "      <td>0.004659</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.011843</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.016309</td>\n",
        "      <td>0.024275</td>\n",
        "      <td>0.017326</td>\n",
        "      <td>0.006318</td>\n",
        "      <td>0.011013</td>\n",
        "      <td>0.016251</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.005176</td>\n",
        "      <td>0.019524</td>\n",
        "      <td>0.009337</td>\n",
        "      <td>0.005785</td>\n",
        "      <td>0.003725</td>\n",
        "      <td>0.004659</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.011843</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.016309</td>\n",
        "      <td>0.024275</td>\n",
        "      <td>0.017326</td>\n",
        "      <td>0.006318</td>\n",
        "      <td>0.011013</td>\n",
        "      <td>0.016251</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.005176</td>\n",
        "      <td>0.019524</td>\n",
        "      <td>0.009337</td>\n",
        "      <td>0.005785</td>\n",
        "      <td>0.003725</td>\n",
        "      <td>0.004659</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.011843</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.016309</td>\n",
        "      <td>0.024275</td>\n",
        "      <td>0.017326</td>\n",
        "      <td>0.006318</td>\n",
        "      <td>0.011013</td>\n",
        "      <td>0.016251</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.005176</td>\n",
        "      <td>0.019524</td>\n",
        "      <td>0.009337</td>\n",
        "      <td>0.005785</td>\n",
        "      <td>0.003725</td>\n",
        "      <td>0.004659</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.011843</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Austria   Bahrain    Canada  Czech Republic   Denmark    Guinea  \\\n",
        "Date                                                                           \n",
        "2020-08-13  0.016309  0.024275  0.017326        0.006318  0.011013  0.016251   \n",
        "2020-08-14  0.016309  0.024275  0.017326        0.006318  0.011013  0.016251   \n",
        "2020-08-15  0.016309  0.024275  0.017326        0.006318  0.011013  0.016251   \n",
        "2020-08-16  0.016309  0.024275  0.017326        0.006318  0.011013  0.016251   \n",
        "2020-08-17  0.016309  0.024275  0.017326        0.006318  0.011013  0.016251   \n",
        "\n",
        "Country         Iran     Italy    Kuwait   Moldova    Poland  Portugal  \\\n",
        "Date                                                                     \n",
        "2020-08-13  0.022989  0.005176  0.019524  0.009337  0.005785  0.003725   \n",
        "2020-08-14  0.022989  0.005176  0.019524  0.009337  0.005785  0.003725   \n",
        "2020-08-15  0.022989  0.005176  0.019524  0.009337  0.005785  0.003725   \n",
        "2020-08-16  0.022989  0.005176  0.019524  0.009337  0.005785  0.003725   \n",
        "2020-08-17  0.022989  0.005176  0.019524  0.009337  0.005785  0.003725   \n",
        "\n",
        "Country      Senegal   Ukraine  United Arab Emirates  \n",
        "Date                                                  \n",
        "2020-08-13  0.004659  0.003737              0.011843  \n",
        "2020-08-14  0.004659  0.003737              0.011843  \n",
        "2020-08-15  0.004659  0.003737              0.011843  \n",
        "2020-08-16  0.004659  0.003737              0.011843  \n",
        "2020-08-17  0.004659  0.003737              0.011843  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.00043</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000294</td>\n",
        "      <td>0.000176</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.00043</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000294</td>\n",
        "      <td>0.000176</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.00043</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000294</td>\n",
        "      <td>0.000176</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.00043</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000294</td>\n",
        "      <td>0.000176</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.00043</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000294</td>\n",
        "      <td>0.000176</td>\n",
        "      <td>0.00001</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000024</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Austria   Bahrain   Canada  Czech Republic   Denmark    Guinea  \\\n",
        "Date                                                                          \n",
        "2020-08-13  0.000194  0.000117  0.00043        0.000021  0.000021  0.000137   \n",
        "2020-08-14  0.000194  0.000117  0.00043        0.000021  0.000021  0.000137   \n",
        "2020-08-15  0.000194  0.000117  0.00043        0.000021  0.000021  0.000137   \n",
        "2020-08-16  0.000194  0.000117  0.00043        0.000021  0.000021  0.000137   \n",
        "2020-08-17  0.000194  0.000117  0.00043        0.000021  0.000021  0.000137   \n",
        "\n",
        "Country         Iran    Italy    Kuwait   Moldova    Poland  Portugal  \\\n",
        "Date                                                                    \n",
        "2020-08-13  0.000067  0.00001  0.000087  0.000294  0.000176   0.00001   \n",
        "2020-08-14  0.000067  0.00001  0.000087  0.000294  0.000176   0.00001   \n",
        "2020-08-15  0.000067  0.00001  0.000087  0.000294  0.000176   0.00001   \n",
        "2020-08-16  0.000067  0.00001  0.000087  0.000294  0.000176   0.00001   \n",
        "2020-08-17  0.000067  0.00001  0.000087  0.000294  0.000176   0.00001   \n",
        "\n",
        "Country     Senegal   Ukraine  United Arab Emirates  \n",
        "Date                                                 \n",
        "2020-08-13  0.00007  0.000151              0.000024  \n",
        "2020-08-14  0.00007  0.000151              0.000024  \n",
        "2020-08-15  0.00007  0.000151              0.000024  \n",
        "2020-08-16  0.00007  0.000151              0.000024  \n",
        "2020-08-17  0.00007  0.000151              0.000024  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.001072</td>\n",
        "      <td>0.000966</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000857</td>\n",
        "      <td>0.000677</td>\n",
        "      <td>0.000289</td>\n",
        "      <td>0.082387</td>\n",
        "      <td>0.034478</td>\n",
        "      <td>0.000379</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.002203</td>\n",
        "      <td>0.018048</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.00106</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.001072</td>\n",
        "      <td>0.000966</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000857</td>\n",
        "      <td>0.000677</td>\n",
        "      <td>0.000289</td>\n",
        "      <td>0.082387</td>\n",
        "      <td>0.034478</td>\n",
        "      <td>0.000379</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.002203</td>\n",
        "      <td>0.018048</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.00106</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.001072</td>\n",
        "      <td>0.000966</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000857</td>\n",
        "      <td>0.000677</td>\n",
        "      <td>0.000289</td>\n",
        "      <td>0.082387</td>\n",
        "      <td>0.034478</td>\n",
        "      <td>0.000379</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.002203</td>\n",
        "      <td>0.018048</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.00106</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.001072</td>\n",
        "      <td>0.000966</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000857</td>\n",
        "      <td>0.000677</td>\n",
        "      <td>0.000289</td>\n",
        "      <td>0.082387</td>\n",
        "      <td>0.034478</td>\n",
        "      <td>0.000379</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.002203</td>\n",
        "      <td>0.018048</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.00106</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.001072</td>\n",
        "      <td>0.000966</td>\n",
        "      <td>0.000223</td>\n",
        "      <td>0.000857</td>\n",
        "      <td>0.000677</td>\n",
        "      <td>0.000289</td>\n",
        "      <td>0.082387</td>\n",
        "      <td>0.034478</td>\n",
        "      <td>0.000379</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.002203</td>\n",
        "      <td>0.018048</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.00106</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Austria   Bahrain    Canada  Czech Republic   Denmark    Guinea  \\\n",
        "Date                                                                           \n",
        "2020-08-13  0.001072  0.000966  0.000223        0.000857  0.000677  0.000289   \n",
        "2020-08-14  0.001072  0.000966  0.000223        0.000857  0.000677  0.000289   \n",
        "2020-08-15  0.001072  0.000966  0.000223        0.000857  0.000677  0.000289   \n",
        "2020-08-16  0.001072  0.000966  0.000223        0.000857  0.000677  0.000289   \n",
        "2020-08-17  0.001072  0.000966  0.000223        0.000857  0.000677  0.000289   \n",
        "\n",
        "Country         Iran     Italy    Kuwait   Moldova    Poland  Portugal  \\\n",
        "Date                                                                     \n",
        "2020-08-13  0.082387  0.034478  0.000379  0.000122  0.000154  0.002203   \n",
        "2020-08-14  0.082387  0.034478  0.000379  0.000122  0.000154  0.002203   \n",
        "2020-08-15  0.082387  0.034478  0.000379  0.000122  0.000154  0.002203   \n",
        "2020-08-16  0.082387  0.034478  0.000379  0.000122  0.000154  0.002203   \n",
        "2020-08-17  0.082387  0.034478  0.000379  0.000122  0.000154  0.002203   \n",
        "\n",
        "Country      Senegal   Ukraine  United Arab Emirates  \n",
        "Date                                                  \n",
        "2020-08-13  0.018048  0.000066               0.00106  \n",
        "2020-08-14  0.018048  0.000066               0.00106  \n",
        "2020-08-15  0.018048  0.000066               0.00106  \n",
        "2020-08-16  0.018048  0.000066               0.00106  \n",
        "2020-08-17  0.018048  0.000066               0.00106  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 8517 entries, 0 to 8712\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 8517 non-null   datetime64[ns]\n",
        " 1   Country                              8517 non-null   object        \n",
        " 2   Rt                                   8517 non-null   float64       \n",
        " 3   theta                                8517 non-null   float64       \n",
        " 4   kappa                                8517 non-null   float64       \n",
        " 5   rho                                  8517 non-null   float64       \n",
        " 6   sigma                                8517 non-null   float64       \n",
        " 7   School_closing                       8517 non-null   int64         \n",
        " 8   Workplace_closing                    8517 non-null   int64         \n",
        " 9   Cancel_events                        8517 non-null   int64         \n",
        " 10  Gatherings_restrictions              8517 non-null   int64         \n",
        " 11  Transport_closing                    8517 non-null   int64         \n",
        " 12  Stay_home_restrictions               8517 non-null   int64         \n",
        " 13  Internal_movement_restrictions       8517 non-null   int64         \n",
        " 14  International_movement_restrictions  8517 non-null   int64         \n",
        " 15  Information_campaigns                8517 non-null   int64         \n",
        " 16  Testing_policy                       8517 non-null   int64         \n",
        " 17  Contact_tracing                      8517 non-null   int64         \n",
        " 18  Stringency_index                     8517 non-null   float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 1.3+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col0{\n",
        "            background-color:  #ece7f2;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col1{\n",
        "            background-color:  #e1dfed;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col0{\n",
        "            background-color:  #0a73b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col0{\n",
        "            background-color:  #e7e3f0;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col15{\n",
        "            background-color:  #e3e0ee;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col0{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col0{\n",
        "            background-color:  #e9e5f1;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col5{\n",
        "            background-color:  #94b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col13{\n",
        "            background-color:  #71a8ce;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col0{\n",
        "            background-color:  #89b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col7{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col13{\n",
        "            background-color:  #8cb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col0{\n",
        "            background-color:  #bcc7e1;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col0{\n",
        "            background-color:  #acc0dd;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col0,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col2{\n",
        "            background-color:  #97b7d7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col9{\n",
        "            background-color:  #96b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col1{\n",
        "            background-color:  #f4eef6;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col1{\n",
        "            background-color:  #d2d2e7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col7{\n",
        "            background-color:  #2c89bd;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col1{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col8{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col2{\n",
        "            background-color:  #a9bfdc;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col1,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col3{\n",
        "            background-color:  #c5cce3;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col1{\n",
        "            background-color:  #569dc8;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col1{\n",
        "            background-color:  #99b8d8;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col1{\n",
        "            background-color:  #9fbad9;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col1{\n",
        "            background-color:  #c6cce3;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col1{\n",
        "            background-color:  #b1c2de;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col2{\n",
        "            background-color:  #d4d4e8;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col4{\n",
        "            background-color:  #b9c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col3{\n",
        "            background-color:  #8eb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col3{\n",
        "            background-color:  #7dacd1;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col2{\n",
        "            background-color:  #78abd0;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col2,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col4{\n",
        "            background-color:  #b0c2de;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col2{\n",
        "            background-color:  #63a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col2{\n",
        "            background-color:  #f1ebf5;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col6{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col3{\n",
        "            background-color:  #d3d4e7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col3{\n",
        "            background-color:  #dcdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col3{\n",
        "            background-color:  #7eadd1;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col6{\n",
        "            background-color:  #5a9ec9;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col3{\n",
        "            background-color:  #60a1ca;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col3{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col3,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col9{\n",
        "            background-color:  #d5d5e8;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col3{\n",
        "            background-color:  #84b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col9{\n",
        "            background-color:  #adc1dd;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col4{\n",
        "            background-color:  #8fb4d6;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col8{\n",
        "            background-color:  #afc1dd;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col4{\n",
        "            background-color:  #a1bbda;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col4,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col6{\n",
        "            background-color:  #b8c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col4{\n",
        "            background-color:  #d1d2e6;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col4{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col4{\n",
        "            background-color:  #a8bedc;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col5{\n",
        "            background-color:  #2786bb;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col5{\n",
        "            background-color:  #046198;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col5{\n",
        "            background-color:  #4c99c5;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col5{\n",
        "            background-color:  #2484ba;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col5{\n",
        "            background-color:  #69a5cc;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col5{\n",
        "            background-color:  #a7bddb;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col5{\n",
        "            background-color:  #c2cbe2;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col5{\n",
        "            background-color:  #e6e2ef;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col5,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col11{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col6,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col12{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col6{\n",
        "            background-color:  #549cc7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col6{\n",
        "            background-color:  #056fae;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col6{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col6{\n",
        "            background-color:  #f2ecf5;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col6{\n",
        "            background-color:  #045e94;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col8,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col7,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col11{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col7{\n",
        "            background-color:  #c1cae2;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col7{\n",
        "            background-color:  #9ab8d8;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col9,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col7{\n",
        "            background-color:  #e0deed;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col7{\n",
        "            background-color:  #0f76b3;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col8{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col8{\n",
        "            background-color:  #1278b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col8{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col8{\n",
        "            background-color:  #f5eef6;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col8{\n",
        "            background-color:  #04649e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col9{\n",
        "            background-color:  #1e80b8;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col9{\n",
        "            background-color:  #4094c3;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col9{\n",
        "            background-color:  #056faf;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col11,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col10{\n",
        "            background-color:  #3991c1;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col10{\n",
        "            background-color:  #b5c4df;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col14,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col10,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col10{\n",
        "            background-color:  #bbc7e0;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col10{\n",
        "            background-color:  #045687;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col11{\n",
        "            background-color:  #2a88bc;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col11{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col11{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col13,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col12{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col15,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col12,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col14{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col12{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col13{\n",
        "            background-color:  #bfc9e1;\n",
        "            color:  #000000;\n",
        "        }#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col16,#T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col14{\n",
        "            background-color:  #83afd3;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col1\" class=\"data row0 col1\" >-0.309815</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col2\" class=\"data row0 col2\" >-0.239368</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col3\" class=\"data row0 col3\" >0.605348</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col4\" class=\"data row0 col4\" >-0.276803</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col5\" class=\"data row0 col5\" >-0.254335</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col6\" class=\"data row0 col6\" >0.074718</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col7\" class=\"data row0 col7\" >-0.294296</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col8\" class=\"data row0 col8\" >0.130375</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col9\" class=\"data row0 col9\" >0.256286</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col10\" class=\"data row0 col10\" >0.168251</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col11\" class=\"data row0 col11\" >0.205424</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col12\" class=\"data row0 col12\" >0.158361</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col13\" class=\"data row0 col13\" >-0.034755</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col14\" class=\"data row0 col14\" >-0.034244</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col15\" class=\"data row0 col15\" >0.032648</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row0_col16\" class=\"data row0 col16\" >0.118864</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col0\" class=\"data row1 col0\" >-0.309815</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col2\" class=\"data row1 col2\" >0.121775</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col3\" class=\"data row1 col3\" >-0.397352</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col4\" class=\"data row1 col4\" >-0.138704</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col5\" class=\"data row1 col5\" >0.477342</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col6\" class=\"data row1 col6\" >0.293265</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col7\" class=\"data row1 col7\" >0.470485</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col8\" class=\"data row1 col8\" >0.047876</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col9\" class=\"data row1 col9\" >-0.074659</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col10\" class=\"data row1 col10\" >0.336646</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col11\" class=\"data row1 col11\" >0.108130</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col12\" class=\"data row1 col12\" >-0.239081</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col13\" class=\"data row1 col13\" >0.089391</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col14\" class=\"data row1 col14\" >-0.085955</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col15\" class=\"data row1 col15\" >0.011070</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row1_col16\" class=\"data row1 col16\" >0.291870</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col0\" class=\"data row2 col0\" >-0.239368</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col1\" class=\"data row2 col1\" >0.121775</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col3\" class=\"data row2 col3\" >-0.151810</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col4\" class=\"data row2 col4\" >-0.025906</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col5\" class=\"data row2 col5\" >0.150562</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col6\" class=\"data row2 col6\" >0.046391</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col7\" class=\"data row2 col7\" >0.124922</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col8\" class=\"data row2 col8\" >0.216878</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col9\" class=\"data row2 col9\" >-0.075126</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col10\" class=\"data row2 col10\" >0.043080</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col11\" class=\"data row2 col11\" >0.257650</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col12\" class=\"data row2 col12\" >0.233689</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col13\" class=\"data row2 col13\" >0.014927</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col14\" class=\"data row2 col14\" >0.300719</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col15\" class=\"data row2 col15\" >-0.362473</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row2_col16\" class=\"data row2 col16\" >0.117815</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col0\" class=\"data row3 col0\" >0.605348</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col1\" class=\"data row3 col1\" >-0.397352</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col2\" class=\"data row3 col2\" >-0.151810</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col4\" class=\"data row3 col4\" >0.539903</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col5\" class=\"data row3 col5\" >-0.150401</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col6\" class=\"data row3 col6\" >0.120681</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col7\" class=\"data row3 col7\" >-0.205353</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col8\" class=\"data row3 col8\" >0.212961</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col9\" class=\"data row3 col9\" >0.325345</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col10\" class=\"data row3 col10\" >0.152073</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col11\" class=\"data row3 col11\" >0.310816</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col12\" class=\"data row3 col12\" >0.177506</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col13\" class=\"data row3 col13\" >-0.162620</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col14\" class=\"data row3 col14\" >0.214761</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col15\" class=\"data row3 col15\" >-0.076044</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row3_col16\" class=\"data row3 col16\" >0.184967</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col0\" class=\"data row4 col0\" >-0.276803</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col1\" class=\"data row4 col1\" >-0.138704</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col2\" class=\"data row4 col2\" >-0.025906</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col3\" class=\"data row4 col3\" >0.539903</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col5\" class=\"data row4 col5\" >0.017266</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col6\" class=\"data row4 col6\" >0.016181</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col7\" class=\"data row4 col7\" >-0.024114</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col8\" class=\"data row4 col8\" >0.028239</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col9\" class=\"data row4 col9\" >0.143508</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col10\" class=\"data row4 col10\" >0.023637</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col11\" class=\"data row4 col11\" >0.083409</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col12\" class=\"data row4 col12\" >-0.020704</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col13\" class=\"data row4 col13\" >-0.128749</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col14\" class=\"data row4 col14\" >0.161036</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col15\" class=\"data row4 col15\" >0.017174</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row4_col16\" class=\"data row4 col16\" >0.053994</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col0\" class=\"data row5 col0\" >-0.254335</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col1\" class=\"data row5 col1\" >0.477342</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col2\" class=\"data row5 col2\" >0.150562</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col3\" class=\"data row5 col3\" >-0.150401</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col4\" class=\"data row5 col4\" >0.017266</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col6\" class=\"data row5 col6\" >0.492525</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col7\" class=\"data row5 col7\" >0.749850</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col8\" class=\"data row5 col8\" >0.368488</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col9\" class=\"data row5 col9\" >0.128449</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col10\" class=\"data row5 col10\" >0.501809</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col11\" class=\"data row5 col11\" >0.282660</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col12\" class=\"data row5 col12\" >0.055911</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col13\" class=\"data row5 col13\" >-0.068235</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col14\" class=\"data row5 col14\" >0.123545</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col15\" class=\"data row5 col15\" >-0.269975</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row5_col16\" class=\"data row5 col16\" >0.636712</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col0\" class=\"data row6 col0\" >0.074718</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col1\" class=\"data row6 col1\" >0.293265</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col2\" class=\"data row6 col2\" >0.046391</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col3\" class=\"data row6 col3\" >0.120681</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col4\" class=\"data row6 col4\" >0.016181</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col5\" class=\"data row6 col5\" >0.492525</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col7\" class=\"data row6 col7\" >0.513188</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col8\" class=\"data row6 col8\" >0.536411</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col9\" class=\"data row6 col9\" >0.343377</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col10\" class=\"data row6 col10\" >0.635574</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col11\" class=\"data row6 col11\" >0.497616</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col12\" class=\"data row6 col12\" >0.326914</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col13\" class=\"data row6 col13\" >-0.020980</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col14\" class=\"data row6 col14\" >0.294579</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col15\" class=\"data row6 col15\" >-0.377196</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row6_col16\" class=\"data row6 col16\" >0.773292</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col0\" class=\"data row7 col0\" >-0.294296</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col1\" class=\"data row7 col1\" >0.470485</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col2\" class=\"data row7 col2\" >0.124922</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col3\" class=\"data row7 col3\" >-0.205353</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col4\" class=\"data row7 col4\" >-0.024114</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col5\" class=\"data row7 col5\" >0.749850</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col6\" class=\"data row7 col6\" >0.513188</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col8\" class=\"data row7 col8\" >0.390500</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col9\" class=\"data row7 col9\" >0.023887</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col10\" class=\"data row7 col10\" >0.474247</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col11\" class=\"data row7 col11\" >0.202698</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col12\" class=\"data row7 col12\" >0.032190</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col13\" class=\"data row7 col13\" >-0.060421</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col14\" class=\"data row7 col14\" >0.106031</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col15\" class=\"data row7 col15\" >-0.233604</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row7_col16\" class=\"data row7 col16\" >0.585337</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col0\" class=\"data row8 col0\" >0.130375</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col1\" class=\"data row8 col1\" >0.047876</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col2\" class=\"data row8 col2\" >0.216878</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col3\" class=\"data row8 col3\" >0.212961</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col4\" class=\"data row8 col4\" >0.028239</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col5\" class=\"data row8 col5\" >0.368488</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col6\" class=\"data row8 col6\" >0.536411</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col7\" class=\"data row8 col7\" >0.390500</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col9\" class=\"data row8 col9\" >0.300138</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col10\" class=\"data row8 col10\" >0.469670</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col11\" class=\"data row8 col11\" >0.431994</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col12\" class=\"data row8 col12\" >0.571992</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col13\" class=\"data row8 col13\" >0.020072</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col14\" class=\"data row8 col14\" >0.446205</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col15\" class=\"data row8 col15\" >-0.399295</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row8_col16\" class=\"data row8 col16\" >0.721358</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col0\" class=\"data row9 col0\" >0.256286</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col1\" class=\"data row9 col1\" >-0.074659</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col2\" class=\"data row9 col2\" >-0.075126</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col3\" class=\"data row9 col3\" >0.325345</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col4\" class=\"data row9 col4\" >0.143508</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col5\" class=\"data row9 col5\" >0.128449</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col6\" class=\"data row9 col6\" >0.343377</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col7\" class=\"data row9 col7\" >0.023887</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col8\" class=\"data row9 col8\" >0.300138</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col10\" class=\"data row9 col10\" >0.527585</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col11\" class=\"data row9 col11\" >0.406647</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col12\" class=\"data row9 col12\" >0.029508</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col13\" class=\"data row9 col13\" >-0.238116</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col14\" class=\"data row9 col14\" >-0.158645</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col15\" class=\"data row9 col15\" >0.119279</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row9_col16\" class=\"data row9 col16\" >0.625303</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col0\" class=\"data row10 col0\" >0.168251</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col1\" class=\"data row10 col1\" >0.336646</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col2\" class=\"data row10 col2\" >0.043080</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col3\" class=\"data row10 col3\" >0.152073</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col4\" class=\"data row10 col4\" >0.023637</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col5\" class=\"data row10 col5\" >0.501809</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col6\" class=\"data row10 col6\" >0.635574</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col7\" class=\"data row10 col7\" >0.474247</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col8\" class=\"data row10 col8\" >0.469670</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col9\" class=\"data row10 col9\" >0.527585</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col11\" class=\"data row10 col11\" >0.426787</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col12\" class=\"data row10 col12\" >0.163852</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col13\" class=\"data row10 col13\" >-0.006125</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col14\" class=\"data row10 col14\" >-0.032912</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col15\" class=\"data row10 col15\" >-0.030710</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row10_col16\" class=\"data row10 col16\" >0.834467</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col0\" class=\"data row11 col0\" >0.205424</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col1\" class=\"data row11 col1\" >0.108130</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col2\" class=\"data row11 col2\" >0.257650</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col3\" class=\"data row11 col3\" >0.310816</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col4\" class=\"data row11 col4\" >0.083409</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col5\" class=\"data row11 col5\" >0.282660</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col6\" class=\"data row11 col6\" >0.497616</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col7\" class=\"data row11 col7\" >0.202698</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col8\" class=\"data row11 col8\" >0.431994</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col9\" class=\"data row11 col9\" >0.406647</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col10\" class=\"data row11 col10\" >0.426787</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col12\" class=\"data row11 col12\" >0.478710</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col13\" class=\"data row11 col13\" >-0.124206</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col14\" class=\"data row11 col14\" >0.392923</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col15\" class=\"data row11 col15\" >-0.503226</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row11_col16\" class=\"data row11 col16\" >0.636128</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col0\" class=\"data row12 col0\" >0.158361</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col1\" class=\"data row12 col1\" >-0.239081</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col2\" class=\"data row12 col2\" >0.233689</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col3\" class=\"data row12 col3\" >0.177506</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col4\" class=\"data row12 col4\" >-0.020704</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col5\" class=\"data row12 col5\" >0.055911</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col6\" class=\"data row12 col6\" >0.326914</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col7\" class=\"data row12 col7\" >0.032190</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col8\" class=\"data row12 col8\" >0.571992</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col9\" class=\"data row12 col9\" >0.029508</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col10\" class=\"data row12 col10\" >0.163852</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col11\" class=\"data row12 col11\" >0.478710</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col13\" class=\"data row12 col13\" >0.099833</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col14\" class=\"data row12 col14\" >0.514249</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col15\" class=\"data row12 col15\" >-0.422545</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row12_col16\" class=\"data row12 col16\" >0.407588</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col0\" class=\"data row13 col0\" >-0.034755</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col1\" class=\"data row13 col1\" >0.089391</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col2\" class=\"data row13 col2\" >0.014927</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col3\" class=\"data row13 col3\" >-0.162620</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col4\" class=\"data row13 col4\" >-0.128749</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col5\" class=\"data row13 col5\" >-0.068235</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col6\" class=\"data row13 col6\" >-0.020980</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col7\" class=\"data row13 col7\" >-0.060421</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col8\" class=\"data row13 col8\" >0.020072</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col9\" class=\"data row13 col9\" >-0.238116</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col10\" class=\"data row13 col10\" >-0.006125</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col11\" class=\"data row13 col11\" >-0.124206</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col12\" class=\"data row13 col12\" >0.099833</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col14\" class=\"data row13 col14\" >0.259584</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col15\" class=\"data row13 col15\" >0.160214</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row13_col16\" class=\"data row13 col16\" >-0.050598</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col0\" class=\"data row14 col0\" >-0.034244</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col1\" class=\"data row14 col1\" >-0.085955</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col2\" class=\"data row14 col2\" >0.300719</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col3\" class=\"data row14 col3\" >0.214761</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col4\" class=\"data row14 col4\" >0.161036</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col5\" class=\"data row14 col5\" >0.123545</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col6\" class=\"data row14 col6\" >0.294579</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col7\" class=\"data row14 col7\" >0.106031</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col8\" class=\"data row14 col8\" >0.446205</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col9\" class=\"data row14 col9\" >-0.158645</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col10\" class=\"data row14 col10\" >-0.032912</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col11\" class=\"data row14 col11\" >0.392923</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col12\" class=\"data row14 col12\" >0.514249</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col13\" class=\"data row14 col13\" >0.259584</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col15\" class=\"data row14 col15\" >-0.424931</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row14_col16\" class=\"data row14 col16\" >0.193722</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col0\" class=\"data row15 col0\" >0.032648</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col1\" class=\"data row15 col1\" >0.011070</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col2\" class=\"data row15 col2\" >-0.362473</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col3\" class=\"data row15 col3\" >-0.076044</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col4\" class=\"data row15 col4\" >0.017174</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col5\" class=\"data row15 col5\" >-0.269975</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col6\" class=\"data row15 col6\" >-0.377196</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col7\" class=\"data row15 col7\" >-0.233604</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col8\" class=\"data row15 col8\" >-0.399295</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col9\" class=\"data row15 col9\" >0.119279</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col10\" class=\"data row15 col10\" >-0.030710</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col11\" class=\"data row15 col11\" >-0.503226</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col12\" class=\"data row15 col12\" >-0.422545</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col13\" class=\"data row15 col13\" >0.160214</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col14\" class=\"data row15 col14\" >-0.424931</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row15_col16\" class=\"data row15 col16\" >-0.254665</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945level0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col0\" class=\"data row16 col0\" >0.118864</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col1\" class=\"data row16 col1\" >0.291870</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col2\" class=\"data row16 col2\" >0.117815</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col3\" class=\"data row16 col3\" >0.184967</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col4\" class=\"data row16 col4\" >0.053994</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col5\" class=\"data row16 col5\" >0.636712</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col6\" class=\"data row16 col6\" >0.773292</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col7\" class=\"data row16 col7\" >0.585337</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col8\" class=\"data row16 col8\" >0.721358</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col9\" class=\"data row16 col9\" >0.625303</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col10\" class=\"data row16 col10\" >0.834467</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col11\" class=\"data row16 col11\" >0.636128</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col12\" class=\"data row16 col12\" >0.407588</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col13\" class=\"data row16 col13\" >-0.050598</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col14\" class=\"data row16 col14\" >0.193722</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col15\" class=\"data row16 col15\" >-0.254665</td>\n",
        "                        <td id=\"T_0b1cdeb6_e09e_11ea_80c5_5254003b6945row16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7fa898973ca0>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "zero-size array to reduction operation minimum which has no identity",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0mFigureCanvasBase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2191\u001b[0m                            else suppress())\n\u001b[1;32m   2192\u001b[0m                     \u001b[0;32mwith\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2193\u001b[0;31m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2194\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2195\u001b[0m                     bbox_inches = self.figure.get_tightbbox(\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1863\u001b[0;31m             mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   1864\u001b[0m                 renderer, self, artists, self.suppressComposite)\n\u001b[1;32m   1865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    409\u001b[0m                          \u001b[0;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m                 **kwargs)\n\u001b[0;32m--> 411\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2746\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2747\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2748\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2749\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2750\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    929\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_sizes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m         \u001b[0mCollection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    383\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m                 \u001b[0mcombined_transform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 385\u001b[0;31m             \u001b[0mextents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpaths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_extents\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined_transform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m             if (extents.width < self.figure.bbox.width\n\u001b[1;32m    387\u001b[0m                     and extents.height < self.figure.bbox.height):\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/path.py\u001b[0m in \u001b[0;36mget_extents\u001b[0;34m(self, transform, **kwargs)\u001b[0m\n\u001b[1;32m    601\u001b[0m                 \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mdzeros\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m             \u001b[0mxys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mBbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    604\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    605\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mintersects_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilled\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_amin\u001b[0;34m(a, axis, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m     41\u001b[0m def _amin(a, axis=None, out=None, keepdims=False,\n\u001b[1;32m     42\u001b[0m           initial=_NoValue, where=True):\n\u001b[0;32m---> 43\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mumr_minimum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m def _sum(a, axis=None, dtype=None, out=None, keepdims=False,\n",
        "\u001b[0;31mValueError\u001b[0m: zero-size array to reduction operation minimum which has no identity"
       ]
      },
      {
       "output_type": "display_data",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
