{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.12.0-phi.new.339.357.359.362.366.367.382.383.389.408.fix.360.373.406'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "196"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **16th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{2: ['Timor-Leste', 'Holy See', 'Solomon Islands'],\n",
        " 3: ['Saint Kitts and Nevis', 'Tanzania', 'Laos'],\n",
        " 4: ['Dominica', 'Brunei', 'Saint Lucia', 'Grenada'],\n",
        " 5: ['Fiji', 'Equatorial Guinea'],\n",
        " 6: ['Mauritius', 'Antigua and Barbuda', 'Saint Vincent and the Grenadines'],\n",
        " 7: ['Gambia'],\n",
        " 8: ['Lesotho', 'Monaco', 'Bahamas', 'Cambodia', 'Kyrgyzstan',\n",
        "     'Northern Mariana Islands', 'Madagascar', 'Vietnam', 'Liechtenstein',\n",
        "     'Trinidad and Tobago', 'Seychelles'],\n",
        " 9: ['Papua New Guinea', 'Burundi', 'Bermuda', 'Belize', 'Suriname', 'Oman',\n",
        "     'Malawi', 'Kazakhstan', 'Zambia', 'Swaziland', 'Djibouti', 'Australia',\n",
        "     'Zimbabwe', 'Namibia', 'Bolivia', 'South Africa', 'Sao Tome and Principe',\n",
        "     'Virgin Islands, U.S.', 'Jamaica', 'Barbados', 'Ghana',\n",
        "     'Republic of the Congo', 'Uzbekistan'],\n",
        " 10: ['Guatemala', 'Benin', 'Israel', 'Senegal', 'Chile', 'New Zealand',\n",
        "      'Venezuela', 'Central African Republic', 'Botswana', 'Philippines',\n",
        "      'Bahrain', 'Dominican Republic', 'Liberia', 'Saudi Arabia', 'Mongolia',\n",
        "      'Rwanda', 'Ethiopia', 'Honduras', 'Egypt', 'Gabon', 'Angola', 'Kenya',\n",
        "      'Comoros', 'Guyana', 'Libya', 'Syria', 'Eritrea', 'Algeria', 'Kuwait',\n",
        "      'Singapore', \"Cote d'Ivoire\", 'Maldives', 'Bhutan', 'Nigeria',\n",
        "      'Mozambique'],\n",
        " 11: ['Guinea', 'Sierra Leone', 'Cape Verde', 'Sudan', 'Costa Rica', 'Chad',\n",
        "      'Guinea-Bissau', 'Peru', 'Iraq', 'Taiwan', 'Pakistan', 'Bangladesh',\n",
        "      'Paraguay', 'Colombia', 'Nicaragua', 'Guam', 'Jordan', 'El Salvador',\n",
        "      'Mexico', 'Cameroon', 'Yemen', 'Brazil', 'India', 'Panama', 'Puerto Rico',\n",
        "      'Ecuador'],\n",
        " 12: ['Indonesia', 'Democratic Republic of the Congo', 'United Arab Emirates',\n",
        "      'Argentina', 'Iceland', 'Montenegro', 'Togo', 'Kosovo', 'Nepal',\n",
        "      'South Sudan', 'Georgia', 'Myanmar', 'Qatar', 'Sri Lanka', 'Tajikistan',\n",
        "      'Uganda', 'Niger', 'Japan'],\n",
        " 13: ['Armenia', 'Russia', 'Haiti', 'Bulgaria', 'Slovenia', 'China', 'Greece',\n",
        "      'Somalia', 'Burkina Faso', 'Croatia', 'Luxembourg', 'Uruguay',\n",
        "      'Palestine', 'San Marino', 'Slovakia', 'Mauritania', 'Cuba', 'Azerbaijan',\n",
        "      'Mali', 'Norway', 'United States', 'Poland', 'Cyprus', 'Malta', 'Serbia',\n",
        "      'Moldova', 'Hungary'],\n",
        " 14: ['Bosnia and Herzegovina', 'Afghanistan', 'Albania', 'Malaysia', 'Iran',\n",
        "      'Morocco', 'Ireland', 'Andorra', 'Turkey', 'Thailand', 'Czech Republic',\n",
        "      'Spain', 'Belarus', 'Sweden', 'North Macedonia', 'Tunisia', 'Lithuania'],\n",
        " 15: ['Denmark', 'Ukraine', 'Latvia', 'Romania', 'Lebanon', 'Italy', 'Estonia',\n",
        "      'Austria', 'Germany', 'Switzerland', 'Finland'],\n",
        " 16: ['Netherlands', 'Canada', 'United Kingdom', 'France', 'Belgium',\n",
        "      'Portugal']}\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=16)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "6"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{16: ['Netherlands', 'Canada', 'United Kingdom', 'France', 'Belgium',\n",
        "      'Portugal']}\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"5\" valign=\"top\">Netherlands</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Mar2020</td>\n",
        "      <td>31Mar2020</td>\n",
        "      <td>17231624</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Apr2020</td>\n",
        "      <td>16Apr2020</td>\n",
        "      <td>17231624</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>22May2020</td>\n",
        "      <td>17231624</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>17231624</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Aug2020</td>\n",
        "      <td>04Sep2020</td>\n",
        "      <td>17231624</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
        "      <th>...</th>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"5\" valign=\"top\">Portugal</th>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Oct2020</td>\n",
        "      <td>02Nov2020</td>\n",
        "      <td>10283822</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Nov2020</td>\n",
        "      <td>12Nov2020</td>\n",
        "      <td>10283822</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Nov2020</td>\n",
        "      <td>22Nov2020</td>\n",
        "      <td>10283822</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Nov2020</td>\n",
        "      <td>03Dec2020</td>\n",
        "      <td>10283822</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Dec2020</td>\n",
        "      <td>12Dec2020</td>\n",
        "      <td>10283822</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>96 rows \u00d7 4 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "                   Type      Start        End  Population\n",
        "Country     Phase                                        \n",
        "Netherlands 0th    Past  11Mar2020  31Mar2020    17231624\n",
        "            1st    Past  01Apr2020  16Apr2020    17231624\n",
        "            2nd    Past  17Apr2020  22May2020    17231624\n",
        "            3rd    Past  23May2020  07Aug2020    17231624\n",
        "            4th    Past  08Aug2020  04Sep2020    17231624\n",
        "...                 ...        ...        ...         ...\n",
        "Portugal    11th   Past  28Oct2020  02Nov2020    10283822\n",
        "            12th   Past  03Nov2020  12Nov2020    10283822\n",
        "            13th   Past  13Nov2020  22Nov2020    10283822\n",
        "            14th   Past  23Nov2020  03Dec2020    10283822\n",
        "            15th   Past  04Dec2020  12Dec2020    10283822\n",
        "\n",
        "[96 rows x 4 columns]"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF, timeout=10)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>\n",
        "Running optimization with 4 CPUs...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 10th phase (22Oct2020 - 27Oct2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 10th phase (29Oct2020 - 06Nov2020): finished  350 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 14th phase (23Nov2020 - 03Dec2020): finished  344 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (07Feb2020 - 30Mar2020): finished  325 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  4th phase (05Jun2020 - 20Jul2020): finished  346 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (19Jun2020 - 14Jul2020): finished  351 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  2nd phase (17Apr2020 - 22May2020): finished  346 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  4th phase (12Jun2020 - 16Aug2020): finished  335 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 13th phase (21Nov2020 - 27Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 11th phase (22Oct2020 - 31Oct2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  7th phase (23Sep2020 - 05Oct2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  4th phase (08Aug2020 - 04Sep2020): finished  348 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  2nd phase (29Apr2020 - 14May2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 15th phase (03Dec2020 - 12Dec2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 11th phase (02Nov2020 - 07Nov2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 10th phase (26Oct2020 - 05Nov2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  5th phase (17Aug2020 - 17Sep2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (26Aug2020 - 15Sep2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  6th phase (18Sep2020 - 02Oct2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (31Mar2020 - 22Apr2020): finished  342 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 15th phase (02Dec2020 - 12Dec2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  2nd phase (14Apr2020 - 07May2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  8th phase (05Oct2020 - 14Oct2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 15th phase (04Dec2020 - 12Dec2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  3rd phase (12May2020 - 11Jun2020): finished  326 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (19Apr2020 - 20May2020): finished  320 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (09Jul2020 - 18Aug2020): finished  326 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  6th phase (19Sep2020 - 27Sep2020): finished  337 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  6th phase (30Aug2020 - 22Sep2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 11th phase (06Nov2020 - 11Nov2020): finished  363 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  9th phase (18Oct2020 - 28Oct2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (02Oct2020 - 13Oct2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 12th phase (14Nov2020 - 19Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 13th phase (13Nov2020 - 22Nov2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  0th phase (14Mar2020 - 01Apr2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (02Oct2020 - 08Oct2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  9th phase (20Oct2020 - 25Oct2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 14th phase (24Nov2020 - 02Dec2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  3rd phase (08May2020 - 27Jul2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 14th phase (25Nov2020 - 03Dec2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  7th phase (29Sep2020 - 06Oct2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 14th phase (23Nov2020 - 01Dec2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (21May2020 - 18Jun2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  9th phase (13Oct2020 - 22Oct2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 13th phase (15Nov2020 - 22Nov2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 12th phase (03Nov2020 - 12Nov2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  6th phase (15Sep2020 - 28Sep2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 11th phase (07Nov2020 - 13Nov2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  9th phase (15Oct2020 - 24Oct2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  5th phase (21Jul2020 - 29Aug2020): finished  344 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 12th phase (14Nov2020 - 20Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (19Aug2020 - 02Sep2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  1st phase (14Apr2020 - 28Apr2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  5th phase (05Sep2020 - 18Sep2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 12th phase (01Nov2020 - 10Nov2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 13th phase (11Nov2020 - 23Nov2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  2nd phase (24Apr2020 - 11May2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  5th phase (23Aug2020 - 14Sep2020): finished  353 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (15Jul2020 - 25Aug2020): finished  348 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  8th phase (06Oct2020 - 17Oct2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 11th phase (28Oct2020 - 02Nov2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  7th phase (03Oct2020 - 11Oct2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  1st phase (31Mar2020 - 13Apr2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (15Sep2020 - 22Sep2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 13th phase (20Nov2020 - 25Nov2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  4th phase (28Jul2020 - 22Aug2020): finished  353 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 11th phase (04Nov2020 - 13Nov2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (02Apr2020 - 18Apr2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 14th phase (28Nov2020 - 04Dec2020): finished  340 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  8th phase (12Oct2020 - 19Oct2020): finished  332 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  9th phase (14Oct2020 - 21Oct2020): finished  332 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 14th phase (26Nov2020 - 01Dec2020): finished  334 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  0th phase (26Mar2020 - 13Apr2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  0th phase (13Mar2020 - 30Mar2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  3rd phase (23May2020 - 07Aug2020): finished  335 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  3rd phase (15May2020 - 04Jun2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  0th phase (18Feb2020 - 06Apr2020): finished  345 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (16Oct2020 - 21Oct2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  8th phase (07Oct2020 - 12Oct2020): finished  363 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (03Sep2020 - 14Sep2020): finished  360 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (16Sep2020 - 01Oct2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  1st phase (07Apr2020 - 23Apr2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 12th phase (08Nov2020 - 14Nov2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  7th phase (28Sep2020 - 04Oct2020): finished  363 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 10th phase (25Oct2020 - 03Nov2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 12th phase (12Nov2020 - 17Nov2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  1st phase (01Apr2020 - 16Apr2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (23Apr2020 - 08Jul2020): finished  337 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 15th phase (05Dec2020 - 12Dec2020): finished  368 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  0th phase (11Mar2020 - 31Mar2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (23Sep2020 - 01Oct2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 13th phase (18Nov2020 - 24Nov2020): finished  367 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (09Oct2020 - 15Oct2020): finished  370 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 10th phase (23Oct2020 - 01Nov2020): finished  366 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 4 min 18 sec\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"5\" valign=\"top\">Netherlands</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Mar2020</td>\n",
        "      <td>31Mar2020</td>\n",
        "      <td>17231624</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>7.65</td>\n",
        "      <td>0.0456489</td>\n",
        "      <td>0.000785068</td>\n",
        "      <td>0.0427772</td>\n",
        "      <td>0.0045531</td>\n",
        "      <td>360</td>\n",
        "      <td>0.046</td>\n",
        "      <td>5</td>\n",
        "      <td>54</td>\n",
        "      <td>318</td>\n",
        "      <td>0.564275</td>\n",
        "      <td>365</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Apr2020</td>\n",
        "      <td>16Apr2020</td>\n",
        "      <td>17231624</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.16</td>\n",
        "      <td>0.142689</td>\n",
        "      <td>0.000159533</td>\n",
        "      <td>0.0233244</td>\n",
        "      <td>0.0170949</td>\n",
        "      <td>360</td>\n",
        "      <td>0.143</td>\n",
        "      <td>10</td>\n",
        "      <td>14</td>\n",
        "      <td>1567</td>\n",
        "      <td>0.0535324</td>\n",
        "      <td>356</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>22May2020</td>\n",
        "      <td>17231624</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.56</td>\n",
        "      <td>0.170098</td>\n",
        "      <td>8.10782e-05</td>\n",
        "      <td>0.0189658</td>\n",
        "      <td>0.0280319</td>\n",
        "      <td>360</td>\n",
        "      <td>0.17</td>\n",
        "      <td>13</td>\n",
        "      <td>8</td>\n",
        "      <td>3083</td>\n",
        "      <td>0.0758252</td>\n",
        "      <td>346</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>17231624</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.95</td>\n",
        "      <td>0.0990107</td>\n",
        "      <td>0.00555757</td>\n",
        "      <td>0.0248932</td>\n",
        "      <td>0.0180148</td>\n",
        "      <td>360</td>\n",
        "      <td>0.099</td>\n",
        "      <td>10</td>\n",
        "      <td>13</td>\n",
        "      <td>44</td>\n",
        "      <td>0.313322</td>\n",
        "      <td>335</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Aug2020</td>\n",
        "      <td>04Sep2020</td>\n",
        "      <td>17231624</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.21</td>\n",
        "      <td>0.0191307</td>\n",
        "      <td>1.42246e-05</td>\n",
        "      <td>0.0226293</td>\n",
        "      <td>0.0182894</td>\n",
        "      <td>360</td>\n",
        "      <td>0.019</td>\n",
        "      <td>11</td>\n",
        "      <td>13</td>\n",
        "      <td>17575</td>\n",
        "      <td>0.0903984</td>\n",
        "      <td>348</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
        "      <th>...</th>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"5\" valign=\"top\">Portugal</th>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Oct2020</td>\n",
        "      <td>02Nov2020</td>\n",
        "      <td>10283822</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.18</td>\n",
        "      <td>0.00013075</td>\n",
        "      <td>0.000168203</td>\n",
        "      <td>0.0171683</td>\n",
        "      <td>0.00770542</td>\n",
        "      <td>360</td>\n",
        "      <td>0</td>\n",
        "      <td>14</td>\n",
        "      <td>32</td>\n",
        "      <td>1486</td>\n",
        "      <td>0.00977216</td>\n",
        "      <td>362</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Nov2020</td>\n",
        "      <td>12Nov2020</td>\n",
        "      <td>10283822</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.89</td>\n",
        "      <td>0.00129257</td>\n",
        "      <td>0.000191072</td>\n",
        "      <td>0.0191448</td>\n",
        "      <td>0.00991507</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>13</td>\n",
        "      <td>25</td>\n",
        "      <td>1308</td>\n",
        "      <td>0.0243799</td>\n",
        "      <td>355</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Nov2020</td>\n",
        "      <td>22Nov2020</td>\n",
        "      <td>10283822</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>8.16456e-05</td>\n",
        "      <td>0.000231061</td>\n",
        "      <td>0.0182706</td>\n",
        "      <td>0.0159443</td>\n",
        "      <td>360</td>\n",
        "      <td>0</td>\n",
        "      <td>13</td>\n",
        "      <td>15</td>\n",
        "      <td>1081</td>\n",
        "      <td>0.0481644</td>\n",
        "      <td>358</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Nov2020</td>\n",
        "      <td>03Dec2020</td>\n",
        "      <td>10283822</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.85</td>\n",
        "      <td>0.0180656</td>\n",
        "      <td>1.42242e-05</td>\n",
        "      <td>0.0127852</td>\n",
        "      <td>0.014771</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>19</td>\n",
        "      <td>16</td>\n",
        "      <td>17575</td>\n",
        "      <td>0.0162982</td>\n",
        "      <td>344</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Dec2020</td>\n",
        "      <td>12Dec2020</td>\n",
        "      <td>10283822</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>96 rows \u00d7 18 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "                   Type      Start        End  Population    ODE    Rt  \\\n",
        "Country     Phase                                                        \n",
        "Netherlands 0th    Past  11Mar2020  31Mar2020    17231624  SIR-F  7.65   \n",
        "            1st    Past  01Apr2020  16Apr2020    17231624  SIR-F  1.16   \n",
        "            2nd    Past  17Apr2020  22May2020    17231624  SIR-F  0.56   \n",
        "            3rd    Past  23May2020  07Aug2020    17231624  SIR-F  0.95   \n",
        "            4th    Past  08Aug2020  04Sep2020    17231624  SIR-F  1.21   \n",
        "...                 ...        ...        ...         ...    ...   ...   \n",
        "Portugal    11th   Past  28Oct2020  02Nov2020    10283822  SIR-F  2.18   \n",
        "            12th   Past  03Nov2020  12Nov2020    10283822  SIR-F  1.89   \n",
        "            13th   Past  13Nov2020  22Nov2020    10283822  SIR-F  1.13   \n",
        "            14th   Past  23Nov2020  03Dec2020    10283822  SIR-F  0.85   \n",
        "            15th   Past  04Dec2020  12Dec2020    10283822      -     -   \n",
        "\n",
        "                         theta        kappa        rho       sigma  tau  \\\n",
        "Country     Phase                                                         \n",
        "Netherlands 0th      0.0456489  0.000785068  0.0427772   0.0045531  360   \n",
        "            1st       0.142689  0.000159533  0.0233244   0.0170949  360   \n",
        "            2nd       0.170098  8.10782e-05  0.0189658   0.0280319  360   \n",
        "            3rd      0.0990107   0.00555757  0.0248932   0.0180148  360   \n",
        "            4th      0.0191307  1.42246e-05  0.0226293   0.0182894  360   \n",
        "...                        ...          ...        ...         ...  ...   \n",
        "Portugal    11th    0.00013075  0.000168203  0.0171683  0.00770542  360   \n",
        "            12th    0.00129257  0.000191072  0.0191448  0.00991507  360   \n",
        "            13th   8.16456e-05  0.000231061  0.0182706   0.0159443  360   \n",
        "            14th     0.0180656  1.42242e-05  0.0127852    0.014771  360   \n",
        "            15th             -            -          -           -    -   \n",
        "\n",
        "                  alpha1 [-] 1/beta [day] 1/gamma [day] 1/alpha2 [day]  \\\n",
        "Country     Phase                                                        \n",
        "Netherlands 0th        0.046            5            54            318   \n",
        "            1st        0.143           10            14           1567   \n",
        "            2nd         0.17           13             8           3083   \n",
        "            3rd        0.099           10            13             44   \n",
        "            4th        0.019           11            13          17575   \n",
        "...                      ...          ...           ...            ...   \n",
        "Portugal    11th           0           14            32           1486   \n",
        "            12th       0.001           13            25           1308   \n",
        "            13th           0           13            15           1081   \n",
        "            14th       0.018           19            16          17575   \n",
        "            15th           -            -             -              -   \n",
        "\n",
        "                        RMSLE Trials       Runtime  \n",
        "Country     Phase                                   \n",
        "Netherlands 0th      0.564275    365  0 min 10 sec  \n",
        "            1st     0.0535324    356  0 min 10 sec  \n",
        "            2nd     0.0758252    346  0 min 10 sec  \n",
        "            3rd      0.313322    335  0 min 10 sec  \n",
        "            4th     0.0903984    348  0 min 10 sec  \n",
        "...                       ...    ...           ...  \n",
        "Portugal    11th   0.00977216    362  0 min 10 sec  \n",
        "            12th    0.0243799    355  0 min 10 sec  \n",
        "            13th    0.0481644    358  0 min 10 sec  \n",
        "            14th    0.0162982    344  0 min 10 sec  \n",
        "            15th            -      -             -  \n",
        "\n",
        "[96 rows x 18 columns]"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0456489</td>\n",
        "      <td>0.000785068</td>\n",
        "      <td>0.0427772</td>\n",
        "      <td>0.0045531</td>\n",
        "      <td>0.046</td>\n",
        "      <td>318</td>\n",
        "      <td>5</td>\n",
        "      <td>54</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0456489</td>\n",
        "      <td>0.000785068</td>\n",
        "      <td>0.0427772</td>\n",
        "      <td>0.0045531</td>\n",
        "      <td>0.046</td>\n",
        "      <td>318</td>\n",
        "      <td>5</td>\n",
        "      <td>54</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0456489</td>\n",
        "      <td>0.000785068</td>\n",
        "      <td>0.0427772</td>\n",
        "      <td>0.0045531</td>\n",
        "      <td>0.046</td>\n",
        "      <td>318</td>\n",
        "      <td>5</td>\n",
        "      <td>54</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0456489</td>\n",
        "      <td>0.000785068</td>\n",
        "      <td>0.0427772</td>\n",
        "      <td>0.0045531</td>\n",
        "      <td>0.046</td>\n",
        "      <td>318</td>\n",
        "      <td>5</td>\n",
        "      <td>54</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0456489</td>\n",
        "      <td>0.000785068</td>\n",
        "      <td>0.0427772</td>\n",
        "      <td>0.0045531</td>\n",
        "      <td>0.046</td>\n",
        "      <td>318</td>\n",
        "      <td>5</td>\n",
        "      <td>54</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date      Country      theta        kappa        rho      sigma  \\\n",
        "0 2020-03-11  Netherlands  0.0456489  0.000785068  0.0427772  0.0045531   \n",
        "1 2020-03-11  Netherlands  0.0456489  0.000785068  0.0427772  0.0045531   \n",
        "2 2020-03-11  Netherlands  0.0456489  0.000785068  0.0427772  0.0045531   \n",
        "3 2020-03-11  Netherlands  0.0456489  0.000785068  0.0427772  0.0045531   \n",
        "4 2020-03-11  Netherlands  0.0456489  0.000785068  0.0427772  0.0045531   \n",
        "\n",
        "  alpha1 [-] 1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0      0.046            318            5            54  ...             2   \n",
        "1      0.046            318            5            54  ...             0   \n",
        "2      0.046            318            5            54  ...             0   \n",
        "3      0.046            318            5            54  ...             0   \n",
        "4      0.046            318            5            54  ...             0   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       1   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        0                  0                       0   \n",
        "4                        0                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    0   \n",
        "1                               0                                    0   \n",
        "2                               0                                    0   \n",
        "3                               0                                    0   \n",
        "4                               0                                    0   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               1                2             18.52  \n",
        "1                      0               1                2             18.52  \n",
        "2                      0               1                2             18.52  \n",
        "3                      0               1                2             18.52  \n",
        "4                      0               1                2             18.52  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-08</th>\n",
        "      <td>0.59</td>\n",
        "      <td>1.21</td>\n",
        "      <td>1.03</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.13</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.59</td>\n",
        "      <td>1.21</td>\n",
        "      <td>1.03</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.13</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.59</td>\n",
        "      <td>1.21</td>\n",
        "      <td>1.03</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.13</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.59</td>\n",
        "      <td>1.21</td>\n",
        "      <td>1.03</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.13</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.59</td>\n",
        "      <td>1.21</td>\n",
        "      <td>1.03</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.13</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Belgium  Canada  France  Netherlands  Portugal  United Kingdom\n",
        "Date                                                                      \n",
        "2020-12-08     0.59    1.21    1.03         1.34      0.85            1.13\n",
        "2020-12-09     0.59    1.21    1.03         1.34      0.85            1.13\n",
        "2020-12-10     0.59    1.21    1.03         1.34      0.85            1.13\n",
        "2020-12-11     0.59    1.21    1.03         1.34      0.85            1.13\n",
        "2020-12-12     0.59    1.21    1.03         1.34      0.85            1.13"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-08</th>\n",
        "      <td>0.020162</td>\n",
        "      <td>0.022717</td>\n",
        "      <td>0.024945</td>\n",
        "      <td>0.027529</td>\n",
        "      <td>0.012785</td>\n",
        "      <td>0.022841</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.020162</td>\n",
        "      <td>0.022717</td>\n",
        "      <td>0.024945</td>\n",
        "      <td>0.027529</td>\n",
        "      <td>0.012785</td>\n",
        "      <td>0.022841</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.020162</td>\n",
        "      <td>0.022717</td>\n",
        "      <td>0.024945</td>\n",
        "      <td>0.027529</td>\n",
        "      <td>0.012785</td>\n",
        "      <td>0.022841</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.020162</td>\n",
        "      <td>0.022717</td>\n",
        "      <td>0.024945</td>\n",
        "      <td>0.027529</td>\n",
        "      <td>0.012785</td>\n",
        "      <td>0.022841</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.020162</td>\n",
        "      <td>0.022717</td>\n",
        "      <td>0.024945</td>\n",
        "      <td>0.027529</td>\n",
        "      <td>0.012785</td>\n",
        "      <td>0.022841</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Belgium    Canada    France  Netherlands  Portugal  \\\n",
        "Date                                                              \n",
        "2020-12-08  0.020162  0.022717  0.024945     0.027529  0.012785   \n",
        "2020-12-09  0.020162  0.022717  0.024945     0.027529  0.012785   \n",
        "2020-12-10  0.020162  0.022717  0.024945     0.027529  0.012785   \n",
        "2020-12-11  0.020162  0.022717  0.024945     0.027529  0.012785   \n",
        "2020-12-12  0.020162  0.022717  0.024945     0.027529  0.012785   \n",
        "\n",
        "Country     United Kingdom  \n",
        "Date                        \n",
        "2020-12-08        0.022841  \n",
        "2020-12-09        0.022841  \n",
        "2020-12-10        0.022841  \n",
        "2020-12-11        0.022841  \n",
        "2020-12-12        0.022841  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAn0AAAGmCAYAAAAJYjK8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAACRA0lEQVR4nO2dd5wkdZn/3091mLg7G9kMS5YcBEURAbMoeiomDGBac/qpp6enop4ephMDihgAUVER5fBAMZAFhCXHJe2yy+6yeWd2J3ZXPb8/qqqnZ6ZDdQ7zvF+veU131beqvtVT0/WpJ4qqYhiGYRiGYbQ3TqMnYBiGYRiGYdQeE32GYRiGYRjTABN9hmEYhmEY0wATfYZhGIZhGNMAE32GYRiGYRjTABN9hmEYhmEY0wATfUbLICIPiMhbGj2PShGRZ4rI3SKyS0QuLHHbE0Rkd42mVjYi8mcR+Wyj55EPETlLRK5r9DwMwzAaSbzREzCM4GZ8naqeNWn5hQCqembw+5CI+zsJuFZVpXqzrCr/jX++R5a6oareCPRWfUYVoqovb/Qc2o0WuI4Nw2gxzNIXARF5nojcKiI3i8gnGj0foz6ISKJGu94HuLtG+zamGTW8Tg3DaDNM9EXjCeD5qvpc4JUi0t3oCU1HRGSNiJwZvJ4lIr8Rka0iMiAij4jIaSKyJ/DnYMzu4OcjwftDROSvIrJNRJ4UkW+JSOek/X9RRP4mIruAz4jIkIg8d9I8Li7klhWRV4vIXSLSLyIPisi7guWxwDW7D3BeMLfX5dg+57kF604SEc0amxCRb4rI0yKyRUS+ISLXi8hZWWNURD4iIreJyGDwALNnsGytiGwXkbOzxneKyO9FZEPggr5fRN5Q5G9zXY5jfiB4UNotIvdO/hxz7OPZwX7Cv89XRCSetf4nwXx3i8ijIvKhSdvPFZHzgr9jOO/nTRrzRRHZGJzzj0QkVmA+3SLy3yLyWLC/R7P/XiLyHhF5KPgb3SUip2atO1NE1kza3wQXc3Cu/yMivw72sU5EVgTrCl3HKiIfFZF/icgQ8F4RSYvIsknHuzH7b2IYhoGq2k8JP8Dfgc5Gz6OdfoDrgLNyLL8QuDDr/RrgzOD1V4ErgRmAAHsBBwfrTvIv7Qn7mglsDLbrBJbjW9u+N2n/G4BnB/vsBi6YNIfZwDBwXJ5zOQ4YBf4NiAHPB/qB1+Y6jzz7iHxuwOeAx4EDgSTweSCV/XkCCtwGLAvO6RrgEeC/gm2OAsaAE4PxXcAZQB9+CMgZwT4Pivo3DI55J7BvsI/vA48X2P5AYBfw+mD8XsHf53NZY94FzMd/WH1Z8Dm/OFjnADcBfwKWBp/b/sB+wfqzgnP4GJAIjrcDeFuBOV0C3AocELxfBhwevH5DsP0JwXxfE8znmGD9mcCaSfs7C9+tn/2Z7Qj+pk6wzzSwd77rOOuzfRB4RnCeXcC1kz7/g4LzXdro/2/7sR/7aZ6ftrX0BVac1cFT8aGT1h0gIrcEFpRbRGT/iPt8Mf6Na6Qmk57efEZEdmb/AKcXGD8GzCW48anqk6r6YIHxrwh+f0FVR1R1DfCfwLtFJDtm6meq+i/1GQJ+BLxBRPqC9W8HHlHVW/Mc5x3A/6rq5arqquoNwE+AFQXmVsm5nQl8Q1VXqeoYvmDcnGPcd1R1XXBOvweWAF9U1TFVvQu4HzgGQFWHVfUiVe1X1bSqXoQvMk4q4RwAvqWqj6tqGvgxsI+IzM0z9oPA5ap6aXDMJ/FjH98RDlDVn6nqFlX1VPUvwF+AFwWrnwk8BzhDVZ8K/n6PqupjWcdYrarnqGpKVVcB/wCelWsyIjIfeBPwPlV9JDj+OlW9NxjyLuAnqnpjMN8/4gvOd5f4GV2qqtcF5/Q7YCdwdITtvq2qDwfnOYx/nb4zy3K5ArhKVZ8qcT6GYbQxLSn6AvfTXpOW9YrI4qxFl+NbWZ7MsYvzgHNV9QDgXPwbEiJycOByyf75TLBuKfAfgMX01YazVXVW9g/w6wLjvwn8FfgpsFVEfici+xQYvwx4UlXdrGWP4VtJ5mctW529kareBjwEvDVY9B6C66XAcZ6YtOwxYM8C20ymlHNbim85DOfrAetyjNuY9XoI2DLpsxjCtywiIh0i8p3ArTkQCPBDgD1KOAfwraYhYcbxjDxj9wdeP0n0/wRYGMxJROTzgTu1P1j/8qw5LQe2qur2iPMJ55RvPsuD36vyrK/G37nUOWWzetL7P+JbbV8mIh3A2yh8nRqGMQ1pSdGHfwP6m4gcCBBYYf4KnBIOUNWbVHXKzU9E9sB/kr4kWHQJcLSIzFfVB1X1pEk/ZwdfohcC71fVpiuXMR1R1SFV/YKqHgHsB7j4rlgAL8cm64C9RCT7mt8X31W7JWtZrm1/BLwniElbDvyywNTWAXtPWrYvsLbANhMocm6TeYpxgUJwfsvyjI3KJ4CX4rtQ+wIB/gC+K7FWPA38YpLwn6mqYabym4EP4VvfZgdz+nPWnNYA80RkdpXmsyb4fUCe9cX+zruAnknrF1Maua7FnOtUNYX/kLACeB0wiG8JNQzDyNCSok9V78C3uFwZBGr/DfiNqv40wubLgPWhlSP4vYHCN8rTgYOBHwfWvyUVnYBRMSLyKvETM+L4VqphfHEEvoAgfCgIuBJfIHwpsGTtBXwF+LmqKoW5BF9YfR//OhsoMPZC4N9E5FTxEzeeh3+tRrk2o5zbZC4CPhmELCTxrdGlWuQm04cfn7YViIvI+/EftGrJD/Hd6K8TkWTw2e0nIi/LmlM6mJOIyGuAF2dtvxK4BbhARBYHlsH9RWS/ciajqlvw/+4/DMM/RGSpiBweDPk5/oPA8cFcXw28KlgOcBcwW/zkIkf88iuvL3Eaua7jQpyPL9Q/je96LiQaDcOYhrSk6ANQ1euBfwduxA+O/l4Nj3WBqi7Osv6tr9WxjMjsje/C3wmsBxbgiyuCGKzvAzcFrsIPBULtxfhxXxsJrhvgU8UOpKqDwMX4FuKCLjNVvQXfKvUV/CD9nwL/rqq/r8a55eDrwBX457MeXxzdDlQSd/ptYBO+FXEtvgv5nxXsryiqeju+dfG9+OexDT/2MAzjuBC4AT+28Gl81+7/Zm2v+MkzW4B/AQP4Ls8FFUzrPfjnfbX4WdfX4lteUdXfAp8Ffob/d/4S8MYgHABVfQLfMnkO/t/xveS31uYk13VcZPxafI/HwcG8DMMwJiDFjRzNiYgswLfw/Qn/Jvum8At30rg1wCtV9f7g/R74mYtzVdUNAp+3AfsHT/eGMQUR+TjwdlU9qtFzKURwPa8HPq6qlxQbb7QXIvJdYJmqvrbRczEMo/loSUufiCzCL53ydVX9HL7b5DdSpA4YgKpuxi8F8eZg0ZuBu0zwGfkQkXmMW22aChHpE5FXiF+vrxc4G78kyZ8bPDWjzojI3vjldb7b6LkYhtGctKTow8+4/Lyq/goyMX7/RlZ7KhH5nog8he+a+ruIPJC1/fuAD4vII8CHg/eGMQUR+QZ+BvitFE7gaBQOfv23bfju2GcDL1fVnQ2ck1FnROQ3wH34sXzXN3o+hmE0Jy3r3jUMwzAMwzCi06qWPsMwDMMwDKMETPQZhmEYhmFMA+LFhzQP8+bN0+XLlzd6GoZhGIbREO64446tqjq/+EjDmEpLib7ly5ezcuXKRk/DMAzDMBqCiORqLWoYkTD3rmEYhmEYxjTARJ9hGIZhGMY0wESfYRiGYRjGNMBEn2EYhmEYxjTARJ9hGIZhGMY0wESfYRiGYRjGNMBEn2EYhmEYxjTARJ9hGIZhGMY0wESfYRiGYRjGNMBEn2EYhmEYxjTARJ9hGIZhGMY0wESfYRiGYRjGNMBEn2EYhmEYxjTARJ9hGIZhGMY0IN7oCRiGYRhGLekfTvGdvz3C8JhbcNwhS2by9ucsr8+kDKMBmOgzDMMw2po7n9zBhTevYW5PkkQst4NrYCTFlfdtNNFntDUm+gzDMIy2Ju0pABe+41kctrQv55j//vNDXPDPNSXvW1V51eWvYs1A9G3nds7lytdeSU+ip+TjGUYlmOgzDMMw2ho3EH1OgSj2hOOQdr2S95320qwZWMOzFj6LoxccXXT8qu2ruHbdtWwf2W6iz6g7JvoMwzCMtsZTX/TFHMk7Jh4TPAXPU5wC4yaT1jQAxy85nnce+s6i4//0+J+4dt21eFq6wDSMSrHsXcMwDKOtCUWfI/nFXBjrF7qCo+J6fnJITGKRxofjXC2cVGIYtcBEn2EYhtHWZNy7BURfPLDupb3SLHCheIs70RxnTuBj9ko8jmFUAxN9hmEYRlsTxb0brku5JVr6AtHnSLTbqVn6jEZios8wDMNoa8L8jFgU926JyRylundDcWgxfUYjMNFnGIZhtDVehOzdeCx075Zn6Yvq3g3FoYk+oxGY6DMMwzDaGjeCezcRKMJUiZa+tOdn75Zq6TP3rtEITPQZhmEYbU2YyFHIvZux9NUpps8sfUYjMNFnGIZhtDWZki0F6/SFJVtqnL1rlj6jgZjoMwzDMNoaL0LJloRTZkxfmXX6zNJnNAITfYZhGEZbE3psC7t3w+zd8ty7Mcdi+ozmp+Zt2ETkcmBvwAN2Ax9W1btzjFsDjAQ/AJ9W1atrPT/DMAyjvSkle7fURI6SLX2BOLTizEYjqEfv3TNUtR9ARF4N/BzI15X6NFW9vw5zMgzDMKYJpWTvlluyxbJ3jVag5qIvFHwBffgWv7LYsmULxxxzTOb9ihUrWLFiRQWzMwzDMNqdKG3YxjtylJfIEdW9azF9RiOph6UPEfkp8BJAgJcVGPorERHgJuCzqroze+X8+fNZuXJlzeZpGIZhtB+he7egpa/Mki1hnb64WPau0fzUJZFDVd+tqnsCnwW+mWfYCap6BHAsvjj8QT3mZhiGYbQ3GfdulESOMku2WJ0+oxWoa/auql4MnCwic3OsWxf8HgV+CBxfz7kZhmEY7cl4IkcB0Zdx75Zm6QsTMqxOn9EK1FT0iUiviCzLen8qsD34yR7XIyJ9wWsB3gTcXcu5GYZhGNMDT6GA3gMgUWbJlrSW14bNLH1GI6h1TF8PcKmI9AAuvtg7VVVVRK4CvqCqK4EFwGUiEgNiwIPAB2o8N8MwDGMa4KoWjOeDrDZspbp3PavTZ7QONRV9qroJOC7PulOyXj8BHFXLuRiGYRjTE8/Tgpm7kFWypdzizNaRw2gBrCOHYRiG0da4Xg0tfeXW6fPM0mfUHxN9hmEYRlvjqhbM3IXsjhxl9t61On1GC2CizzAMw2hrPE8LZu4CxDPu3fIsfVanz2gFTPQZhmEYbU1piRzlFWd2CjX2zSLTe9csfUYDMNFnGIZhtDV+yZZoiRwl1+kLxJuVbDFaARN9hmEYRlvjeUqsyN0uY+kr170bsTizxfQZjcREn2EYhtHWuBFKtmQ6cpTp3i05e9di+owGYKLPMAzDaGtcLS76RIS4I2Vb+qz3rtEKmOgzDMMw2hovQp0+8F28bomWvrBki/XeNVoBE32GYRhGW+MqkURfwnFKr9NnHTmMFsJEn2EYhtHW+G3Yio+Lx6T8jhzWe9doAWrae9cwDMMwGk2UNmwAsRItfRv7h7nx0U0A/M/VjyIR4vpU/f3f9Ohmdm18OPKxDKMamOgzDMMw2hovQiIHQCJWWiLHH+5cz7/WbCU5V/jpTWsib9exv3Dn2u3ctu2JyNsYRjUw0WcYhmG0NV6EjhwQunejW/qGx1wEj0Qsxv1fPSXydkdd/DnefeLefOyZ0bcJka+VvIlhZLCYPsMwDKOtiVKnD8JEjuiWvpGUSzymkfvuhsQkZokcRkMw0WcYhmG0Na6CE9XSV0JM30jaJR6LXqMvxBHHEjmMhmCizzAMw2hrPE+JRcnedZySsndHUh4xx4ucuRtilj6jUZjoMwzDMNqaqNm7iRJj+kZSLrEYJbt3zdJnNAoTfYZhGEZbE6UNG0A85pTm3k15xBw1S5/RMpjoMwzDMNqayG3YHCkpkWM07eI4nsX0GS2DiT7DMAyjralVyZaRlEvMsexdo3Uw0WcYhmG0Na4Szb3rOCUVZx5JeThluHcdx8H1zNJn1B8TfYZhGEZbE7X3biImJbVhG0n57t2YWEyf0RqY6DMMwzDamqjZuyWXbEm7OKIliz6L6TMahYk+wzAMo62J2nu35OLMKQ+xOn1GC2GizzAMw2hrotfpc0iVYukbM0uf0VqY6DMMwzDaGlc1Whs2R3BLbMMm4hF3Si/ObJY+oxGY6DMMwzDaGlWIRSzOnIpYssX11E/6kNLr9MUkZpY+oyGY6DMMwzDampLasEUs2TKS8kWbSOnZu2bpMxqFiT7DMAyjrXG9aIkcMSd6IkdG9KElu3fN0mc0ChN9hmEYRlvjZ+8WH1dKIsdIOhgnbumWPsfBKyFhxDCqhYk+wzAMo62JXqevdEuf4uE4Jfbexdy7RmMw0WcYhmG0NV7U7N2YQ9pTVIsLv1D0gVdy710r2WI0ChN9hmEYRlvjehopezcRCMN0hAzekZRvqdMy3Lsxx4ozG43BRJ9hGIbR1kR278b8W2IUF+9oxr2rJXfkMEuf0ShM9BmGYRhtjSqRsncTsdDSV9wKN5IORV8Zlj5rw2Y0CBN9hmEYRlvjqhKLcLeLh+7dCJa+jHtXXbP0GS2DiT7DMAyjrXG96IkcQKSyLWEih0fpxZnN0mc0ipqKPhG5XETuEZG7RORGETkyz7gDROQWEXkk+L1/LedlGIZhTB/8On3RSrZAqZa+8nrvmqXPaAS1tvSdoapHqOpRwLeAn+cZdx5wrqoeAJwL/LjG8zIMwzCmCVGzd0tJ5MhY+tQtq/dulLIwhlFtair6VLU/620fMMWeLSJ7AEcDlwSLLgGOFpH5tZybYRiG0f6oKp4Syb0bJnJEce8OB6LPLSORwyx9RqMozSZdBiLyU+AlgAAvyzFkGbBe1f8PUFVXRDYEy7dkD9yyZQvHHHNM5v2KFStYsWJFraZuGIZhtDhhyb1Ilj6ntJItIuB5blm9dy2mz2gENRd9qvpuABF5G/BN4JRy9zV//nxWrlxZrakZhmEYbY4bqL5I2buhpc+NUrLFoyPuW+zK6b3rembpM+pP3bJ3VfVi4GQRmTtp1TpgiYj/XxP8XhwsNwzDMIyy8YLYuVLcu9E6crh0JmJliT6z9BmNomaiT0R6RWRZ1vtTge3BTwZV3QzcDbw5WPRm4C5VneDaNQzDMIxSCUVfKe5dN2LJls54DNezOn1G61BL924PcKmI9AAuvtg7VVVVRK4CvqCqoa/2fcBFIvIFYAfw9hrOyzAMw5gmjLt3o2Tvhu7daCVbOhMOg5o2S5/RMtRM9KnqJuC4POtOmfT+YeDZtZqLYRiGMT0JjXYSqQ1baSVbOhL+Ps3SZ7QK1pHDMAzDaFvcjHu3+NiwOHOkjhxpb1z0lVGyxSx9RiMw0WcYhmG0LSW5d0so2TKScumIh4KydPeuWfqMRmCizzAMw2hbSsneDWP60hFKtoxmuXfLacNmlj6jEZjoMwzDMNqWUrJ3xztyREvk6Ai0niVyGK2CiT7DMAyjbQndu5EsfRn3bpSYPpdkwn9dau9dK85sNIqad+QwDMMwjEYR5mREqtMXWPquf2QLA8OpgmO3D46RjHX621kbNqNFMNFnGIZhtC2Z7N0Ilr5Z3Ul6O+L8790b+N+7NxQdv2ROB6wvL3vXEjmMRmCizzAMw2hbSnHv9nbEWfmfL2J4rLggE4FBbwsXX1Z6nb6YxFAUVY1UP9AwqoWJPsMwDKNtyWTvRtRWnYkYnYloIm5gwBeH5Vj6AFx1iYvdho36YVebYRiG0TZ4w8N4IyOZ9+6OXcwcHSSxa4D0jq6c24jjEOvrK/lYaU0D5WXvAhbXZ9QdE32GYRhGW+DuHuSxE0/EGxycsPy3AH+GRwtsu/BLX2L2G99Q2vGCDNxy2rABFtdn1B0TfUZFeCMjDN2+Etqk/EBi2Z507LN3o6dhGEYZeP078QYHmXnqqXQdcQQAG3YO8+MbHuf0Z+3JgQtn5txuy/e/z/B995Yu+gLRVqqL1ix9RqMw0WdUxI7f/IbNZ3+90dOoGvEFC9j/+usaPQ3DMMpAXV+E9T7vePpe/WoA1q7byZ+e+ievfeWxzHnGHjm3G7jqKlJPri35eKHoK7lOn1n6jAZhos+oCG+370ZZ/tvf+OlsLcz2i37B7uuua/Q0DMMok1D0keVujZK9m9xzTwZvvbXk42W7d++/7u9ce+H5QPFuHik3xeneMh5a8A+e/bLXlHxcwygXE31GRaibBsfJuFJamfiCBeM3DcMwWo/g/1fi46IvShu2xJ7LSF9+Od7ICE5nZ/TDZbl3Nz3xAF46zREveXnR7R7evoqx2x5ky5onIh/LMKqBiT6jMtIuxEoLYm5WJBbL3DQMw2g9Mg9tsVyWvvzbJffcC4DUunV07L9/5OOlvSB714nhptN09PRw0tvfU3S7zat+x+a77sdNpyMfyzCqgfXeNSpCPdcXS+1APGaWPsNoYTQQURIft2d4oegrYOlL7rUnAGNrS4vrCxMxHHHw0mmceDQ7iiMOKuC6JvqM+mKiz6iMdPuIPonFwfNQzzLqDKMlCd272Za+CG3YknuGom9daYcLYvriThw3nSYWUfTFJIYnimcPmUadMdFnVIR6Xvu4d8M4IPsiNoyWRNOhe3dcfLkRLH2xvj6cvj7G1j5Z0vGyizN76TSxeCLSdo44eI6apc+oOyb6jMpw021j6QvFq7l4DaNFCUSUxMZvbYGhr6ClD3xrX6llW7Kzd123NPeuJ+Cl7bvGqC+WyGFUhLptZOkLrANqX8SG0ZKoG4Rm5EjkKJS9C77o23399Tz1sY/nXO/09rDws5/F6e7OLAtj+mISK8m964s+s/QZ9cdEn1ER2kaWvnH3rn0RG0Yrou7URI4wpq9Q9i7AjJe+hJFVDzP66NRmbd7QEOmNG5n12tfRffRRmeUT3bupkmL61AHPvmuMOmOiz6iMtAuxNokSMPeuYbQ2ORI5wuzdYu7dmS95CTNf8pKc6wZvvZW1Z74DTacmHi7bvVuGpc/cu0a9aZO7tdEo/JIt7fHsMO7etadvw2hFciZyRCjOXAxJBAkak74bsoszu+k0TsTvwpjE8Bzw2qRnudE6mOgzKqONSrZkLJZWssUwWpJx9+7UmD6pRPQFFjxNTbL0ZfXedUus02clW4xGYKLPqIi2KtliiRyG0drkcu9GqNNXjNDSN0X0ZdXp80qp0+fEzL1rNAQTfUZlWCKHYRhNQu42bMGiKrh3J4d+hJY+P3s3VVKdPnUsftioPyb6jIrQNuq9a4kchtHiFLD0FcveLUge9+7k3rslJ3JYTJ9RZ0z0GRXRTr13LZHDMFqbXIkcUbN3CyGJpL//sYmiL7tOXym9d/02bPaAadQfE31GZbRRIoe1YTOM1iZnIkcVs3cLu3dLtPQ5iuda0phRX9qj1obRMNRrQ/euBVcbRmtSoE6fM8nS99kbP8tdm++KtNueQZevAD+8/bvcFL8gs3xXahdQunvXLH1GozDRZ5TEVfdt5LbV2zPvT940AMCFVzxQ13nM603ygZP2m/JFXgmZKv6WyGEYLUnmgS27I0eeNmzXrbuOed3zOGTuIUX3mxhKAetY1rWYI/fYb8K6ZTOW0RXvwnPTOKUkcljJFqMBmOgzSuJbV69i3Y4hupP+pXPErhHSTow/3rW+bnNIux6DYy4vOngBz1g4s2r7FUvkMIzWJkiMkKysDdfXfDiTRF9a05y49EQ+ccwniu92ZIRVXMkpe76Et5/wninrVbV0S5+jfskrw6gjJvqMkkh5HqcesZj/ecORAKx58Oc4vb3c88Xc7YtqwQMb+nnF927isc27qyr6cMy9axitTKFEjsnZuyk3RdyJdgvMV5w5c1zPA1ViETtyOI4TuHdN9Bn1xRI5jJJwXSWe5VJVt/69d/ed34sIPLZ5d1X3mwn+tjIKhtGS5ErkyFWcWVVJazqy6CMWA5G8os8NevKWlL3rqHkVjLpjos8oibSnxLIemRvRe7czEWPZ7G4erbLos0QOw2hxciRyhNm72e7dtPriMC4RLX0ifgZvnnJObrC8lOLMnmDuXaPumOgzSsL1Jlr6SLsTnqrrxf579PLYpmpb+gIXjiVyGEZLMu7enZq9m23pC4sqR7b04X8/TK7TlzlGRvRFt/SpKHiKBqLUMOqBiT6jJHxLX5abxHMzsXD1ZL8FvazeOki6ijExGeuAuVwMoyVRNw2OMzGRI0cbtrJEXyJRwL3r78+J+AAc1ukDLIPXqCsm+oySyGnpa0Cdvv3m9zLmeqzdPlS9nWY6ctiXsGG0JDnaQmbcuxVa+kgm8nbrKdW9G9bpA/DMs2DUkZoGY4nIXOBiYF9gDHgUeK+qbskxdg0wEvwAfFpVr67l/IzSSXsesVi2pc9rSHHm/RfMAODRzbvZZ37v+HxU+dcff8dQ/86S9+n299O/eC5P3nwtyQ2rqzXVosxasJCjT3l13Y5nGO1KrraQ3iTvBEDK8y12CSeaSAOQeCFLX2mJHGHvXTBLn1Ffah2Br8A3VPU6ABH5JnA28K48409T1ftrPCejAqZa+tKNsfTt4Qu9c699jL/c/3RmeWxwB4uuvhgvloBSnuIBUY/k7BmkHnkY7/HHqjrfvHhpHDfFr7bOw+voqc8xm5jDlvTxzuft3ehpGK1KDs+Dq8rkGu6hpa8k0VfAvVtOTJ8X+Nlc6/Vt1JGaij5V3Q5cl7XoVuD95e5vy5YtHHPMMZn3K1asYMWKFWXPzygNVSXlTsrebUDJFoDejjivOHwR9z3Vzx1P7hhfPrKNRcCde76Y9XMOKmmfc3dt5WuXfoELTng7t+5/XJVnnJsFOx/nuMcv57HH1rCjd3Fdjtms7Bgc428PbjLR14xsXw2XvAlSFYRTdPTB2/4IvfOrN69JqOtO6MYBvqVvSmHmchM5irp3o1v6NLD0WQavUU/qVmtDRBx8wXdFgWG/EhEBbgI+q6o7s1fOnz+flStX1m6SRkGCJLiJdfoaULIl5NzTj56ybPOaJ7j40xfy5dccyf7Pfm5J+0tt3Mhjl8JnX7o/s047uVrTLMi29ftx4f+7nP9+8WIOPqE+x2xW/vvPD3HBTWsaPQ0jF5segC0PwwEvg67ZpW+/ezM8/g/YuqrGom+q58HTqe7dWiVyRC3OHHPM0mc0hnrerb8P7AZ+kGf9Caq6TkQ6gHOCcW+t09yMCKSDJ9JYE5RsyUcYWxNLRHfbZAg7ctSxSn7fHgsRcdixcUPdjtmsdMQcxlwPVUWkej2VjSrgjvq/X/xlmH9g6dtvuMsXfaO7qjuvyeRy73pT++6GMX0li750PvduGNNXSp0+i+kz6k9d/HIi8i1gf+CNqprzjqqq64Lfo8APgePrMTcjOmHj8omWPq8hJVvy4QZP4lGz6LIJxWs96/TFEwlmzJvPzqdN9CXj/tdRyrW6ZU1HOhB98Y7ytu8I2iXWWPTldO+qTsjchdKLM0NQx7OYpa+UmL6M6DNLn1E/ai76RORrwDOBfwsEXa4xPSLSF7wW4E3A3bWem1Ea6VD0ZcfwNSiRIx9uKvjyTZRuxM6cR51LtsxetNhEH+Oib8z6kTYf6aCoQryzvO07/Gx7RgeqM598uO6EGn3gP6xOyd51g+zdWImJHPmKMwfWulJi+kL3rmfuXaOO1FT0icghwH8Ai4GbReRuEfljsO4qEQmzMhYA14nIvcD9wAHAB2o5N6N0XDePpa+ZRF8l7t1MR476ir5ZCxax8+mNdT1mM5IMHibG0ib6mo6KLX2h6KuHpS9X9m6VYvryJnKU3ns3TOTwLJHDqCO1zt59AMgZnKOqp2S9fgI4qpZzMSonnaOdUfNZ+ipw72Y6ctT3yXv2osWMDO5meNcAXTNm1vXYzUQyuFmb6GtCKrX0xTv9Eko1F33pKYllfp2+iePKce+SiBdP5Cglps8sfUYDsI4cRmRyxvQ1qGRLPtIVWPpC0VfvjhyzFi4CmPbJHOMxfSb6mo7Q0hcr09In4lv7GpLIoVMSOaqdvVtWnb7A0udaIodRRxpTa8NoSSZn76oqeF7DSrbkIrT0xSty79b3yXvWQr8+3/3X/Y2ta9fU9djNxNC6HRwy8BSrrk+xY0aZFqUymDl/D5YfMbX8j5FFegScBDgVPODVQfTlSuRwc2SDl12cuUidvtI6cvivLZHDqCfNc7c2mp6MpS9swxY8oTZVyZZK3LuO41sk6h7Tt5DOGTO57x9Xc98/pnfnwRcA9/zm+roeUxyHj158WVnXTDty+9O3s21k28SFu9fAjBmw5i8AzO2cy7ELjy1txx0z6+Tenfh9pEp16vQVbMNWenFmz7GSLUb9MdFnRGY8ps9/2s9Ukm+mki2VJHIAxON1d+/G4glW/ODnjA4N1vW4zcY/H9vC//vdvfz8zGM5ZHF9Yhvv+dtV3PqH3+KlXRN9wLbhbbzz6nfmXjmnF67/VObttW+4lnld86LvvGNGHbJ3vSnhJjmzd8vpvVvQvVtaIoeIEPaGM9Fn1BMTfUZkpsT0BU+3TWnpK1P0iePU3b0LkOjsJNFZP5dmM9IzWxmM9yA9ffTOmVOXY3b2+lmlnmc3XoDBlP/g8dGjP8rJy7I6xPzjK/DU7XDGFVy77lq+e+d3GU4NQ1cJO++YAYNbqjvhSeRK5CjUe7d62bulWfqALNFn7l2jfpjoMyKTdidm7zalpa8C9y4EyRyWSNAQMnX66pi9K8G1a9YWn9ACtrR3KfvO2nd8hcZAOmDWvqzavsofq7mtXnnpmAHbn6jWVHOTI5HDy2HpK7v3bpXcu8C46KuzZ8GY3jRP2qXR9ISJHFMsfc1UsiWdAhGccucUj9e9Tp/h04js3fA6MdHnM+aOATmKFqdHMjX6YoFQdku1jtYtkWNq9u7kOn1lt2ErIvqcEpLaJHBDu2bpM+qIiT4jMpPr9GXEUTOVbEmliMcTZfdu9S199iXcCBJBgtBoHS19TnDtmnvXZ8zzRV/SSU5ckR7NiL5QKLnajKIvR50+rZKlL5HI24bNS6dwYvHSvncmf48aRh0w964RmfGYviCRI8zebaaSLelU+UkcAPFY3RM5DJ+OBrRhc5yw37K59GHc0peMTRJ97mimMHNY0DgUTpHpmAmpIXBTUEL7s5LIV6evKqLPd+9qjhIwbjpdmmsXMuVvfn7fz9k1+tvStjWMMmmeu7XR9EyO6WvWki2ViD6JxRuSyGFAMlb/jhzm3p1I2JN2iuhLj0LCz9oIhVLpoi+rFVt3bRJ1/GLxk2L6lCkiLePeLaEjh4TfK+k0TPqOKUf0vXjvlwC3MTo6zMCoXX9GfTDRZ0Rmcp2+jHWkqRI50hWV3pBYDMzS1xAaksgRij5z7wKF3Lsj0DUbyIrpK8e9CzUVfbg5EjlUieXJ3p0Su1iAUPRpOj0uAMNjuOnI5VpCPvTMD3Meb+OdB7+DI1/6isjbXcIlJR3HMLIx0WdEZnJHjjD2raksfekUsUQFl3U8ZjE2DWJc9NXv83cse3cCoXt3itszK6YvJv5nVpGlr4p4nvLqc//J6q2DfOfpftaObOE7Xxwvcj40luaY5RNFZlm9d8OOPakUdE2sVeNb+kp72AxFopVsMeqJiT4jMpPr9DWnpS9VoaXP3LuNYjx7V+t2zEwih4k+YNztOdW9O5KJ6QsLGpeVvQtVF30jaZf71vfzrL3n0NfhsHTeDN547LIJY04+cI8J79NemriUlniRsfTlSObwynDvxiy0wGgAJvqMyKQnJXI0r6WvEtHnmHu3QYTZu/VM5Ajr9GVqTk5z8iZypEchWJax9GkZiRxQddE3POb/v77y8EXM6YixdM85vPSVBxfcJu2lS0rigInu3cm46dLdu2F5F9dEn1FHmqfWhtH0TI3pC76sKmnCXmXSFSZyEIubAGgQycDq1pCSLXbjBbIsfTlLtviWvjCmr3z3bnVbsQ2n/L9dZyKWs05fLsoSffH8lr5yEjnGk4jMs2DUD7P0GZHJV6dPSi1VUEPcoE5fufiJHPYl3AhEhGTMqW/2bhjTV0ToP7ltkHdftDIjMBrBjM4Ev3zXs5jb21GzYxS09FWjTh/UzNLXnYzlrNOXi5SXKt/SN5bLvZsqWfSJYw8cRv1pnru10fS4kztyZOr0NZd7N9HTW/4OLJGjoSTjdRZ9sbBOX+G/+UMbB3h0825edNACZnbV/2tz88AoNz22lTXbhmor+oLs3TBuL0NWTF/5dfpqJPoCId6VCFooRigWn/bSU8+xCOPu3dyWvlK6cYD/kOPE4ib6jLpios+IzJTeuxn3bhOJPqvT19Ik4w5jdbwJjlv6Ch9zMKij9oVXHsyec7trPq/J3PzYVm56bGvNW9TltPS5aVC3cvduogeQmln6ugL3bu0sfVnZu5Moqzgz4MRjJvqMutI8wVhG0zO5I0fTFme2On0tSzLmkErXL3tXImZQDo35Aqcr2ZhrPVGnvsRj7hiCZJI1AN/KB5W7dx2nJq3YMjF9ST80I4rnoZJEjlzhH14ZiRwAsVgcz8JJjDpilj4jMlNj+pqwZEs12rCNjlVvQkZJ+Ja+5uu9OxhYk3o6GnOthyEV6RqXs0l7aZKx5MRSJunRYBIV1ukDX/RtfgAe/N/ytt3nZJhUZmWypa92iRzVt/RJLGbZu0ZdMdFnRCbtTo7pa8KSLVWo0+e5Q1WckVEKiZg0JpGjiNAcGnMRgc4GXeuJWH36Eo95Y1Mzd92Joi9j6Suni8nMJbD6Bv+nHN5zLSw5esKi0NLXnYwxVFP3bqHs3fK+d2KxmGXvGnXFRJ8RmYylr5lLtqTTFcb0mXu3kSTjsTqXbImWyDE0mqY7EcNxohfzrSZh4epaW/rG3LGprcky7t1JiRyl1ukDeOtl0L+u9O22r4bfvgV2PplX9HUlYgyl05EeQsPizKVQqE5fOW3YAEvkMOqOiT4jMlM7cjRpyZaK2rDFLXu3gdTfvRsxkWPMpSvZuOs8/J+rR0xfznItMO7eLTeRA6BzJnQeUvp2M5f4v/vXT1kVunc74gKqkcJN0l66pL67AFS5Th9YIodRf5rHRGM0PZNj+pqyZEul7l3HybitjfrTEXNI1dHSJxF77w6PpRsWzwcNdu9OsvSFMX0lJ3JUQmefn/07sGHKqkxMX3A3i2Tp0wosfTnq9JUt+pyYJXIYdcVEnxGZydm7GYtYk4g+9Tw8tzL3rl+nzzpyNIqGWfqKiL7BMZfuBlr66uXeTbmpopa+snvvVoIIzFwMAzksfSmXREyIE3w2EbN3y6/Tly97t/TvHSdmlj6jvjSPX85oekJLXyasqcksfW7wZVxpIofV6WscybhD//BUS0qtiJq9OzSWprtB5Vqgju5dbyx3YWaAWBXcu5Uwc3FuS1/K9VuwpcPvI/+2Njo0xJXf/TojQ4NTttl3Rz8xifHE/NvZ5+hjIx2+NnX64kWvPcOoJmbpMyLjeh5xRzLlHJqtZIsbVMq3RI7WpVHZu8Wsu4OjbkNFX73q9KXcVI5EjtDS57t3HXEQpLxEjkqYuSSnpW8k5QbdOCZWE9iydjWr774DL50m2dk14ScdVzq2jfHY7bdEPvx49u7Ukk5emaIvFjP3rlFfzNJnRCbt6Xg8HzRdyRY3VbnoszZsjSUZjzWle3d4zGXhzM56TCknCScUfTXO3s0Z0zfRvQt+2Za6uncB+pbArqf9752ssizDYy5dydiUcJPRQd/C96J3fYCF+x0wYVe/+t/X8OwrY4wNDxc9rOe6DO7cQXr3LoYTMXbvGiC+beuEMWVb+mJxq9Nn1BUTfUZkXFfHa/RBxp3SLJa+dCj6zL3bsiRj9e29K5Gzd9N0NzSRoz7u3ZSbojc5qXf1JEsf+KKvIe5ddWFws/86YGjMt/SFsXbh33Q0cOt29PRM2VXaS6PJDsaGi9fkvOoH32bVzUFdwYOXw18v938mEe8o/aHAsTp9Rp0x0WdEJu0p8axm5uo1Vxu20L0br8S9Gzf3biOpeyJHxOzdobHGundjjiAyXiC9VhTO3h239MUkVt/sXRgv2zKwYYLoG075lj684LMJRN/I7t0AdPRMErH4xZlJdjM2UtzSt/PpjczbczlHvuClbPrKV5jxkpfQc8IJE8Y4jsN+xz6n5FNyYjHSY9YByKgfJvramIGxAT51/afYPba7KvtbNzCELhrjLVdeBMDRd2/hFOCD136EwZm5hVZnvJOvPu+rLOxZWJU5FKIq7t2Y1elrJB3x+lr6MokcxbJ3R9P0NDB7V0RIOA5jTVCcGRpo6QPofwqWHpNZHMb0TU3kCERfd25LnyTjkdy7Y8ND7LF8Hw5/0ct4+OP/zvyFS5n3wpdWejZAkMgRQXgaRrUw0dfGrO5fzc0bbuagOQcxp3NOxfuLA6JxZiRnANDlDADQ09GLk0xOGb87tZvbnr6Nh7Y9VF/RV5F7N5azobpRH5J1F31BIoeX/5iup4ymvYaWbAHfxdvY4szjy2MSa0wiB0zJ4B1OuczsTEyJMR4dHCTR0Zkz1i7tpaEjxtiO4oJrdGjQF45h790cdfrKxYnF8MyzYNQRE31tjKpvFfjY0R/juUueW/H+/v3393DTuq2c994XArB94y/YxH/zrRd+h1hf35Txq7av4rQ/nVa3m0M1sneJOWbpayDJWH3du+IUt/QNjfnXbyOLMwPEY05d3Lt5S7ZkWfpiTqz+iRxdsyHeBVse8tuyBfSNrGfJjF50WyDghrfD9tWMbH+aju6unLtKeSkkmYho6Rsm2d3tVy1IJHKWbCmXWCxuMX1GXTHR18Z46t8gwhIrlZL2NNN3F7LKXOSp0xc2NK+XG6g6lr54QauPUVsSMQfXU9zJmeI1QiSs05f/bz4UdnyIEtOXHoPL3gW7N1dlftlcpDuZtSoBP5vqrszJPifByf9R0jHSXnpqTJ8bxJxlWQATTqL+MX0iMGtPuPMX/k/ArwAGYeTuOLAH8tdPw0MjjD51EJ1jXbD2X7DnsyfsKu2lcZIJUsM7Ch7STadJj43S0dXtTyGRyFmcuexTisUse9eoKyb62pjwSzlsm1QpaVcz3Tj8A0zMlptMw0RfxYkc9uTdKMLOE2NpL5rIqhARwYnFMklJuRgcDSx9Udy7Wx+Bh66ABYdBd+UhFdmkJElKEhMSKvKyYw3c/D048d9Lyq7P7d4d8a18WQ+PMYn5yRD15vUXwMZ7Jyz6/P/ez5HLZvGKI+Pwl/OR494Hxz6D0V9cScf2J2HX1ILOaS+N05EgnRrDc92Mm38yYXZvsjsQffF4UUvf0J134m7fnnd9x/77k9xrLyCo02eWPqOORBZ9InIgcASQsfGr6i/yb2E0mtC9Wy1L32TrS6ZkS5OIvnQg1irJ3iUWA1XU8zKuP6N+ZESf69FFfdypjlO4FVZo6YuUvdu/zv996jkTkg2qwSe+cS1HL5vFOW86qvjgu38Nl78ftj4Kezwj8jFyJ3KMThGaDXHvAiw4xP/J4tLL/kz3wuWcsqcHnA/7ngRHnszoL6+nN5Yej0nMIq1pnI4kHr77trN3aoYv+F09YDwZRIq4d0cefJAnT39L0dPoOf54Zp/+Zkil8MbGSG3aVHQbw6gGkUSfiHwEeC+wCLgdOAG4HjDR18R4+C4rR6ojXtJBR46QTMmWfKIvaGheL4vAuHu3fAN2mPlHOg05klOM2pJt6asXUqT/aSj6ejoiXFc7A9HXt7QaU5uAn8gRMXt30ZH+7413RxZ9qpq/ZEt8Yg26uBOvv3s3B56njKQ8OhOxjBs6TOQYGRpmXiwNqYlxe556eOoR70wyhm/Nyyf6Mpa+Lj820Hfv5v8+2/6rXyFdXex14QVIju8PdT1233A9O3/7O5764IfYvXQ+YzO7eezEk0o9dcMoi6h3xxXAs4B/qupLReRQ4Au1m5ZRDcI4pWq5d6fEWWWKM+cWlXV371ajDVs8bMvlUvuIMmMyHbFxS1+9cGJOweLMg0EiRyR3c/86P/atZ49qTS9DIuZEz96dd4Cf9LDhbjjiTZE2Cf9Pc2bvTrL0xaUBJVtyMJIej7ec0pFjeJiOjqmWvnDesQ7/nAoVaM4UeA4tfQXcu+7OnQz835X0vfrVdB1xRN59dh16CPNWrGD3TTfxxNVXIE89ycIvf6nYqY7zxjdGH2sYk4gq+kZUdVBEHBERVb1fRA4ovpnRSEJLXzUTOaZY+mKxvPtvxZi+sL2TZfA2hkZY+nz3boFEjtHA0hclpq9/nW/lq0FoQEmiLxaHhYf5lr6IjHm+pSynpS82yb3biJItORjOcr2Pd+Twk7FGh4fp6E6PZx8HhJ6HWGcg+grUyRu39I0ncuy+5loef+Urp4z1hobQ0VFmv+X0ovOWeJwZJ51E15pV6NPrmf2GNxTdJoOJPqMCooq+IRFJAPcAXxeRdVA44EZE5gIXA/sCY8CjwHtVdUuOsQcAFwFzgW3A21X10chnYeQkzN51qM4NaIqlz3XzunaBTOmHupVsqVadPrBkjgaRiDVA9MUK91sOS7ZEi+l7qiauXfDdu2mvhOLMi4+Eu34FnhspmWMscI9Ojekby+3ebURM3ySGU/4cOhMxSI13CBodHgJVOp2poi98CI2Hoq9A2ZbxmD5f9M15x5kM/vPmvOM7Xvs6Og88MPL8nVi8aGFww6gmUUXfB4Ak8Anga8A+wNuKbKPAN1T1OgAR+SZwNvCuHGPPA85V1V+KyFuBHwMviDg3Iw8Z0Vclq8Pk7F1Nu3mTOKA13btkuXeN+tOwmL4CAqbkmL79XlStqU0gXmpf4kVHwm3nwzX/BZ1T62hOJpX2XZmJJ26EbVnP5ltXQeesCWNjTqw53LuB0OtKxNDhcffu6GDglo2T19KX6PSFbEFL39BES9/sN7yhNKtcESx716g3kUSfqt4fvBwE3h1xm+3AdVmLbgXeP3mciOwBHA28OFh0CfADEZk/2Sq4ZcsWjjlmPCNuxYoVrFixIsp0piU1t/R5hS19dc/erUbJltC9a1XyG0J29m69KJa9OxjV0pcehd1Pw6xl1ZxehmTMyVgdI7H8eN9Cd9P/RBo+Fo/BsiUkH7oCdl8yceURE12WcYln3MGNJFNDMRFDs0pIZWLxkk7emL5EkJxR2NI3Maav2jjxuNXpM+pK1OzdPYAPAftlb6OqkR55xK+A+n7gihyrlwHrVf1UMFV1RWRDsHyC6Js/fz4rV66MckiD8ZIt1cze7UiMXzKaLiz6HHFwxKl7TF+8Ivdu8Fk1getqOpJsiHvXKSj6hsdcHPH7AhdkYL3/u1ncu7OXw2fWQcT/v7GBNXDlG0m+6lxYPqm3bGJiZ4u4E2c43fiesdkxfXjjxeJHB/2+u53J2JTs3UzCSmdx0Tc2PIQTi1fmPSiA4/glooZ3DViJKKMuRHXv/i9wJ/B3oJy74feB3cAPytjWKJOwpELN6vR5hd27UN8sPzedwonFKvvytESOhtIwS1+BjhyDoy49yXjx/6NMuZbaWPpKdu9C0C83WumhVBD3l+yYAcnugmNjToOKM08iE9OXncgRjzPS3w9AR0e8qKUvVcC9Ozo0REfYgq0GxIMM4h++u3jyh2FUg6iir1tVP1jOAUTkW8D+wKmqmusbax2wRERigZUvBiwOlhsVEGbvVq0jx6TsXYpY+sC3CKS8FG46zeN3/Iv06NRCqdViy5onKkrigPGSLZbI0Rg6GpG9GyGRoztK393+p/zfNXTvRs7eLYMwkWNKyZYcxKU56vRlx/ThjtcNzcT0dSTyxvQlkx04sbif9JGHseGhTDeOWnDIiS8knkgUzB6fwu+urNl8jPYnquj7l4gcpqr3lbJzEfka8EzgFaqa826vqptF5G7gzcAvg9935cryNUqjFh05JiRyRLH0Ob6l78n77uJP//PfVZlHIWYvWlzR9qGINUtflRneCdedDan8N1iApcMpvhbfyIG3/REeq93NNhvZvRFvwxa44iM515+6dhvP88bgilzRKVlsuh8QmLmk+pME4qW6d0skjNELs+4L0SyJHBNi+rI6BIWxeJ2difyWPkmQ7OoqHNM3PERHV23i+QC6Z/Zx1MtOrdn+DWMyUUXfecANQamWzGOTqj4r3wYicgjwH8AjwM2B8Fitqq8RkauAL6hqGKD3PuAiEfkCsAN4e8lnYkyh2okcaU+JxUq39KU1zdDOnQC88Ytn0ztnblXmk4vuvuJZigWxRI7asPZW+NePoGuOX7w4D72e8sLYKL0b4qQ316cNm4zuieumST98d871B4+k8BR4JIKb9MCXR+uNWwaJmEOqhhbQTMmWCKKvWSx9oXu3O5mVyBGPMzK4G0RIdnRAOndMX9yJk+zqJlXI0jc0RLK7K+96w2g1ooq+XwJfxY/ri/SfrqoPQO6mBqp6yqT3DwPPjjgXIyKh6Kuae9ed1IbNjW7pG9m9C4D5y/euWSZcNci4d62MQnUJrUJvvxwW5e9WsGPXKM/+6t+hdlEAUzjN/QNjmuQT2z+Vd8zx+83lV+8+rn6TykEi5pCqoaUv4/aM4t51qh+r+9jm3fz+jqdQop/jfU/5sXudyfEMbHEcRgcH/Vi8pE619Gm26OsaL9nyxHVw4/9A1vFH1yszOoGLsqxxR70dDn99yednGM1AKR05vlXTmRhVJxR91ezIUUrJFvCtBmkvzcjgIOI4mXpXTYu5d2tDGM5b5AFk/owOLn7Xs9i6u36qb8Mv/waxGN95Y34xetSy2XWbTz783ru1s/Sl3Oiirxbu3V//ay0//+fqTFxnV3qQ1669lKSX/1o4HDhChAtW/BzSLnro3vz1Mx/GTaeZOX8PiKdheMeEbTLuXSdBsjPLvfvgFfDkzbB0vCzYWCpGR49C+LlvfdQvgWOiz2hRooq+v4jIy1T1LzWdjVFVMu7dKpVscSe3YUu745axPGQsfYO76ejprVkWXLUYr9Nnlr6qEroCI1yLJ+w/v8aTmcjvruhCVXnNUbUptVItau7ezdeGLQcxiVXdvTuadpnbk+SOz/slW9c//CC/+eIgBxz3PF/AFWHkoYcYvPkWZr/5FJzubpYceDA8/n1ITUrkCMRtaOkbCcq7MDYIMxfBO8dvc6M3n07ysBPgnUGJ2ZvOgb9/EXZtghkLKj9pw6gzUUXfe4DPiMgufMeLAKqq1e8qblSNaos+39I3KZGjSHunsGTLyO5ddPX2VmUetWTcvWuWvqoS1j2M0A6s3ojj4I41vtBwMWrt3s3bhi0HtWjDlnaVeFbMcGrMt/Ad9fJTWfqMQ4puv/3iX7Lpsv9j/9e/hfjswDL75E+mtmHLdu92djGwNcgZHNsNyRmZcarK2NBgpgUbAPuc5P9efT0cXr3OHIZRL6KKvmOKDzGajbBkS60sfZETObw0o4Glr+kJRIklclSZiO7dRuDEYmiBOn3NQq3du6VY+moR05fyvEzvZYDUqC/WEh2d+TaZQHYiR4Z455SYvjB2Me7ESWTH9I3thuR4vHE6NYbnuhNDUhYeDl2z4fFrTfQZLUnUNmxP1noiRvWpekcO1yu9OLMTJ6UpRnbvorN3RsGxzUDG0mcdOapLxtLXfF0HnCK9d5uFRMxBNUc7xCpRSp2+mMQyFrNqkXJ1gugLa3omOiJmQ2fV6csQ75hq6fMmJXIE/XUZG4Tk+INpuHxC4pnjwN4nwuPXwKN/Kzyfefv7XVEMo4mI2oZtC0xJqeoHbgH+XVWfrvbEjMrJdOTInURd+v4qsPSNDO5m1sLKaujVA6vTVyOa2NInRXrvNguh6zPlesRq4CYPY90ilWypiXt3YnWAki19oXU+29KX6Cos+jq7GRsZ5p6//RnWpKEnDn/7MwDDA0FXj65JJVsOeCk8eDn86rTCE5qzL3zkzkhzN4x6EdW9ey4wC/g5fjzf24E0MAScD7yqFpMzKqPqJVsm1ekrrWTLaGu4dy2RozaUkMhRb4r13m0WMn2JXY/ORA1EXwklW+pr6csv+u7efDf/c8f/4Houz3toIycBb//LmWj4PTXwFMzrhSvfktlm+8h2f7+SYNbCRaDK3396LtALjMDd544fQIS+BYsmHvTwN8GCQ8At0Ibuvt/7dSmHtkP3nAhnbxj1Iaroe7mqZtfR+4SI3K6qx4rIA7WYmFE5tenIkbUvN5qlbyQ1zOjgoCVyTGeaOJGjWO/dZiEURGm3NskcpXTkiDtxPPXw1Kta+EjK9UhkJ3IEoi9ewL37r43/4q7Nd/Hcxc+lU3yx2ts5A8LvPKfT/19O9GaWzUjO4OgFR7OwdyHLTlrGPkcd4//9f3gcHPByeNEXx88zkaRz8veW4xSsNQnA6C5f9G28B/Y9OepHYBg1J6romy0ic1R1O4CIzAVmBuuaP+1tmhK6d6vxpayqU7N3XRcnWfgGEXfi6GgaVa9FLH2WyFETMpa+2oo+VWX39deT3rgx8jbpdetI9+9kxyWX1HBm4/QcfzzJPfcsebts924tGHPHSDiJSA+Jcce/dbjqVrE6gEd8UiKHOA6xeP7bVGhtPO9F57Hlge+yLfZTznvJj8cH/PO78NAX4J3fho7c3z/dfbP8F95OmNUHs6tgmQtFYRTRpwo3fht2Wui8UXuiir7vAfcE7dMAXg58Q0R6gX/WZGZGxYSWvmq4d8NKEfHJiRxFLDcJScCI7wZpjUSOwL1rHTmqS3At1trSt/uaa3jqgx8qaZuRZfNJ93bx9Je+XKNZTWTmKaew5H++XfJ2oaVvLGKtvs1Dmzn9ytMZTA1GGj/ijtAZixY/F36npL10JMtgFFKuTorpGyXR0VFQhKa9NHEn7o/J5XmIB/F46dG8og/wXbXu6IREjorongOz9oSNdxcfu/5OuOYrfovCGrXwM4yQqNm7PxCRG4ATg0Xnquq9wevSvmGNuhGWbKmGezcduL9iZSRyMOJbeTpbwNKXOR9z71YXr/YxfZpKsfmb3yK5zz7seeEFSMRM4Sd/9XP6H7yP/X/yq5rNLWTtO9+FN5S/12shQtdnOmKtvjs23cGmoU38237/Rm8i2v/eQXMPijQuY+mrYjJHyvXo7fD3m96+naEnniAmDruuuSbvNrMffYxnrRd2XXMNo6tXT0zigHERNSmZYwpjgTCulugDWHSkb+krxp0XQqIbPnoPdM4sOpxPNneBe6O5iWrpIxB59xYdaDQN1SzO7AY3momWPi9SIoczGoi+FojpCxM5tnz3e2z/xcUNnkwbsXszDMyDe99dM2ufNzzM2Jo1LP3RD0nsEb1ufKy7G0+V+Lx5NZlXNk53NzpWXou50NIX1b370PaHSDgJvnDcFyIVXC6FbPdutUhnWfo2f+ObDNx5M9LdyVMf+GDebY4Nfp76nT8mvmhS0kU8sFxGFn1V7Au+6Ah46AoY6YfOvtxjRnfBfZfBIa+NJvgMo0IKij4RuVhV3yYitzO1ZAuq+qyazcyomGqKvtC6MNHSl45k6ZNRF4i1hKUvsXABfa99LeltWxs9lfZCBmDUg7lzaib6YsDMl7+c3pNOKmk7v05ffRI5pKMDr8zuH6WKvlXbV7HfrP0KCr5bHt/Gl/70QOahrhAzOuP87Ixjmd2TzLh3w4zfapByx2P60lu2oDNn0LloIcu/+j95t/nZfT/j1o238pOX/ASAxMKFEwckGij6Fh/p//7uEeDkudW6KUgNwjPPqN5xDaMAxSx95wS/P5m1rBOYDUSPlDYaQkb0UQXRF2QMZpdUiFqyxQlFX4vE9C3+2lcbPY3246bvwN9vhc9+D5LdxcfXEceJ1a0uo3Qk8XZU5t5NRcjeVVUe3v4wJy49seC4fz62lVWbdvHyQxcWHLd11xi3rdnOE1t388yeOZk6gdV076Y9zZSlcQcG8JIddPT10XVI/hZsW/pnsNHpyj8msqVvl/+7mu7d5SfA8R+D0YHC4/qWwtJjq3dcwyhAQdGnqncEL98PvBc/U/ceYB7wNeD6ms7OqIhqduTIGdMXsWRLbNSfR0cruHeN2hAWZ27Cki0Sq19xZqejI1N/rlRKsfRtHtrM9pHtHDjnwILj+odTzOpK8MO3PLPguFse38abf3Iro0ESSVyq7971LX3+94s3MIC7xww6inTjCBM58pKJ6SvymYeWvkLJHqUS74AXf6l6+zOMKhBVDRyoqv3AK4BrgCX4BZqNJibTkaMKiRw5Y/pcd7yuXR7iEic2psQTSRJJy0ybtoTu06Yszly/NmySSKJ1EH2rdqwC4KA5hRMzdg6n6OsqHu+XjE/MHA6FVjX77/oxfeOWPtcR4kW6caS8VOF4xTB7NzVc+OC1cO8aRhMSNZEj/K86EbhKVYdFpPmrmU5zPPWq143DnRrTF6VkS9yJkxhVs/JNd+pUp68cnDq2YZOODrxUuTF9gsR3cu+226BzVsGx16z1M14PmH1AwXH9wyn6uot34EhmBOfEMlDV7MqRcj2ScUFVcXftwoWiD4ppL52xOuakVEtfNd27htGERBV9D4rIn4GDgM+ISFexDYzGo2hkK596XsYdnItUKo2oR0y8zA3SS7tokRZWcWIkxqQlkjiMGpLpyNGMlj4nc/1Xq3tNPqQjiY6Wn8jRtewizn1oIzxUfPx+s/ajt4iI6R8aY1YU0ZfH0lftki1xx0GHhiCdJq0eic7ilr7C7t2IMX2jYUyfWfqM9iaq6DsDeClwj6oOisgS4DO1m5ZRDVx1IyVxeJ7Lzz6ygoEtmwqO+xCw+hvwnXDBohnw6N1w+qsLbreMTroOsnIE0xr1mtLKB76lD/wHn2IxqhUfq6OjbPdu3HFwEts5YvaJfPK4dxcdv3TG0qJjdg6n2GtucaGTEX3BA16YyFF1925McAcGgn17BfvuQuDeLVQcuuTsXXs4NdqbqMWZh4HLs96vB9bXaE5GlVBVYk7Mt+Cl8pdWSI+OMrBlE3sddiRLDsgdA7R1cIyLb1nDKw9fzP57+F+M2372MzoOOIAZBUpk/Ovp27jt6dt48+lnVnIqRqujxUMBGkUo9DzXxamx6JNk+TF9HiNIbJSFnfty5B5HVmU+/cMpZnWXEdNXi0QOzyMZc3AHfKtb2k0X7LsLURI5GliyxTCakMjFmY3Ww1MPQdj4+c/T//vL8o5LOwKH7UPX1X9n1i9zj5sFfAnghonL5pz8Uha87k15933vvQPce9ffmL/vvmWcgdE2eG5TJnEAOIHLuR7JHJLsQFMp36pYoqt7V3o7AN2x2VWZi+epH9MXIZEjLBcz5oYJXdVP5EgFlj5voB8P8DyPRN2yd3f7SR9N+mBiGNXCRF8b46mHIw5jT6wmseeezHrta3OOG0ul4Ka/0Pv85zN/WW5x9vTAMBffspbXHr2EfecHLhARZr7ilIJzCL+Qi2bZGe1NM7t3Y+Pu3VojgYjRVCrzOir9Y9sA6HKqI/p2jaZRJZLo6wg+o9DSV233rqrien72rrtrF26QMFYskSPlpeiJF7DOlZK9a1Y+Yxpgoq+N8dRDRFA3TXLZMua97705xw3vGoCb/sKM5z2PeS9/Vc4xa9fu4Lfbb+blbziWeQdGb3EVuoGqmeVntCARMr0bhTjj7t1a43T4SRM6Ogqlir6UL/o6qyT6+of8kI9ySraE2bvVcu+GWcHJuIO7cwA3sIIWS+SoqqXPRJ8xDTDR18ZkSra4HsTyu5LCrN1CmYvjdfpKc0nVwg1ktCDqNa97N1Y/0SfJLNFXIjtHfNHXIbOqMpf+YV/0lZO9GyZPZGfv3nftX7n2wp9AgSoAId19fbzt69+no9vvzhLWHow7vns3tPTFo5RsKST6RCDWES2mr6P5OwYZRqWY6GtjFMURB/XcjDUj57jArVVoTK46fVEw0df6rNq+ipWbVla2k6EnoKcDHvpVdSZVRYY2PwbAZat+zwF7HsZxi46r2bEkEDFeGWVbdoxtQ704Ma1OG7udw/4colj6Yo4Qc2Q8ezdHnb5Njz+Geh5HvKRwyMfAlk08+q+b2b5hHYv28zuGhN8v8SCRI6qlr2j2rr8Ts/QZRoCJvjbGVRdBfEtfgc4ZYQC7U8CKl7H0xUoTfeEXsom+1uXrt3+d25++vfIdzeyA286ufD9VZr91PTyPefzwrnPh8U5uPf3Wmh0rE9M3Vrro2z6yFU3PIF2l0MNxS1+0WNtETMaLM+eI6UunxuiaMZOT3vaugvvZvOYJHv3XzezauiUj+lLBg2ciKNmiPb4AK1aypailD/wM3nSEmD6z9BnTABN9bYyq+k/kkS19+UVfzt67ETBLX+uza2wXxy8+nq8//+vl7+TPn4bHr4UP3Va9iVWJR/95I9ffdx5vPfAt/HjtLxhKDdGdqI41bTISxvSNle7e3TayBU3PiNSGLQo7S4jpA78rx5TizFkxfemxMeLJ4q7imfP9mOCBLZszy8JzSsQcvIEBtDcQfRHcu0UtffGOaB05ZiwsMnPDaH1M9LUxu0fH2LxrlEc3plk9tImzP3NlznEzUwOcAXzqsvt4+K/56/nBeDumqJjoa32G08PMTM6kr6Ovgr3E/OzdivZRG3oCC88enfMB2Da8rWaiz6kgpm/r8FbUnVk10Rda+iKLvniM0Ul1+rL/r93UGPFEhEzg7h6SXV0MbNuSWZZx7zq+pc/r6QHSlXfkAD+Dt2hHjt2QNEuf0f6Y6Gtjdo+m8FSYmXTYf2EfH3nh/jnHaf8WuBRefMgiXrJ/7jEAMzvjHLSotM4a2SVbjNakKpavZi7ZEljBZyV9QbptZBvLZi6rybFC965XhujbMrQFcQ/LCKRK6R9O0Zlw6ExE+7t0xJ2CJVt8S1/xjGQRYea8PRjYMi76si197sAA2tUJ6d2VJ3KAb+lLFUvksJg+Y3pgoq+N8dQDdZiRdNhzSR8vfHHu5uvbN/RwwaVwyuGLOeh5hRu0l4qVbGl9htJDdMUrbLetrp9J2YQ4gfW6L+4/0Gwb3lazY4WJHDpW2kPQSHqEXaldxLw+xqrm3h2LbOWDMKavgHs3NUYsGW1/M+bNZ9fWLEtfEDMcune9BXNg124SndVw73bCwHp45K/5x5joM6YJJvraGFc9QBDPixbTV4Obsrl3WxtVZTg9XLnoa+I6fWHJlpkJ3723dXhrzY5VbkzflmFfIMW0r6qWvlldxWPwQpLZlj7Jbenr7I3mIp05bz4bH3sk8z4TKxgkcnh7LoRdxUu2RMre7ZkPq66EX78+7xBXY7gdi2G4hO8pgWSn3UKN1sKu2DbG9VxQ8W+4her0Bdm7hYRhuZjoa21G3VE89arg3nWb3r3bG3R22DZSfUtf/2g/37/r+3Su3cwrgN/c+wvWdlwbefudIzsBiHl9VU3kKMXSl4w7GStjxtKXVafPHYsW0wcwY94ejOwaIDUyQqKzM8vSJ35HjoQvRisuzgzwmvNg66N5V6sqv/z+Lnb/WuHXN+Qdl4vj/m0fnvmy5SVtYxiNxERfG+OpohEsfV5g6StUsqVcTPS1NsNBqYvK3bte01r6JLD0OZ4wu2N2Tdy7Nzx1A79d9VsOHp7DK4DVWx7h9o3rS9rHfrP24+lNS6vm3u0fTrFsTnQxPyF7N0fYRjoVLaYPfEsfwMDWLcxduox0GNOnHjo0hJeIgwjxRH5LpKcerrrFLX2dM2HpM/Oudsdcdg9cz16HzWXpgdG7ndzzj3U8/cRA5PGG0QyY6GtjvMC9i1ekI0eEki3lYnX6Wpuh9BAA3fEKLX1e81v6PM9lbtfcmlj6VvevJiYxLnzVr1hzzov51OEfY/Zpbyh5Pyd/6zpWrtnBpy69p+I5rds+xKFLomdTJ4smcqSIZVn60jt2sO49K/B27Zqyr10xYEacVe9dwYK00ply+Un/CLNv9UWeG4+RSHYUDDkJj13U0lcENzinpQfO5sgX7Rl5u/WP7GTXtiL1/wyjyTDR18a46oEK4rlILP+fupaizyx9rc1Qyhd9XYkqWPqatg2bPy/PdZnbObcmlr7V/atZNmMZiS7fhVxOcWaAE/afx98f3MQ/H6s87nBWd5Lj95sbeXwi5rArNVFoTazTNzrBMje66hFG7r+fnuc+h9jsOROPnU7B04+TWrqEzt5ZDOwa5dEntrFwv3n0HfcsZMFsEts2FZxP9URfUHA6Xtr1OXNuJ+tX7UBVaxIPbRi1wERfG+OpSyRLX9Ar09y7xmRC925VLH01uL6qQZjIoa7LnK453L/1/qofY3X/avbu23u8Tl8ZxZkBvvzqQ/nyqw+t5tQi0xF32FagTl86lZpQnNnduQOAPT79GToPnFgVwPNc5C2v4bEOYcucLrZ3OKwanUnX/G5mdMbZ+vD9kZI4gOLu3SKElr6SRd+8LlKjLiO7U3TNiJ4QYxiNpDm/hY2q4Lt3HXCjxfTVJHs3uDmk1Or0tSKhe7c6JVua3b3rMbdzbtWzd9Nemid3PcnefXtXVKev0WQncoTu3exEjvTY6ATRl96+HYD4nKlxco4T46iXvpKuvj7GRoZJj46S0BTe2ChjI8PMnL8Hh5z4woLzCUVfpZY+LzyneGnffzPn+UkmA1uL1AA0jCbCLH1tjKtq2btGRQynAktfNYozN3kih+e6zOuax3B6uKqt2J7a9RRpL80+ffsg8TjEYuhoee7dRpKdyOGIgyNOJpHDc13U8ya4d93tvqUvNmtWzv2dfOaKzOv/u3cD3/j1Xfz148/ngAXRyr5Uzb2bCjwdZVj6AAa2DbNg79KK1htGo6i56BORbwGvA5YDh6lqTt+JiKwBRoIfgE+r6tW1nl8743nj7t1Ke++Wi4m+1qa6iRzN6VgI3bthIgf4ZVuqJfpW968GYO++vQGQZLLsmL5qMrLqEcaeXFNwjNPZSc/xxyOxGImYM6FcTEximf/rdOCujmW7d7dvx5k5E4lQxiWsPZgooc1jeOyK3btuee7dGXNDS58lcxitQz0sfZcD3wVujDD2tHyi0CgdDwV1wC1s6bOSLUY+qufebeY2bBMTOcDvyrFsRnVasT3R/wQwLvqcZLKs3rvVZu273oW7tbgre+l5P2LGSSdNyN4F/387dO+mU4GrdVJMX3x2tBIo4/X/ortYq+beDRI5nFhp7t1kZ5yuGQkGtpl712gdai76VPUmqE28mFEYvw0bZukzyqZq7t0m7sgR/m+o5zG3aw8A/rz6zxmxVik3rb+J+V3zmZH03ZbS0YFXZiJHtVDXxd26lVlvfhOz3/SmnGO83bt58i1vJbV2HcBU0Sdxblh/A9tHtuPsGmM2cMWa/+PSG28G4EVPrCSR8Jg1vC1jQc1HJZa+apVsKdXSBzBjbhcDW8zSZ7QOzRbT9yvx1eFNwGdVdWf2yi1btnDMMcdk3q9YsYIVK1Zg5MbzXEQDsW11+owyqK6lrzI3XK1wsmL6lvYuoSPWwa8f/nVVj/GCZS/IvJaOjobH9LkDflHhjn32pfPAA3OOUVWks5PUxo2AL/pGs9y7z1/2fO7efDd3br6T7l1wPHFWDz7J05vXAPDCHTtZPTPNA49cyvuOeF/B+aS98TZsUWm0exf8ZI7NT06tQ2gYzUozib4TVHWdiHQA5wA/AN6aPWD+/PmsXLmyEXNrSTwUx/O/RAvW6bOSLUYehtPDJJxExTdWtHktfZk6fZ5LX0cf177hWgZTg1U9Rralqxli+tydOwGIzcpfnFlESCxaRGrDBgA6gkSOsC7d2SecnRm75cnV/OLPH+Zzx3+e/Z/9XAAeOecEtswVLn3iSt57+HsLentCC2Iplr5quXfdVBDeUmL2LsDMuV08dsdmLv7Pmyuag2HUi6YRfaq6Lvg9KiI/BK5o8JRaHk89nLA3e4SYvpq6d9VEXytStSzWZk7kCN27gcVnRnJGxhVbC6Sj8TF9Xn8/ALG+wh05EosWZSx9oSBLe0pikkUuHYjYWNJ/OFBV3B07WbzkOawZuIUHtz/IIXMPyXuc7N67UamWe9dzyyvODPCM5yxkaGAUrU5nPMOoOU0h+kSkB4iran/g3n0TcHdjZ9X6qHo4nv9FVjimLyzZUgPRF9bp86xOXysylB6q3LULzV2nL8u9W5fjJTvKLs48mXUP3MuNl1yUsdZHxR0YYGy/JXT88dc4V18+YV0sHueF7/oA8/dcTnzxIkauvx7w3bvgW+UmW+TSKV/0xRNBHcJduyCdZt/lRxF3bucbt32Dw+YdlnMuy2YsI+0e7W9fwndQ1dy7YUxfCVbGkNkLe3jhGQdXdPySeWd9D2e0F/Uo2fI94LXAQuDvIrJNVQ8RkauAL6jqSmABcJmIxIAY8CDwgVrPrd1x1cMJn0AbFNMXc2IIYu7dFmU4PVx5uRbwu8I0qXtXskq21OV4HR14VYrpu+Wy37Bj4wYW7ndA8cFZpAeHwPXonDETp2tc1Huuy9r77mbdA/cxf8/lJBYtwt2yFW9sbILo65nULCO09MUDS58bFGbumb+I1y54LX964k88tP2hKfNIeSnSXpq3LfwVUJqlr1odObxQ9CUs2dBof+qRvfsR4CM5lp+S9foJ4Khaz2W6oXg4QSJHlI4ctYjpA9/9YqKvNamepa+Je+869bX0STKJNzRU8X62b1jPugfu5XlvejvPfs0bStv2oovY9JfrOeCSz04onuy5Lt85/dWMDu0GILFoMQDpp58eF33uVF9mxtIXtE5LB4WZ43Pm8PnnfJ7PP+fzOefx24d/y3/9678YTg8Rd6SkKg/V7r3rlGHpM4xWoyncu0Zt8FSJeY3N3gUTfa3McGq4OjF9LZDIMdS/k52bnq758QbjQnpspOJj3fWXK3BiMQ49+cUlb+v294MIzsyJnSScWIxEZxejg4HoW7wIgNSGjSTivgDMLtsSkonpCwoxuzt8S19s9pyC8wivrRFvuKTMXaiBe7eMmD7DaDVM9LUxikcM/0YburByjgvigUz0GZMZTg+zR/cele+omRM5YnGcWIzbr7iM26+4rD4H7QQ+8u6Kd7P/s55Lz6xoBZCzcXf2E5s5M+f/fGdPLyODfvZyYlEg+jZupGPvpUBuS58biL5EYOlzd4SWvsJzC0MHRtLDJAp8R+Wiatm7GdFn7l2j/THR18Z46hH3gj9xAUGXsfTV6KaccBIm+lqU6ZDIEYvHef1/fpX+LZvqcrydl/6e0ccfY8FnPlPRfkSEvQ4vLyrG3bkTJ0+5lo6eHkYD0RdfuBCA1MYNJPcbj+mbzGRLX+jejRXpyNGV8K+tEXeIRKxwJvFkqtaRo4LsXcNoNUz0tTGqHg5B9m6Bp+gwgL1mMX0St5ItLUr13LvNm8gBsPTgQ1nKoXU51sZrbmTXnfdywIkvrMvxcuH290+I5cumo7sn4951OjqIzZtHeuPGCYkck5kc0+du3450duJ0F752QkvfmDtC3Mk9n3xU273rmOgzpgEm+toYxSOeqdPXmDZsYO7dVqZqlj6veXvv1hvpaILizP39xPK4Xjt6eti1bbwnb2LRInZe/r8svPpv/GYkTeLaBI9M6pH79MxOmNXN6he+CAfwBgeJzSvceg3GO72MesMlFWaG6rp3xRGcEvr+GkarYqKvjfETOfzXBWP66iD6rE5f66GqDKWHqlOyRd2CIQbTCaejo+HFmd2dO0nus3fOdZ09vWxd+2Tm/fyPfJjd117L0/0j3PDgJl588ALm9HVO2Cax6Slk6wb6XvbSTAZud1bLzHyEVuRRd7ikci1Q3ezdWInHNoxWxURfG+MncgQ32gI3XCvZYuRizBvDU6/tO3LUG0l2oKkU6nk1e9AqhtvfT6xvVs51fkzf7sz73hNOoPeEE9iwdgc//OHNHPuOYznqwInJPQ9f/DNif7uKRV/8YknzCB8oUjpCvERLX7Xcu17aI5awa9OYHtiV3saoesQC925hS59l7xpTGUr5teTaPZGj3kgyCdAwF6+m03i7duVtwdbR3cvo8FDGAxCSjOWP6XNTY8QTyZLnEj5QpLyRhrp3HbP0GdMEE31tjKLEg+LMkbJ3TfQZWQynhwGq5N5t7kSOeiIdjRV97sAAQN5Ejs6eHlBldHhiAemOQokcY2PEk6WLvs5YJ4KQ0pHGuXddtcxdY9pg7t02RvFwguLMhS19Qe/dGrnf4k6cp4ee5sonrqzJ/o3asHloMzBeVqMiPLP0hTgdfobr9l9cjNPTU/H+ksv3YsbJJ0ce7+7sB8hv6evpBWB0cJDO4DWQscSlcnXkGCvP0icidCe6SY2M0FtiIkXG0icVir6UZ5m7xrTBRF8boyhxilv6ah3TN79rPv9Y+w8+c2NldcmMxrCwe2HlO2niNmz1JrFsTxBh6w9+ULV9LvvpT+l93vGRxro7dwIQK1CnD2BkcDd9LMgsL1iypUxLH/jhA+kyY/riTryk1m258FzPLH3GtMFEXxsTPaavtu7drz//62zcvbEm+zZqS2e8k4U9VRB9XvO2Yas3vc87ngPvvAOtQq9fTaV48k1vZtN//Rfdl/0eSRRPanC3bwMKuHe7fdEXFmgOKdR7102NESvD0gd++MB2RjIxg1FJe+mKkzggyN61bhzGNMFEXxsz0dLXONHXEetged/ymuzbaBHM0jcBp6sKLvOABf/5Oda9ZwWrnlm8REo2+bplZNy7Q7snLK+Vpa870c1WRkruvZvyUhXH80GQvWuWPmOaYKKvrfFwwjp98eK9d2vl3jUMv06fWfpqQe8JJ7Dku99lbPXqyNvE5s4hsWRJznVhHN/I4CTRF1jiRvN05Eh2lZfw0x3vxtXdxEv8/qmepc+yd43pg4m+Nsav0xc9pq9RNcOMaYAlctSUmS99SdX2Fcb0TXHvFknk6M5T968YXYkuPLaRLNHFmtZ0xUkc4Lt340n77jOmB3altzF+yRb/dbGYvlpl7hoGENTps2usFUh2doEIo0MTRZ/jCHFH8vTeTVUU0+fJaMmWvpSbIhGrjqXP3LvGdMGu9LYmap0+16x8Ru0Ii/yae7clEMeho7ubkd27p6xLxp08MX2jJMqN6Yt34zFackxfmL1bKZa9a0wn7EpvYxSPmBav0+d5nsXzGbVDMw2gGzsPIzKdPb1TLH0QiL6c2bspYhEyh3PRnehGndHSs3e1etm7jmXvGtMEu9O3NUrmNlske9csfUbN0KA0iV1jLUNHd++E/rshyVg+S195xZkhaPMnpVv6Um51snfNvWtMJ+xKb2MUzbL0FXDvqproM2pH0PHFLH2tQ0dPT05LXyKW29JXUcmWeDeIiyNT91uIlKaqlMjhEbPsXWOaYNm7bY1mijMXs/SZe9eoGaGlzxI5WobOnl4eu/1WfvDON05YfupIGu8eOPvyieMTbppL7tjIFYl7OPt1hxMroaVad8Iv9eLESutFnPbSVUnk8NLWe9eYPpjoa2u8rOzdIiVbTPQZtUItkaPVOObU19I7d+6U5Q9v3MWGncNTNxBhZPFRXHXHUzxzr9m86Vl7Rj5Wd9wXfSqlib5qunet964xXTDR19YoTpi9W7Bki2uWPqN2mHu35Vh8wDNYfMAzpix/QYFtVJXXn3cL37x6FT0dcZyIPXFX7Rj1t5fRkuaY1jQd0lHSNrlwLXvXmEaY6GtTVBVEM3/gonX6TPQZtcIsfdMCEeGsVx3C6350Mx++5K7I28V6N9C9DHq7SutFXA33rqriWfauMY0w0demeMGNNkpMn2eiz6glGUuf3VjbnUOX9PHPz7yA7YPRXbX3b+vli7dfxIkH9pV0rJRXeSKH5/pfkGbpM6YLJvraFA9f9EWJ6UPV3LtG7VBz704n5vV2MK83utt1LObHDo64OWIFC1CN4sxuUH4mVmKNQMNoVexKb1NUfbXnmKXPaDTm3jUKECZyDKWHStquGu5dLx18T5p715gm2J2+TXED68p4TF+hNmxWssWoIZbIYRQgLNkylCpN9FXDvesGNQfNvWtMF8y926aMW/qKZ+96nmc11IzakenIYaLPmEpXvAuAdbvW8cTOJyJvN5oerdy9mwpFn1n6jOmBib42JUzkyMT0FbDkWckWo6Z4Ye9du8aMqXQnukk4CX52/8/42f0/K2nbnkRPRce2RA5jumGir01Ju751JRPTF8v/p7aSLUZNsY4cRgESToILXnYBG3dvLG1DgeMWHlfRscNEDscSOYxpgom+NiUV3GhjEbJ3rfeuUVMskcMowhHzj+CI+UfU/biZ7N2Eff8Z0wO70tuU0NKXqdNXpDizuXeNmmGJHEaT4gbZu7GYxfQZ0wO707cpKW9iceZCljwr2WLUFEvkMJoUL23Zu8b0wq70NiWVDi19geor1obNuiUYtcKzmD6jOcnE9JnoM6YJdqW3KWNuGggsfSIFRZ16LmJWGKNWaCawtLHzMIxJuJnsXXvoNaYHJvralNC96ygFrXzgu3ctps+oGRn3rl1jRnMxXqfPrk1jemBXepuSCix9cQrH8wGoZ9m7Rg2xRA6jSfGsI4cxzbArvU1JB19mjqdFLX1Wp8+oKZbIYTQp43X6zL1rTA9qeqcXkW+JyGoRURE5tMC4A0TkFhF5JPi9fy3nNR1IBdaVGCARRJ+5d42aYYkcRpOSKdlidfqMaUKtr/TLgecDTxYZdx5wrqoeAJwL/LjG82p7Qvdu1Jg+s/QZNSMszmzuXaPJyBRnto4cxjShph05VPUmoGDmqIjsARwNvDhYdAnwAxGZr6pbssdu2bKFY445JvN+xYoVrFixotrTbgvSYZ2+CPF6VrLFqCnm3jXqwLb1u3ngpg2gxceGbF23CwDHsneNaUIztGFbBqxX9e8MquqKyIZg+QTRN3/+fFauXNmAKbYe6Uz2bpSYPivZYtQQzyx9Ru25//r13H/jejq6S7ut7bF8JomkXZvG9KAZRJ9RAzIxfRohe1fVYvqM2hFa+syabNSQkaEUffO7eOuXn9PoqRhG09IMom8dsEREYoGVLwYsDpYbZZLOxPQVt/RZTJ9RU8KYPrMmGzlQT7nsm3ewc/NQ3jEHPWcRx59WOL9vdDBFZ0+i2tMzjLai4aJPVTeLyN3Am4FfBr/vmhzPZ5RGKqtkS6SYPhN9Rq2wOn1GAcZGXTatHmDRfn3MWzpjyvonH9jGuod3FN3P6FCazt5kLaZoVIiIrAFGgp9O4EbgA6qaKrDNhcBKVf1BkX2/D+hS1e9UbcJtTE1Fn4h8D3gtsBD4u4hsU9VDROQq4AuqGgbovQ+4SES+AOwA3l7LeU0H3DCmDyLV6TP3rlEzLJHDKMDokH/ff8ZzFnHw8YunrL/mFw+x9oFtRfczMphi1oLuqs/PqBqnqer9gTfvRnxt8NtKd6qq51U8s2lErbN3PwJ8JMfyUya9fxh4di3nMt0IY/qiWPo8y941aolZ+owCjA37oSj5EjA6exMMD6ZQ1YLfU6NDaTq6zb3bAnQGPztEJAl8FTgR6ADuBd6vqruzNxCRPuDnwCHA+uBns6p+UkTOAnonvw62m7zuGcBM4ADgDuBs4NvAXsAfVPVTNTzvpqDh7l2jNqRD0acK8SgdOeyGbNSITJ0+syYbUxkdCkRfV37R56WV1KhLsjP3GM9TRofTdPTYLW0yyz9z5TnAkTXa/d1rzn7FxyKO/b2IjAD7An9V1b+KyH8C/ar6LAAR+TrwH8DnJm37BWCHqj5DRObgC7bLypjvM4FjgN3Anfii7+X4Wmi1iJyvqo+Wsd+Wwf5D2pSJMX1RSrbYDdmoEZlEDrvGjKlkRF8eK11XEKc3sjuVV/SNDadBodMsfc1M6N7tBC4TkY8BrwJmishpwZgO4J4c254MfBhAVbeLyOVlzuFqVe0HEJF7gXtUdRQYFZFV+ILURJ/Rekyw9BWL6WuGki0P/BF2rq3+fhPdcNTbINFZ/X0b0TD3rlGA0L2bzGPp6+r1hdzw7hQz53XlHDMy6McFmqVvKiVY4uqCqo6IyP8BrwQEP6HjmirtPs3ETmOTv/hHsl67Od63/QXU9ic4XckWfZFi+hop+vrXw6Vn1m7/s/aCA15Su/0bhbFEDqMA45a+/O5dgOFdY0X3YZa+5kdEHPwYvkeAW4H/JyK3qOqwiMwAlqrqQ5M2uw4/wfOfIjILeDXwhxy7fwx4f3CMHnxh+ZeanEiLYqKvTQmzd8WL0pGjwaJv9fX+73f/A/Y4qHr73foInH8SjO2q3j6N0jFLn1GA0dDS15n7+ghFX2jNy7mPjKXPRF8TE8b0JYH7gS/jx9adBdwuIh5+E70vAZNF35eBC0TkYWAjsBLoz3GMPwBvDLZfix/7Z2Rhoq9NKcXS54u+BmbvPnE9dM+FxUdXN+6ra47/OzVcvX0apWOJHEYBxobSJDpjOLHc10fo3h3ZnV/0jQRlX0ptwWbUB1VdXmD155iauIGqnpn1dhB4c+AangncBJwfjDsra5sx4DV55nDWpPdnTnp/UoE5tg32H9KmuDpesoVE8Y4cDYvpU/UtfXs/v/qB/omgZpeJvsZiHTmMAowOp/Jm7oIf6+c4wnAB0Tc6GLh3zdLXrswG/hzU+OsEfq2qf2/wnFoSE31tSjp072px121DS7Zsewx2bYS9T6z+vsPkDRN9jSXj3jVLnzEVv75e/luRiNDZmyho6Rs1S19bo6qb8cutGBVi/yFtSkkxfRGEYYY/fRQeubrS6Y2TDpKn9qmB6IsHmX4m+hqLJXIYBRgbTufN3A3p7E0UTOQYGUwT74gRi9uDhWEUwkRfm5KJ6fM8pJpt2B6/1nebLj++0imOM3s5zN67evsLicUhloRU/kbuRh0wS59RgNHhNL2zC5dU6upNFE7kGErRaVY+wyiK/Ze0KRMtfVUs2ZIegQNfDqd+t9Ip1odEl1n6Gk0mkcMsfcZURofSzF1c3NK3fcNg3vUjg2nL3DWMCNijd5uSzhJ9heL1VBVUkahWmPQIxFuo0HGi2yx9jcbcu0YBxobTJItY6bp6k4UTOczSZxiRMNHXpoTZu6JewZg+DcVh1JItqVYTfV3jcYNGY/DM0mfkRsOeuRFi+kYHU3ie5lw/OmSWPsOIgom+NiW09FHEdesF45woVhhVcEdbS/TFzb3bcMzSZ+RhbNQFLZ5129mbQHU8S3cyI4Nm6Wt2RCQhIl8WkUdE5F4RuUtEvi0iNVfrIrJGRA6t9XFaAfsvaVOiZu+qhpa+CPo/tJi1Uh/bRJe5dxtNJqavgQXAjaYkFHHFsnfDAs23/2l1ToveyO4UHdaCrdm5AOgCnqmqu0QkDrwT6ADy++6NqmKir00Js3dxC1v6xt27JYi+VrL0WSJH4/Fcc+0aORkbLtx3N2Tukl7iHTHuu2F9zvWOCPP3mlH1+bUFZ/WdAxxZo73fzVn9Hys2SET2x++UsVRVdwGoaho4X0QOE5Ef4vfK7QTOV9Vzgu0uBEaAA4BlwC3AGaqqInI68FH8tm4An1TVfwTbnQD8MFh+PZB54hSRb+H3/k0CW4F3quqT5X4ArYaJvjbF03H3bpSYvkglW1Kh6OuodHr1I9ENu59u9CymN+qaa9fIyehQIPqKWPrmLunlvd+tQS1Po14cBTyqqjtyrFsDvEhVR0WkF7hNRK5W1bD/7qHAiwAPuCt4/TfgauCSQAAeCPwDWCoiHcBvgLeo6nUi8gbgg1nHO1tVPwkgIu8Gvg68qcrn27SY6GtT3FD0uW6kmL7SLH1dlU6vfpilr/GYpc/IQ0b0mWu2dkSwxDWYbuBHInIEvrBbDBwBhKLvclUdARCRO4F98UXfvsAlIrIE3z28UEQWAnsAQ6p6HYCq/k5Ezs863stF5INAL9NQA1kiR5viZiVyEI+QvRsl3irdopa+lGXvNhT1zNJn5CR07xaL6TNanruA/UVkdo51XwOeBo5S1SOA2/DdvCHZX+Au40LtEuCHqnoIcDSQnrRdNgogInsB3wHerKqH4scUtlC8UuXYf1qbEpZs8WP6opRsiXBTziRytJKlr9MSORqNetaNY5qx7qHtPHTzxqLjdm7y/zetZ257o6qPisgVwI9F5F1BIkcMeAcwC7hXVdNBhu0JwK8j7HYWsDp4HSaEAKwCukTkBFW9UUROC8YCzATGgKfFL077vsrPrrWw/7Q2ZYKlr0BHjmkR02fu3cbiuSb6phn337CeNfdtZcac4kaUPQ+ZUzSmz2gLzgC+CNwhImP4nsargLOBC0TkXcAjwA0R9/cx4HIR2QH8BdgGEMQGvhn4oYhosL+1wbr7RORS4EH8JI6rgOdX5/RaA/tPa1Ncza7Tl9+KNz1i+ob8GoNWMqQxWCLHtCM16jJ/2QxO+/QxjZ6K0SSo6hjwueBnMjlr6Knqmfneq+rFwMVZqz+bte5G4LCsdR/KWvdR/KzfkC8WnXwbYY/fbYqX5d6N1pEjiugb9X+3lKWvC9DxuRv1xxI5ph2pEZdEh/3NDaPZMEtfA7jp0a1cctvamh7jyW2D0EfRjhwluXfTgZu0pWL6uv3fqaHWKirdTlgix7QjNerSNcMycg2j2TDR1wD6h1Os2rSrpsdIdAqj4FtZClj6SnPvtqqlD+u/20jUYvqmG6nRtFn6DKMJMdHXAF5x+CJecfiimh7jwvtX8+07QF0PiZDIEalkS5gQ0UodOcL4Q0vmaByeZ+7daUZq1Ny7htGM2ON3m+IxXpw5Wu/dKCVbQktfC4m+0NJnZVsah7oQxZJstA0m+gyjObFv4jbFU8/PWC2SvVtWTF9Lib4wps8sfQ3DEjmmFZ6npMc8E32G0YSYe7dN8dRDNHhTwL1bXkxfK4k+s/Q1HCvOPK1Ij/mVAxIddnsxfERkDX5njTC4+lpV/XjjZjR9sf/KNsVTDycQfVKtki2pYYglW8tVl7CYvoZjdfqmFanRQPR12t/cmMBpqnp/rhUiElMN64wZtaSF7t5GKagqThDWV+iGW5p7d7S1CjODuXebAXPvTitSI6Glz/7mRm5E5EwR+buI/FFE7gcOE5FPiMjtInKXiNwiIkdmjVcR+Wyw/gkReV3WuueIyE0ick/w85Jg+YEi8udgm3tE5B31P9Pmwyx9bYpHtqUvgns3SvZueri1yrWAWfqaAfVayzpsVETG0meiryk47KLDzgGOrNHu777vjPs+FnHs70UkdO/+CDgOOEJVHwcQkfWq+u3g9YuA84IxIQOqeqyIHA/8DrhMROYAfwReq6o3B/18Z4pIHL9/71tU9WERmQGsFJFbVPXhyk65tTHR16a4nktcHaCwa63k7N1WK3BsMX2Nxyx90woTfUYeMu5dETkTuCkUfAHPFJHPAnMADzhg0va/CX7fCiwWkU7gOcCDqnozQOAi3iEiBwMHAb/JMmh0BMtM9Bnth6KB6Cts6Ss5pq+VkjjALH3NgCVyTCsspq+5KMESV292hy9EJAn8Hni+qt4pIouB9ZPGj4Av7AIhV0i/CLBVVY+s6ozbABN9bYqnHnENnnCqGtPXYu7dNivOfOW597Dmvm2NnsYEZs7v4i1fOg7HyRMiYIkc0wqz9Bll0ImvR9YF7z8QcbtbgINF5Dmqekvo3gVWAUMi8jZVvRhARJ4BbFDVgSrPvaUw0dem+KIvsPTFq9WGbbj1EjlicT/juA3cu27KY+0D21ly4CwW7Ter0dMBYOvaXay5bxvDu8bo6cvzQGDu3WlFajQNmOgzoqOqAyLyBeB2EdmGb/WLst12EXkt8D8i0oPvFv6kqv5dRE4FzhGRTwExYBPwhhqdQstgoq9N8dQjRmjpq5J7txUtfeC7eBth6RvaDpe9G8Z2Fx8bge2DC/C8d3BI+kL239wcYSmPDx3AGl7L8C/eRU/35tyDNj8ECw+r78SMhhFa+pJWp88IUNXlk95fCFw4adk3gG9kLfrvrHUyaaxkvb4ZP7Zv8jEfBV5R/qzbE/uvbFMmWPoi1emLkr07Aj3zqzK/upLoHu8mUk/u/S08/g/Y+/lViWnbMroMgPkzd47HKjaY7i7fqjPkzYbErtyDlhwNh74u9zqj7TD3rmE0Lyb62pSJlr7i2btOlJir1EhrWvrinY2x9N13KSw6As74U1V2t+WSVSTWP03fey6CKCK9DnRtHoL7b2Xo2Z+F4xY1ejpGE5AacXEcwYk3xzVqGMY4NU+pE5EDgkKLjwS/988zbo2IPCwidwc/L6313NqZiZa+arVhG2m9mD7wLX31Fn3bHof1d8Chp1Vtl1vX7WLe0t5oVtk60T0zCcBQ/1iDZ2I0C6lRl0RnLFrtT8Mw6ko9LH3nAeeq6i9F5K3Aj4EX5Bmbt02LURqKEvOiZ+9GF30taOlLdPkC7I/vq98xtz8BSNXcmp6nbH1qNwcfv7gq+6sWyc448aTD0C4TfYZPatQ1165hNCk1FX0isgdwNPDiYNElwA9EZL6qbil1f1u2bOGYY47JvF+xYgUrVqyoylzbDU894kSv0xetZMtI08SSlcT+L4a7fwVP/jPvkCd2HU7/2NwqHvQZMPeVcJsLrK14b2PDadJjHvP3nFH51KpM98ykWfqMDCb6DKN5qbWlbxmwPmykHBRV3BAszyX6fiW+T+Am4LOqujN75fz581m5cmWNp9weRK3TV5J7t1Vj+k76jP+Th3TK5c8fuR60ysfdAjz8WNV2F4s7LNqvr2r7qxbdM5MMm6XPCDDRZxjNSzMlcpygqutEpAM4B/gB8NbGTql18TRa793I7l3VwL3bYh05IpAe80DhOa/Zl0NPXNLo6eQlFnOIJZqvs0XXjCT9W9qj+LVROSb6DKN5qbXoWwcsEZFYYOWLAYsZr7qdQVXXBb9HReSHwBU1nltdGXvySXb9/e91O96Bqx9i0fqgt3WUki3FSoq4Y4C2r+gDOrrjJDub6TmoNeju62Dj4/2NnobRJKRGXXr6ko2ehtFEiMga/LZrh2tQMiJY9spCcfwi8jHg16q6OXh/FtCrqp+swpwUmKGqVSmkKiLLgZWqOq8a+6sVNb3DqepmEbkbeDPwy+D3XZPj+YJK2nFV7Q/cu28C7q7l3OrN6ONPsPmb36rb8Y4OXyQSJBblL6UROaYvHQjIdhR9Kb+uWLwJrWitQPeMBCO7U7iuR6yAVdmYHpilz8hDL/A24KIStvkY8HcgT+X30hGRuKqmq7W/VqMeZo33ARcFLVZ2AG8HEJGrgC+o6kpgAXBZYAmMAQ8SvfdeS9D7/BM48M476na8L9z8Be7bch9/fN2fcJL5n7ojx/SlAtGXaD/R56b8zyCWsBtVOYRlW0Z2peiZ1YIxn0ZVSY2kTfQ1EQ8946BzgCNrtPu7D3r4oY9FHHsW8EURuURVM0HAIrII+D6wJ9AFXKKqXxORz+F7Bn8vIiPA6cEmSwL9sA/wOPB6VR0SkSTwVeBEoAO4F3i/qu4WkQuBNHAgMINJn4eIfCvYLglsBd6pqk+G1jv8qiOnAN3Au1T1pmC7DwIfBwaAK7P2twfwa3xtA/B3Vf14xM+pptRc9Knqw8Czcyw/Jev1E8BRtZ5LI5F4HInXz3U4lnRId8QLCj4oIaavrS19/mcQT5qVqhy6Z/pCb2hgzESfEVj6LEzCmMJK4A7g/cB3s5b/AviKqt4QCLd/iMjtqvpVEXkPWaXcgtqPxwDHAv3A1cBbgJ8A/w70q+qzgrFfB/4D+FxwnCOBE1V1MMfczg5dxiLybuDr+B5HgLnALar6ORF5S7DueBE5PNj3Uaq6KQhLC3kL8LiqvijY5+zSP67a0FL/mZ567K5SH9N2J+WmcCK0/jL3LriBe7cZkyRaga6wQPOAZfBOd1Q1U5zZaA5KsMTVg/8ErhWRnwXvY8BJwPysYt4zgIOAv+XZx9VhZQ8R+Rewb7D8VcBMEQkr4ncA92Rt9/s8gg/g5YHVrpepumi3qv5f8PpW4NvB65OAK1V1U/D+fOANWeM+LiLfBK7HF6dNQUuJvoe2P8RzLpnSV9nIw/6zczY/mUBk924bi74wkSNu7t2yCN27OzcNMW9pb4NnUx8SnTFL+smBm/JQtb67Rm5UdVXgmv1/wSIPv1jWsaqairibkazXLr5LGECAD6jqNXm2y2kxEpG9gO8Ec1gtIs/Fd82GjE46XtF/fFW9RUSOwq9R/DbgM8Dzim1XD1rqW2th90I+eUzFSTvThiPmH1F8kEbM3m3jmL6Me9csfWXR3ZdEBG669FFuuvTRRk+nLsQTDmecfTydPYlGT6WquCmPf/ziobLrLnquXyfKRJ9RgLPw3bxxfMF3I74o+gqAiCwDUqr6NH6sXNTipFcA/09EblHVYRGZASxV1YeKbDcTGAOeFv9GGLV103XAp0VkjyC7+F3hChHZG3hKVX8jIjcCj4mIE2YuN5KWEn1zu+ZyxiFnNHoabYVZ+rKydy2mrywSyRiv/PAR7No2UnxwG7BtwyD3XfsUA1uH2070PfnANh69fRPzlvWWbflecsAsFh8wq7oTM9oGVX1KRC4GPhEsegvwHRG5L3i/C3gn8DTwPeACERliPJEjH2fjC8rbRSS0IH4JKCj6VPU+EbkUP4F0K3AV8PwI53GviHwN+KeIDATbhZyEL0BdwAHe1wyCD0BUq92GoHYcc8wxah05JrHy5/Cv88ve/PZ1XdywuoePHL+Vgt/xY7uhfx28+x+w9JgCA1uPB/+5gWsvfpi3ffU5zJzbgm3mjLqy+ckBLv3vlZzy/sPY+4j5jZ5OVfnbzx/gyfu38Y5vPs/K7zQpInKHqrbXl7BRN1rK0mfkoGsOzCseu5cPb9sIMIzM2w9iUnjwPifCgkPKPlaz4qYsps+ITpitPNhm/YbdlMfqe7ey79F7mOAzjDZl2oi+tfffy7UX/rjR06gRM8vecmhAgWHkDRdCHUvKNBOZRA5z7xoR6J6ZAIHB/tHig2uAm/JY99B2XLe63qLtGwZJjbjsd/QeVd2vYRjNw7S5yyc7O5m9qHn7qjaK2YuWMHvxEmLTVPABuGnryGFEx4k5dM9IMrSzMaJv1W1Pc+3FD9dk310zEix9RtOUFDMMo8pMmzv9wv0O4FWf+Gyjp2E0IekxD3EEx1xaRkS6+5INc+9u3zhIPOHwuk8/E79KRfXo6UsSi9v/gWG0K9NG9BlGPtIpz6x8Rkn0zOpgsEGWvv5NQ/Tt0c28pTMacnzDMFoXu9MZ0550yrN4PqMkevo6Gmbp27l5mFkLLMvcMIzSsTudMe1xx1xrwWaURE9fkuFdY3hVTqYohut6DGwZZtYe3XU9rmFUgoisEZGHReQeEblfRN5UfKsJ2x8pIm8oPrJ8RORMEfl9LY/RDNidzpj2+O5dK9diRKe7rwMUhgaido6qDru2juB5yqyFJvqMluM0VT0Cvy3ZBSIyL8pGIhIHjmS8r61RASb6jGmPuXeNUumZFdbqq29c385NQwBm6TNaFlW9C7/rxt4i8g8RuVdE7hSRl4VjRERF5CwRuR2/L+6XgReJyN0i8j0RWS4iW7PGT37/IRF5VERuF5EvhetEJC4iV4vIShF5QEQuEJFk3U6+CbBEDmPakx5zLZHDKImePv8+MVRv0bc5EH0LTPQZ0Tj3fdecg28pqwV3f/C8F3yslA1E5GSgE/gl8A1V/ZmIHAzcICIHqeqWYOiwqh4bbHMH8EpVPS14v7zA/g8H/gM4UlW3iMh3s1a7wOmquk1EBLgIv+XbeaWcQytjos+Y9rhpj5i5d40S6OlrTFeOnZuG6OxJtF3PX2Na8HsRGQEG8Pvt/h64AEBVHxSRu4HjgD8F4y8q8zgnAVdlicefB8cD37v5SRF5ORADZgNDZR6nJTHRZ0x70mMe3X32r2BEp2tGAhF4+JaNbN8wWLfjrn1gu2XuGiVRqiWuhpymqvcDiEiUekO7C6xLMzE8rTPiHE4HngecoKq7ROSzwAERt20L7E5nTHvSKY+4FaQ1SsCJOex56FyefqI/43KtF4ccvriuxzOMahMIrruBM/CTOg4CjgBuzbPJANCX9f5pICEi+6nqY/hiLuR64N9FZJ6qbg2OETIL2Bocvy/YbmU1zqlVMNFnTHvclEvMEjmMEnnlB49o9BQMo5V5C/BjEfk4vuXubVku2cn8A98tew9wvap+REQ+CvxNRLYAV4YDVfUeEfkGcIuIDATb9gerfwG8WkQeBjYDNwLTynRuos+Y9qTHrGSLYRhGrVDV5TmWPQa8MM94mfS+H3jupGU/x4/XC/lS1usLVPV7ACJyFnBL1n5elOeYFwIXFjqPdsBEnzHtsTZshmEYbcXZInI8kASeAFY0eD5Ng4k+Y9qTTrlWp88wDKNNUNUPNnoOzYrd6YxpjecpXlqtZIthGIbR9pjoM6Y1bsrvnWruXcMwDKPdsTudMa3JiD5z7xqGYRhtjt3pjGlNOuUCELM6fYZhGEabY3c6Y1qTHgstfRbTZxiGYbQ3JvqMaU3aYvoMwzBqioioiPROWrZVRJZH2PYqEdk3eH2miJTVNk1EzhKRb+VZt0ZEDg1ed4vI1SJygYjEROSnInJCOccsMJcLReRD1dxnVKxkizGtybh3TfQZhmE0Hap6StbbM4GtwCO1OJaIzMLv7nE78HFVVeDdtThWozDRZ0xrXHPvGobRxnz7ja88BziyRru/+xO//b+PVboTEVmD3yLtxcAi4Fuq+oOsda8EjgWOAb4nIv8FfFJV/y4inwZeh69n1gPvUdWng966PwMOxe/Vuw7YVGAaewAXA1eo6hez5nZdMJ//E5ELgRHgAGAZfqePM1RVRWRJcA4LgccBAa5W1R9krVsErAG8rP0vAM4D9g22+aaq/iLr3H+J37lkCfCZYJ6nA3OAd6rqDVE+4xAzbxjTGnPvGoZhNAXdqvoc4CT8jhoT3MGqegGwEviIqh4ZCL634oul41T1aOAq4NvBJl8ABlT1GcBpwIlFjv874E/Zgi8PhwKnAIcAz2S8rdv3gGtV9RDgw5OO9z3gBlU9GPhQjnX3q+rhwEuCcz80a31H8Lm8DvgJkFLVZwGfBb5WZK5TMEufMa0J3btWssUwjHakGpa4GqJZr38DoKprRGQHsBR4uMj2r8K3/t0pIuBrmv5g3cn44gtV3Soifyiyr6uAN4rIeaq6ocC4y1V1BEBE7sQXnX8LjveR4HhPisg/srbJXvfEpHUvAj4RrNsoIlcF4+8P1v82+H0n0J31/g5gvyLnNAUTfca0Zrw4s7l3DcMwasQWYC6wG0BE4kBfsDxkJOu1SzR9IsB/qerPqzDHbwCnAteKyMkFhF8586yEEQBVdQNhGx6/rGObecOY1oTuXUvkMAzDqBl/A96b9X4FcKuqDpW4nwF8sRhyBfABEZkNICIdInJEsO4a4B3B8rnAa4rtXFX/G7gIX/gtLnFu1wFnBMdbBrwga132XPbGj9EL+TvwnmDdQnzX8TUlHjsyZukzpjWZOn0m+gzDMGrFx4Dvisi9+EkM64C3lbGf84Fvi8in8BM5LhaRecD1gRXMAX4I3AN8Bfi5iDyMn8gRKeFBVb8m/s6uFZGTS5jbR4FfiMhbgNXAbYy7msN1pwfrrsva7iPAj4PPRoDPqOoDJRy3JMTPSG4NjjnmGF25cmWjp9GSbHhsJ//3/XtwXQ8RQQQIfo+/p8x14fvC60Qkz37CddH2gwjigBCsc4RgcdbryesEHMbXOf4Gm9cM8NTDO3jPOc8n2WnPQIZhNDcicoeqHtPoeRgTEZEu/CSLtIgswi/78kJVXdXgqU3A7nLThNuueIJ4R4zDnrMUUNQDVUUV0OzX/u9c7/1x5a7LMdbzJq7z/AeQnPvJXuepH/2r4+cBwXKl+Dpv4lxmLegmYSVbDMMwjPLZH9+aJ0AC+FKzCT4w0Tct2PDYTtY/spPjT9uPI1+0Z6OnYxiGYRhthareS+3qIVaNmoq+oF3KRfhZO9uAt6vqo+WO27Jly+RFDeH8889nxYoVFe/nJx+/gbHhdBVmFIF4mkOev6Q+x6oC1fqM60krzbmV5hrSinOG1pp3K801pNXmXIX5zqvWXIzpR62j188DzlXVA4BzgR9XMm7r1q1Tlv3pT3+KNJFqjjv//PMj76/QPo9+6Z4c84rlmZ+Z+49NeJ/vp5xxV93/k7wuzGp/htXY5/nnn1/V/ZU7rpSxk+dc6f5qOa7YXJthjpPJnnM9r8VKx9X7s65kn/nm2sz/f+GcG/13jjouyvdEkX3Oj3RAw8hBzUSfiOwBHA1cEiy6BDhaROaXMy4fjf4HrmTsM1+2nGefuk/m58ZVf5jwPt9POeM27V7dFOfcauNKHVvN/bXCOTf7uEYe28658nGNPHYrnLNhlErNsndF5JnAL4KWJOGyB4G3quqdpY4Llo/gFyQM2QKkGE+LLkRfFcfNK+G41T52uePm4Teqrsdxq7HPyfNt1GdYythCn3E5+2vU9VDrY5c7LnvO9bwWKx1X78+6kn3mm2sz//+Fc2703znquCjfE4X2eaCqzohwPMOYQkslcqhqZ6PnYBiGYRiG0YrUMqZvHbBERGIAwe/FwfJyxhmGYRiGYRhlUjPRp6qbgbuBNweL3gzcpapbyhlnGIZhGIZhlE+ts3ffB3xYRB4BPhy8R0SuEpFjio1rBCKyRkQ2hpbHYNmZIqIi8qFGzSsKIjJbRIZF5LuNnksuWvmzDQnO4dBGz6MUosy5Gc6r2a/fXIjI60XkLhG5W0QeFpFfN3pOhQh6k35bRB4P5nuXiPxbkW2Wi0hDaqIE1+X9IuJMWtZ0/4PBvB4WkXtE5DER+V8ReW6j52UY2dRU9Knqw6r6bFU9IPi9Klh+iqquLDaugWwAXpr1/kzgztxDcyMijYiXPB24FXiziCRL2VBEnKCSeK2p+LM12payr99GELRa+iHwKlU9EjgI+GZDJ1WcHwJLgUNU9Rn4/U9/ICLPL7DNcqCRhfB6Ka9PayM4TVWPUNX98GvPXiUiz270pAwjxLrM5+ZCfDGCiOwD9AD3Be9fKCK3BE/I94nIm8KNROQ6ETlHRG4Frqj/tHkn8F/AvcCrgzmdJSK/E5FrgqfQy0SkL2vdpSLyV+BBYFYd5nghJX62InKsiNyfvZPgabphT9GTrQ3Z74PXXw7OZU2zWDELzblJyHX9Xpj9+WW/F5ElIvIPEXlARK4QkT/V+bNeiJ/Fvw1Afe4K5vZsEblWRO4Ifl4RLF8uIlsDa9u9wXV+Qj0mKyJ7AW8E3q+qI8Gc7we+CnwxGPMfwZzuEZGbAwvbucDBgTXz9/WY6yTOAr44+UFARPYL/v73isidIvKyYPl/ish3ssbNDT7znnpOWlX/gF+D9pMikhSRb4rIbcFne7GI9Abz6xORn2d97j+o5zyN6YWJvtxcBxwmIrOBM4BfZK27E3ieqh4FvAj4VjAuZJ9g/Sn1miyAiByO39HkGuAC/BtoyAnAm4Mn+37g81nrng2crqrPUNUddZjqdZT42arq7cBuETkRILhJeqp6cx3mWy7dqvoc4CTg7PAL3shNkes3H98Drg3KPX0YOLF2M8zJPcBtwFoR+b2IfCwQGLPwb/anq+ozgVcCPw6Wg3+e96jq4cG8LxGRjjrM9zDgMVXdPmn5rcARInIG8Crguap6BHCqqnrAB4EHVfVIVT2tDvOczErgDuD9k5b/Cvh18Dm+Ffil+PVdfwG8KcvbcjpwhaoO1mvCWfwLOAT4d6BfVZ8VfLYbgP8IxpwDDAJHBOvOasA8jWmCib7cKPA74E3BT3acznzg94Hl6WpgDnBg1vpfq2qdeqtN4F349Q4V+APwbBEJ+679n6puCl7/DHhB1nZXqWqU2nLVotzP9nvAB4LXH8S3PjQzvwFQ1TXADnyXmpGfQtdvPk7GF4io6pPAP2o7xYmoqqeq/4Yv7K8FXoFvpTwF2Bv4s4jcDfwZ/7rfL9h0DPhlsI/rgGEmfofUimLhG68EfqSquwBUdVvtpxSZ/wQ+nfXwJPh9TsO//4P4CYHHqepa4AH8vwP4noUL6zfVCYSf+auAtwbW0ruD9/sG614JfDMQ2NT5+9iYZrRUnb46cxH+U9oNqrotK9ztR/iu29eqqoqffJJdP3B3facJgdvjdGBURN4eLE4QuFGLUPf5Ut5neynw3yJyFP7NPoolqJakmfjQNLmG5EjWa5fm+F8rNueGUOT6bco5ZxO4SO8HzhW/sLwA96rqlDg5EVle5+llcx+wn4jMmWTtOw5frDYtqrpKRK4C/l/ETS4EzhCR1fiFjm+s1dyKcCz+tbE38AFVvaZB8zAMwCx9eVHVJ4DPAV+ZtGoWsCYQJS9m/Om9kbwaWKWqS1V1uaouB17CuOh7hYy3tXsHvgutYZTz2apqCvg5vij8laoO1Wm6+XgM/wsdEXkhsKCx04lEs8650PWbPedF+II/5Dr8EAFEZBkTLdg1J4gpfE7W+6X41uoHgf1F5OSsdcfK+NNNKHLDUIUu4OFazzewOl8K/EhEOoPjH4r/v/gl4P+A94vIjGDd3GDTAXzh1GjOwrfyz8C3nN7N+N//IOAIfFc1+Nbi5wOfAC7UWrWeKoCIvBrfJf1t/O+t/yciXcG6GcGcwf/cPxVeHyIyr95zNaYPzWB9aFpUNVdn7M8APxSRLwG30xxPyO/Ej2/JoKq3BEHYJ+I/5f4mcJc9iP9F2FDK/Gx/ih9w/qMaT68QcXwr3ueBi0Tkw/giem0D51SMZp9zoev3FuClgQXtEXwLcchHgV+IyFuA1fjxdVFbe1WDOPClIEFiGP8h+j9V9S4ReRXwTRE5B1/kPQGcGmy3DThSRP4d3yr4ZlUdq9OcPwB8DXhQRMbwr4uPqur1InIDsAS4VURS+HG0z8f/P1wVhF083KC4PlT1KRG5mPHvr7fgx0p+HN8i/LawvquqDonI/+I/5O5dx2n+XkRG8RPUHgROUdV/icid+KL1dhHx8EXrl4CHgI/jx/XdLyJp4HrgI3WcszGNqFnvXaM5EJGzgF5V/WSj51IpIvJW/BvkKxp0/EX4FpmFqjrciDmUSivOOSqB1SSlqungPG8HXtgEJZ/yErh3V6qqWXMMw6g7ZukzWgIRuRo/8PlVDTr+R/CtJJ9sFfHUinMukf3xLX2CHwP4pWYWfIZhGI3GLH2GYRiGYRjTgGmfyBHU1bpKRFYFxTH/ECY9iMhxQbHMR0TkryKyR7D8APELrz4sfougC8IA3WD9qcG6x0TktyLS3ajzMwzDMAzDABN94AfUfkNVD1TVw4DH8YvpOvi1tD6oqgcANwBnB9uMAf8vKHZ8ONANfBIgqCP1E/zCpvsBu8J1hmEYhmEYjWLaiz5V3R4USA25FdgLeCYwoqo3BcvPA94QbLMmbLcUFNS8LdgG4OX4gdqPZm33xpqehGEYhmEYRhGmvejLJrDuvR+/ptKewJPhuqBKuiMicyZt04VfciLstTthO/yyGMtqOG3DMAzDMIyimOibyPfxO1REangd9Hb8DXCNql5RbLxhGIZhGEajMNEXICLfwi8B8cbAZbuWcZdtWCXdC9sXiUgMv6DsDiYW0pywHb7lb11tZ28YhmEYhlEYE32AiHwNP4bv31R1NFh8B9AlIs8L3r8Pv4VR6Aa+EL+n6rsmtfj5C3CsiOyftd3vansGhmEYhmEYhZn2dfpE5BD8htiP4LdSAlitqq8RkecCP8Zv8r4GeKuqbhKRV+D3S7wfX/gB/FNVPxjs89XAN4AYcBdwpqoO1umUDMMwDMMwpjDtRZ9hGIZhGMZ0wNy7hmEYhmEY0wATfYZhGIZhGNMAE32GYRiGYRjTABN9hmEYhmEY0wATfYZhGIZhGNMAE32GYRiGYRjTABN9hmEYhmEY0wATfYZhGIZhGNOA/w9Ox8WEjM3e0gAAAABJRU5ErkJggg==\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-08</th>\n",
        "      <td>0.032986</td>\n",
        "      <td>0.01831</td>\n",
        "      <td>0.023356</td>\n",
        "      <td>0.02046</td>\n",
        "      <td>0.014771</td>\n",
        "      <td>0.019722</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.032986</td>\n",
        "      <td>0.01831</td>\n",
        "      <td>0.023356</td>\n",
        "      <td>0.02046</td>\n",
        "      <td>0.014771</td>\n",
        "      <td>0.019722</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.032986</td>\n",
        "      <td>0.01831</td>\n",
        "      <td>0.023356</td>\n",
        "      <td>0.02046</td>\n",
        "      <td>0.014771</td>\n",
        "      <td>0.019722</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.032986</td>\n",
        "      <td>0.01831</td>\n",
        "      <td>0.023356</td>\n",
        "      <td>0.02046</td>\n",
        "      <td>0.014771</td>\n",
        "      <td>0.019722</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.032986</td>\n",
        "      <td>0.01831</td>\n",
        "      <td>0.023356</td>\n",
        "      <td>0.02046</td>\n",
        "      <td>0.014771</td>\n",
        "      <td>0.019722</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Belgium   Canada    France  Netherlands  Portugal  United Kingdom\n",
        "Date                                                                          \n",
        "2020-12-08  0.032986  0.01831  0.023356      0.02046  0.014771        0.019722\n",
        "2020-12-09  0.032986  0.01831  0.023356      0.02046  0.014771        0.019722\n",
        "2020-12-10  0.032986  0.01831  0.023356      0.02046  0.014771        0.019722\n",
        "2020-12-11  0.032986  0.01831  0.023356      0.02046  0.014771        0.019722\n",
        "2020-12-12  0.032986  0.01831  0.023356      0.02046  0.014771        0.019722"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-08</th>\n",
        "      <td>0.000416</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000417</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000554</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.000416</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000417</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000554</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.000416</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000417</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000554</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.000416</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000417</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000554</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.000416</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000417</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000554</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Belgium   Canada    France  Netherlands  Portugal  United Kingdom\n",
        "Date                                                                          \n",
        "2020-12-08  0.000416  0.00007  0.000417     0.000152  0.000014        0.000554\n",
        "2020-12-09  0.000416  0.00007  0.000417     0.000152  0.000014        0.000554\n",
        "2020-12-10  0.000416  0.00007  0.000417     0.000152  0.000014        0.000554\n",
        "2020-12-11  0.000416  0.00007  0.000417     0.000152  0.000014        0.000554\n",
        "2020-12-12  0.000416  0.00007  0.000417     0.000152  0.000014        0.000554"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-08</th>\n",
        "      <td>0.025196</td>\n",
        "      <td>0.024155</td>\n",
        "      <td>0.019439</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.018066</td>\n",
        "      <td>0.000597</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.025196</td>\n",
        "      <td>0.024155</td>\n",
        "      <td>0.019439</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.018066</td>\n",
        "      <td>0.000597</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.025196</td>\n",
        "      <td>0.024155</td>\n",
        "      <td>0.019439</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.018066</td>\n",
        "      <td>0.000597</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.025196</td>\n",
        "      <td>0.024155</td>\n",
        "      <td>0.019439</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.018066</td>\n",
        "      <td>0.000597</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.025196</td>\n",
        "      <td>0.024155</td>\n",
        "      <td>0.019439</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.018066</td>\n",
        "      <td>0.000597</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Belgium    Canada    France  Netherlands  Portugal  \\\n",
        "Date                                                              \n",
        "2020-12-08  0.025196  0.024155  0.019439     0.000066  0.018066   \n",
        "2020-12-09  0.025196  0.024155  0.019439     0.000066  0.018066   \n",
        "2020-12-10  0.025196  0.024155  0.019439     0.000066  0.018066   \n",
        "2020-12-11  0.025196  0.024155  0.019439     0.000066  0.018066   \n",
        "2020-12-12  0.025196  0.024155  0.019439     0.000066  0.018066   \n",
        "\n",
        "Country     United Kingdom  \n",
        "Date                        \n",
        "2020-12-08        0.000597  \n",
        "2020-12-09        0.000597  \n",
        "2020-12-10        0.000597  \n",
        "2020-12-11        0.000597  \n",
        "2020-12-12        0.000597  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 25141 entries, 0 to 25210\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 25141 non-null  datetime64[ns]\n",
        " 1   Country                              25141 non-null  object        \n",
        " 2   Rt                                   25141 non-null  float64       \n",
        " 3   theta                                25141 non-null  float64       \n",
        " 4   kappa                                25141 non-null  float64       \n",
        " 5   rho                                  25141 non-null  float64       \n",
        " 6   sigma                                25141 non-null  float64       \n",
        " 7   School_closing                       25141 non-null  int64         \n",
        " 8   Workplace_closing                    25141 non-null  int64         \n",
        " 9   Cancel_events                        25141 non-null  int64         \n",
        " 10  Gatherings_restrictions              25141 non-null  int64         \n",
        " 11  Transport_closing                    25141 non-null  int64         \n",
        " 12  Stay_home_restrictions               25141 non-null  int64         \n",
        " 13  Internal_movement_restrictions       25141 non-null  int64         \n",
        " 14  International_movement_restrictions  25141 non-null  int64         \n",
        " 15  Information_campaigns                25141 non-null  int64         \n",
        " 16  Testing_policy                       25141 non-null  int64         \n",
        " 17  Contact_tracing                      25141 non-null  int64         \n",
        " 18  Stringency_index                     25141 non-null  float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 3.8+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col1,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col3,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col1,#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col0{\n",
        "            background-color:  #c5cce3;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col0{\n",
        "            background-color:  #afc1dd;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col3,#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col0{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col0{\n",
        "            background-color:  #eee8f3;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col2{\n",
        "            background-color:  #bbc7e0;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col15{\n",
        "            background-color:  #c1cae2;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col1{\n",
        "            background-color:  #e0deed;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col11{\n",
        "            background-color:  #c8cde4;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col0{\n",
        "            background-color:  #d1d2e6;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col0{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col0,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col10{\n",
        "            background-color:  #cdd0e5;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col0{\n",
        "            background-color:  #d6d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col1{\n",
        "            background-color:  #a7bddb;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col3,#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col1{\n",
        "            background-color:  #d8d7e9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col1{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col1,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col8{\n",
        "            background-color:  #73a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col1{\n",
        "            background-color:  #71a8ce;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col1,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col4{\n",
        "            background-color:  #62a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col1{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col1,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col5{\n",
        "            background-color:  #7bacd1;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col1{\n",
        "            background-color:  #6fa7ce;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col1{\n",
        "            background-color:  #5a9ec9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col1,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col14{\n",
        "            background-color:  #96b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col1,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col2{\n",
        "            background-color:  #94b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col1{\n",
        "            background-color:  #b1c2de;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col1{\n",
        "            background-color:  #569dc8;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col3,#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col2{\n",
        "            background-color:  #8cb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col4{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col9{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col9{\n",
        "            background-color:  #a9bfdc;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col2{\n",
        "            background-color:  #d5d5e8;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col2{\n",
        "            background-color:  #9ebad9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col2{\n",
        "            background-color:  #9fbad9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col3,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col2,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col2{\n",
        "            background-color:  #c4cbe3;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col3,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col6{\n",
        "            background-color:  #d4d4e8;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col3{\n",
        "            background-color:  #e6e2ef;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col3{\n",
        "            background-color:  #eee9f3;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col3,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col7{\n",
        "            background-color:  #d7d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col3{\n",
        "            background-color:  #f8f1f8;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col3{\n",
        "            background-color:  #dbdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col3{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col3{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col3{\n",
        "            background-color:  #e1dfed;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col3{\n",
        "            background-color:  #faf3f9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col3{\n",
        "            background-color:  #c0c9e2;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col3{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col5,#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col4{\n",
        "            background-color:  #7dacd1;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col4{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col8{\n",
        "            background-color:  #5ea0ca;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col4{\n",
        "            background-color:  #308cbe;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col4{\n",
        "            background-color:  #6da6cd;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col4{\n",
        "            background-color:  #75a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col4,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col7{\n",
        "            background-color:  #4e9ac6;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col4{\n",
        "            background-color:  #67a4cc;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col4{\n",
        "            background-color:  #4295c3;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col5{\n",
        "            background-color:  #0566a0;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col5{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col5{\n",
        "            background-color:  #a1bbda;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col5{\n",
        "            background-color:  #2383ba;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col5{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col5{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col5{\n",
        "            background-color:  #a4bcda;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col5{\n",
        "            background-color:  #046097;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col6{\n",
        "            background-color:  #358fc0;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col6{\n",
        "            background-color:  #1077b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col6{\n",
        "            background-color:  #69a5cc;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col6{\n",
        "            background-color:  #04649d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col6{\n",
        "            background-color:  #2f8bbe;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col6,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col10{\n",
        "            background-color:  #b5c4df;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col6{\n",
        "            background-color:  #03517e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col7{\n",
        "            background-color:  #187cb6;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col14{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col7{\n",
        "            background-color:  #0567a2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col7,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col11{\n",
        "            background-color:  #b4c4df;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col7{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col7{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col9,#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col12{\n",
        "            background-color:  #1278b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col8{\n",
        "            background-color:  #157ab5;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col8{\n",
        "            background-color:  #056ba9;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col8,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col12{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col8{\n",
        "            background-color:  #1379b5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col8{\n",
        "            background-color:  #04639b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col9{\n",
        "            background-color:  #4897c4;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col9{\n",
        "            background-color:  #0569a5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col9{\n",
        "            background-color:  #3d93c2;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col11,#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col10{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col12,#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col10{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col10,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col13{\n",
        "            background-color:  #4697c4;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col10{\n",
        "            background-color:  #046299;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col13,#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col11{\n",
        "            background-color:  #60a1ca;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col11{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col11{\n",
        "            background-color:  #2a88bc;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col15,#T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col12{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col12{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col14,#T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col13{\n",
        "            background-color:  #328dbf;\n",
        "            color:  #000000;\n",
        "        }#T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col16,#T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col13{\n",
        "            background-color:  #0c74b2;\n",
        "            color:  #f1f1f1;\n",
        "        }</style><table id=\"T_24d38e4e_3c70_11eb_af7a_52540061566a\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col1\" class=\"data row0 col1\" >-0.119295</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col2\" class=\"data row0 col2\" >-0.016150</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col3\" class=\"data row0 col3\" >0.449198</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col4\" class=\"data row0 col4\" >-0.377358</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col5\" class=\"data row0 col5\" >-0.065776</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col6\" class=\"data row0 col6\" >-0.097611</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col7\" class=\"data row0 col7\" >-0.119125</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col8\" class=\"data row0 col8\" >-0.284081</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col9\" class=\"data row0 col9\" >-0.126939</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col10\" class=\"data row0 col10\" >-0.096479</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col11\" class=\"data row0 col11\" >-0.170131</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col12\" class=\"data row0 col12\" >-0.166085</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col13\" class=\"data row0 col13\" >-0.151895</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col14\" class=\"data row0 col14\" >-0.209009</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col15\" class=\"data row0 col15\" >-0.152726</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow0_col16\" class=\"data row0 col16\" >-0.163989</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col0\" class=\"data row1 col0\" >-0.119295</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col2\" class=\"data row1 col2\" >0.024414</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col3\" class=\"data row1 col3\" >-0.218692</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col4\" class=\"data row1 col4\" >0.028835</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col5\" class=\"data row1 col5\" >0.221935</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col6\" class=\"data row1 col6\" >0.226826</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col7\" class=\"data row1 col7\" >0.278381</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col8\" class=\"data row1 col8\" >0.176471</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col9\" class=\"data row1 col9\" >0.194565</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col10\" class=\"data row1 col10\" >0.235483</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col11\" class=\"data row1 col11\" >0.304241</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col12\" class=\"data row1 col12\" >0.088120</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col13\" class=\"data row1 col13\" >0.093004</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col14\" class=\"data row1 col14\" >-0.282103</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col15\" class=\"data row1 col15\" >-0.025812</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow1_col16\" class=\"data row1 col16\" >0.313338</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col0\" class=\"data row2 col0\" >-0.016150</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col1\" class=\"data row2 col1\" >0.024414</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col3\" class=\"data row2 col3\" >0.126186</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col4\" class=\"data row2 col4\" >0.040066</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col5\" class=\"data row2 col5\" >-0.079165</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col6\" class=\"data row2 col6\" >0.012936</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col7\" class=\"data row2 col7\" >0.087673</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col8\" class=\"data row2 col8\" >-0.200894</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col9\" class=\"data row2 col9\" >0.058715</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col10\" class=\"data row2 col10\" >-0.070692</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col11\" class=\"data row2 col11\" >-0.083937</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col12\" class=\"data row2 col12\" >0.010961</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col13\" class=\"data row2 col13\" >0.055897</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col14\" class=\"data row2 col14\" >-0.112038</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col15\" class=\"data row2 col15\" >0.093244</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow2_col16\" class=\"data row2 col16\" >-0.111076</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col0\" class=\"data row3 col0\" >0.449198</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col1\" class=\"data row3 col1\" >-0.218692</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col2\" class=\"data row3 col2\" >0.126186</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col4\" class=\"data row3 col4\" >-0.195796</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col5\" class=\"data row3 col5\" >-0.320552</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col6\" class=\"data row3 col6\" >-0.382718</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col7\" class=\"data row3 col7\" >-0.217928</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col8\" class=\"data row3 col8\" >-0.489433</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col9\" class=\"data row3 col9\" >-0.246000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col10\" class=\"data row3 col10\" >-0.296859</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col11\" class=\"data row3 col11\" >-0.113444</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col12\" class=\"data row3 col12\" >-0.558984</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col13\" class=\"data row3 col13\" >-0.290422</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col14\" class=\"data row3 col14\" >-0.507678</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col15\" class=\"data row3 col15\" >-0.091634</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow3_col16\" class=\"data row3 col16\" >-0.470290</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col0\" class=\"data row4 col0\" >-0.377358</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col1\" class=\"data row4 col1\" >0.028835</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col2\" class=\"data row4 col2\" >0.040066</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col3\" class=\"data row4 col3\" >-0.195796</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col5\" class=\"data row4 col5\" >0.189641</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col6\" class=\"data row4 col6\" >0.250702</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col7\" class=\"data row4 col7\" >0.289923</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col8\" class=\"data row4 col8\" >0.437308</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col9\" class=\"data row4 col9\" >0.240672</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col10\" class=\"data row4 col10\" >0.215646</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col11\" class=\"data row4 col11\" >0.340161</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col12\" class=\"data row4 col12\" >0.098455</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col13\" class=\"data row4 col13\" >0.260958</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col14\" class=\"data row4 col14\" >0.043677</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col15\" class=\"data row4 col15\" >0.373045</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow4_col16\" class=\"data row4 col16\" >0.276216</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col0\" class=\"data row5 col0\" >-0.065776</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col1\" class=\"data row5 col1\" >0.221935</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col2\" class=\"data row5 col2\" >-0.079165</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col3\" class=\"data row5 col3\" >-0.320552</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col4\" class=\"data row5 col4\" >0.189641</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col6\" class=\"data row5 col6\" >0.700460</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col7\" class=\"data row5 col7\" >0.090627</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col8\" class=\"data row5 col8\" >0.411042</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col9\" class=\"data row5 col9\" >0.046654</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col10\" class=\"data row5 col10\" >0.494438</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col11\" class=\"data row5 col11\" >0.144989</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col12\" class=\"data row5 col12\" >0.191425</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col13\" class=\"data row5 col13\" >0.333273</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col14\" class=\"data row5 col14\" >0.035886</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col15\" class=\"data row5 col15\" >-0.112640</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow5_col16\" class=\"data row5 col16\" >0.748687</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col0\" class=\"data row6 col0\" >-0.097611</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col1\" class=\"data row6 col1\" >0.226826</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col2\" class=\"data row6 col2\" >0.012936</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col3\" class=\"data row6 col3\" >-0.382718</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col4\" class=\"data row6 col4\" >0.250702</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col5\" class=\"data row6 col5\" >0.700460</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col7\" class=\"data row6 col7\" >0.421141</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col8\" class=\"data row6 col8\" >0.562417</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col9\" class=\"data row6 col9\" >0.254956</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col10\" class=\"data row6 col10\" >0.718191</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col11\" class=\"data row6 col11\" >0.290701</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col12\" class=\"data row6 col12\" >0.287965</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col13\" class=\"data row6 col13\" >0.443995</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col14\" class=\"data row6 col14\" >-0.044387</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col15\" class=\"data row6 col15\" >-0.196642</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow6_col16\" class=\"data row6 col16\" >0.857254</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col0\" class=\"data row7 col0\" >-0.119125</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col1\" class=\"data row7 col1\" >0.278381</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col2\" class=\"data row7 col2\" >0.087673</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col3\" class=\"data row7 col3\" >-0.217928</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col4\" class=\"data row7 col4\" >0.289923</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col5\" class=\"data row7 col5\" >0.090627</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col6\" class=\"data row7 col6\" >0.421141</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col8\" class=\"data row7 col8\" >0.536409</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col9\" class=\"data row7 col9\" >0.715296</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col10\" class=\"data row7 col10\" >0.480406</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col11\" class=\"data row7 col11\" >0.688546</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col12\" class=\"data row7 col12\" >-0.040126</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col13\" class=\"data row7 col13\" >0.340587</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col14\" class=\"data row7 col14\" >-0.211889</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col15\" class=\"data row7 col15\" >-0.052861</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow7_col16\" class=\"data row7 col16\" >0.520518</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col0\" class=\"data row8 col0\" >-0.284081</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col1\" class=\"data row8 col1\" >0.176471</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col2\" class=\"data row8 col2\" >-0.200894</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col3\" class=\"data row8 col3\" >-0.489433</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col4\" class=\"data row8 col4\" >0.437308</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col5\" class=\"data row8 col5\" >0.411042</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col6\" class=\"data row8 col6\" >0.562417</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col7\" class=\"data row8 col7\" >0.536409</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col9\" class=\"data row8 col9\" >0.559466</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col10\" class=\"data row8 col10\" >0.543284</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col11\" class=\"data row8 col11\" >0.651078</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col12\" class=\"data row8 col12\" >0.385531</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col13\" class=\"data row8 col13\" >0.555039</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col14\" class=\"data row8 col14\" >0.288361</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col15\" class=\"data row8 col15\" >0.221486</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow8_col16\" class=\"data row8 col16\" >0.724808</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col0\" class=\"data row9 col0\" >-0.126939</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col1\" class=\"data row9 col1\" >0.194565</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col2\" class=\"data row9 col2\" >0.058715</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col3\" class=\"data row9 col3\" >-0.246000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col4\" class=\"data row9 col4\" >0.240672</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col5\" class=\"data row9 col5\" >0.046654</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col6\" class=\"data row9 col6\" >0.254956</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col7\" class=\"data row9 col7\" >0.715296</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col8\" class=\"data row9 col8\" >0.559466</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col10\" class=\"data row9 col10\" >0.357376</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col11\" class=\"data row9 col11\" >0.665885</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col12\" class=\"data row9 col12\" >-0.025655</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col13\" class=\"data row9 col13\" >0.288383</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col14\" class=\"data row9 col14\" >-0.079555</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col15\" class=\"data row9 col15\" >0.010344</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow9_col16\" class=\"data row9 col16\" >0.396549</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col0\" class=\"data row10 col0\" >-0.096479</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col1\" class=\"data row10 col1\" >0.235483</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col2\" class=\"data row10 col2\" >-0.070692</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col3\" class=\"data row10 col3\" >-0.296859</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col4\" class=\"data row10 col4\" >0.215646</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col5\" class=\"data row10 col5\" >0.494438</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col6\" class=\"data row10 col6\" >0.718191</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col7\" class=\"data row10 col7\" >0.480406</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col8\" class=\"data row10 col8\" >0.543284</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col9\" class=\"data row10 col9\" >0.357376</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col11\" class=\"data row10 col11\" >0.495066</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col12\" class=\"data row10 col12\" >0.266628</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col13\" class=\"data row10 col13\" >0.361140</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col14\" class=\"data row10 col14\" >-0.045702</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col15\" class=\"data row10 col15\" >-0.153745</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow10_col16\" class=\"data row10 col16\" >0.733667</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col0\" class=\"data row11 col0\" >-0.170131</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col1\" class=\"data row11 col1\" >0.304241</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col2\" class=\"data row11 col2\" >-0.083937</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col3\" class=\"data row11 col3\" >-0.113444</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col4\" class=\"data row11 col4\" >0.340161</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col5\" class=\"data row11 col5\" >0.144989</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col6\" class=\"data row11 col6\" >0.290701</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col7\" class=\"data row11 col7\" >0.688546</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col8\" class=\"data row11 col8\" >0.651078</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col9\" class=\"data row11 col9\" >0.665885</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col10\" class=\"data row11 col10\" >0.495066</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col12\" class=\"data row11 col12\" >-0.036374</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col13\" class=\"data row11 col13\" >0.283453</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col14\" class=\"data row11 col14\" >-0.130277</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col15\" class=\"data row11 col15\" >0.065275</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow11_col16\" class=\"data row11 col16\" >0.461056</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col0\" class=\"data row12 col0\" >-0.166085</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col1\" class=\"data row12 col1\" >0.088120</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col2\" class=\"data row12 col2\" >0.010961</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col3\" class=\"data row12 col3\" >-0.558984</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col4\" class=\"data row12 col4\" >0.098455</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col5\" class=\"data row12 col5\" >0.191425</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col6\" class=\"data row12 col6\" >0.287965</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col7\" class=\"data row12 col7\" >-0.040126</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col8\" class=\"data row12 col8\" >0.385531</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col9\" class=\"data row12 col9\" >-0.025655</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col10\" class=\"data row12 col10\" >0.266628</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col11\" class=\"data row12 col11\" >-0.036374</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col13\" class=\"data row12 col13\" >0.387211</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col14\" class=\"data row12 col14\" >0.556695</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col15\" class=\"data row12 col15\" >0.424940</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow12_col16\" class=\"data row12 col16\" >0.369698</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col0\" class=\"data row13 col0\" >-0.151895</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col1\" class=\"data row13 col1\" >0.093004</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col2\" class=\"data row13 col2\" >0.055897</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col3\" class=\"data row13 col3\" >-0.290422</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col4\" class=\"data row13 col4\" >0.260958</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col5\" class=\"data row13 col5\" >0.333273</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col6\" class=\"data row13 col6\" >0.443995</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col7\" class=\"data row13 col7\" >0.340587</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col8\" class=\"data row13 col8\" >0.555039</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col9\" class=\"data row13 col9\" >0.288383</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col10\" class=\"data row13 col10\" >0.361140</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col11\" class=\"data row13 col11\" >0.283453</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col12\" class=\"data row13 col12\" >0.387211</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col14\" class=\"data row13 col14\" >0.428030</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col15\" class=\"data row13 col15\" >0.365150</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow13_col16\" class=\"data row13 col16\" >0.583836</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col0\" class=\"data row14 col0\" >-0.209009</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col1\" class=\"data row14 col1\" >-0.282103</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col2\" class=\"data row14 col2\" >-0.112038</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col3\" class=\"data row14 col3\" >-0.507678</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col4\" class=\"data row14 col4\" >0.043677</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col5\" class=\"data row14 col5\" >0.035886</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col6\" class=\"data row14 col6\" >-0.044387</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col7\" class=\"data row14 col7\" >-0.211889</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col8\" class=\"data row14 col8\" >0.288361</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col9\" class=\"data row14 col9\" >-0.079555</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col10\" class=\"data row14 col10\" >-0.045702</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col11\" class=\"data row14 col11\" >-0.130277</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col12\" class=\"data row14 col12\" >0.556695</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col13\" class=\"data row14 col13\" >0.428030</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col15\" class=\"data row14 col15\" >0.480167</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow14_col16\" class=\"data row14 col16\" >0.087045</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col0\" class=\"data row15 col0\" >-0.152726</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col1\" class=\"data row15 col1\" >-0.025812</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col2\" class=\"data row15 col2\" >0.093244</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col3\" class=\"data row15 col3\" >-0.091634</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col4\" class=\"data row15 col4\" >0.373045</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col5\" class=\"data row15 col5\" >-0.112640</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col6\" class=\"data row15 col6\" >-0.196642</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col7\" class=\"data row15 col7\" >-0.052861</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col8\" class=\"data row15 col8\" >0.221486</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col9\" class=\"data row15 col9\" >0.010344</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col10\" class=\"data row15 col10\" >-0.153745</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col11\" class=\"data row15 col11\" >0.065275</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col12\" class=\"data row15 col12\" >0.424940</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col13\" class=\"data row15 col13\" >0.365150</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col14\" class=\"data row15 col14\" >0.480167</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow15_col16\" class=\"data row15 col16\" >-0.099311</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_24d38e4e_3c70_11eb_af7a_52540061566alevel0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col0\" class=\"data row16 col0\" >-0.163989</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col1\" class=\"data row16 col1\" >0.313338</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col2\" class=\"data row16 col2\" >-0.111076</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col3\" class=\"data row16 col3\" >-0.470290</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col4\" class=\"data row16 col4\" >0.276216</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col5\" class=\"data row16 col5\" >0.748687</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col6\" class=\"data row16 col6\" >0.857254</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col7\" class=\"data row16 col7\" >0.520518</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col8\" class=\"data row16 col8\" >0.724808</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col9\" class=\"data row16 col9\" >0.396549</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col10\" class=\"data row16 col10\" >0.733667</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col11\" class=\"data row16 col11\" >0.461056</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col12\" class=\"data row16 col12\" >0.369698</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col13\" class=\"data row16 col13\" >0.583836</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col14\" class=\"data row16 col14\" >0.087045</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col15\" class=\"data row16 col15\" >-0.099311</td>\n",
        "                        <td id=\"T_24d38e4e_3c70_11eb_af7a_52540061566arow16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f7e05612d90>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
