{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.7.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "184"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "2"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Lesotho', 'Namibia', 'Gambia', 'Bahamas']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "3"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritius'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Papua New Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Seychelles'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tanzania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zimbabwe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brunei'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Antigua and Barbuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Suriname'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zambia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Montenegro'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belize'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kyrgyzstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Norway'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liechtenstein'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Grenada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Venezuela'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Botswana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iceland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'New Zealand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Philippines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guyana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guatemala'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sao Tome and Principe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Trinidad and Tobago'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Libya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malawi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Australia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Syria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Morocco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Equatorial Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tajikistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Angola'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Comoros'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Andorra'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cambodia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Central African Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Paraguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Vincent and the Grenadines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Lucia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Rwanda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Palestine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kosovo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Costa Rica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Swaziland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lebanon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Madagascar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Spain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burundi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Yemen'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Japan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Eritrea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chad'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ethiopia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bermuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ireland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'San Marino'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kazakhstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "6"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea-Bissau'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Israel'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kenya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cameroon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Macedonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Benin'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Oman'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Albania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Argentina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Panama'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Haiti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Congo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Colombia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovakia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bosnia and Herzegovina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'India'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mongolia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Luxembourg'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mozambique'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ecuador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Taiwan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uzbekistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Netherlands'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Vietnam'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uganda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cyprus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Niger'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malta'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Afghanistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cuba'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Maldives'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Africa'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sri Lanka'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bolivia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ghana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "7"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Honduras'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mali'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Somalia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lithuania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Azerbaijan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Qatar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Monaco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liberia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Thailand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Egypt'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belarus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belgium'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tunisia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jordan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Barbados'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Indonesia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Algeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Gabon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Serbia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'El Salvador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Togo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Switzerland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bulgaria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'China'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brazil'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sierra Leone'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Dominican Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nicaragua'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Peru'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nepal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bhutan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Finland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Latvia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Croatia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iraq'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Djibouti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burkina Faso'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Germany'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Armenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Greece'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Estonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Pakistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cape Verde'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uruguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "8"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Singapore'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Turkey'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chile'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malaysia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United States'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bangladesh'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'France'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Georgia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Russia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Denmark'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Romania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Hungary'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jamaica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Myanmar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nigeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahrain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Guinea', 'Iran', 'Senegal', 'Kuwait', 'Poland']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "14"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahrain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Guinea', 'Iran', 'Senegal', 'Kuwait', 'Poland']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>03May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Kuwait</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24May2020</td>\n",
        "      <td>31May2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>19Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>13Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Guinea  1st    Past  03May2020  11May2020    12414318\n",
        "        2nd    Past  12May2020  20May2020    12414318\n",
        "        3rd    Past  21May2020  29May2020    12414318\n",
        "        4th    Past  30May2020  10Jun2020    12414318\n",
        "        5th    Past  11Jun2020  20Jun2020    12414318\n",
        "        6th    Past  21Jun2020  08Jul2020    12414318\n",
        "        7th    Past  09Jul2020  20Jul2020    12414318\n",
        "        8th    Past  21Jul2020  01Aug2020    12414318\n",
        "        9th    Past  02Aug2020  10Aug2020    12414318\n",
        "        10th   Past  11Aug2020  20Aug2020    12414318\n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269\n",
        "        2nd    Past  13Apr2020  04May2020    81800269\n",
        "        3rd    Past  05May2020  20May2020    81800269\n",
        "        4th    Past  21May2020  02Jun2020    81800269\n",
        "        5th    Past  03Jun2020  15Jun2020    81800269\n",
        "        6th    Past  16Jun2020  28Jun2020    81800269\n",
        "        7th    Past  29Jun2020  10Jul2020    81800269\n",
        "        8th    Past  11Jul2020  23Jul2020    81800269\n",
        "        9th    Past  24Jul2020  05Aug2020    81800269\n",
        "        10th   Past  06Aug2020  20Aug2020    81800269\n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360\n",
        "        2nd    Past  15May2020  29May2020    15854360\n",
        "        3rd    Past  30May2020  09Jun2020    15854360\n",
        "        4th    Past  10Jun2020  19Jun2020    15854360\n",
        "        5th    Past  20Jun2020  30Jun2020    15854360\n",
        "        6th    Past  01Jul2020  10Jul2020    15854360\n",
        "        7th    Past  11Jul2020  20Jul2020    15854360\n",
        "        8th    Past  21Jul2020  29Jul2020    15854360\n",
        "        9th    Past  30Jul2020  09Aug2020    15854360\n",
        "        10th   Past  10Aug2020  20Aug2020    15854360\n",
        "Kuwait  1st    Past  11May2020  23May2020     4137309\n",
        "        2nd    Past  24May2020  31May2020     4137309\n",
        "        3rd    Past  01Jun2020  09Jun2020     4137309\n",
        "        4th    Past  10Jun2020  21Jun2020     4137309\n",
        "        5th    Past  22Jun2020  30Jun2020     4137309\n",
        "        6th    Past  01Jul2020  08Jul2020     4137309\n",
        "        7th    Past  09Jul2020  19Jul2020     4137309\n",
        "        8th    Past  20Jul2020  28Jul2020     4137309\n",
        "        9th    Past  29Jul2020  09Aug2020     4137309\n",
        "        10th   Past  10Aug2020  20Aug2020     4137309\n",
        "Poland  1st    Past  23Apr2020  08May2020    37974750\n",
        "        2nd    Past  09May2020  20May2020    37974750\n",
        "        3rd    Past  21May2020  04Jun2020    37974750\n",
        "        4th    Past  05Jun2020  16Jun2020    37974750\n",
        "        5th    Past  17Jun2020  30Jun2020    37974750\n",
        "        6th    Past  01Jul2020  13Jul2020    37974750\n",
        "        7th    Past  14Jul2020  24Jul2020    37974750\n",
        "        8th    Past  25Jul2020  03Aug2020    37974750\n",
        "        9th    Past  04Aug2020  11Aug2020    37974750\n",
        "        10th   Past  12Aug2020  20Aug2020    37974750"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  4th phase (22Apr2020 - 01May2020): finished  160 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  6th phase (01Jul2020 - 08Jul2020): finished  313 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  8th phase (21Jul2020 - 01Aug2020): finished 1131 trials in 0 min 45 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  4th phase (10Jun2020 - 19Jun2020): finished 1432 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  9th phase (08Aug2020 - 20Aug2020): finished 1420 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  8th phase (26Jul2020 - 07Aug2020): finished  161 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  1st phase (20May2020 - 03Jun2020): finished 1433 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  2nd phase (04Jun2020 - 15Jun2020): finished  310 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  4th phase (10Jun2020 - 21Jun2020): finished  160 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  2nd phase (09May2020 - 20May2020): finished  448 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  7th phase (18Jul2020 - 28Jul2020): finished  452 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  7th phase (15Jul2020 - 25Jul2020): finished  579 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  8th phase (29Jul2020 - 11Aug2020): finished 1435 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  5th phase (11Jun2020 - 20Jun2020): finished 1439 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  6th phase (01Jul2020 - 10Jul2020): finished 1432 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  7th phase (03Jul2020 - 12Jul2020): finished 1421 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  3rd phase (11Jun2020 - 19Jun2020): finished  545 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  3rd phase (05May2020 - 20May2020): finished 1220 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  7th phase (09Jul2020 - 19Jul2020): finished 1416 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  8th phase (20Jul2020 - 04Aug2020): finished 1416 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  6th phase (16Jun2020 - 28Jun2020): finished 1432 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  3rd phase (05Jun2020 - 12Jun2020): finished 1441 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  6th phase (10May2020 - 19May2020): finished  160 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  9th phase (12Aug2020 - 20Aug2020): finished 1449 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  8th phase (20Jul2020 - 28Jul2020): finished  162 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (05May2020 - 17May2020): finished 1430 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN, 10th phase (11Aug2020 - 20Aug2020): finished 1425 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (18May2020 - 28May2020): finished 1424 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  6th phase (13Jul2020 - 23Jul2020): finished 1423 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  1st phase (11May2020 - 23May2020): finished 1408 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  3rd phase (14Apr2020 - 23Apr2020): finished  444 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (27Jun2020 - 07Jul2020): finished  439 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  2nd phase (06Apr2020 - 13Apr2020): finished  156 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  3rd phase (25May2020 - 02Jun2020): finished  538 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  2nd phase (01Apr2020 - 12Apr2020): finished 1241 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (06Jun2020 - 17Jun2020): finished  333 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  3rd phase (30May2020 - 09Jun2020): finished 1027 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  3rd phase (21May2020 - 04Jun2020): finished 1014 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  6th phase (23Jun2020 - 02Jul2020): finished  458 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  2nd phase (15May2020 - 29May2020): finished  872 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  3rd phase (01Jun2020 - 09Jun2020): finished  199 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  2nd phase (22May2020 - 06Jun2020): finished  915 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  1st phase (03May2020 - 11May2020): finished  951 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  9th phase (04Aug2020 - 20Aug2020): finished  279 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  4th phase (05Jun2020 - 16Jun2020): finished  985 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  4th phase (24Apr2020 - 14May2020): finished  527 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  5th phase (22Jun2020 - 06Jul2020): finished 1015 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  7th phase (23Jul2020 - 03Aug2020): finished  285 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  8th phase (22Jul2020 - 03Aug2020): finished  256 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  7th phase (11Jul2020 - 20Jul2020): finished  986 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  5th phase (20Jun2020 - 30Jun2020): finished  235 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  8th phase (04Aug2020 - 11Aug2020): finished  110 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (08Jul2020 - 18Jul2020): finished 1051 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN, 10th phase (10Aug2020 - 20Aug2020): finished  353 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  6th phase (21Jun2020 - 01Jul2020): finished 1081 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  7th phase (29Jun2020 - 10Jul2020): finished  132 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  7th phase (12Jul2020 - 21Jul2020): finished  251 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  5th phase (22Jun2020 - 30Jun2020): finished  488 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  7th phase (14Jul2020 - 24Jul2020): finished  147 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  6th phase (21Jun2020 - 08Jul2020): finished 1186 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  4th phase (13Jun2020 - 21Jun2020): finished 1214 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  7th phase (20May2020 - 07Jun2020): finished  471 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  8th phase (11Jul2020 - 23Jul2020): finished  141 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  3rd phase (07Apr2020 - 08May2020): finished 1192 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  9th phase (02Aug2020 - 10Aug2020): finished  736 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  3rd phase (13Apr2020 - 21Apr2020): finished 1243 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  7th phase (02Jul2020 - 19Jul2020): finished 1214 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  1st phase (24Mar2020 - 31Mar2020): finished 1161 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  4th phase (21May2020 - 02Jun2020): finished  219 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  2nd phase (26Mar2020 - 06Apr2020): finished  564 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  1st phase (23Apr2020 - 08May2020): finished 1182 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  8th phase (21Jul2020 - 29Jul2020): finished  450 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  4th phase (26Jun2020 - 05Jul2020): finished  265 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  9th phase (17Jul2020 - 20Aug2020): finished 1165 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  5th phase (26Jun2020 - 03Jul2020): finished  589 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  9th phase (28Jul2020 - 20Aug2020): finished  953 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  1st phase (28Mar2020 - 12Apr2020): finished 1135 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  1st phase (28Apr2020 - 12May2020): finished 1131 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  2nd phase (13Apr2020 - 04May2020): finished  108 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  8th phase (08Jun2020 - 16Jul2020): finished  341 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  9th phase (05Aug2020 - 20Aug2020): finished 1209 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  1st phase (08May2020 - 28May2020): finished 1158 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  1st phase (10May2020 - 21May2020): finished 1129 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  6th phase (15Jul2020 - 22Jul2020): finished 1154 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  4th phase (03Jun2020 - 11Jun2020): finished 1227 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  9th phase (29Jul2020 - 09Aug2020): finished  239 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  7th phase (24Jul2020 - 01Aug2020): finished 1227 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  2nd phase (26May2020 - 04Jun2020): finished 1136 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  3rd phase (07Jun2020 - 15Jun2020): finished  366 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  8th phase (25Jul2020 - 03Aug2020): finished  850 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  3rd phase (21May2020 - 29May2020): finished 1140 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  5th phase (03Jun2020 - 15Jun2020): finished  498 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (29May2020 - 05Jun2020): finished  263 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  4th phase (20Jun2020 - 29Jun2020): finished 1080 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN, 10th phase (06Aug2020 - 20Aug2020): finished 1153 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  1st phase (15Mar2020 - 25Mar2020): finished 1169 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  5th phase (17Jun2020 - 30Jun2020): finished  240 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  6th phase (04Jul2020 - 11Jul2020): finished  261 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  1st phase (30Apr2020 - 14May2020): finished 1182 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  6th phase (01Jul2020 - 13Jul2020): finished  254 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  7th phase (09Jul2020 - 20Jul2020): finished 1161 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  3rd phase (16Jun2020 - 25Jun2020): finished  226 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  1st phase (29Mar2020 - 05Apr2020): finished 1173 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  8th phase (13Jul2020 - 27Jul2020): finished  252 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  2nd phase (24May2020 - 31May2020): finished  741 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  6th phase (29Jun2020 - 17Jul2020): finished 1182 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  6th phase (07Jul2020 - 14Jul2020): finished 1204 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  2nd phase (29May2020 - 10Jun2020): finished 1195 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  5th phase (12Jun2020 - 22Jun2020): finished  968 trials in 0 min 45 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  1st phase (06May2020 - 25May2020): finished 1198 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  5th phase (26May2020 - 20Jun2020): finished  254 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (19Jul2020 - 03Aug2020): finished  385 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  5th phase (02May2020 - 09May2020): finished  517 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  5th phase (15May2020 - 28Jun2020): finished  289 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  4th phase (30May2020 - 10Jun2020): finished 1327 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (18Jun2020 - 26Jun2020): finished  427 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  5th phase (30Jun2020 - 12Jul2020): finished  905 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  2nd phase (13May2020 - 24May2020): finished 1502 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  5th phase (06Jul2020 - 14Jul2020): finished  506 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  9th phase (30Jul2020 - 09Aug2020): finished 1511 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  2nd phase (12May2020 - 20May2020): finished 1513 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  9th phase (24Jul2020 - 05Aug2020): finished  164 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/covid19-sir/covsirphy/cleaning/jhu_data.py:196: SettingWithCopyWarning: \n",
        "A value is trying to be set on a copy of a slice from a DataFrame.\n",
        "Try using .loc[row_indexer,col_indexer] = value instead\n",
        "\n",
        "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
        "  df[self.S] = population - df[self.C]\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  4th phase (09May2020 - 25May2020): finished  361 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 21 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>03May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.000592029</td>\n",
        "      <td>0.000113606</td>\n",
        "      <td>0.0127711</td>\n",
        "      <td>0.00819379</td>\n",
        "      <td>360</td>\n",
        "      <td>19</td>\n",
        "      <td>2200</td>\n",
        "      <td>0.001</td>\n",
        "      <td>30</td>\n",
        "      <td>0.0952794</td>\n",
        "      <td>951</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.48</td>\n",
        "      <td>0.0215186</td>\n",
        "      <td>4.95875e-05</td>\n",
        "      <td>0.00452747</td>\n",
        "      <td>0.00910626</td>\n",
        "      <td>360</td>\n",
        "      <td>55</td>\n",
        "      <td>5041</td>\n",
        "      <td>0.022</td>\n",
        "      <td>27</td>\n",
        "      <td>0.118944</td>\n",
        "      <td>1513</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.000461628</td>\n",
        "      <td>8.40034e-05</td>\n",
        "      <td>0.0103635</td>\n",
        "      <td>0.00754208</td>\n",
        "      <td>360</td>\n",
        "      <td>24</td>\n",
        "      <td>2976</td>\n",
        "      <td>0</td>\n",
        "      <td>33</td>\n",
        "      <td>0.0383313</td>\n",
        "      <td>1140</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.73</td>\n",
        "      <td>0.00125651</td>\n",
        "      <td>1.43751e-06</td>\n",
        "      <td>0.0110837</td>\n",
        "      <td>0.0150732</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>173911</td>\n",
        "      <td>0.001</td>\n",
        "      <td>16</td>\n",
        "      <td>0.0768373</td>\n",
        "      <td>1327</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.9</td>\n",
        "      <td>0.000539401</td>\n",
        "      <td>9.44571e-05</td>\n",
        "      <td>0.0110835</td>\n",
        "      <td>0.0122479</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>2646</td>\n",
        "      <td>0.001</td>\n",
        "      <td>20</td>\n",
        "      <td>0.0294025</td>\n",
        "      <td>1439</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.62</td>\n",
        "      <td>0.000672772</td>\n",
        "      <td>0.000111701</td>\n",
        "      <td>0.00696621</td>\n",
        "      <td>0.0111265</td>\n",
        "      <td>360</td>\n",
        "      <td>35</td>\n",
        "      <td>2238</td>\n",
        "      <td>0.001</td>\n",
        "      <td>22</td>\n",
        "      <td>0.0736992</td>\n",
        "      <td>1186</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.03</td>\n",
        "      <td>0.00105943</td>\n",
        "      <td>6.92336e-05</td>\n",
        "      <td>0.0137543</td>\n",
        "      <td>0.0132667</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>3610</td>\n",
        "      <td>0.001</td>\n",
        "      <td>18</td>\n",
        "      <td>0.071485</td>\n",
        "      <td>1161</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.85</td>\n",
        "      <td>0.000280788</td>\n",
        "      <td>0.000136635</td>\n",
        "      <td>0.0193572</td>\n",
        "      <td>0.0225782</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>1829</td>\n",
        "      <td>0</td>\n",
        "      <td>11</td>\n",
        "      <td>0.0410306</td>\n",
        "      <td>1131</td>\n",
        "      <td>0 min 45 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.47</td>\n",
        "      <td>0.000966337</td>\n",
        "      <td>0.000117175</td>\n",
        "      <td>0.0238842</td>\n",
        "      <td>0.0161669</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>2133</td>\n",
        "      <td>0.001</td>\n",
        "      <td>15</td>\n",
        "      <td>0.0228952</td>\n",
        "      <td>736</td>\n",
        "      <td>0 min 35 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.63</td>\n",
        "      <td>0.000343219</td>\n",
        "      <td>7.91161e-05</td>\n",
        "      <td>0.0202959</td>\n",
        "      <td>0.0123996</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>3159</td>\n",
        "      <td>0</td>\n",
        "      <td>20</td>\n",
        "      <td>0.0283081</td>\n",
        "      <td>1425</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.46</td>\n",
        "      <td>0.0237009</td>\n",
        "      <td>0.000826423</td>\n",
        "      <td>0.0222615</td>\n",
        "      <td>0.0141092</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>302</td>\n",
        "      <td>0.024</td>\n",
        "      <td>17</td>\n",
        "      <td>0.194289</td>\n",
        "      <td>1135</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.69</td>\n",
        "      <td>0.0296224</td>\n",
        "      <td>0.000689534</td>\n",
        "      <td>0.0181877</td>\n",
        "      <td>0.0249176</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>362</td>\n",
        "      <td>0.03</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0411497</td>\n",
        "      <td>108</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.4</td>\n",
        "      <td>0.0200553</td>\n",
        "      <td>0.00032938</td>\n",
        "      <td>0.0268567</td>\n",
        "      <td>0.0185179</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>759</td>\n",
        "      <td>0.02</td>\n",
        "      <td>13</td>\n",
        "      <td>0.016251</td>\n",
        "      <td>1220</td>\n",
        "      <td>0 min 50 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.22</td>\n",
        "      <td>0.0123652</td>\n",
        "      <td>0.000299117</td>\n",
        "      <td>0.025205</td>\n",
        "      <td>0.0201554</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>835</td>\n",
        "      <td>0.012</td>\n",
        "      <td>12</td>\n",
        "      <td>0.0223354</td>\n",
        "      <td>219</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.1</td>\n",
        "      <td>0.000175221</td>\n",
        "      <td>0.000614274</td>\n",
        "      <td>0.0204869</td>\n",
        "      <td>0.0180286</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>406</td>\n",
        "      <td>0</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0191158</td>\n",
        "      <td>498</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.97</td>\n",
        "      <td>0.0309861</td>\n",
        "      <td>0.000314897</td>\n",
        "      <td>0.020721</td>\n",
        "      <td>0.0203777</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>793</td>\n",
        "      <td>0.031</td>\n",
        "      <td>12</td>\n",
        "      <td>0.0223733</td>\n",
        "      <td>1432</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.0488173</td>\n",
        "      <td>0.000518366</td>\n",
        "      <td>0.0232845</td>\n",
        "      <td>0.0229885</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>482</td>\n",
        "      <td>0.049</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0176846</td>\n",
        "      <td>132</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.89</td>\n",
        "      <td>0.0266054</td>\n",
        "      <td>0.00158046</td>\n",
        "      <td>0.0254045</td>\n",
        "      <td>0.0261637</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>158</td>\n",
        "      <td>0.027</td>\n",
        "      <td>9</td>\n",
        "      <td>0.0127269</td>\n",
        "      <td>141</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.11</td>\n",
        "      <td>0.0823872</td>\n",
        "      <td>6.74045e-05</td>\n",
        "      <td>0.0276072</td>\n",
        "      <td>0.022655</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>3708</td>\n",
        "      <td>0.082</td>\n",
        "      <td>11</td>\n",
        "      <td>0.00662457</td>\n",
        "      <td>164</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.08</td>\n",
        "      <td>0.0469406</td>\n",
        "      <td>0.000580026</td>\n",
        "      <td>0.0227679</td>\n",
        "      <td>0.0195311</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>431</td>\n",
        "      <td>0.047</td>\n",
        "      <td>12</td>\n",
        "      <td>0.0291439</td>\n",
        "      <td>1153</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.44</td>\n",
        "      <td>0.00029921</td>\n",
        "      <td>0.000230124</td>\n",
        "      <td>0.0244243</td>\n",
        "      <td>0.00978228</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>1086</td>\n",
        "      <td>0</td>\n",
        "      <td>25</td>\n",
        "      <td>0.106593</td>\n",
        "      <td>1182</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.00135436</td>\n",
        "      <td>0.000171596</td>\n",
        "      <td>0.0141467</td>\n",
        "      <td>0.0100062</td>\n",
        "      <td>360</td>\n",
        "      <td>17</td>\n",
        "      <td>1456</td>\n",
        "      <td>0.001</td>\n",
        "      <td>24</td>\n",
        "      <td>0.0451384</td>\n",
        "      <td>872</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.01</td>\n",
        "      <td>0.000121542</td>\n",
        "      <td>0.000104268</td>\n",
        "      <td>0.0136598</td>\n",
        "      <td>0.0134844</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>2397</td>\n",
        "      <td>0</td>\n",
        "      <td>18</td>\n",
        "      <td>0.0436007</td>\n",
        "      <td>1027</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.97</td>\n",
        "      <td>0.016606</td>\n",
        "      <td>0.000180997</td>\n",
        "      <td>0.0154271</td>\n",
        "      <td>0.015495</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>1381</td>\n",
        "      <td>0.017</td>\n",
        "      <td>16</td>\n",
        "      <td>0.0235409</td>\n",
        "      <td>1432</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.61</td>\n",
        "      <td>0.00384175</td>\n",
        "      <td>0.000301129</td>\n",
        "      <td>0.0133486</td>\n",
        "      <td>0.00793596</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>830</td>\n",
        "      <td>0.004</td>\n",
        "      <td>31</td>\n",
        "      <td>0.0155341</td>\n",
        "      <td>235</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.0179201</td>\n",
        "      <td>0.000181287</td>\n",
        "      <td>0.0113343</td>\n",
        "      <td>0.00812038</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>1379</td>\n",
        "      <td>0.018</td>\n",
        "      <td>30</td>\n",
        "      <td>0.0190176</td>\n",
        "      <td>1432</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.000621804</td>\n",
        "      <td>0.00026136</td>\n",
        "      <td>0.00875826</td>\n",
        "      <td>0.00624668</td>\n",
        "      <td>360</td>\n",
        "      <td>28</td>\n",
        "      <td>956</td>\n",
        "      <td>0.001</td>\n",
        "      <td>40</td>\n",
        "      <td>0.0125609</td>\n",
        "      <td>986</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.000658131</td>\n",
        "      <td>0.000283903</td>\n",
        "      <td>0.0105478</td>\n",
        "      <td>0.00602092</td>\n",
        "      <td>360</td>\n",
        "      <td>23</td>\n",
        "      <td>880</td>\n",
        "      <td>0.001</td>\n",
        "      <td>41</td>\n",
        "      <td>0.0129149</td>\n",
        "      <td>450</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.000248299</td>\n",
        "      <td>0.000187798</td>\n",
        "      <td>0.00659241</td>\n",
        "      <td>0.00410022</td>\n",
        "      <td>360</td>\n",
        "      <td>37</td>\n",
        "      <td>1331</td>\n",
        "      <td>0</td>\n",
        "      <td>60</td>\n",
        "      <td>0.0120675</td>\n",
        "      <td>1511</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.49</td>\n",
        "      <td>0.00013449</td>\n",
        "      <td>0.000168217</td>\n",
        "      <td>0.00688246</td>\n",
        "      <td>0.0025951</td>\n",
        "      <td>360</td>\n",
        "      <td>36</td>\n",
        "      <td>1486</td>\n",
        "      <td>0</td>\n",
        "      <td>96</td>\n",
        "      <td>0.0169959</td>\n",
        "      <td>353</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Kuwait</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>4.15</td>\n",
        "      <td>0.00110697</td>\n",
        "      <td>0.000144267</td>\n",
        "      <td>0.0228629</td>\n",
        "      <td>0.00535382</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>1732</td>\n",
        "      <td>0.001</td>\n",
        "      <td>46</td>\n",
        "      <td>0.0999481</td>\n",
        "      <td>1408</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24May2020</td>\n",
        "      <td>31May2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.000966336</td>\n",
        "      <td>0.000117077</td>\n",
        "      <td>0.0141223</td>\n",
        "      <td>0.0118761</td>\n",
        "      <td>360</td>\n",
        "      <td>17</td>\n",
        "      <td>2135</td>\n",
        "      <td>0.001</td>\n",
        "      <td>21</td>\n",
        "      <td>0.02382</td>\n",
        "      <td>741</td>\n",
        "      <td>0 min 35 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.64</td>\n",
        "      <td>0.00396506</td>\n",
        "      <td>7.9409e-05</td>\n",
        "      <td>0.0143779</td>\n",
        "      <td>0.0223116</td>\n",
        "      <td>360</td>\n",
        "      <td>17</td>\n",
        "      <td>3148</td>\n",
        "      <td>0.004</td>\n",
        "      <td>11</td>\n",
        "      <td>0.0357433</td>\n",
        "      <td>199</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.73</td>\n",
        "      <td>0.00396506</td>\n",
        "      <td>7.9409e-05</td>\n",
        "      <td>0.0151952</td>\n",
        "      <td>0.0205587</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>3148</td>\n",
        "      <td>0.004</td>\n",
        "      <td>12</td>\n",
        "      <td>0.0309966</td>\n",
        "      <td>160</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.29</td>\n",
        "      <td>0.00025167</td>\n",
        "      <td>7.57979e-05</td>\n",
        "      <td>0.0220372</td>\n",
        "      <td>0.0169782</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>3298</td>\n",
        "      <td>0</td>\n",
        "      <td>14</td>\n",
        "      <td>0.029621</td>\n",
        "      <td>488</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.17</td>\n",
        "      <td>0.000402485</td>\n",
        "      <td>7.93029e-05</td>\n",
        "      <td>0.0204206</td>\n",
        "      <td>0.0172998</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>3152</td>\n",
        "      <td>0</td>\n",
        "      <td>14</td>\n",
        "      <td>0.00918046</td>\n",
        "      <td>313</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>19Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.95</td>\n",
        "      <td>0.00046107</td>\n",
        "      <td>8.39739e-05</td>\n",
        "      <td>0.0180587</td>\n",
        "      <td>0.018984</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>2977</td>\n",
        "      <td>0</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0158538</td>\n",
        "      <td>1416</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.0024725</td>\n",
        "      <td>9.34715e-05</td>\n",
        "      <td>0.0197199</td>\n",
        "      <td>0.0187342</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>2674</td>\n",
        "      <td>0.002</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0134501</td>\n",
        "      <td>162</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.000900068</td>\n",
        "      <td>7.11105e-05</td>\n",
        "      <td>0.0179444</td>\n",
        "      <td>0.0218782</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>3515</td>\n",
        "      <td>0.001</td>\n",
        "      <td>11</td>\n",
        "      <td>0.0184082</td>\n",
        "      <td>239</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.35</td>\n",
        "      <td>0.0571994</td>\n",
        "      <td>0.000114352</td>\n",
        "      <td>0.00900322</td>\n",
        "      <td>0.00617465</td>\n",
        "      <td>360</td>\n",
        "      <td>27</td>\n",
        "      <td>2186</td>\n",
        "      <td>0.057</td>\n",
        "      <td>40</td>\n",
        "      <td>0.0412067</td>\n",
        "      <td>1182</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.37</td>\n",
        "      <td>0.000571088</td>\n",
        "      <td>0.000426116</td>\n",
        "      <td>0.00951326</td>\n",
        "      <td>0.00651722</td>\n",
        "      <td>360</td>\n",
        "      <td>26</td>\n",
        "      <td>586</td>\n",
        "      <td>0.001</td>\n",
        "      <td>38</td>\n",
        "      <td>0.0137591</td>\n",
        "      <td>448</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.032456</td>\n",
        "      <td>2.417e-06</td>\n",
        "      <td>0.00741471</td>\n",
        "      <td>0.00608263</td>\n",
        "      <td>360</td>\n",
        "      <td>33</td>\n",
        "      <td>103434</td>\n",
        "      <td>0.032</td>\n",
        "      <td>41</td>\n",
        "      <td>0.0239722</td>\n",
        "      <td>1014</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.21</td>\n",
        "      <td>0.00129023</td>\n",
        "      <td>0.000232909</td>\n",
        "      <td>0.00797178</td>\n",
        "      <td>0.00337654</td>\n",
        "      <td>360</td>\n",
        "      <td>31</td>\n",
        "      <td>1073</td>\n",
        "      <td>0.001</td>\n",
        "      <td>74</td>\n",
        "      <td>0.0179932</td>\n",
        "      <td>985</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.51</td>\n",
        "      <td>0.000441371</td>\n",
        "      <td>0.000228577</td>\n",
        "      <td>0.00536284</td>\n",
        "      <td>0.0101924</td>\n",
        "      <td>360</td>\n",
        "      <td>46</td>\n",
        "      <td>1093</td>\n",
        "      <td>0</td>\n",
        "      <td>24</td>\n",
        "      <td>0.0416401</td>\n",
        "      <td>240</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>13Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.74</td>\n",
        "      <td>0.024292</td>\n",
        "      <td>1.41761e-05</td>\n",
        "      <td>0.00768771</td>\n",
        "      <td>0.010061</td>\n",
        "      <td>360</td>\n",
        "      <td>32</td>\n",
        "      <td>17635</td>\n",
        "      <td>0.024</td>\n",
        "      <td>24</td>\n",
        "      <td>0.0503937</td>\n",
        "      <td>254</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.00288425</td>\n",
        "      <td>7.92993e-05</td>\n",
        "      <td>0.0112585</td>\n",
        "      <td>0.012789</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>3152</td>\n",
        "      <td>0.003</td>\n",
        "      <td>19</td>\n",
        "      <td>0.0386478</td>\n",
        "      <td>147</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.86</td>\n",
        "      <td>0.0177716</td>\n",
        "      <td>2.41664e-06</td>\n",
        "      <td>0.014823</td>\n",
        "      <td>0.0078363</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>103449</td>\n",
        "      <td>0.018</td>\n",
        "      <td>31</td>\n",
        "      <td>0.00848696</td>\n",
        "      <td>850</td>\n",
        "      <td>0 min 40 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt  \\\n",
        "Country Phase                                                        \n",
        "Guinea  1st    Past  03May2020  11May2020    12414318  SIR-F  1.54   \n",
        "        2nd    Past  12May2020  20May2020    12414318  SIR-F  0.48   \n",
        "        3rd    Past  21May2020  29May2020    12414318  SIR-F  1.36   \n",
        "        4th    Past  30May2020  10Jun2020    12414318  SIR-F  0.73   \n",
        "        5th    Past  11Jun2020  20Jun2020    12414318  SIR-F   0.9   \n",
        "        6th    Past  21Jun2020  08Jul2020    12414318  SIR-F  0.62   \n",
        "        7th    Past  09Jul2020  20Jul2020    12414318  SIR-F  1.03   \n",
        "        8th    Past  21Jul2020  01Aug2020    12414318  SIR-F  0.85   \n",
        "        9th    Past  02Aug2020  10Aug2020    12414318  SIR-F  1.47   \n",
        "        10th   Past  11Aug2020  20Aug2020    12414318  SIR-F  1.63   \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269  SIR-F  1.46   \n",
        "        2nd    Past  13Apr2020  04May2020    81800269  SIR-F  0.69   \n",
        "        3rd    Past  05May2020  20May2020    81800269  SIR-F   1.4   \n",
        "        4th    Past  21May2020  02Jun2020    81800269  SIR-F  1.22   \n",
        "        5th    Past  03Jun2020  15Jun2020    81800269  SIR-F   1.1   \n",
        "        6th    Past  16Jun2020  28Jun2020    81800269  SIR-F  0.97   \n",
        "        7th    Past  29Jun2020  10Jul2020    81800269  SIR-F  0.94   \n",
        "        8th    Past  11Jul2020  23Jul2020    81800269  SIR-F  0.89   \n",
        "        9th    Past  24Jul2020  05Aug2020    81800269  SIR-F  1.11   \n",
        "        10th   Past  06Aug2020  20Aug2020    81800269  SIR-F  1.08   \n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360  SIR-F  2.44   \n",
        "        2nd    Past  15May2020  29May2020    15854360  SIR-F  1.39   \n",
        "        3rd    Past  30May2020  09Jun2020    15854360  SIR-F  1.01   \n",
        "        4th    Past  10Jun2020  19Jun2020    15854360  SIR-F  0.97   \n",
        "        5th    Past  20Jun2020  30Jun2020    15854360  SIR-F  1.61   \n",
        "        6th    Past  01Jul2020  10Jul2020    15854360  SIR-F  1.34   \n",
        "        7th    Past  11Jul2020  20Jul2020    15854360  SIR-F  1.34   \n",
        "        8th    Past  21Jul2020  29Jul2020    15854360  SIR-F  1.67   \n",
        "        9th    Past  30Jul2020  09Aug2020    15854360  SIR-F  1.54   \n",
        "        10th   Past  10Aug2020  20Aug2020    15854360  SIR-F  2.49   \n",
        "Kuwait  1st    Past  11May2020  23May2020     4137309  SIR-F  4.15   \n",
        "        2nd    Past  24May2020  31May2020     4137309  SIR-F  1.18   \n",
        "        3rd    Past  01Jun2020  09Jun2020     4137309  SIR-F  0.64   \n",
        "        4th    Past  10Jun2020  21Jun2020     4137309  SIR-F  0.73   \n",
        "        5th    Past  22Jun2020  30Jun2020     4137309  SIR-F  1.29   \n",
        "        6th    Past  01Jul2020  08Jul2020     4137309  SIR-F  1.17   \n",
        "        7th    Past  09Jul2020  19Jul2020     4137309  SIR-F  0.95   \n",
        "        8th    Past  20Jul2020  28Jul2020     4137309  SIR-F  1.04   \n",
        "        9th    Past  29Jul2020  09Aug2020     4137309  SIR-F  0.82   \n",
        "        10th   Past  10Aug2020  20Aug2020     4137309      -     -   \n",
        "Poland  1st    Past  23Apr2020  08May2020    37974750  SIR-F  1.35   \n",
        "        2nd    Past  09May2020  20May2020    37974750  SIR-F  1.37   \n",
        "        3rd    Past  21May2020  04Jun2020    37974750  SIR-F  1.18   \n",
        "        4th    Past  05Jun2020  16Jun2020    37974750  SIR-F  2.21   \n",
        "        5th    Past  17Jun2020  30Jun2020    37974750  SIR-F  0.51   \n",
        "        6th    Past  01Jul2020  13Jul2020    37974750  SIR-F  0.74   \n",
        "        7th    Past  14Jul2020  24Jul2020    37974750  SIR-F  0.87   \n",
        "        8th    Past  25Jul2020  03Aug2020    37974750  SIR-F  1.86   \n",
        "        9th    Past  04Aug2020  11Aug2020    37974750      -     -   \n",
        "        10th   Past  12Aug2020  20Aug2020    37974750      -     -   \n",
        "\n",
        "                     theta        kappa         rho       sigma  tau  \\\n",
        "Country Phase                                                          \n",
        "Guinea  1st    0.000592029  0.000113606   0.0127711  0.00819379  360   \n",
        "        2nd      0.0215186  4.95875e-05  0.00452747  0.00910626  360   \n",
        "        3rd    0.000461628  8.40034e-05   0.0103635  0.00754208  360   \n",
        "        4th     0.00125651  1.43751e-06   0.0110837   0.0150732  360   \n",
        "        5th    0.000539401  9.44571e-05   0.0110835   0.0122479  360   \n",
        "        6th    0.000672772  0.000111701  0.00696621   0.0111265  360   \n",
        "        7th     0.00105943  6.92336e-05   0.0137543   0.0132667  360   \n",
        "        8th    0.000280788  0.000136635   0.0193572   0.0225782  360   \n",
        "        9th    0.000966337  0.000117175   0.0238842   0.0161669  360   \n",
        "        10th   0.000343219  7.91161e-05   0.0202959   0.0123996  360   \n",
        "Iran    1st      0.0237009  0.000826423   0.0222615   0.0141092  360   \n",
        "        2nd      0.0296224  0.000689534   0.0181877   0.0249176  360   \n",
        "        3rd      0.0200553   0.00032938   0.0268567   0.0185179  360   \n",
        "        4th      0.0123652  0.000299117    0.025205   0.0201554  360   \n",
        "        5th    0.000175221  0.000614274   0.0204869   0.0180286  360   \n",
        "        6th      0.0309861  0.000314897    0.020721   0.0203777  360   \n",
        "        7th      0.0488173  0.000518366   0.0232845   0.0229885  360   \n",
        "        8th      0.0266054   0.00158046   0.0254045   0.0261637  360   \n",
        "        9th      0.0823872  6.74045e-05   0.0276072    0.022655  360   \n",
        "        10th     0.0469406  0.000580026   0.0227679   0.0195311  360   \n",
        "Senegal 1st     0.00029921  0.000230124   0.0244243  0.00978228  360   \n",
        "        2nd     0.00135436  0.000171596   0.0141467   0.0100062  360   \n",
        "        3rd    0.000121542  0.000104268   0.0136598   0.0134844  360   \n",
        "        4th       0.016606  0.000180997   0.0154271    0.015495  360   \n",
        "        5th     0.00384175  0.000301129   0.0133486  0.00793596  360   \n",
        "        6th      0.0179201  0.000181287   0.0113343  0.00812038  360   \n",
        "        7th    0.000621804   0.00026136  0.00875826  0.00624668  360   \n",
        "        8th    0.000658131  0.000283903   0.0105478  0.00602092  360   \n",
        "        9th    0.000248299  0.000187798  0.00659241  0.00410022  360   \n",
        "        10th    0.00013449  0.000168217  0.00688246   0.0025951  360   \n",
        "Kuwait  1st     0.00110697  0.000144267   0.0228629  0.00535382  360   \n",
        "        2nd    0.000966336  0.000117077   0.0141223   0.0118761  360   \n",
        "        3rd     0.00396506   7.9409e-05   0.0143779   0.0223116  360   \n",
        "        4th     0.00396506   7.9409e-05   0.0151952   0.0205587  360   \n",
        "        5th     0.00025167  7.57979e-05   0.0220372   0.0169782  360   \n",
        "        6th    0.000402485  7.93029e-05   0.0204206   0.0172998  360   \n",
        "        7th     0.00046107  8.39739e-05   0.0180587    0.018984  360   \n",
        "        8th      0.0024725  9.34715e-05   0.0197199   0.0187342  360   \n",
        "        9th    0.000900068  7.11105e-05   0.0179444   0.0218782  360   \n",
        "        10th             -            -           -           -    -   \n",
        "Poland  1st      0.0571994  0.000114352  0.00900322  0.00617465  360   \n",
        "        2nd    0.000571088  0.000426116  0.00951326  0.00651722  360   \n",
        "        3rd       0.032456    2.417e-06  0.00741471  0.00608263  360   \n",
        "        4th     0.00129023  0.000232909  0.00797178  0.00337654  360   \n",
        "        5th    0.000441371  0.000228577  0.00536284   0.0101924  360   \n",
        "        6th       0.024292  1.41761e-05  0.00768771    0.010061  360   \n",
        "        7th     0.00288425  7.92993e-05   0.0112585    0.012789  360   \n",
        "        8th      0.0177716  2.41664e-06    0.014823   0.0078363  360   \n",
        "        9th              -            -           -           -    -   \n",
        "        10th             -            -           -           -    -   \n",
        "\n",
        "              1/beta [day] 1/alpha2 [day] alpha1 [-] 1/gamma [day]  \\\n",
        "Country Phase                                                        \n",
        "Guinea  1st             19           2200      0.001            30   \n",
        "        2nd             55           5041      0.022            27   \n",
        "        3rd             24           2976          0            33   \n",
        "        4th             22         173911      0.001            16   \n",
        "        5th             22           2646      0.001            20   \n",
        "        6th             35           2238      0.001            22   \n",
        "        7th             18           3610      0.001            18   \n",
        "        8th             12           1829          0            11   \n",
        "        9th             10           2133      0.001            15   \n",
        "        10th            12           3159          0            20   \n",
        "Iran    1st             11            302      0.024            17   \n",
        "        2nd             13            362       0.03            10   \n",
        "        3rd              9            759       0.02            13   \n",
        "        4th              9            835      0.012            12   \n",
        "        5th             12            406          0            13   \n",
        "        6th             12            793      0.031            12   \n",
        "        7th             10            482      0.049            10   \n",
        "        8th              9            158      0.027             9   \n",
        "        9th              9           3708      0.082            11   \n",
        "        10th            10            431      0.047            12   \n",
        "Senegal 1st             10           1086          0            25   \n",
        "        2nd             17           1456      0.001            24   \n",
        "        3rd             18           2397          0            18   \n",
        "        4th             16           1381      0.017            16   \n",
        "        5th             18            830      0.004            31   \n",
        "        6th             22           1379      0.018            30   \n",
        "        7th             28            956      0.001            40   \n",
        "        8th             23            880      0.001            41   \n",
        "        9th             37           1331          0            60   \n",
        "        10th            36           1486          0            96   \n",
        "Kuwait  1st             10           1732      0.001            46   \n",
        "        2nd             17           2135      0.001            21   \n",
        "        3rd             17           3148      0.004            11   \n",
        "        4th             16           3148      0.004            12   \n",
        "        5th             11           3298          0            14   \n",
        "        6th             12           3152          0            14   \n",
        "        7th             13           2977          0            13   \n",
        "        8th             12           2674      0.002            13   \n",
        "        9th             13           3515      0.001            11   \n",
        "        10th             -              -          -             -   \n",
        "Poland  1st             27           2186      0.057            40   \n",
        "        2nd             26            586      0.001            38   \n",
        "        3rd             33         103434      0.032            41   \n",
        "        4th             31           1073      0.001            74   \n",
        "        5th             46           1093          0            24   \n",
        "        6th             32          17635      0.024            24   \n",
        "        7th             22           3152      0.003            19   \n",
        "        8th             16         103449      0.018            31   \n",
        "        9th              -              -          -             -   \n",
        "        10th             -              -          -             -   \n",
        "\n",
        "                    RMSLE Trials       Runtime  \n",
        "Country Phase                                   \n",
        "Guinea  1st     0.0952794    951  1 min  0 sec  \n",
        "        2nd      0.118944   1513  1 min  0 sec  \n",
        "        3rd     0.0383313   1140  1 min  0 sec  \n",
        "        4th     0.0768373   1327  1 min  0 sec  \n",
        "        5th     0.0294025   1439  1 min  0 sec  \n",
        "        6th     0.0736992   1186  1 min  0 sec  \n",
        "        7th      0.071485   1161  1 min  0 sec  \n",
        "        8th     0.0410306   1131  0 min 45 sec  \n",
        "        9th     0.0228952    736  0 min 35 sec  \n",
        "        10th    0.0283081   1425  1 min  0 sec  \n",
        "Iran    1st      0.194289   1135  1 min  0 sec  \n",
        "        2nd     0.0411497    108  0 min  5 sec  \n",
        "        3rd      0.016251   1220  0 min 50 sec  \n",
        "        4th     0.0223354    219  0 min 10 sec  \n",
        "        5th     0.0191158    498  0 min 20 sec  \n",
        "        6th     0.0223733   1432  1 min  0 sec  \n",
        "        7th     0.0176846    132  0 min  5 sec  \n",
        "        8th     0.0127269    141  0 min  5 sec  \n",
        "        9th    0.00662457    164  0 min  5 sec  \n",
        "        10th    0.0291439   1153  1 min  0 sec  \n",
        "Senegal 1st      0.106593   1182  1 min  0 sec  \n",
        "        2nd     0.0451384    872  1 min  0 sec  \n",
        "        3rd     0.0436007   1027  1 min  0 sec  \n",
        "        4th     0.0235409   1432  1 min  0 sec  \n",
        "        5th     0.0155341    235  0 min 10 sec  \n",
        "        6th     0.0190176   1432  1 min  0 sec  \n",
        "        7th     0.0125609    986  1 min  0 sec  \n",
        "        8th     0.0129149    450  0 min 20 sec  \n",
        "        9th     0.0120675   1511  1 min  0 sec  \n",
        "        10th    0.0169959    353  0 min 15 sec  \n",
        "Kuwait  1st     0.0999481   1408  1 min  0 sec  \n",
        "        2nd       0.02382    741  0 min 35 sec  \n",
        "        3rd     0.0357433    199  0 min 15 sec  \n",
        "        4th     0.0309966    160  0 min  5 sec  \n",
        "        5th      0.029621    488  0 min 20 sec  \n",
        "        6th    0.00918046    313  0 min 10 sec  \n",
        "        7th     0.0158538   1416  1 min  0 sec  \n",
        "        8th     0.0134501    162  0 min  5 sec  \n",
        "        9th     0.0184082    239  0 min 10 sec  \n",
        "        10th            -      -             -  \n",
        "Poland  1st     0.0412067   1182  1 min  0 sec  \n",
        "        2nd     0.0137591    448  0 min 15 sec  \n",
        "        3rd     0.0239722   1014  1 min  0 sec  \n",
        "        4th     0.0179932    985  1 min  0 sec  \n",
        "        5th     0.0416401    240  0 min 10 sec  \n",
        "        6th     0.0503937    254  0 min 10 sec  \n",
        "        7th     0.0386478    147  0 min  5 sec  \n",
        "        8th    0.00848696    850  0 min 40 sec  \n",
        "        9th             -      -             -  \n",
        "        10th            -      -             -  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-05-20</td>\n",
        "      <td>Mexico</td>\n",
        "      <td>0.106875</td>\n",
        "      <td>0.000660977</td>\n",
        "      <td>0.0548977</td>\n",
        "      <td>0.040686</td>\n",
        "      <td>0.107</td>\n",
        "      <td>378</td>\n",
        "      <td>4</td>\n",
        "      <td>6</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>82.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-05-21</td>\n",
        "      <td>Mexico</td>\n",
        "      <td>0.106875</td>\n",
        "      <td>0.000660977</td>\n",
        "      <td>0.0548977</td>\n",
        "      <td>0.040686</td>\n",
        "      <td>0.107</td>\n",
        "      <td>378</td>\n",
        "      <td>4</td>\n",
        "      <td>6</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>82.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-05-22</td>\n",
        "      <td>Mexico</td>\n",
        "      <td>0.106875</td>\n",
        "      <td>0.000660977</td>\n",
        "      <td>0.0548977</td>\n",
        "      <td>0.040686</td>\n",
        "      <td>0.107</td>\n",
        "      <td>378</td>\n",
        "      <td>4</td>\n",
        "      <td>6</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>82.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-05-23</td>\n",
        "      <td>Mexico</td>\n",
        "      <td>0.106875</td>\n",
        "      <td>0.000660977</td>\n",
        "      <td>0.0548977</td>\n",
        "      <td>0.040686</td>\n",
        "      <td>0.107</td>\n",
        "      <td>378</td>\n",
        "      <td>4</td>\n",
        "      <td>6</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>82.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-05-24</td>\n",
        "      <td>Mexico</td>\n",
        "      <td>0.106875</td>\n",
        "      <td>0.000660977</td>\n",
        "      <td>0.0548977</td>\n",
        "      <td>0.040686</td>\n",
        "      <td>0.107</td>\n",
        "      <td>378</td>\n",
        "      <td>4</td>\n",
        "      <td>6</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>82.41</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date Country     theta        kappa        rho     sigma alpha1 [-]  \\\n",
        "0 2020-05-20  Mexico  0.106875  0.000660977  0.0548977  0.040686      0.107   \n",
        "1 2020-05-21  Mexico  0.106875  0.000660977  0.0548977  0.040686      0.107   \n",
        "2 2020-05-22  Mexico  0.106875  0.000660977  0.0548977  0.040686      0.107   \n",
        "3 2020-05-23  Mexico  0.106875  0.000660977  0.0548977  0.040686      0.107   \n",
        "4 2020-05-24  Mexico  0.106875  0.000660977  0.0548977  0.040686      0.107   \n",
        "\n",
        "  1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0            378            4             6  ...             2   \n",
        "1            378            4             6  ...             2   \n",
        "2            378            4             6  ...             2   \n",
        "3            378            4             6  ...             2   \n",
        "4            378            4             6  ...             2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        3                  1                       2   \n",
        "1                        3                  1                       2   \n",
        "2                        3                  1                       2   \n",
        "3                        3                  1                       2   \n",
        "4                        3                  1                       2   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               2                                    3   \n",
        "1                               2                                    3   \n",
        "2                               2                                    3   \n",
        "3                               2                                    3   \n",
        "4                               2                                    3   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               1                1             82.41  \n",
        "1                      2               1                1             82.41  \n",
        "2                      2               1                1             82.41  \n",
        "3                      2               1                1             82.41  \n",
        "4                      2               1                1             82.41  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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wvEwRoTY2L3wbluScb9UsWgUl8eTdS3lzu44tV53z/BYwBPgyfVP0hxuJtbaTfeknfgWPIKrrm/QN2ndZo4DbnztGlq2Z8h6NK2EsaPh7RvsQDmNvUbtxZl7n5l9vedJB8KC2yARB6tvyCIi1B59NO0PPICJROxMX5pCjmRGKHUY0OXxEIs5hRwuQTyDDz8mh3gXLFjA//73vz7bovEER7k30b58J/9rXYxlrSNQCy+99BTxeKaB+/Q2btxIbW0tk51G2/0dO3scx84ex7bmN3m9ZS2PH7GN46Ye17O9vm0EPARffd9oTp5hz4V0RTYzYvs1hGuPJO5J/+EiqXuVl+61Hkac0MXqJourn4aN1imMaGgBYMIyP662BM/suYiz9h3YwiYej/Pwww+z55j3E37jOmJfOpba2hrGfGjgvMxUO//aDe4xjHT6BA62FFuyOKf/62fTJrsKutZtv1789RmCvu3vwLi9cyp2sSyLadOmsWHDhkH3VWpXUli5V37uA44F1mXaYfny5dxyyy2AveRQY2Mjd9xxBwDBYJDGxkb+9S+7CVRbWxuNjY3cc4/djb2pqYnGxkYeeOABALZu3UpjYyOPPmpPst2wYQONjY08+aTdLHz16tU0Njby3HPP9Zy7sbGRl19+GYDFixfT2NjIvHn20MbChQtpbGxk4cKFAMybN4/GxkYWL7Zj15dffpnGxkaWL7eHHp577jkaGxtZvXo1AE8++SSNjY3Q2UQwEufRRx+lsbGxpznuAw88QGNjI01N9if8e+65h8bGRtra7LHGf/3rXzQ2NhJ0Arw77riDxsZGYn4fiWCQW265xT6+489//jMnnHBCz+3rr7+ek046qef2NddcwymnnNJz+6qrruJTn/pUz+3LL7+cM844w57TF47xi1/8grPPPrtn+09+8hPOO++8nts/+MEPOP/83vVlL774Yr7+9a/33L7gggu44IILem5//etf5+KLexu8n3/++fzgBz/ouX3eeefxk5/8pOf22WefzW9vvx2wM31nnHEGl19+ec/2T33qU1x11VU9t0855RSuuaa3evKkk07i+uuv77n9tdO/RsuzLT3Vu42NjXm99s449SMEl79MV3cs42vv1WdeBWC9azqNP3+SJ594Asj+2kvEYmzrCGZ97a195y2W/eVC1q5YC0Dd5jpeuPQFHpv3GK+2vc6T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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.87</td>\n",
        "      <td>1.22</td>\n",
        "      <td>1.63</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.94</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.86</td>\n",
        "      <td>0.75</td>\n",
        "      <td>0.75</td>\n",
        "      <td>2.49</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.87</td>\n",
        "      <td>1.22</td>\n",
        "      <td>1.63</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.94</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.86</td>\n",
        "      <td>0.75</td>\n",
        "      <td>0.75</td>\n",
        "      <td>2.49</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.87</td>\n",
        "      <td>1.22</td>\n",
        "      <td>1.63</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.94</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.86</td>\n",
        "      <td>0.75</td>\n",
        "      <td>0.75</td>\n",
        "      <td>2.49</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.87</td>\n",
        "      <td>1.22</td>\n",
        "      <td>1.63</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.94</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.86</td>\n",
        "      <td>0.75</td>\n",
        "      <td>0.75</td>\n",
        "      <td>2.49</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.87</td>\n",
        "      <td>1.22</td>\n",
        "      <td>1.63</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.94</td>\n",
        "      <td>1.3</td>\n",
        "      <td>1.86</td>\n",
        "      <td>0.75</td>\n",
        "      <td>0.75</td>\n",
        "      <td>2.49</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Austria  Bahrain  Guinea  Iran  Italy  Korea, South  Kuwait  \\\n",
        "Date                                                                      \n",
        "2020-08-16     0.87     1.22    1.63  1.08   1.14          1.38    0.82   \n",
        "2020-08-17     0.87     1.22    1.63  1.08   1.14          1.38    0.82   \n",
        "2020-08-18     0.87     1.22    1.63  1.08   1.14          1.38    0.82   \n",
        "2020-08-19     0.87     1.22    1.63  1.08   1.14          1.38    0.82   \n",
        "2020-08-20     0.87     1.22    1.63  1.08   1.14          1.38    0.82   \n",
        "\n",
        "Country     Mexico  Moldova  Poland  Portugal  Saudi Arabia  Senegal  \\\n",
        "Date                                                                   \n",
        "2020-08-16    0.94      1.3    1.86      0.75          0.75     2.49   \n",
        "2020-08-17    0.94      1.3    1.86      0.75          0.75     2.49   \n",
        "2020-08-18    0.94      1.3    1.86      0.75          0.75     2.49   \n",
        "2020-08-19    0.94      1.3    1.86      0.75          0.75     2.49   \n",
        "2020-08-20    0.94      1.3    1.86      0.75          0.75     2.49   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-16                  1.14  \n",
        "2020-08-17                  1.14  \n",
        "2020-08-18                  1.14  \n",
        "2020-08-19                  1.14  \n",
        "2020-08-20                  1.14  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.018319</td>\n",
        "      <td>0.029845</td>\n",
        "      <td>0.020296</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.017944</td>\n",
        "      <td>0.034471</td>\n",
        "      <td>0.013721</td>\n",
        "      <td>0.014823</td>\n",
        "      <td>0.003894</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006882</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.018319</td>\n",
        "      <td>0.029845</td>\n",
        "      <td>0.020296</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.017944</td>\n",
        "      <td>0.034471</td>\n",
        "      <td>0.013721</td>\n",
        "      <td>0.014823</td>\n",
        "      <td>0.003894</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006882</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.018319</td>\n",
        "      <td>0.029845</td>\n",
        "      <td>0.020296</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.017944</td>\n",
        "      <td>0.034471</td>\n",
        "      <td>0.013721</td>\n",
        "      <td>0.014823</td>\n",
        "      <td>0.003894</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006882</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.018319</td>\n",
        "      <td>0.029845</td>\n",
        "      <td>0.020296</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.017944</td>\n",
        "      <td>0.034471</td>\n",
        "      <td>0.013721</td>\n",
        "      <td>0.014823</td>\n",
        "      <td>0.003894</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006882</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.018319</td>\n",
        "      <td>0.029845</td>\n",
        "      <td>0.020296</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.017944</td>\n",
        "      <td>0.034471</td>\n",
        "      <td>0.013721</td>\n",
        "      <td>0.014823</td>\n",
        "      <td>0.003894</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006882</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Austria   Bahrain    Guinea      Iran    Italy  Korea, South  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.018319  0.029845  0.020296  0.022768  0.00543      0.016813   \n",
        "2020-08-17  0.018319  0.029845  0.020296  0.022768  0.00543      0.016813   \n",
        "2020-08-18  0.018319  0.029845  0.020296  0.022768  0.00543      0.016813   \n",
        "2020-08-19  0.018319  0.029845  0.020296  0.022768  0.00543      0.016813   \n",
        "2020-08-20  0.018319  0.029845  0.020296  0.022768  0.00543      0.016813   \n",
        "\n",
        "Country       Kuwait    Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                         \n",
        "2020-08-16  0.017944  0.034471  0.013721  0.014823  0.003894      0.011265   \n",
        "2020-08-17  0.017944  0.034471  0.013721  0.014823  0.003894      0.011265   \n",
        "2020-08-18  0.017944  0.034471  0.013721  0.014823  0.003894      0.011265   \n",
        "2020-08-19  0.017944  0.034471  0.013721  0.014823  0.003894      0.011265   \n",
        "2020-08-20  0.017944  0.034471  0.013721  0.014823  0.003894      0.011265   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-16  0.006882              0.011438  \n",
        "2020-08-17  0.006882              0.011438  \n",
        "2020-08-18  0.006882              0.011438  \n",
        "2020-08-19  0.006882              0.011438  \n",
        "2020-08-20  0.006882              0.011438  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.021098</td>\n",
        "      <td>0.024415</td>\n",
        "      <td>0.0124</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.021878</td>\n",
        "      <td>0.03322</td>\n",
        "      <td>0.010311</td>\n",
        "      <td>0.007836</td>\n",
        "      <td>0.00512</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.002595</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.021098</td>\n",
        "      <td>0.024415</td>\n",
        "      <td>0.0124</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.021878</td>\n",
        "      <td>0.03322</td>\n",
        "      <td>0.010311</td>\n",
        "      <td>0.007836</td>\n",
        "      <td>0.00512</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.002595</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.021098</td>\n",
        "      <td>0.024415</td>\n",
        "      <td>0.0124</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.021878</td>\n",
        "      <td>0.03322</td>\n",
        "      <td>0.010311</td>\n",
        "      <td>0.007836</td>\n",
        "      <td>0.00512</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.002595</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.021098</td>\n",
        "      <td>0.024415</td>\n",
        "      <td>0.0124</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.021878</td>\n",
        "      <td>0.03322</td>\n",
        "      <td>0.010311</td>\n",
        "      <td>0.007836</td>\n",
        "      <td>0.00512</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.002595</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.021098</td>\n",
        "      <td>0.024415</td>\n",
        "      <td>0.0124</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.021878</td>\n",
        "      <td>0.03322</td>\n",
        "      <td>0.010311</td>\n",
        "      <td>0.007836</td>\n",
        "      <td>0.00512</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.002595</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Austria   Bahrain  Guinea      Iran     Italy  Korea, South  \\\n",
        "Date                                                                       \n",
        "2020-08-16  0.021098  0.024415  0.0124  0.019531  0.004581      0.012089   \n",
        "2020-08-17  0.021098  0.024415  0.0124  0.019531  0.004581      0.012089   \n",
        "2020-08-18  0.021098  0.024415  0.0124  0.019531  0.004581      0.012089   \n",
        "2020-08-19  0.021098  0.024415  0.0124  0.019531  0.004581      0.012089   \n",
        "2020-08-20  0.021098  0.024415  0.0124  0.019531  0.004581      0.012089   \n",
        "\n",
        "Country       Kuwait   Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.021878  0.03322  0.010311  0.007836   0.00512      0.014661   \n",
        "2020-08-17  0.021878  0.03322  0.010311  0.007836   0.00512      0.014661   \n",
        "2020-08-18  0.021878  0.03322  0.010311  0.007836   0.00512      0.014661   \n",
        "2020-08-19  0.021878  0.03322  0.010311  0.007836   0.00512      0.014661   \n",
        "2020-08-20  0.021878  0.03322  0.010311  0.007836   0.00512      0.014661   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-16  0.002595              0.010045  \n",
        "2020-08-17  0.002595              0.010045  \n",
        "2020-08-18  0.002595              0.010045  \n",
        "2020-08-19  0.002595              0.010045  \n",
        "2020-08-20  0.002595              0.010045  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000104</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000436</td>\n",
        "      <td>0.000026</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000104</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000436</td>\n",
        "      <td>0.000026</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000104</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000436</td>\n",
        "      <td>0.000026</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000104</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000436</td>\n",
        "      <td>0.000026</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000104</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000436</td>\n",
        "      <td>0.000026</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Austria   Bahrain    Guinea     Iran     Italy  Korea, South  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.000037  0.000104  0.000079  0.00058  0.000002      0.000098   \n",
        "2020-08-17  0.000037  0.000104  0.000079  0.00058  0.000002      0.000098   \n",
        "2020-08-18  0.000037  0.000104  0.000079  0.00058  0.000002      0.000098   \n",
        "2020-08-19  0.000037  0.000104  0.000079  0.00058  0.000002      0.000098   \n",
        "2020-08-20  0.000037  0.000104  0.000079  0.00058  0.000002      0.000098   \n",
        "\n",
        "Country       Kuwait    Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                         \n",
        "2020-08-16  0.000071  0.000436  0.000026  0.000002  0.000098      0.000041   \n",
        "2020-08-17  0.000071  0.000436  0.000026  0.000002  0.000098      0.000041   \n",
        "2020-08-18  0.000071  0.000436  0.000026  0.000002  0.000098      0.000041   \n",
        "2020-08-19  0.000071  0.000436  0.000026  0.000002  0.000098      0.000041   \n",
        "2020-08-20  0.000071  0.000436  0.000026  0.000002  0.000098      0.000041   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-16  0.000168              0.000021  \n",
        "2020-08-17  0.000168              0.000021  \n",
        "2020-08-18  0.000168              0.000021  \n",
        "2020-08-19  0.000168              0.000021  \n",
        "2020-08-20  0.000168              0.000021  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000661</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000343</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.0009</td>\n",
        "      <td>0.079644</td>\n",
        "      <td>0.018868</td>\n",
        "      <td>0.017772</td>\n",
        "      <td>0.000809</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.000661</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000343</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.0009</td>\n",
        "      <td>0.079644</td>\n",
        "      <td>0.018868</td>\n",
        "      <td>0.017772</td>\n",
        "      <td>0.000809</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.000661</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000343</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.0009</td>\n",
        "      <td>0.079644</td>\n",
        "      <td>0.018868</td>\n",
        "      <td>0.017772</td>\n",
        "      <td>0.000809</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.000661</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000343</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.0009</td>\n",
        "      <td>0.079644</td>\n",
        "      <td>0.018868</td>\n",
        "      <td>0.017772</td>\n",
        "      <td>0.000809</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.000661</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000343</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.0009</td>\n",
        "      <td>0.079644</td>\n",
        "      <td>0.018868</td>\n",
        "      <td>0.017772</td>\n",
        "      <td>0.000809</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000134</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Austria   Bahrain    Guinea      Iran    Italy  Korea, South  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.000661  0.000122  0.000343  0.046941  0.03575      0.000435   \n",
        "2020-08-17  0.000661  0.000122  0.000343  0.046941  0.03575      0.000435   \n",
        "2020-08-18  0.000661  0.000122  0.000343  0.046941  0.03575      0.000435   \n",
        "2020-08-19  0.000661  0.000122  0.000343  0.046941  0.03575      0.000435   \n",
        "2020-08-20  0.000661  0.000122  0.000343  0.046941  0.03575      0.000435   \n",
        "\n",
        "Country     Kuwait    Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                       \n",
        "2020-08-16  0.0009  0.079644  0.018868  0.017772  0.000809      0.022279   \n",
        "2020-08-17  0.0009  0.079644  0.018868  0.017772  0.000809      0.022279   \n",
        "2020-08-18  0.0009  0.079644  0.018868  0.017772  0.000809      0.022279   \n",
        "2020-08-19  0.0009  0.079644  0.018868  0.017772  0.000809      0.022279   \n",
        "2020-08-20  0.0009  0.079644  0.018868  0.017772  0.000809      0.022279   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-16  0.000134              0.000677  \n",
        "2020-08-17  0.000134              0.000677  \n",
        "2020-08-18  0.000134              0.000677  \n",
        "2020-08-19  0.000134              0.000677  \n",
        "2020-08-20  0.000134              0.000677  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 4630 entries, 0 to 4811\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 4630 non-null   datetime64[ns]\n",
        " 1   Country                              4630 non-null   object        \n",
        " 2   Rt                                   4630 non-null   float64       \n",
        " 3   theta                                4630 non-null   float64       \n",
        " 4   kappa                                4630 non-null   float64       \n",
        " 5   rho                                  4630 non-null   float64       \n",
        " 6   sigma                                4630 non-null   float64       \n",
        " 7   School_closing                       4630 non-null   int64         \n",
        " 8   Workplace_closing                    4630 non-null   int64         \n",
        " 9   Cancel_events                        4630 non-null   int64         \n",
        " 10  Gatherings_restrictions              4630 non-null   int64         \n",
        " 11  Transport_closing                    4630 non-null   int64         \n",
        " 12  Stay_home_restrictions               4630 non-null   int64         \n",
        " 13  Internal_movement_restrictions       4630 non-null   int64         \n",
        " 14  International_movement_restrictions  4630 non-null   int64         \n",
        " 15  Information_campaigns                4630 non-null   int64         \n",
        " 16  Testing_policy                       4630 non-null   int64         \n",
        " 17  Contact_tracing                      4630 non-null   int64         \n",
        " 18  Stringency_index                     4630 non-null   float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 723.4+ KB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col0,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col1,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col1,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col0,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col2{\n",
        "            background-color:  #dad9ea;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col0{\n",
        "            background-color:  #8eb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col0{\n",
        "            background-color:  #2c89bd;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col0,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col7{\n",
        "            background-color:  #f6eff7;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col0{\n",
        "            background-color:  #dbdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col0{\n",
        "            background-color:  #86b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col0,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col1,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col4{\n",
        "            background-color:  #dfddec;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col0{\n",
        "            background-color:  #5a9ec9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col0{\n",
        "            background-color:  #7bacd1;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col0,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col1{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col0{\n",
        "            background-color:  #7eadd1;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col0{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col0,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col9{\n",
        "            background-color:  #d8d7e9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col0{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col0,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col15{\n",
        "            background-color:  #d9d8ea;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col0{\n",
        "            background-color:  #5c9fc9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col1{\n",
        "            background-color:  #99b8d8;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col1,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col9{\n",
        "            background-color:  #f4eef6;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col1{\n",
        "            background-color:  #f0eaf4;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col1,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col7{\n",
        "            background-color:  #89b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col1{\n",
        "            background-color:  #4094c3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col1{\n",
        "            background-color:  #96b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col1,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col8{\n",
        "            background-color:  #a4bcda;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col1{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col1{\n",
        "            background-color:  #d6d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col1{\n",
        "            background-color:  #adc1dd;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col1{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col1{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col1{\n",
        "            background-color:  #5ea0ca;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col3{\n",
        "            background-color:  #81aed2;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col5{\n",
        "            background-color:  #b4c4df;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col5{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col2{\n",
        "            background-color:  #6da6cd;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col4{\n",
        "            background-color:  #c2cbe2;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col6{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col2{\n",
        "            background-color:  #93b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col6{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col2,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col8{\n",
        "            background-color:  #4c99c5;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col2{\n",
        "            background-color:  #dcdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col2{\n",
        "            background-color:  #fdf5fa;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col2{\n",
        "            background-color:  #e5e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col2{\n",
        "            background-color:  #69a5cc;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col4,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col6{\n",
        "            background-color:  #1077b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col3{\n",
        "            background-color:  #efe9f3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col3{\n",
        "            background-color:  #b0c2de;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col3{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col13{\n",
        "            background-color:  #73a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col10{\n",
        "            background-color:  #67a4cc;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col12{\n",
        "            background-color:  #9ebad9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col3{\n",
        "            background-color:  #ebe6f2;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col3,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col14{\n",
        "            background-color:  #dddbec;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col3{\n",
        "            background-color:  #fef6fb;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col3{\n",
        "            background-color:  #8fb4d6;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col5,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col4{\n",
        "            background-color:  #eee8f3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col4{\n",
        "            background-color:  #d4d4e8;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col4{\n",
        "            background-color:  #d3d4e7;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col4{\n",
        "            background-color:  #e6e2ef;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col4{\n",
        "            background-color:  #f9f2f8;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col5{\n",
        "            background-color:  #c9cee4;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col5{\n",
        "            background-color:  #c6cce3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col5{\n",
        "            background-color:  #8cb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col5{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col5{\n",
        "            background-color:  #c0c9e2;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col5{\n",
        "            background-color:  #84b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col6{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col6{\n",
        "            background-color:  #83afd3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col6{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col7,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col13{\n",
        "            background-color:  #d7d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col6,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col9{\n",
        "            background-color:  #e7e3f0;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col6{\n",
        "            background-color:  #d5d5e8;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col6{\n",
        "            background-color:  #056dab;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col7{\n",
        "            background-color:  #b1c2de;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col7{\n",
        "            background-color:  #c1cae2;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col7{\n",
        "            background-color:  #7dacd1;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col9,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col8,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col9{\n",
        "            background-color:  #2383ba;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col10,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col8{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col8{\n",
        "            background-color:  #62a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col8{\n",
        "            background-color:  #d2d2e7;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col8{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col9{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col9{\n",
        "            background-color:  #045e93;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col11,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col10{\n",
        "            background-color:  #056faf;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col10{\n",
        "            background-color:  #cacee5;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col10{\n",
        "            background-color:  #eae6f1;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col10{\n",
        "            background-color:  #045b8e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col12,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col11{\n",
        "            background-color:  #529bc7;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col11{\n",
        "            background-color:  #eee9f3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col11{\n",
        "            background-color:  #f2ecf5;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col11{\n",
        "            background-color:  #045e94;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col13,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col12{\n",
        "            background-color:  #c4cbe3;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col12{\n",
        "            background-color:  #ced0e6;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col16,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col12{\n",
        "            background-color:  #2081b9;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col14,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col13{\n",
        "            background-color:  #71a8ce;\n",
        "            color:  #000000;\n",
        "        }#T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col15,#T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col14{\n",
        "            background-color:  #549cc7;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col1\" class=\"data row0 col1\" >-0.058916</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col2\" class=\"data row0 col2\" >0.246209</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col3\" class=\"data row0 col3\" >0.532685</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col4\" class=\"data row0 col4\" >-0.250024</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col5\" class=\"data row0 col5\" >-0.063606</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col6\" class=\"data row0 col6\" >0.272060</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col7\" class=\"data row0 col7\" >-0.083777</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col8\" class=\"data row0 col8\" >0.405733</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col9\" class=\"data row0 col9\" >0.309195</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col10\" class=\"data row0 col10\" >0.431496</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col11\" class=\"data row0 col11\" >0.299937</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col12\" class=\"data row0 col12\" >0.257067</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col13\" class=\"data row0 col13\" >-0.040676</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col14\" class=\"data row0 col14\" >0.005444</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col15\" class=\"data row0 col15\" >-0.048381</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row0_col16\" class=\"data row0 col16\" >0.400005</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col0\" class=\"data row1 col0\" >-0.058916</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col2\" class=\"data row1 col2\" >0.213343</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col3\" class=\"data row1 col3\" >-0.236967</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col4\" class=\"data row1 col4\" >-0.197585</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col5\" class=\"data row1 col5\" >0.266636</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col6\" class=\"data row1 col6\" >0.471932</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col7\" class=\"data row1 col7\" >0.223081</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col8\" class=\"data row1 col8\" >-0.083900</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col9\" class=\"data row1 col9\" >0.176260</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col10\" class=\"data row1 col10\" >0.372794</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col11\" class=\"data row1 col11\" >0.432300</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col12\" class=\"data row1 col12\" >-0.032304</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col13\" class=\"data row1 col13\" >0.141607</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col14\" class=\"data row1 col14\" >-0.254439</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col15\" class=\"data row1 col15\" >0.204172</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row1_col16\" class=\"data row1 col16\" >0.393289</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col0\" class=\"data row2 col0\" >0.246209</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col1\" class=\"data row2 col1\" >0.213343</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col3\" class=\"data row2 col3\" >0.290021</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col4\" class=\"data row2 col4\" >0.112434</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col5\" class=\"data row2 col5\" >0.075835</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col6\" class=\"data row2 col6\" >0.354234</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col7\" class=\"data row2 col7\" >0.057914</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col8\" class=\"data row2 col8\" >0.182983</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col9\" class=\"data row2 col9\" >0.233921</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col10\" class=\"data row2 col10\" >0.508903</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col11\" class=\"data row2 col11\" >0.441726</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col12\" class=\"data row2 col12\" >-0.060042</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col13\" class=\"data row2 col13\" >-0.069500</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col14\" class=\"data row2 col14\" >-0.308986</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col15\" class=\"data row2 col15\" >-0.122251</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row2_col16\" class=\"data row2 col16\" >0.361669</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col0\" class=\"data row3 col0\" >0.532685</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col1\" class=\"data row3 col1\" >-0.236967</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col2\" class=\"data row3 col2\" >0.290021</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col4\" class=\"data row3 col4\" >0.628750</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col5\" class=\"data row3 col5\" >-0.189497</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col6\" class=\"data row3 col6\" >0.130931</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col7\" class=\"data row3 col7\" >-0.104867</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col8\" class=\"data row3 col8\" >0.291323</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col9\" class=\"data row3 col9\" >0.337245</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col10\" class=\"data row3 col10\" >0.288021</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col11\" class=\"data row3 col11\" >0.367068</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col12\" class=\"data row3 col12\" >0.195391</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col13\" class=\"data row3 col13\" >-0.159395</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col14\" class=\"data row3 col14\" >-0.075669</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col15\" class=\"data row3 col15\" >-0.324407</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row3_col16\" class=\"data row3 col16\" >0.245157</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col0\" class=\"data row4 col0\" >-0.250024</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col1\" class=\"data row4 col1\" >-0.197585</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col2\" class=\"data row4 col2\" >0.112434</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col3\" class=\"data row4 col3\" >0.628750</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col5\" class=\"data row4 col5\" >-0.176014</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col6\" class=\"data row4 col6\" >-0.057622</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col7\" class=\"data row4 col7\" >-0.049808</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col8\" class=\"data row4 col8\" >-0.067180</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col9\" class=\"data row4 col9\" >0.057685</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col10\" class=\"data row4 col10\" >-0.021876</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col11\" class=\"data row4 col11\" >0.141393</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col12\" class=\"data row4 col12\" >-0.014521</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col13\" class=\"data row4 col13\" >-0.124945</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col14\" class=\"data row4 col14\" >-0.052774</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col15\" class=\"data row4 col15\" >-0.277066</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row4_col16\" class=\"data row4 col16\" >-0.081603</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col0\" class=\"data row5 col0\" >-0.063606</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col1\" class=\"data row5 col1\" >0.266636</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col2\" class=\"data row5 col2\" >0.075835</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col3\" class=\"data row5 col3\" >-0.189497</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col4\" class=\"data row5 col4\" >-0.176014</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col6\" class=\"data row5 col6\" >0.140321</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col7\" class=\"data row5 col7\" >0.439197</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col8\" class=\"data row5 col8\" >0.032205</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col9\" class=\"data row5 col9\" >0.041150</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col10\" class=\"data row5 col10\" >0.251503</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col11\" class=\"data row5 col11\" >0.113741</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col12\" class=\"data row5 col12\" >0.075879</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col13\" class=\"data row5 col13\" >-0.040026</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col14\" class=\"data row5 col14\" >-0.331121</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col15\" class=\"data row5 col15\" >0.064234</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row5_col16\" class=\"data row5 col16\" >0.277509</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col0\" class=\"data row6 col0\" >0.272060</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col1\" class=\"data row6 col1\" >0.471932</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col2\" class=\"data row6 col2\" >0.354234</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col3\" class=\"data row6 col3\" >0.130931</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col4\" class=\"data row6 col4\" >-0.057622</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col5\" class=\"data row6 col5\" >0.140321</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col7\" class=\"data row6 col7\" >0.170573</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col8\" class=\"data row6 col8\" >0.285450</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col9\" class=\"data row6 col9\" >0.573175</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col10\" class=\"data row6 col10\" >0.630472</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col11\" class=\"data row6 col11\" >0.508708</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col12\" class=\"data row6 col12\" >0.183198</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col13\" class=\"data row6 col13\" >-0.037804</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col14\" class=\"data row6 col14\" >-0.133537</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col15\" class=\"data row6 col15\" >-0.024482</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row6_col16\" class=\"data row6 col16\" >0.692313</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col0\" class=\"data row7 col0\" >-0.083777</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col1\" class=\"data row7 col1\" >0.223081</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col2\" class=\"data row7 col2\" >0.057914</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col3\" class=\"data row7 col3\" >-0.104867</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col4\" class=\"data row7 col4\" >-0.049808</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col5\" class=\"data row7 col5\" >0.439197</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col6\" class=\"data row7 col6\" >0.170573</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col8\" class=\"data row7 col8\" >0.121438</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col9\" class=\"data row7 col9\" >0.059279</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col10\" class=\"data row7 col10\" >0.263597</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col11\" class=\"data row7 col11\" >0.138958</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col12\" class=\"data row7 col12\" >0.003505</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col13\" class=\"data row7 col13\" >-0.036134</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col14\" class=\"data row7 col14\" >-0.251360</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col15\" class=\"data row7 col15\" >-0.047669</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row7_col16\" class=\"data row7 col16\" >0.305904</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col0\" class=\"data row8 col0\" >0.405733</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col1\" class=\"data row8 col1\" >-0.083900</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col2\" class=\"data row8 col2\" >0.182983</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col3\" class=\"data row8 col3\" >0.291323</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col4\" class=\"data row8 col4\" >-0.067180</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col5\" class=\"data row8 col5\" >0.032205</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col6\" class=\"data row8 col6\" >0.285450</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col7\" class=\"data row8 col7\" >0.121438</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col9\" class=\"data row8 col9\" >0.567998</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col10\" class=\"data row8 col10\" >0.464387</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col11\" class=\"data row8 col11\" >0.383509</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col12\" class=\"data row8 col12\" >0.440584</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col13\" class=\"data row8 col13\" >-0.004659</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col14\" class=\"data row8 col14\" >0.175615</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col15\" class=\"data row8 col15\" >-0.052524</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row8_col16\" class=\"data row8 col16\" >0.682145</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col0\" class=\"data row9 col0\" >0.309195</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col1\" class=\"data row9 col1\" >0.176260</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col2\" class=\"data row9 col2\" >0.233921</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col3\" class=\"data row9 col3\" >0.337245</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col4\" class=\"data row9 col4\" >0.057685</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col5\" class=\"data row9 col5\" >0.041150</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col6\" class=\"data row9 col6\" >0.573175</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col7\" class=\"data row9 col7\" >0.059279</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col8\" class=\"data row9 col8\" >0.567998</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col10\" class=\"data row9 col10\" >0.566879</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col11\" class=\"data row9 col11\" >0.696074</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col12\" class=\"data row9 col12\" >0.401949</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col13\" class=\"data row9 col13\" >-0.233757</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col14\" class=\"data row9 col14\" >-0.043582</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col15\" class=\"data row9 col15\" >-0.130879</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row9_col16\" class=\"data row9 col16\" >0.805227</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col0\" class=\"data row10 col0\" >0.431496</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col1\" class=\"data row10 col1\" >0.372794</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col2\" class=\"data row10 col2\" >0.508903</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col3\" class=\"data row10 col3\" >0.288021</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col4\" class=\"data row10 col4\" >-0.021876</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col5\" class=\"data row10 col5\" >0.251503</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col6\" class=\"data row10 col6\" >0.630472</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col7\" class=\"data row10 col7\" >0.263597</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col8\" class=\"data row10 col8\" >0.464387</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col9\" class=\"data row10 col9\" >0.566879</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col11\" class=\"data row10 col11\" >0.670059</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col12\" class=\"data row10 col12\" >0.368463</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col13\" class=\"data row10 col13\" >0.024874</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col14\" class=\"data row10 col14\" >-0.151774</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col15\" class=\"data row10 col15\" >-0.052282</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row10_col16\" class=\"data row10 col16\" >0.827174</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col0\" class=\"data row11 col0\" >0.299937</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col1\" class=\"data row11 col1\" >0.432300</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col2\" class=\"data row11 col2\" >0.441726</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col3\" class=\"data row11 col3\" >0.367068</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col4\" class=\"data row11 col4\" >0.141393</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col5\" class=\"data row11 col5\" >0.113741</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col6\" class=\"data row11 col6\" >0.508708</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col7\" class=\"data row11 col7\" >0.138958</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col8\" class=\"data row11 col8\" >0.383509</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col9\" class=\"data row11 col9\" >0.696074</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col10\" class=\"data row11 col10\" >0.670059</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col12\" class=\"data row11 col12\" >0.423459</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col13\" class=\"data row11 col13\" >-0.184363</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col14\" class=\"data row11 col14\" >-0.138439</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col15\" class=\"data row11 col15\" >-0.215580</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row11_col16\" class=\"data row11 col16\" >0.799112</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col0\" class=\"data row12 col0\" >0.257067</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col1\" class=\"data row12 col1\" >-0.032304</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col2\" class=\"data row12 col2\" >-0.060042</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col3\" class=\"data row12 col3\" >0.195391</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col4\" class=\"data row12 col4\" >-0.014521</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col5\" class=\"data row12 col5\" >0.075879</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col6\" class=\"data row12 col6\" >0.183198</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col7\" class=\"data row12 col7\" >0.003505</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col8\" class=\"data row12 col8\" >0.440584</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col9\" class=\"data row12 col9\" >0.401949</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col10\" class=\"data row12 col10\" >0.368463</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col11\" class=\"data row12 col11\" >0.423459</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col13\" class=\"data row12 col13\" >0.050447</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col14\" class=\"data row12 col14\" >0.195851</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col15\" class=\"data row12 col15\" >0.008889</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row12_col16\" class=\"data row12 col16\" >0.578718</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col0\" class=\"data row13 col0\" >-0.040676</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col1\" class=\"data row13 col1\" >0.141607</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col2\" class=\"data row13 col2\" >-0.069500</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col3\" class=\"data row13 col3\" >-0.159395</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col4\" class=\"data row13 col4\" >-0.124945</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col5\" class=\"data row13 col5\" >-0.040026</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col6\" class=\"data row13 col6\" >-0.037804</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col7\" class=\"data row13 col7\" >-0.036134</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col8\" class=\"data row13 col8\" >-0.004659</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col9\" class=\"data row13 col9\" >-0.233757</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col10\" class=\"data row13 col10\" >0.024874</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col11\" class=\"data row13 col11\" >-0.184363</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col12\" class=\"data row13 col12\" >0.050447</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col14\" class=\"data row13 col14\" >0.341428</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col15\" class=\"data row13 col15\" >0.337448</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row13_col16\" class=\"data row13 col16\" >-0.039217</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col0\" class=\"data row14 col0\" >0.005444</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col1\" class=\"data row14 col1\" >-0.254439</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col2\" class=\"data row14 col2\" >-0.308986</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col3\" class=\"data row14 col3\" >-0.075669</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col4\" class=\"data row14 col4\" >-0.052774</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col5\" class=\"data row14 col5\" >-0.331121</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col6\" class=\"data row14 col6\" >-0.133537</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col7\" class=\"data row14 col7\" >-0.251360</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col8\" class=\"data row14 col8\" >0.175615</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col9\" class=\"data row14 col9\" >-0.043582</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col10\" class=\"data row14 col10\" >-0.151774</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col11\" class=\"data row14 col11\" >-0.138439</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col12\" class=\"data row14 col12\" >0.195851</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col13\" class=\"data row14 col13\" >0.341428</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col15\" class=\"data row14 col15\" >0.418933</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row14_col16\" class=\"data row14 col16\" >-0.074138</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col0\" class=\"data row15 col0\" >-0.048381</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col1\" class=\"data row15 col1\" >0.204172</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col2\" class=\"data row15 col2\" >-0.122251</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col3\" class=\"data row15 col3\" >-0.324407</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col4\" class=\"data row15 col4\" >-0.277066</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col5\" class=\"data row15 col5\" >0.064234</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col6\" class=\"data row15 col6\" >-0.024482</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col7\" class=\"data row15 col7\" >-0.047669</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col8\" class=\"data row15 col8\" >-0.052524</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col9\" class=\"data row15 col9\" >-0.130879</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col10\" class=\"data row15 col10\" >-0.052282</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col11\" class=\"data row15 col11\" >-0.215580</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col12\" class=\"data row15 col12\" >0.008889</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col13\" class=\"data row15 col13\" >0.337448</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col14\" class=\"data row15 col14\" >0.418933</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row15_col16\" class=\"data row15 col16\" >-0.053714</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5level0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col0\" class=\"data row16 col0\" >0.400005</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col1\" class=\"data row16 col1\" >0.393289</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col2\" class=\"data row16 col2\" >0.361669</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col3\" class=\"data row16 col3\" >0.245157</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col4\" class=\"data row16 col4\" >-0.081603</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col5\" class=\"data row16 col5\" >0.277509</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col6\" class=\"data row16 col6\" >0.692313</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col7\" class=\"data row16 col7\" >0.305904</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col8\" class=\"data row16 col8\" >0.682145</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col9\" class=\"data row16 col9\" >0.805227</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col10\" class=\"data row16 col10\" >0.827174</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col11\" class=\"data row16 col11\" >0.799112</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col12\" class=\"data row16 col12\" >0.578718</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col13\" class=\"data row16 col13\" >-0.039217</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col14\" class=\"data row16 col14\" >-0.074138</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col15\" class=\"data row16 col15\" >-0.053714</td>\n",
        "                        <td id=\"T_affb17b6_e2da_11ea_9e86_5254006e13a5row16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f70ef288eb0>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "zero-size array to reduction operation minimum which has no identity",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0mFigureCanvasBase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2191\u001b[0m                            else suppress())\n\u001b[1;32m   2192\u001b[0m                     \u001b[0;32mwith\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2193\u001b[0;31m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2194\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2195\u001b[0m                     bbox_inches = self.figure.get_tightbbox(\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1863\u001b[0;31m             mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   1864\u001b[0m                 renderer, self, artists, self.suppressComposite)\n\u001b[1;32m   1865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    409\u001b[0m                          \u001b[0;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m                 **kwargs)\n\u001b[0;32m--> 411\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2746\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2747\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2748\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2749\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2750\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    929\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_sizes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m         \u001b[0mCollection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    383\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m                 \u001b[0mcombined_transform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 385\u001b[0;31m             \u001b[0mextents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpaths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_extents\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined_transform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m             if (extents.width < self.figure.bbox.width\n\u001b[1;32m    387\u001b[0m                     and extents.height < self.figure.bbox.height):\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/path.py\u001b[0m in \u001b[0;36mget_extents\u001b[0;34m(self, transform, **kwargs)\u001b[0m\n\u001b[1;32m    601\u001b[0m                 \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mdzeros\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m             \u001b[0mxys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mBbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    604\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    605\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mintersects_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilled\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_amin\u001b[0;34m(a, axis, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m     41\u001b[0m def _amin(a, axis=None, out=None, keepdims=False,\n\u001b[1;32m     42\u001b[0m           initial=_NoValue, where=True):\n\u001b[0;32m---> 43\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mumr_minimum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m def _sum(a, axis=None, dtype=None, out=None, keepdims=False,\n",
        "\u001b[0;31mValueError\u001b[0m: zero-size array to reduction operation minimum which has no identity"
       ]
      },
      {
       "output_type": "display_data",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
