{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.7.1'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "184"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "2"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Lesotho', 'Namibia', 'Bahamas', 'Gambia']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "3"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritius'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Seychelles'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zimbabwe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Antigua and Barbuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brunei'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tanzania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Papua New Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belize'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Suriname'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zambia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guyana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Botswana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Venezuela'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kyrgyzstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iceland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Norway'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guatemala'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sao Tome and Principe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Philippines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'New Zealand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liechtenstein'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Montenegro'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Grenada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burundi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ireland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tajikistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Comoros'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Andorra'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Lucia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Paraguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Palestine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Trinidad and Tobago'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Yemen'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Australia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Syria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chad'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Costa Rica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lebanon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bermuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Rwanda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ethiopia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kosovo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Angola'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Japan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Libya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Madagascar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Spain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'San Marino'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Morocco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Equatorial Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Eritrea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Swaziland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kazakhstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malawi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Central African Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cambodia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Vincent and the Grenadines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "6"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Benin'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Albania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Congo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovakia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kenya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Haiti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bosnia and Herzegovina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Maldives'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Africa'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cyprus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Luxembourg'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Israel'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uzbekistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea-Bissau'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Panama'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ecuador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ghana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Afghanistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cameroon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bolivia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Niger'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malta'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Vietnam'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Netherlands'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mongolia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Macedonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'India'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Argentina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uganda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cuba'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Colombia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mozambique'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Oman'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sri Lanka'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Taiwan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "7"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Armenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Pakistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Croatia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Switzerland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Indonesia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Djibouti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Monaco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Somalia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Qatar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tunisia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Greece'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Togo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cape Verde'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brazil'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Estonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iraq'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mali'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nepal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bulgaria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sierra Leone'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Barbados'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Finland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uruguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Latvia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bhutan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burkina Faso'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Germany'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Dominican Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jordan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belgium'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lithuania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liberia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'China'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Algeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Azerbaijan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Serbia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Gabon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nicaragua'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Egypt'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'El Salvador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Peru'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Thailand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belarus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Honduras'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "8"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Singapore'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nigeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chile'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Georgia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jamaica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Denmark'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malaysia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Hungary'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'France'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bangladesh'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Turkey'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United States'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Romania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Myanmar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Russia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahrain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Iran', 'Guinea', 'Poland', 'Kuwait', 'Senegal']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "14"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bahrain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Iran', 'Guinea', 'Poland', 'Kuwait', 'Senegal']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>03May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>13Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Kuwait</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24May2020</td>\n",
        "      <td>31May2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>19Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269\n",
        "        2nd    Past  13Apr2020  04May2020    81800269\n",
        "        3rd    Past  05May2020  20May2020    81800269\n",
        "        4th    Past  21May2020  02Jun2020    81800269\n",
        "        5th    Past  03Jun2020  15Jun2020    81800269\n",
        "        6th    Past  16Jun2020  28Jun2020    81800269\n",
        "        7th    Past  29Jun2020  10Jul2020    81800269\n",
        "        8th    Past  11Jul2020  23Jul2020    81800269\n",
        "        9th    Past  24Jul2020  05Aug2020    81800269\n",
        "        10th   Past  06Aug2020  20Aug2020    81800269\n",
        "Guinea  1st    Past  03May2020  11May2020    12414318\n",
        "        2nd    Past  12May2020  20May2020    12414318\n",
        "        3rd    Past  21May2020  29May2020    12414318\n",
        "        4th    Past  30May2020  10Jun2020    12414318\n",
        "        5th    Past  11Jun2020  20Jun2020    12414318\n",
        "        6th    Past  21Jun2020  08Jul2020    12414318\n",
        "        7th    Past  09Jul2020  20Jul2020    12414318\n",
        "        8th    Past  21Jul2020  01Aug2020    12414318\n",
        "        9th    Past  02Aug2020  10Aug2020    12414318\n",
        "        10th   Past  11Aug2020  20Aug2020    12414318\n",
        "Poland  1st    Past  23Apr2020  08May2020    37974750\n",
        "        2nd    Past  09May2020  20May2020    37974750\n",
        "        3rd    Past  21May2020  04Jun2020    37974750\n",
        "        4th    Past  05Jun2020  16Jun2020    37974750\n",
        "        5th    Past  17Jun2020  30Jun2020    37974750\n",
        "        6th    Past  01Jul2020  13Jul2020    37974750\n",
        "        7th    Past  14Jul2020  24Jul2020    37974750\n",
        "        8th    Past  25Jul2020  03Aug2020    37974750\n",
        "        9th    Past  04Aug2020  11Aug2020    37974750\n",
        "        10th   Past  12Aug2020  20Aug2020    37974750\n",
        "Kuwait  1st    Past  11May2020  23May2020     4137309\n",
        "        2nd    Past  24May2020  31May2020     4137309\n",
        "        3rd    Past  01Jun2020  09Jun2020     4137309\n",
        "        4th    Past  10Jun2020  21Jun2020     4137309\n",
        "        5th    Past  22Jun2020  30Jun2020     4137309\n",
        "        6th    Past  01Jul2020  08Jul2020     4137309\n",
        "        7th    Past  09Jul2020  19Jul2020     4137309\n",
        "        8th    Past  20Jul2020  28Jul2020     4137309\n",
        "        9th    Past  29Jul2020  09Aug2020     4137309\n",
        "        10th   Past  10Aug2020  20Aug2020     4137309\n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360\n",
        "        2nd    Past  15May2020  29May2020    15854360\n",
        "        3rd    Past  30May2020  09Jun2020    15854360\n",
        "        4th    Past  10Jun2020  19Jun2020    15854360\n",
        "        5th    Past  20Jun2020  30Jun2020    15854360\n",
        "        6th    Past  01Jul2020  10Jul2020    15854360\n",
        "        7th    Past  11Jul2020  20Jul2020    15854360\n",
        "        8th    Past  21Jul2020  29Jul2020    15854360\n",
        "        9th    Past  30Jul2020  09Aug2020    15854360\n",
        "        10th   Past  10Aug2020  20Aug2020    15854360"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  4th phase (26Jun2020 - 05Jul2020): finished  237 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  4th phase (09May2020 - 25May2020): finished  410 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  7th phase (15Jul2020 - 25Jul2020): finished  533 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  2nd phase (06Apr2020 - 13Apr2020): finished  162 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  7th phase (12Jul2020 - 21Jul2020): finished  284 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  6th phase (01Jul2020 - 13Jul2020): finished  284 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  8th phase (11Jul2020 - 23Jul2020): finished  112 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  6th phase (10May2020 - 19May2020): finished  142 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  3rd phase (07Jun2020 - 15Jun2020): finished  403 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  1st phase (23Apr2020 - 08May2020): finished  145 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (18Jun2020 - 26Jun2020): finished  430 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  1st phase (08May2020 - 28May2020): finished 1379 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  5th phase (11Jun2020 - 20Jun2020): finished 1340 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  4th phase (10Jun2020 - 21Jun2020): finished  148 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (19Jul2020 - 03Aug2020): finished  429 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (06Jun2020 - 17Jun2020): finished  342 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  7th phase (18Jul2020 - 28Jul2020): finished  504 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  8th phase (02Aug2020 - 10Aug2020): finished  381 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  3rd phase (05May2020 - 20May2020): finished 1287 trials in 0 min 50 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  1st phase (06May2020 - 25May2020): finished 1433 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  7th phase (09Jul2020 - 20Jul2020): finished 1387 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  6th phase (21Jun2020 - 08Jul2020): finished 1345 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  8th phase (20Jul2020 - 28Jul2020): finished  299 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  2nd phase (26May2020 - 04Jun2020): finished 1346 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  5th phase (06Jul2020 - 14Jul2020): finished  487 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  2nd phase (29May2020 - 10Jun2020): finished 1428 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  6th phase (23Jun2020 - 02Jul2020): finished  472 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  9th phase (28Jul2020 - 20Aug2020): finished  977 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  4th phase (24Apr2020 - 14May2020): finished  156 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  7th phase (29Jun2020 - 10Jul2020): finished  160 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  8th phase (22Jul2020 - 03Aug2020): finished  169 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  8th phase (20Jul2020 - 04Aug2020): finished 1452 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  5th phase (26Jun2020 - 03Jul2020): finished  566 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  3rd phase (07Apr2020 - 08May2020): finished 1383 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  6th phase (29Jun2020 - 17Jul2020): finished 1395 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  2nd phase (12May2020 - 20May2020): finished 1433 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  5th phase (22Jun2020 - 06Jul2020): finished 1408 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  6th phase (07Jul2020 - 14Jul2020): finished 1356 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  6th phase (21Jun2020 - 01Jul2020): finished 1359 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  1st phase (29Mar2020 - 05Apr2020): finished 1383 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  6th phase (01Jul2020 - 08Jul2020): finished  239 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  8th phase (26Jul2020 - 07Aug2020): finished  252 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  6th phase (16Jun2020 - 28Jun2020): finished 1380 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  2nd phase (22May2020 - 06Jun2020): finished 1441 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  3rd phase (21May2020 - 29May2020): finished 1481 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  5th phase (15May2020 - 28Jun2020): finished  499 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  1st phase (24Mar2020 - 31Mar2020): finished 1565 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL, 10th phase (12Aug2020 - 20Aug2020): finished  206 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  1st phase (11May2020 - 23May2020): finished 1550 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  5th phase (02May2020 - 09May2020): finished  454 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  6th phase (01Jul2020 - 10Jul2020): finished 1548 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  7th phase (20May2020 - 07Jun2020): finished  446 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  4th phase (13Jun2020 - 21Jun2020): finished 1478 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  4th phase (30May2020 - 10Jun2020): finished 1451 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  7th phase (14Jul2020 - 24Jul2020): finished  181 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  7th phase (09Jul2020 - 19Jul2020): finished 1483 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  9th phase (04Aug2020 - 11Aug2020): finished  381 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  6th phase (15Jul2020 - 22Jul2020): finished 1154 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT, 10th phase (10Aug2020 - 20Aug2020): finished  714 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  2nd phase (09May2020 - 20May2020): finished  407 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  3rd phase (11Jun2020 - 19Jun2020): finished  482 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  2nd phase (13Apr2020 - 04May2020): finished  163 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  5th phase (30Jun2020 - 12Jul2020): finished  939 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  8th phase (29Jul2020 - 11Aug2020): finished 1620 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  3rd phase (30May2020 - 09Jun2020): finished 1508 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  9th phase (04Aug2020 - 20Aug2020): finished  323 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  4th phase (21May2020 - 02Jun2020): finished  210 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (08Jul2020 - 18Jul2020): finished 1480 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (05May2020 - 17May2020): finished 1460 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  2nd phase (15May2020 - 29May2020): finished 1399 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (27Jun2020 - 07Jul2020): finished  422 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  8th phase (08Jun2020 - 16Jul2020): finished  308 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  1st phase (10May2020 - 21May2020): finished 1288 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  5th phase (20Jun2020 - 30Jun2020): finished  193 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  9th phase (05Aug2020 - 20Aug2020): finished 1189 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  7th phase (02Jul2020 - 19Jul2020): finished 1165 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  3rd phase (13Apr2020 - 21Apr2020): finished 1274 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  7th phase (11Jul2020 - 20Jul2020): finished 1381 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  4th phase (03Jun2020 - 11Jun2020): finished 1374 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  6th phase (04Jul2020 - 11Jul2020): finished  272 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  3rd phase (21May2020 - 04Jun2020): finished 1359 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  5th phase (17Jun2020 - 30Jun2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  9th phase (24Jul2020 - 05Aug2020): finished  158 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  4th phase (10Jun2020 - 19Jun2020): finished 1386 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  3rd phase (14Apr2020 - 23Apr2020): finished  432 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  1st phase (03May2020 - 11May2020): finished 1433 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  8th phase (25Jul2020 - 03Aug2020): finished  826 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  2nd phase (13May2020 - 24May2020): finished 1406 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  9th phase (30Jul2020 - 09Aug2020): finished 1395 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  2nd phase (24May2020 - 31May2020): finished  766 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  7th phase (24Jul2020 - 01Aug2020): finished 1390 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSAU,  4th phase (16Jun2020 - 25Jun2020): finished 1389 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  5th phase (26May2020 - 20Jun2020): finished  286 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  3rd phase (25May2020 - 02Jun2020): finished  565 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  1st phase (20May2020 - 03Jun2020): finished 1383 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (18May2020 - 28May2020): finished 1416 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  9th phase (29Jul2020 - 09Aug2020): finished  214 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  2nd phase (04Jun2020 - 15Jun2020): finished  212 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  1st phase (28Apr2020 - 12May2020): finished 1670 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  9th phase (17Jul2020 - 20Aug2020): finished 1572 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  1st phase (28Mar2020 - 12Apr2020): finished 1592 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  1st phase (15Mar2020 - 25Mar2020): finished 1659 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  8th phase (21Jul2020 - 01Aug2020): finished 1076 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  8th phase (13Jul2020 - 27Jul2020): finished  356 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  8th phase (21Jul2020 - 29Jul2020): finished  433 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  5th phase (03Jun2020 - 15Jun2020): finished  472 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  3rd phase (05Jun2020 - 12Jun2020): finished 1645 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN, 10th phase (06Aug2020 - 20Aug2020): finished 1667 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  6th phase (13Jul2020 - 23Jul2020): finished 1629 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  1st phase (30Apr2020 - 14May2020): finished 1799 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMEX,  7th phase (23Jul2020 - 03Aug2020): finished  349 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  4th phase (22Apr2020 - 01May2020): finished  222 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  2nd phase (01Apr2020 - 12Apr2020): finished  998 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (29May2020 - 05Jun2020): finished  194 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  4th phase (05Jun2020 - 16Jun2020): finished 1220 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  7th phase (03Jul2020 - 12Jul2020): finished 1797 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  9th phase (08Aug2020 - 20Aug2020): finished 1773 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  4th phase (20Jun2020 - 29Jun2020): finished 1085 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  9th phase (11Aug2020 - 20Aug2020): finished  682 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKOR,  2nd phase (26Mar2020 - 06Apr2020): finished  531 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  3rd phase (01Jun2020 - 09Jun2020): finished  183 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  5th phase (12Jun2020 - 22Jun2020): finished  972 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  5th phase (22Jun2020 - 30Jun2020): finished  517 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 18 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.46</td>\n",
        "      <td>0.0237009</td>\n",
        "      <td>0.000826423</td>\n",
        "      <td>0.0222615</td>\n",
        "      <td>0.0141092</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>17</td>\n",
        "      <td>0.024</td>\n",
        "      <td>302</td>\n",
        "      <td>0.194289</td>\n",
        "      <td>1592</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.69</td>\n",
        "      <td>0.0354734</td>\n",
        "      <td>0.000558882</td>\n",
        "      <td>0.0183228</td>\n",
        "      <td>0.0249335</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>10</td>\n",
        "      <td>0.035</td>\n",
        "      <td>447</td>\n",
        "      <td>0.0364471</td>\n",
        "      <td>163</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.4</td>\n",
        "      <td>0.0200553</td>\n",
        "      <td>0.00032938</td>\n",
        "      <td>0.0268567</td>\n",
        "      <td>0.0185179</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>13</td>\n",
        "      <td>0.02</td>\n",
        "      <td>759</td>\n",
        "      <td>0.016251</td>\n",
        "      <td>1287</td>\n",
        "      <td>0 min 50 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.22</td>\n",
        "      <td>0.019252</td>\n",
        "      <td>7.11253e-05</td>\n",
        "      <td>0.0251811</td>\n",
        "      <td>0.0201527</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>12</td>\n",
        "      <td>0.019</td>\n",
        "      <td>3514</td>\n",
        "      <td>0.0230145</td>\n",
        "      <td>210</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.1</td>\n",
        "      <td>0.000175221</td>\n",
        "      <td>0.000614274</td>\n",
        "      <td>0.0204869</td>\n",
        "      <td>0.0180286</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>13</td>\n",
        "      <td>0</td>\n",
        "      <td>406</td>\n",
        "      <td>0.0191158</td>\n",
        "      <td>472</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.97</td>\n",
        "      <td>0.000833667</td>\n",
        "      <td>0.000927929</td>\n",
        "      <td>0.0206275</td>\n",
        "      <td>0.0204287</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>12</td>\n",
        "      <td>0.001</td>\n",
        "      <td>269</td>\n",
        "      <td>0.0230177</td>\n",
        "      <td>1380</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.0488173</td>\n",
        "      <td>0.000518366</td>\n",
        "      <td>0.0232845</td>\n",
        "      <td>0.0229885</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>10</td>\n",
        "      <td>0.049</td>\n",
        "      <td>482</td>\n",
        "      <td>0.0176846</td>\n",
        "      <td>160</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.89</td>\n",
        "      <td>0.0266054</td>\n",
        "      <td>0.00158046</td>\n",
        "      <td>0.0254045</td>\n",
        "      <td>0.0261637</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>9</td>\n",
        "      <td>0.027</td>\n",
        "      <td>158</td>\n",
        "      <td>0.0127269</td>\n",
        "      <td>112</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.11</td>\n",
        "      <td>0.0823872</td>\n",
        "      <td>6.74045e-05</td>\n",
        "      <td>0.0276072</td>\n",
        "      <td>0.022655</td>\n",
        "      <td>360</td>\n",
        "      <td>9</td>\n",
        "      <td>11</td>\n",
        "      <td>0.082</td>\n",
        "      <td>3708</td>\n",
        "      <td>0.00662457</td>\n",
        "      <td>158</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.08</td>\n",
        "      <td>0.0469406</td>\n",
        "      <td>0.000580026</td>\n",
        "      <td>0.0227679</td>\n",
        "      <td>0.0195311</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>12</td>\n",
        "      <td>0.047</td>\n",
        "      <td>431</td>\n",
        "      <td>0.0291439</td>\n",
        "      <td>1667</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>03May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.000592029</td>\n",
        "      <td>0.000113606</td>\n",
        "      <td>0.0127711</td>\n",
        "      <td>0.00819379</td>\n",
        "      <td>360</td>\n",
        "      <td>19</td>\n",
        "      <td>30</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2200</td>\n",
        "      <td>0.0952794</td>\n",
        "      <td>1433</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.48</td>\n",
        "      <td>0.0215186</td>\n",
        "      <td>4.95875e-05</td>\n",
        "      <td>0.00452747</td>\n",
        "      <td>0.00910626</td>\n",
        "      <td>360</td>\n",
        "      <td>55</td>\n",
        "      <td>27</td>\n",
        "      <td>0.022</td>\n",
        "      <td>5041</td>\n",
        "      <td>0.118944</td>\n",
        "      <td>1433</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.000461628</td>\n",
        "      <td>8.40034e-05</td>\n",
        "      <td>0.0103635</td>\n",
        "      <td>0.00754208</td>\n",
        "      <td>360</td>\n",
        "      <td>24</td>\n",
        "      <td>33</td>\n",
        "      <td>0</td>\n",
        "      <td>2976</td>\n",
        "      <td>0.0383313</td>\n",
        "      <td>1481</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.73</td>\n",
        "      <td>0.00125651</td>\n",
        "      <td>1.43751e-06</td>\n",
        "      <td>0.0110837</td>\n",
        "      <td>0.0150732</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>16</td>\n",
        "      <td>0.001</td>\n",
        "      <td>173911</td>\n",
        "      <td>0.0768373</td>\n",
        "      <td>1451</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.9</td>\n",
        "      <td>0.000539401</td>\n",
        "      <td>9.44571e-05</td>\n",
        "      <td>0.0110835</td>\n",
        "      <td>0.0122479</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>20</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2646</td>\n",
        "      <td>0.0294025</td>\n",
        "      <td>1340</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.62</td>\n",
        "      <td>0.000672772</td>\n",
        "      <td>0.000111701</td>\n",
        "      <td>0.00696621</td>\n",
        "      <td>0.0111265</td>\n",
        "      <td>360</td>\n",
        "      <td>35</td>\n",
        "      <td>22</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2238</td>\n",
        "      <td>0.0736992</td>\n",
        "      <td>1345</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.97</td>\n",
        "      <td>0.00062853</td>\n",
        "      <td>7.16857e-05</td>\n",
        "      <td>0.0137779</td>\n",
        "      <td>0.0140527</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>17</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3487</td>\n",
        "      <td>0.0667674</td>\n",
        "      <td>1387</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.85</td>\n",
        "      <td>0.000280788</td>\n",
        "      <td>0.000136635</td>\n",
        "      <td>0.0193572</td>\n",
        "      <td>0.0225782</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>11</td>\n",
        "      <td>0</td>\n",
        "      <td>1829</td>\n",
        "      <td>0.0410306</td>\n",
        "      <td>1076</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Poland</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.31</td>\n",
        "      <td>0.0495477</td>\n",
        "      <td>0.000148537</td>\n",
        "      <td>0.0092018</td>\n",
        "      <td>0.00653995</td>\n",
        "      <td>360</td>\n",
        "      <td>27</td>\n",
        "      <td>38</td>\n",
        "      <td>0.05</td>\n",
        "      <td>1683</td>\n",
        "      <td>0.0501754</td>\n",
        "      <td>145</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.37</td>\n",
        "      <td>0.000571088</td>\n",
        "      <td>0.000426116</td>\n",
        "      <td>0.00951326</td>\n",
        "      <td>0.00651722</td>\n",
        "      <td>360</td>\n",
        "      <td>26</td>\n",
        "      <td>38</td>\n",
        "      <td>0.001</td>\n",
        "      <td>586</td>\n",
        "      <td>0.0137591</td>\n",
        "      <td>407</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.19</td>\n",
        "      <td>0.0181754</td>\n",
        "      <td>8.13604e-05</td>\n",
        "      <td>0.00737748</td>\n",
        "      <td>0.00601861</td>\n",
        "      <td>360</td>\n",
        "      <td>33</td>\n",
        "      <td>41</td>\n",
        "      <td>0.018</td>\n",
        "      <td>3072</td>\n",
        "      <td>0.0232144</td>\n",
        "      <td>1359</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.94</td>\n",
        "      <td>0.0200266</td>\n",
        "      <td>8.17437e-05</td>\n",
        "      <td>0.00802811</td>\n",
        "      <td>0.00396952</td>\n",
        "      <td>360</td>\n",
        "      <td>31</td>\n",
        "      <td>62</td>\n",
        "      <td>0.02</td>\n",
        "      <td>3058</td>\n",
        "      <td>0.0207976</td>\n",
        "      <td>1220</td>\n",
        "      <td>0 min 35 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.51</td>\n",
        "      <td>0.0180841</td>\n",
        "      <td>0.000212703</td>\n",
        "      <td>0.00539073</td>\n",
        "      <td>0.0100888</td>\n",
        "      <td>360</td>\n",
        "      <td>46</td>\n",
        "      <td>24</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1175</td>\n",
        "      <td>0.0392393</td>\n",
        "      <td>309</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>13Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.74</td>\n",
        "      <td>0.024292</td>\n",
        "      <td>1.41761e-05</td>\n",
        "      <td>0.00768771</td>\n",
        "      <td>0.010061</td>\n",
        "      <td>360</td>\n",
        "      <td>32</td>\n",
        "      <td>24</td>\n",
        "      <td>0.024</td>\n",
        "      <td>17635</td>\n",
        "      <td>0.0503937</td>\n",
        "      <td>284</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.000121157</td>\n",
        "      <td>0.000228581</td>\n",
        "      <td>0.0113694</td>\n",
        "      <td>0.0126733</td>\n",
        "      <td>360</td>\n",
        "      <td>21</td>\n",
        "      <td>19</td>\n",
        "      <td>0</td>\n",
        "      <td>1093</td>\n",
        "      <td>0.0393131</td>\n",
        "      <td>181</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.86</td>\n",
        "      <td>0.0177716</td>\n",
        "      <td>2.41664e-06</td>\n",
        "      <td>0.014823</td>\n",
        "      <td>0.0078363</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>31</td>\n",
        "      <td>0.018</td>\n",
        "      <td>103449</td>\n",
        "      <td>0.00848696</td>\n",
        "      <td>826</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>11Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.26</td>\n",
        "      <td>0.000684742</td>\n",
        "      <td>0.000234846</td>\n",
        "      <td>0.0134156</td>\n",
        "      <td>0.00569803</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>43</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1064</td>\n",
        "      <td>0.0060374</td>\n",
        "      <td>381</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>37974750</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.85</td>\n",
        "      <td>0.00288425</td>\n",
        "      <td>7.92993e-05</td>\n",
        "      <td>0.0118108</td>\n",
        "      <td>0.0062832</td>\n",
        "      <td>360</td>\n",
        "      <td>21</td>\n",
        "      <td>39</td>\n",
        "      <td>0.003</td>\n",
        "      <td>3152</td>\n",
        "      <td>0.0110812</td>\n",
        "      <td>206</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Kuwait</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>23May2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>4.15</td>\n",
        "      <td>0.00110697</td>\n",
        "      <td>0.000144267</td>\n",
        "      <td>0.0228629</td>\n",
        "      <td>0.00535382</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>46</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1732</td>\n",
        "      <td>0.0999481</td>\n",
        "      <td>1550</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24May2020</td>\n",
        "      <td>31May2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.000966336</td>\n",
        "      <td>0.000117077</td>\n",
        "      <td>0.0141223</td>\n",
        "      <td>0.0118761</td>\n",
        "      <td>360</td>\n",
        "      <td>17</td>\n",
        "      <td>21</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2135</td>\n",
        "      <td>0.02382</td>\n",
        "      <td>766</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jun2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.64</td>\n",
        "      <td>0.00396506</td>\n",
        "      <td>7.9409e-05</td>\n",
        "      <td>0.0143779</td>\n",
        "      <td>0.0223116</td>\n",
        "      <td>360</td>\n",
        "      <td>17</td>\n",
        "      <td>11</td>\n",
        "      <td>0.004</td>\n",
        "      <td>3148</td>\n",
        "      <td>0.0357433</td>\n",
        "      <td>183</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.73</td>\n",
        "      <td>0.00396506</td>\n",
        "      <td>7.9409e-05</td>\n",
        "      <td>0.0151952</td>\n",
        "      <td>0.0205587</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>12</td>\n",
        "      <td>0.004</td>\n",
        "      <td>3148</td>\n",
        "      <td>0.0309966</td>\n",
        "      <td>148</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.29</td>\n",
        "      <td>0.00025167</td>\n",
        "      <td>7.57979e-05</td>\n",
        "      <td>0.0220372</td>\n",
        "      <td>0.0169782</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>14</td>\n",
        "      <td>0</td>\n",
        "      <td>3298</td>\n",
        "      <td>0.029621</td>\n",
        "      <td>517</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.19</td>\n",
        "      <td>0.000957604</td>\n",
        "      <td>7.11105e-05</td>\n",
        "      <td>0.0205062</td>\n",
        "      <td>0.0171209</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>14</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3515</td>\n",
        "      <td>0.0113557</td>\n",
        "      <td>239</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>19Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.95</td>\n",
        "      <td>0.00046107</td>\n",
        "      <td>8.39739e-05</td>\n",
        "      <td>0.0180587</td>\n",
        "      <td>0.018984</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>13</td>\n",
        "      <td>0</td>\n",
        "      <td>2977</td>\n",
        "      <td>0.0158538</td>\n",
        "      <td>1483</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.08</td>\n",
        "      <td>0.00525984</td>\n",
        "      <td>1.42101e-05</td>\n",
        "      <td>0.0202531</td>\n",
        "      <td>0.0186371</td>\n",
        "      <td>360</td>\n",
        "      <td>12</td>\n",
        "      <td>13</td>\n",
        "      <td>0.005</td>\n",
        "      <td>17593</td>\n",
        "      <td>0.0158718</td>\n",
        "      <td>299</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.000900068</td>\n",
        "      <td>7.11105e-05</td>\n",
        "      <td>0.0179444</td>\n",
        "      <td>0.0218782</td>\n",
        "      <td>360</td>\n",
        "      <td>13</td>\n",
        "      <td>11</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3515</td>\n",
        "      <td>0.0184082</td>\n",
        "      <td>214</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>4137309</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.000160453</td>\n",
        "      <td>5.96004e-05</td>\n",
        "      <td>0.0217673</td>\n",
        "      <td>0.020952</td>\n",
        "      <td>360</td>\n",
        "      <td>11</td>\n",
        "      <td>11</td>\n",
        "      <td>0</td>\n",
        "      <td>4194</td>\n",
        "      <td>0.0195023</td>\n",
        "      <td>714</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.44</td>\n",
        "      <td>0.00029921</td>\n",
        "      <td>0.000230124</td>\n",
        "      <td>0.0244243</td>\n",
        "      <td>0.00978228</td>\n",
        "      <td>360</td>\n",
        "      <td>10</td>\n",
        "      <td>25</td>\n",
        "      <td>0</td>\n",
        "      <td>1086</td>\n",
        "      <td>0.106593</td>\n",
        "      <td>1799</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.00135436</td>\n",
        "      <td>0.000171596</td>\n",
        "      <td>0.0141467</td>\n",
        "      <td>0.0100062</td>\n",
        "      <td>360</td>\n",
        "      <td>17</td>\n",
        "      <td>24</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1456</td>\n",
        "      <td>0.0451384</td>\n",
        "      <td>1399</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.01</td>\n",
        "      <td>0.000121542</td>\n",
        "      <td>0.000104268</td>\n",
        "      <td>0.0136598</td>\n",
        "      <td>0.0134844</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>18</td>\n",
        "      <td>0</td>\n",
        "      <td>2397</td>\n",
        "      <td>0.0436007</td>\n",
        "      <td>1508</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.97</td>\n",
        "      <td>0.016606</td>\n",
        "      <td>0.000180997</td>\n",
        "      <td>0.0154271</td>\n",
        "      <td>0.015495</td>\n",
        "      <td>360</td>\n",
        "      <td>16</td>\n",
        "      <td>16</td>\n",
        "      <td>0.017</td>\n",
        "      <td>1381</td>\n",
        "      <td>0.0235409</td>\n",
        "      <td>1386</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.61</td>\n",
        "      <td>0.00384175</td>\n",
        "      <td>0.000301129</td>\n",
        "      <td>0.0133486</td>\n",
        "      <td>0.00793596</td>\n",
        "      <td>360</td>\n",
        "      <td>18</td>\n",
        "      <td>31</td>\n",
        "      <td>0.004</td>\n",
        "      <td>830</td>\n",
        "      <td>0.0155341</td>\n",
        "      <td>193</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.0179201</td>\n",
        "      <td>0.000181287</td>\n",
        "      <td>0.0113343</td>\n",
        "      <td>0.00812038</td>\n",
        "      <td>360</td>\n",
        "      <td>22</td>\n",
        "      <td>30</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1379</td>\n",
        "      <td>0.0190176</td>\n",
        "      <td>1548</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.34</td>\n",
        "      <td>0.000621804</td>\n",
        "      <td>0.00026136</td>\n",
        "      <td>0.00875826</td>\n",
        "      <td>0.00624668</td>\n",
        "      <td>360</td>\n",
        "      <td>28</td>\n",
        "      <td>40</td>\n",
        "      <td>0.001</td>\n",
        "      <td>956</td>\n",
        "      <td>0.0125609</td>\n",
        "      <td>1381</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.000658131</td>\n",
        "      <td>0.000283903</td>\n",
        "      <td>0.0105478</td>\n",
        "      <td>0.00602092</td>\n",
        "      <td>360</td>\n",
        "      <td>23</td>\n",
        "      <td>41</td>\n",
        "      <td>0.001</td>\n",
        "      <td>880</td>\n",
        "      <td>0.0129149</td>\n",
        "      <td>433</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jul2020</td>\n",
        "      <td>09Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.000248299</td>\n",
        "      <td>0.000187798</td>\n",
        "      <td>0.00659241</td>\n",
        "      <td>0.00410022</td>\n",
        "      <td>360</td>\n",
        "      <td>37</td>\n",
        "      <td>60</td>\n",
        "      <td>0</td>\n",
        "      <td>1331</td>\n",
        "      <td>0.0120675</td>\n",
        "      <td>1395</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Aug2020</td>\n",
        "      <td>20Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt  \\\n",
        "Country Phase                                                        \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269  SIR-F  1.46   \n",
        "        2nd    Past  13Apr2020  04May2020    81800269  SIR-F  0.69   \n",
        "        3rd    Past  05May2020  20May2020    81800269  SIR-F   1.4   \n",
        "        4th    Past  21May2020  02Jun2020    81800269  SIR-F  1.22   \n",
        "        5th    Past  03Jun2020  15Jun2020    81800269  SIR-F   1.1   \n",
        "        6th    Past  16Jun2020  28Jun2020    81800269  SIR-F  0.97   \n",
        "        7th    Past  29Jun2020  10Jul2020    81800269  SIR-F  0.94   \n",
        "        8th    Past  11Jul2020  23Jul2020    81800269  SIR-F  0.89   \n",
        "        9th    Past  24Jul2020  05Aug2020    81800269  SIR-F  1.11   \n",
        "        10th   Past  06Aug2020  20Aug2020    81800269  SIR-F  1.08   \n",
        "Guinea  1st    Past  03May2020  11May2020    12414318  SIR-F  1.54   \n",
        "        2nd    Past  12May2020  20May2020    12414318  SIR-F  0.48   \n",
        "        3rd    Past  21May2020  29May2020    12414318  SIR-F  1.36   \n",
        "        4th    Past  30May2020  10Jun2020    12414318  SIR-F  0.73   \n",
        "        5th    Past  11Jun2020  20Jun2020    12414318  SIR-F   0.9   \n",
        "        6th    Past  21Jun2020  08Jul2020    12414318  SIR-F  0.62   \n",
        "        7th    Past  09Jul2020  20Jul2020    12414318  SIR-F  0.97   \n",
        "        8th    Past  21Jul2020  01Aug2020    12414318  SIR-F  0.85   \n",
        "        9th    Past  02Aug2020  10Aug2020    12414318      -     -   \n",
        "        10th   Past  11Aug2020  20Aug2020    12414318      -     -   \n",
        "Poland  1st    Past  23Apr2020  08May2020    37974750  SIR-F  1.31   \n",
        "        2nd    Past  09May2020  20May2020    37974750  SIR-F  1.37   \n",
        "        3rd    Past  21May2020  04Jun2020    37974750  SIR-F  1.19   \n",
        "        4th    Past  05Jun2020  16Jun2020    37974750  SIR-F  1.94   \n",
        "        5th    Past  17Jun2020  30Jun2020    37974750  SIR-F  0.51   \n",
        "        6th    Past  01Jul2020  13Jul2020    37974750  SIR-F  0.74   \n",
        "        7th    Past  14Jul2020  24Jul2020    37974750  SIR-F  0.88   \n",
        "        8th    Past  25Jul2020  03Aug2020    37974750  SIR-F  1.86   \n",
        "        9th    Past  04Aug2020  11Aug2020    37974750  SIR-F  2.26   \n",
        "        10th   Past  12Aug2020  20Aug2020    37974750  SIR-F  1.85   \n",
        "Kuwait  1st    Past  11May2020  23May2020     4137309  SIR-F  4.15   \n",
        "        2nd    Past  24May2020  31May2020     4137309  SIR-F  1.18   \n",
        "        3rd    Past  01Jun2020  09Jun2020     4137309  SIR-F  0.64   \n",
        "        4th    Past  10Jun2020  21Jun2020     4137309  SIR-F  0.73   \n",
        "        5th    Past  22Jun2020  30Jun2020     4137309  SIR-F  1.29   \n",
        "        6th    Past  01Jul2020  08Jul2020     4137309  SIR-F  1.19   \n",
        "        7th    Past  09Jul2020  19Jul2020     4137309  SIR-F  0.95   \n",
        "        8th    Past  20Jul2020  28Jul2020     4137309  SIR-F  1.08   \n",
        "        9th    Past  29Jul2020  09Aug2020     4137309  SIR-F  0.82   \n",
        "        10th   Past  10Aug2020  20Aug2020     4137309  SIR-F  1.04   \n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360  SIR-F  2.44   \n",
        "        2nd    Past  15May2020  29May2020    15854360  SIR-F  1.39   \n",
        "        3rd    Past  30May2020  09Jun2020    15854360  SIR-F  1.01   \n",
        "        4th    Past  10Jun2020  19Jun2020    15854360  SIR-F  0.97   \n",
        "        5th    Past  20Jun2020  30Jun2020    15854360  SIR-F  1.61   \n",
        "        6th    Past  01Jul2020  10Jul2020    15854360  SIR-F  1.34   \n",
        "        7th    Past  11Jul2020  20Jul2020    15854360  SIR-F  1.34   \n",
        "        8th    Past  21Jul2020  29Jul2020    15854360  SIR-F  1.67   \n",
        "        9th    Past  30Jul2020  09Aug2020    15854360  SIR-F  1.54   \n",
        "        10th   Past  10Aug2020  20Aug2020    15854360      -     -   \n",
        "\n",
        "                     theta        kappa         rho       sigma  tau  \\\n",
        "Country Phase                                                          \n",
        "Iran    1st      0.0237009  0.000826423   0.0222615   0.0141092  360   \n",
        "        2nd      0.0354734  0.000558882   0.0183228   0.0249335  360   \n",
        "        3rd      0.0200553   0.00032938   0.0268567   0.0185179  360   \n",
        "        4th       0.019252  7.11253e-05   0.0251811   0.0201527  360   \n",
        "        5th    0.000175221  0.000614274   0.0204869   0.0180286  360   \n",
        "        6th    0.000833667  0.000927929   0.0206275   0.0204287  360   \n",
        "        7th      0.0488173  0.000518366   0.0232845   0.0229885  360   \n",
        "        8th      0.0266054   0.00158046   0.0254045   0.0261637  360   \n",
        "        9th      0.0823872  6.74045e-05   0.0276072    0.022655  360   \n",
        "        10th     0.0469406  0.000580026   0.0227679   0.0195311  360   \n",
        "Guinea  1st    0.000592029  0.000113606   0.0127711  0.00819379  360   \n",
        "        2nd      0.0215186  4.95875e-05  0.00452747  0.00910626  360   \n",
        "        3rd    0.000461628  8.40034e-05   0.0103635  0.00754208  360   \n",
        "        4th     0.00125651  1.43751e-06   0.0110837   0.0150732  360   \n",
        "        5th    0.000539401  9.44571e-05   0.0110835   0.0122479  360   \n",
        "        6th    0.000672772  0.000111701  0.00696621   0.0111265  360   \n",
        "        7th     0.00062853  7.16857e-05   0.0137779   0.0140527  360   \n",
        "        8th    0.000280788  0.000136635   0.0193572   0.0225782  360   \n",
        "        9th              -            -           -           -    -   \n",
        "        10th             -            -           -           -    -   \n",
        "Poland  1st      0.0495477  0.000148537   0.0092018  0.00653995  360   \n",
        "        2nd    0.000571088  0.000426116  0.00951326  0.00651722  360   \n",
        "        3rd      0.0181754  8.13604e-05  0.00737748  0.00601861  360   \n",
        "        4th      0.0200266  8.17437e-05  0.00802811  0.00396952  360   \n",
        "        5th      0.0180841  0.000212703  0.00539073   0.0100888  360   \n",
        "        6th       0.024292  1.41761e-05  0.00768771    0.010061  360   \n",
        "        7th    0.000121157  0.000228581   0.0113694   0.0126733  360   \n",
        "        8th      0.0177716  2.41664e-06    0.014823   0.0078363  360   \n",
        "        9th    0.000684742  0.000234846   0.0134156  0.00569803  360   \n",
        "        10th    0.00288425  7.92993e-05   0.0118108   0.0062832  360   \n",
        "Kuwait  1st     0.00110697  0.000144267   0.0228629  0.00535382  360   \n",
        "        2nd    0.000966336  0.000117077   0.0141223   0.0118761  360   \n",
        "        3rd     0.00396506   7.9409e-05   0.0143779   0.0223116  360   \n",
        "        4th     0.00396506   7.9409e-05   0.0151952   0.0205587  360   \n",
        "        5th     0.00025167  7.57979e-05   0.0220372   0.0169782  360   \n",
        "        6th    0.000957604  7.11105e-05   0.0205062   0.0171209  360   \n",
        "        7th     0.00046107  8.39739e-05   0.0180587    0.018984  360   \n",
        "        8th     0.00525984  1.42101e-05   0.0202531   0.0186371  360   \n",
        "        9th    0.000900068  7.11105e-05   0.0179444   0.0218782  360   \n",
        "        10th   0.000160453  5.96004e-05   0.0217673    0.020952  360   \n",
        "Senegal 1st     0.00029921  0.000230124   0.0244243  0.00978228  360   \n",
        "        2nd     0.00135436  0.000171596   0.0141467   0.0100062  360   \n",
        "        3rd    0.000121542  0.000104268   0.0136598   0.0134844  360   \n",
        "        4th       0.016606  0.000180997   0.0154271    0.015495  360   \n",
        "        5th     0.00384175  0.000301129   0.0133486  0.00793596  360   \n",
        "        6th      0.0179201  0.000181287   0.0113343  0.00812038  360   \n",
        "        7th    0.000621804   0.00026136  0.00875826  0.00624668  360   \n",
        "        8th    0.000658131  0.000283903   0.0105478  0.00602092  360   \n",
        "        9th    0.000248299  0.000187798  0.00659241  0.00410022  360   \n",
        "        10th             -            -           -           -    -   \n",
        "\n",
        "              1/beta [day] 1/gamma [day] alpha1 [-] 1/alpha2 [day]  \\\n",
        "Country Phase                                                        \n",
        "Iran    1st             11            17      0.024            302   \n",
        "        2nd             13            10      0.035            447   \n",
        "        3rd              9            13       0.02            759   \n",
        "        4th              9            12      0.019           3514   \n",
        "        5th             12            13          0            406   \n",
        "        6th             12            12      0.001            269   \n",
        "        7th             10            10      0.049            482   \n",
        "        8th              9             9      0.027            158   \n",
        "        9th              9            11      0.082           3708   \n",
        "        10th            10            12      0.047            431   \n",
        "Guinea  1st             19            30      0.001           2200   \n",
        "        2nd             55            27      0.022           5041   \n",
        "        3rd             24            33          0           2976   \n",
        "        4th             22            16      0.001         173911   \n",
        "        5th             22            20      0.001           2646   \n",
        "        6th             35            22      0.001           2238   \n",
        "        7th             18            17      0.001           3487   \n",
        "        8th             12            11          0           1829   \n",
        "        9th              -             -          -              -   \n",
        "        10th             -             -          -              -   \n",
        "Poland  1st             27            38       0.05           1683   \n",
        "        2nd             26            38      0.001            586   \n",
        "        3rd             33            41      0.018           3072   \n",
        "        4th             31            62       0.02           3058   \n",
        "        5th             46            24      0.018           1175   \n",
        "        6th             32            24      0.024          17635   \n",
        "        7th             21            19          0           1093   \n",
        "        8th             16            31      0.018         103449   \n",
        "        9th             18            43      0.001           1064   \n",
        "        10th            21            39      0.003           3152   \n",
        "Kuwait  1st             10            46      0.001           1732   \n",
        "        2nd             17            21      0.001           2135   \n",
        "        3rd             17            11      0.004           3148   \n",
        "        4th             16            12      0.004           3148   \n",
        "        5th             11            14          0           3298   \n",
        "        6th             12            14      0.001           3515   \n",
        "        7th             13            13          0           2977   \n",
        "        8th             12            13      0.005          17593   \n",
        "        9th             13            11      0.001           3515   \n",
        "        10th            11            11          0           4194   \n",
        "Senegal 1st             10            25          0           1086   \n",
        "        2nd             17            24      0.001           1456   \n",
        "        3rd             18            18          0           2397   \n",
        "        4th             16            16      0.017           1381   \n",
        "        5th             18            31      0.004            830   \n",
        "        6th             22            30      0.018           1379   \n",
        "        7th             28            40      0.001            956   \n",
        "        8th             23            41      0.001            880   \n",
        "        9th             37            60          0           1331   \n",
        "        10th             -             -          -              -   \n",
        "\n",
        "                    RMSLE Trials       Runtime  \n",
        "Country Phase                                   \n",
        "Iran    1st      0.194289   1592  1 min  0 sec  \n",
        "        2nd     0.0364471    163  0 min  5 sec  \n",
        "        3rd      0.016251   1287  0 min 50 sec  \n",
        "        4th     0.0230145    210  0 min  5 sec  \n",
        "        5th     0.0191158    472  0 min 15 sec  \n",
        "        6th     0.0230177   1380  1 min  0 sec  \n",
        "        7th     0.0176846    160  0 min  5 sec  \n",
        "        8th     0.0127269    112  0 min  5 sec  \n",
        "        9th    0.00662457    158  0 min  5 sec  \n",
        "        10th    0.0291439   1667  1 min  0 sec  \n",
        "Guinea  1st     0.0952794   1433  1 min  0 sec  \n",
        "        2nd      0.118944   1433  1 min  0 sec  \n",
        "        3rd     0.0383313   1481  1 min  0 sec  \n",
        "        4th     0.0768373   1451  1 min  0 sec  \n",
        "        5th     0.0294025   1340  1 min  0 sec  \n",
        "        6th     0.0736992   1345  1 min  0 sec  \n",
        "        7th     0.0667674   1387  1 min  0 sec  \n",
        "        8th     0.0410306   1076  0 min 30 sec  \n",
        "        9th             -      -             -  \n",
        "        10th            -      -             -  \n",
        "Poland  1st     0.0501754    145  0 min  5 sec  \n",
        "        2nd     0.0137591    407  0 min 10 sec  \n",
        "        3rd     0.0232144   1359  1 min  0 sec  \n",
        "        4th     0.0207976   1220  0 min 35 sec  \n",
        "        5th     0.0392393    309  0 min 10 sec  \n",
        "        6th     0.0503937    284  0 min 10 sec  \n",
        "        7th     0.0393131    181  0 min  5 sec  \n",
        "        8th    0.00848696    826  0 min 30 sec  \n",
        "        9th     0.0060374    381  0 min 10 sec  \n",
        "        10th    0.0110812    206  0 min  5 sec  \n",
        "Kuwait  1st     0.0999481   1550  1 min  0 sec  \n",
        "        2nd       0.02382    766  0 min 30 sec  \n",
        "        3rd     0.0357433    183  0 min  5 sec  \n",
        "        4th     0.0309966    148  0 min  5 sec  \n",
        "        5th      0.029621    517  0 min 15 sec  \n",
        "        6th     0.0113557    239  0 min  5 sec  \n",
        "        7th     0.0158538   1483  1 min  0 sec  \n",
        "        8th     0.0158718    299  0 min 10 sec  \n",
        "        9th     0.0184082    214  0 min  5 sec  \n",
        "        10th    0.0195023    714  0 min 20 sec  \n",
        "Senegal 1st      0.106593   1799  1 min  0 sec  \n",
        "        2nd     0.0451384   1399  1 min  0 sec  \n",
        "        3rd     0.0436007   1508  1 min  0 sec  \n",
        "        4th     0.0235409   1386  1 min  0 sec  \n",
        "        5th     0.0155341    193  0 min 10 sec  \n",
        "        6th     0.0190176   1548  1 min  0 sec  \n",
        "        7th     0.0125609   1381  1 min  0 sec  \n",
        "        8th     0.0129149    433  0 min 10 sec  \n",
        "        9th     0.0120675   1395  1 min  0 sec  \n",
        "        10th            -      -             -  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-03-28</td>\n",
        "      <td>Iran</td>\n",
        "      <td>0.0237009</td>\n",
        "      <td>0.000826423</td>\n",
        "      <td>0.0222615</td>\n",
        "      <td>0.0141092</td>\n",
        "      <td>0.024</td>\n",
        "      <td>302</td>\n",
        "      <td>11</td>\n",
        "      <td>17</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>57.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-03-29</td>\n",
        "      <td>Iran</td>\n",
        "      <td>0.0237009</td>\n",
        "      <td>0.000826423</td>\n",
        "      <td>0.0222615</td>\n",
        "      <td>0.0141092</td>\n",
        "      <td>0.024</td>\n",
        "      <td>302</td>\n",
        "      <td>11</td>\n",
        "      <td>17</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>57.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-03-30</td>\n",
        "      <td>Iran</td>\n",
        "      <td>0.0237009</td>\n",
        "      <td>0.000826423</td>\n",
        "      <td>0.0222615</td>\n",
        "      <td>0.0141092</td>\n",
        "      <td>0.024</td>\n",
        "      <td>302</td>\n",
        "      <td>11</td>\n",
        "      <td>17</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>57.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-03-31</td>\n",
        "      <td>Iran</td>\n",
        "      <td>0.0237009</td>\n",
        "      <td>0.000826423</td>\n",
        "      <td>0.0222615</td>\n",
        "      <td>0.0141092</td>\n",
        "      <td>0.024</td>\n",
        "      <td>302</td>\n",
        "      <td>11</td>\n",
        "      <td>17</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>57.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-04-01</td>\n",
        "      <td>Iran</td>\n",
        "      <td>0.0237009</td>\n",
        "      <td>0.000826423</td>\n",
        "      <td>0.0222615</td>\n",
        "      <td>0.0141092</td>\n",
        "      <td>0.024</td>\n",
        "      <td>302</td>\n",
        "      <td>11</td>\n",
        "      <td>17</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>57.41</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date Country      theta        kappa        rho      sigma alpha1 [-]  \\\n",
        "0 2020-03-28    Iran  0.0237009  0.000826423  0.0222615  0.0141092      0.024   \n",
        "1 2020-03-29    Iran  0.0237009  0.000826423  0.0222615  0.0141092      0.024   \n",
        "2 2020-03-30    Iran  0.0237009  0.000826423  0.0222615  0.0141092      0.024   \n",
        "3 2020-03-31    Iran  0.0237009  0.000826423  0.0222615  0.0141092      0.024   \n",
        "4 2020-04-01    Iran  0.0237009  0.000826423  0.0222615  0.0141092      0.024   \n",
        "\n",
        "  1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0            302           11            17  ...             2   \n",
        "1            302           11            17  ...             2   \n",
        "2            302           11            17  ...             2   \n",
        "3            302           11            17  ...             2   \n",
        "4            302           11            17  ...             2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  1                       1   \n",
        "1                        0                  1                       1   \n",
        "2                        0                  1                       1   \n",
        "3                        0                  1                       1   \n",
        "4                        0                  1                       1   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               2                                    0   \n",
        "1                               2                                    0   \n",
        "2                               2                                    0   \n",
        "3                               2                                    0   \n",
        "4                               2                                    0   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      1               0                0             57.41  \n",
        "1                      1               0                0             57.41  \n",
        "2                      1               0                0             57.41  \n",
        "3                      1               0                0             57.41  \n",
        "4                      1               0                0             57.41  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.88</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.93</td>\n",
        "      <td>1.41</td>\n",
        "      <td>1.85</td>\n",
        "      <td>0.77</td>\n",
        "      <td>0.75</td>\n",
        "      <td>1.54</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.88</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.93</td>\n",
        "      <td>1.41</td>\n",
        "      <td>1.85</td>\n",
        "      <td>0.77</td>\n",
        "      <td>0.75</td>\n",
        "      <td>1.54</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.88</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.93</td>\n",
        "      <td>1.41</td>\n",
        "      <td>1.85</td>\n",
        "      <td>0.77</td>\n",
        "      <td>0.75</td>\n",
        "      <td>1.54</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.88</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.93</td>\n",
        "      <td>1.41</td>\n",
        "      <td>1.85</td>\n",
        "      <td>0.77</td>\n",
        "      <td>0.75</td>\n",
        "      <td>1.54</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.88</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.85</td>\n",
        "      <td>1.08</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.38</td>\n",
        "      <td>1.04</td>\n",
        "      <td>0.93</td>\n",
        "      <td>1.41</td>\n",
        "      <td>1.85</td>\n",
        "      <td>0.77</td>\n",
        "      <td>0.75</td>\n",
        "      <td>1.54</td>\n",
        "      <td>1.14</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Austria  Bahrain  Guinea  Iran  Italy  Korea, South  Kuwait  \\\n",
        "Date                                                                      \n",
        "2020-08-16     0.88     1.24    0.85  1.08   1.14          1.38    1.04   \n",
        "2020-08-17     0.88     1.24    0.85  1.08   1.14          1.38    1.04   \n",
        "2020-08-18     0.88     1.24    0.85  1.08   1.14          1.38    1.04   \n",
        "2020-08-19     0.88     1.24    0.85  1.08   1.14          1.38    1.04   \n",
        "2020-08-20     0.88     1.24    0.85  1.08   1.14          1.38    1.04   \n",
        "\n",
        "Country     Mexico  Moldova  Poland  Portugal  Saudi Arabia  Senegal  \\\n",
        "Date                                                                   \n",
        "2020-08-16    0.93     1.41    1.85      0.77          0.75     1.54   \n",
        "2020-08-17    0.93     1.41    1.85      0.77          0.75     1.54   \n",
        "2020-08-18    0.93     1.41    1.85      0.77          0.75     1.54   \n",
        "2020-08-19    0.93     1.41    1.85      0.77          0.75     1.54   \n",
        "2020-08-20    0.93     1.41    1.85      0.77          0.75     1.54   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-16                  1.14  \n",
        "2020-08-17                  1.14  \n",
        "2020-08-18                  1.14  \n",
        "2020-08-19                  1.14  \n",
        "2020-08-20                  1.14  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.018441</td>\n",
        "      <td>0.029622</td>\n",
        "      <td>0.019357</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.021767</td>\n",
        "      <td>0.032618</td>\n",
        "      <td>0.012744</td>\n",
        "      <td>0.011811</td>\n",
        "      <td>0.00405</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006592</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.018441</td>\n",
        "      <td>0.029622</td>\n",
        "      <td>0.019357</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.021767</td>\n",
        "      <td>0.032618</td>\n",
        "      <td>0.012744</td>\n",
        "      <td>0.011811</td>\n",
        "      <td>0.00405</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006592</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.018441</td>\n",
        "      <td>0.029622</td>\n",
        "      <td>0.019357</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.021767</td>\n",
        "      <td>0.032618</td>\n",
        "      <td>0.012744</td>\n",
        "      <td>0.011811</td>\n",
        "      <td>0.00405</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006592</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.018441</td>\n",
        "      <td>0.029622</td>\n",
        "      <td>0.019357</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.021767</td>\n",
        "      <td>0.032618</td>\n",
        "      <td>0.012744</td>\n",
        "      <td>0.011811</td>\n",
        "      <td>0.00405</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006592</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.018441</td>\n",
        "      <td>0.029622</td>\n",
        "      <td>0.019357</td>\n",
        "      <td>0.022768</td>\n",
        "      <td>0.00543</td>\n",
        "      <td>0.016813</td>\n",
        "      <td>0.021767</td>\n",
        "      <td>0.032618</td>\n",
        "      <td>0.012744</td>\n",
        "      <td>0.011811</td>\n",
        "      <td>0.00405</td>\n",
        "      <td>0.011265</td>\n",
        "      <td>0.006592</td>\n",
        "      <td>0.011438</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Austria   Bahrain    Guinea      Iran    Italy  Korea, South  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.018441  0.029622  0.019357  0.022768  0.00543      0.016813   \n",
        "2020-08-17  0.018441  0.029622  0.019357  0.022768  0.00543      0.016813   \n",
        "2020-08-18  0.018441  0.029622  0.019357  0.022768  0.00543      0.016813   \n",
        "2020-08-19  0.018441  0.029622  0.019357  0.022768  0.00543      0.016813   \n",
        "2020-08-20  0.018441  0.029622  0.019357  0.022768  0.00543      0.016813   \n",
        "\n",
        "Country       Kuwait    Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                         \n",
        "2020-08-16  0.021767  0.032618  0.012744  0.011811   0.00405      0.011265   \n",
        "2020-08-17  0.021767  0.032618  0.012744  0.011811   0.00405      0.011265   \n",
        "2020-08-18  0.021767  0.032618  0.012744  0.011811   0.00405      0.011265   \n",
        "2020-08-19  0.021767  0.032618  0.012744  0.011811   0.00405      0.011265   \n",
        "2020-08-20  0.021767  0.032618  0.012744  0.011811   0.00405      0.011265   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-16  0.006592              0.011438  \n",
        "2020-08-17  0.006592              0.011438  \n",
        "2020-08-18  0.006592              0.011438  \n",
        "2020-08-19  0.006592              0.011438  \n",
        "2020-08-20  0.006592              0.011438  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.020989</td>\n",
        "      <td>0.023842</td>\n",
        "      <td>0.022578</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.020952</td>\n",
        "      <td>0.032039</td>\n",
        "      <td>0.008816</td>\n",
        "      <td>0.006283</td>\n",
        "      <td>0.005136</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.0041</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.020989</td>\n",
        "      <td>0.023842</td>\n",
        "      <td>0.022578</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.020952</td>\n",
        "      <td>0.032039</td>\n",
        "      <td>0.008816</td>\n",
        "      <td>0.006283</td>\n",
        "      <td>0.005136</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.0041</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.020989</td>\n",
        "      <td>0.023842</td>\n",
        "      <td>0.022578</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.020952</td>\n",
        "      <td>0.032039</td>\n",
        "      <td>0.008816</td>\n",
        "      <td>0.006283</td>\n",
        "      <td>0.005136</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.0041</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.020989</td>\n",
        "      <td>0.023842</td>\n",
        "      <td>0.022578</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.020952</td>\n",
        "      <td>0.032039</td>\n",
        "      <td>0.008816</td>\n",
        "      <td>0.006283</td>\n",
        "      <td>0.005136</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.0041</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.020989</td>\n",
        "      <td>0.023842</td>\n",
        "      <td>0.022578</td>\n",
        "      <td>0.019531</td>\n",
        "      <td>0.004581</td>\n",
        "      <td>0.012089</td>\n",
        "      <td>0.020952</td>\n",
        "      <td>0.032039</td>\n",
        "      <td>0.008816</td>\n",
        "      <td>0.006283</td>\n",
        "      <td>0.005136</td>\n",
        "      <td>0.014661</td>\n",
        "      <td>0.0041</td>\n",
        "      <td>0.010045</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Austria   Bahrain    Guinea      Iran     Italy  Korea, South  \\\n",
        "Date                                                                         \n",
        "2020-08-16  0.020989  0.023842  0.022578  0.019531  0.004581      0.012089   \n",
        "2020-08-17  0.020989  0.023842  0.022578  0.019531  0.004581      0.012089   \n",
        "2020-08-18  0.020989  0.023842  0.022578  0.019531  0.004581      0.012089   \n",
        "2020-08-19  0.020989  0.023842  0.022578  0.019531  0.004581      0.012089   \n",
        "2020-08-20  0.020989  0.023842  0.022578  0.019531  0.004581      0.012089   \n",
        "\n",
        "Country       Kuwait    Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                         \n",
        "2020-08-16  0.020952  0.032039  0.008816  0.006283  0.005136      0.014661   \n",
        "2020-08-17  0.020952  0.032039  0.008816  0.006283  0.005136      0.014661   \n",
        "2020-08-18  0.020952  0.032039  0.008816  0.006283  0.005136      0.014661   \n",
        "2020-08-19  0.020952  0.032039  0.008816  0.006283  0.005136      0.014661   \n",
        "2020-08-20  0.020952  0.032039  0.008816  0.006283  0.005136      0.014661   \n",
        "\n",
        "Country     Senegal  United Arab Emirates  \n",
        "Date                                       \n",
        "2020-08-16   0.0041              0.010045  \n",
        "2020-08-17   0.0041              0.010045  \n",
        "2020-08-18   0.0041              0.010045  \n",
        "2020-08-19   0.0041              0.010045  \n",
        "2020-08-20   0.0041              0.010045  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000099</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.001069</td>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000099</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.001069</td>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000099</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.001069</td>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000099</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.001069</td>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000099</td>\n",
        "      <td>0.000137</td>\n",
        "      <td>0.00058</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.00006</td>\n",
        "      <td>0.001069</td>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.000021</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Austria   Bahrain    Guinea     Iran     Italy  Korea, South  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.000024  0.000099  0.000137  0.00058  0.000002      0.000098   \n",
        "2020-08-17  0.000024  0.000099  0.000137  0.00058  0.000002      0.000098   \n",
        "2020-08-18  0.000024  0.000099  0.000137  0.00058  0.000002      0.000098   \n",
        "2020-08-19  0.000024  0.000099  0.000137  0.00058  0.000002      0.000098   \n",
        "2020-08-20  0.000024  0.000099  0.000137  0.00058  0.000002      0.000098   \n",
        "\n",
        "Country      Kuwait    Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.00006  0.001069  0.000024  0.000079  0.000087      0.000041   \n",
        "2020-08-17  0.00006  0.001069  0.000024  0.000079  0.000087      0.000041   \n",
        "2020-08-18  0.00006  0.001069  0.000024  0.000079  0.000087      0.000041   \n",
        "2020-08-19  0.00006  0.001069  0.000024  0.000079  0.000087      0.000041   \n",
        "2020-08-20  0.00006  0.001069  0.000024  0.000079  0.000087      0.000041   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-16  0.000188              0.000021  \n",
        "2020-08-17  0.000188              0.000021  \n",
        "2020-08-18  0.000188              0.000021  \n",
        "2020-08-19  0.000188              0.000021  \n",
        "2020-08-20  0.000188              0.000021  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Korea, South</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Mexico</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Saudi Arabia</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000673</td>\n",
        "      <td>0.000011</td>\n",
        "      <td>0.000281</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.00016</td>\n",
        "      <td>0.05339</td>\n",
        "      <td>0.018455</td>\n",
        "      <td>0.002884</td>\n",
        "      <td>0.000666</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>0.000673</td>\n",
        "      <td>0.000011</td>\n",
        "      <td>0.000281</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.00016</td>\n",
        "      <td>0.05339</td>\n",
        "      <td>0.018455</td>\n",
        "      <td>0.002884</td>\n",
        "      <td>0.000666</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-18</th>\n",
        "      <td>0.000673</td>\n",
        "      <td>0.000011</td>\n",
        "      <td>0.000281</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.00016</td>\n",
        "      <td>0.05339</td>\n",
        "      <td>0.018455</td>\n",
        "      <td>0.002884</td>\n",
        "      <td>0.000666</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-19</th>\n",
        "      <td>0.000673</td>\n",
        "      <td>0.000011</td>\n",
        "      <td>0.000281</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.00016</td>\n",
        "      <td>0.05339</td>\n",
        "      <td>0.018455</td>\n",
        "      <td>0.002884</td>\n",
        "      <td>0.000666</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-20</th>\n",
        "      <td>0.000673</td>\n",
        "      <td>0.000011</td>\n",
        "      <td>0.000281</td>\n",
        "      <td>0.046941</td>\n",
        "      <td>0.03575</td>\n",
        "      <td>0.000435</td>\n",
        "      <td>0.00016</td>\n",
        "      <td>0.05339</td>\n",
        "      <td>0.018455</td>\n",
        "      <td>0.002884</td>\n",
        "      <td>0.000666</td>\n",
        "      <td>0.022279</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000677</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Austria   Bahrain    Guinea      Iran    Italy  Korea, South  \\\n",
        "Date                                                                        \n",
        "2020-08-16  0.000673  0.000011  0.000281  0.046941  0.03575      0.000435   \n",
        "2020-08-17  0.000673  0.000011  0.000281  0.046941  0.03575      0.000435   \n",
        "2020-08-18  0.000673  0.000011  0.000281  0.046941  0.03575      0.000435   \n",
        "2020-08-19  0.000673  0.000011  0.000281  0.046941  0.03575      0.000435   \n",
        "2020-08-20  0.000673  0.000011  0.000281  0.046941  0.03575      0.000435   \n",
        "\n",
        "Country      Kuwait   Mexico   Moldova    Poland  Portugal  Saudi Arabia  \\\n",
        "Date                                                                       \n",
        "2020-08-16  0.00016  0.05339  0.018455  0.002884  0.000666      0.022279   \n",
        "2020-08-17  0.00016  0.05339  0.018455  0.002884  0.000666      0.022279   \n",
        "2020-08-18  0.00016  0.05339  0.018455  0.002884  0.000666      0.022279   \n",
        "2020-08-19  0.00016  0.05339  0.018455  0.002884  0.000666      0.022279   \n",
        "2020-08-20  0.00016  0.05339  0.018455  0.002884  0.000666      0.022279   \n",
        "\n",
        "Country      Senegal  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-16  0.000248              0.000677  \n",
        "2020-08-17  0.000248              0.000677  \n",
        "2020-08-18  0.000248              0.000677  \n",
        "2020-08-19  0.000248              0.000677  \n",
        "2020-08-20  0.000248              0.000677  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 4630 entries, 0 to 4811\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 4630 non-null   datetime64[ns]\n",
        " 1   Country                              4630 non-null   object        \n",
        " 2   Rt                                   4630 non-null   float64       \n",
        " 3   theta                                4630 non-null   float64       \n",
        " 4   kappa                                4630 non-null   float64       \n",
        " 5   rho                                  4630 non-null   float64       \n",
        " 6   sigma                                4630 non-null   float64       \n",
        " 7   School_closing                       4630 non-null   int64         \n",
        " 8   Workplace_closing                    4630 non-null   int64         \n",
        " 9   Cancel_events                        4630 non-null   int64         \n",
        " 10  Gatherings_restrictions              4630 non-null   int64         \n",
        " 11  Transport_closing                    4630 non-null   int64         \n",
        " 12  Stay_home_restrictions               4630 non-null   int64         \n",
        " 13  Internal_movement_restrictions       4630 non-null   int64         \n",
        " 14  International_movement_restrictions  4630 non-null   int64         \n",
        " 15  Information_campaigns                4630 non-null   int64         \n",
        " 16  Testing_policy                       4630 non-null   int64         \n",
        " 17  Contact_tracing                      4630 non-null   int64         \n",
        " 18  Stringency_index                     4630 non-null   float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 723.4+ KB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col0,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col1,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col1,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col0,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col11{\n",
        "            background-color:  #ebe6f2;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col0,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col7{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col0{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col0{\n",
        "            background-color:  #efe9f3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col0,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col4{\n",
        "            background-color:  #d2d2e7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col0,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col3{\n",
        "            background-color:  #76aad0;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col0{\n",
        "            background-color:  #d3d4e7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col0{\n",
        "            background-color:  #4c99c5;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col0{\n",
        "            background-color:  #6da6cd;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col0{\n",
        "            background-color:  #4094c3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col1,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col0{\n",
        "            background-color:  #71a8ce;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col0{\n",
        "            background-color:  #81aed2;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col0,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col13{\n",
        "            background-color:  #ced0e6;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col0{\n",
        "            background-color:  #c5cce3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col0{\n",
        "            background-color:  #cdd0e5;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col0{\n",
        "            background-color:  #4a98c5;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col1{\n",
        "            background-color:  #e3e0ee;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col1{\n",
        "            background-color:  #fef6fa;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col1,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col10{\n",
        "            background-color:  #e0deed;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col1,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col6{\n",
        "            background-color:  #78abd0;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col1{\n",
        "            background-color:  #84b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col1{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col1,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col1,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col7{\n",
        "            background-color:  #f0eaf4;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col1{\n",
        "            background-color:  #91b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col1{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col1{\n",
        "            background-color:  #eee8f3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col1{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col1{\n",
        "            background-color:  #86b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col1{\n",
        "            background-color:  #c0c9e2;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col4{\n",
        "            background-color:  #9fbad9;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col4{\n",
        "            background-color:  #c6cce3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col2{\n",
        "            background-color:  #8eb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col4{\n",
        "            background-color:  #c8cde4;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col2{\n",
        "            background-color:  #69a5cc;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col2{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col2{\n",
        "            background-color:  #79abd0;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col2{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col2,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col7{\n",
        "            background-color:  #c4cbe3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col2{\n",
        "            background-color:  #d9d8ea;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col2{\n",
        "            background-color:  #eae6f1;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col2{\n",
        "            background-color:  #dad9ea;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col2{\n",
        "            background-color:  #549cc7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col3{\n",
        "            background-color:  #0872b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col3{\n",
        "            background-color:  #e7e3f0;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col3{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col13{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col10{\n",
        "            background-color:  #5c9fc9;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col12{\n",
        "            background-color:  #93b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col3{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col3,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col14{\n",
        "            background-color:  #d4d4e8;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col3{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col3{\n",
        "            background-color:  #83afd3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col4{\n",
        "            background-color:  #d2d3e7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col7{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col4{\n",
        "            background-color:  #dddbec;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col4,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col15{\n",
        "            background-color:  #d1d2e6;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col4{\n",
        "            background-color:  #f4eef6;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col7{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col5,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col8{\n",
        "            background-color:  #4295c3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col5{\n",
        "            background-color:  #bbc7e0;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col5{\n",
        "            background-color:  #a9bfdc;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col5{\n",
        "            background-color:  #b3c3de;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col5{\n",
        "            background-color:  #f8f1f8;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col5{\n",
        "            background-color:  #b5c4df;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col5{\n",
        "            background-color:  #7bacd1;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col7,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col6{\n",
        "            background-color:  #99b8d8;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col6{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col6{\n",
        "            background-color:  #0a73b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col6{\n",
        "            background-color:  #2c89bd;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col6{\n",
        "            background-color:  #96b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col6,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col9{\n",
        "            background-color:  #dedcec;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col6{\n",
        "            background-color:  #cacee5;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col6{\n",
        "            background-color:  #056ba7;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col7{\n",
        "            background-color:  #a7bddb;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col7{\n",
        "            background-color:  #7eadd1;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col7{\n",
        "            background-color:  #73a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col9,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col8,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col9{\n",
        "            background-color:  #1c7fb8;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col10,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col8{\n",
        "            background-color:  #3b92c1;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col8{\n",
        "            background-color:  #569dc8;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col8{\n",
        "            background-color:  #97b7d7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col8{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col9{\n",
        "            background-color:  #056aa6;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col9{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col9{\n",
        "            background-color:  #ede8f3;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col9{\n",
        "            background-color:  #045c90;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col11,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col10{\n",
        "            background-color:  #056dac;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col10{\n",
        "            background-color:  #bfc9e1;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col10{\n",
        "            background-color:  #04598c;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col12,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col11{\n",
        "            background-color:  #4897c4;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col11{\n",
        "            background-color:  #e6e2ef;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col14,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col11{\n",
        "            background-color:  #dfddec;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col11{\n",
        "            background-color:  #045d92;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col13,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col12{\n",
        "            background-color:  #b8c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col12{\n",
        "            background-color:  #c2cbe2;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col16,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col12{\n",
        "            background-color:  #197db7;\n",
        "            color:  #000000;\n",
        "        }#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col15,#T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col13{\n",
        "            background-color:  #67a4cc;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0a\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col1\" class=\"data row0 col1\" >-0.213747</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col2\" class=\"data row0 col2\" >-0.043703</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col3\" class=\"data row0 col3\" >0.531176</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col4\" class=\"data row0 col4\" >-0.246151</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col5\" class=\"data row0 col5\" >-0.058134</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col6\" class=\"data row0 col6\" >0.291086</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col7\" class=\"data row0 col7\" >-0.068410</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col8\" class=\"data row0 col8\" >0.412392</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col9\" class=\"data row0 col9\" >0.319222</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col10\" class=\"data row0 col10\" >0.446917</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col11\" class=\"data row0 col11\" >0.308925</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col12\" class=\"data row0 col12\" >0.253131</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col13\" class=\"data row0 col13\" >-0.038573</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col14\" class=\"data row0 col14\" >-0.000219</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col15\" class=\"data row0 col15\" >-0.032679</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow0_col16\" class=\"data row0 col16\" >0.415935</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col0\" class=\"data row1 col0\" >-0.213747</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col2\" class=\"data row1 col2\" >-0.164920</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col3\" class=\"data row1 col3\" >-0.384213</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col4\" class=\"data row1 col4\" >-0.151930</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col5\" class=\"data row1 col5\" >0.287268</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col6\" class=\"data row1 col6\" >0.309975</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col7\" class=\"data row1 col7\" >0.241509</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col8\" class=\"data row1 col8\" >-0.398420</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col9\" class=\"data row1 col9\" >-0.258199</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col10\" class=\"data row1 col10\" >0.198464</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col11\" class=\"data row1 col11\" >0.031980</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col12\" class=\"data row1 col12\" >-0.239628</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col13\" class=\"data row1 col13\" >0.162626</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col14\" class=\"data row1 col14\" >-0.251986</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col15\" class=\"data row1 col15\" >0.240602</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow1_col16\" class=\"data row1 col16\" >0.017334</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col0\" class=\"data row2 col0\" >-0.043703</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col1\" class=\"data row2 col1\" >-0.164920</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col3\" class=\"data row2 col3\" >0.151331</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col4\" class=\"data row2 col4\" >0.151502</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col5\" class=\"data row2 col5\" >-0.008831</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col6\" class=\"data row2 col6\" >0.209383</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col7\" class=\"data row2 col7\" >-0.013747</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col8\" class=\"data row2 col8\" >0.328767</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col9\" class=\"data row2 col9\" >0.473763</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col10\" class=\"data row2 col10\" >0.282029</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col11\" class=\"data row2 col11\" >0.508086</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col12\" class=\"data row2 col12\" >0.005002</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col13\" class=\"data row2 col13\" >-0.104149</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col14\" class=\"data row2 col14\" >-0.210632</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col15\" class=\"data row2 col15\" >-0.113836</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow2_col16\" class=\"data row2 col16\" >0.391581</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col0\" class=\"data row3 col0\" >0.531176</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col1\" class=\"data row3 col1\" >-0.384213</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col2\" class=\"data row3 col2\" >0.151331</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col4\" class=\"data row3 col4\" >0.637006</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col5\" class=\"data row3 col5\" >-0.194037</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col6\" class=\"data row3 col6\" >0.130557</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col7\" class=\"data row3 col7\" >-0.101041</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col8\" class=\"data row3 col8\" >0.292499</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col9\" class=\"data row3 col9\" >0.341860</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col10\" class=\"data row3 col10\" >0.292601</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col11\" class=\"data row3 col11\" >0.371458</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col12\" class=\"data row3 col12\" >0.194473</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col13\" class=\"data row3 col13\" >-0.162792</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col14\" class=\"data row3 col14\" >-0.074425</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col15\" class=\"data row3 col15\" >-0.321801</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow3_col16\" class=\"data row3 col16\" >0.249299</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col0\" class=\"data row4 col0\" >-0.246151</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col1\" class=\"data row4 col1\" >-0.151930</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col2\" class=\"data row4 col2\" >0.151502</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col3\" class=\"data row4 col3\" >0.637006</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col5\" class=\"data row4 col5\" >-0.162520</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col6\" class=\"data row4 col6\" >-0.058890</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col7\" class=\"data row4 col7\" >-0.047831</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col8\" class=\"data row4 col8\" >-0.060277</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col9\" class=\"data row4 col9\" >0.058522</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col10\" class=\"data row4 col10\" >-0.011675</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col11\" class=\"data row4 col11\" >0.149990</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col12\" class=\"data row4 col12\" >-0.005531</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col13\" class=\"data row4 col13\" >-0.126270</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col14\" class=\"data row4 col14\" >-0.053548</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col15\" class=\"data row4 col15\" >-0.296636</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow4_col16\" class=\"data row4 col16\" >-0.074247</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col0\" class=\"data row5 col0\" >-0.058134</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col1\" class=\"data row5 col1\" >0.287268</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col2\" class=\"data row5 col2\" >-0.008831</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col3\" class=\"data row5 col3\" >-0.194037</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col4\" class=\"data row5 col4\" >-0.162520</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col6\" class=\"data row5 col6\" >0.140321</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col7\" class=\"data row5 col7\" >0.439197</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col8\" class=\"data row5 col8\" >0.032205</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col9\" class=\"data row5 col9\" >0.041150</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col10\" class=\"data row5 col10\" >0.251503</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col11\" class=\"data row5 col11\" >0.113741</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col12\" class=\"data row5 col12\" >0.075879</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col13\" class=\"data row5 col13\" >-0.040026</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col14\" class=\"data row5 col14\" >-0.331121</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col15\" class=\"data row5 col15\" >0.064234</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow5_col16\" class=\"data row5 col16\" >0.277509</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col0\" class=\"data row6 col0\" >0.291086</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col1\" class=\"data row6 col1\" >0.309975</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col2\" class=\"data row6 col2\" >0.209383</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col3\" class=\"data row6 col3\" >0.130557</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col4\" class=\"data row6 col4\" >-0.058890</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col5\" class=\"data row6 col5\" >0.140321</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col7\" class=\"data row6 col7\" >0.170573</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col8\" class=\"data row6 col8\" >0.285450</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col9\" class=\"data row6 col9\" >0.573175</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col10\" class=\"data row6 col10\" >0.630472</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col11\" class=\"data row6 col11\" >0.508708</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col12\" class=\"data row6 col12\" >0.183198</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col13\" class=\"data row6 col13\" >-0.037804</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col14\" class=\"data row6 col14\" >-0.133537</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col15\" class=\"data row6 col15\" >-0.024482</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow6_col16\" class=\"data row6 col16\" >0.692313</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col0\" class=\"data row7 col0\" >-0.068410</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col1\" class=\"data row7 col1\" >0.241509</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col2\" class=\"data row7 col2\" >-0.013747</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col3\" class=\"data row7 col3\" >-0.101041</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col4\" class=\"data row7 col4\" >-0.047831</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col5\" class=\"data row7 col5\" >0.439197</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col6\" class=\"data row7 col6\" >0.170573</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col8\" class=\"data row7 col8\" >0.121438</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col9\" class=\"data row7 col9\" >0.059279</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col10\" class=\"data row7 col10\" >0.263597</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col11\" class=\"data row7 col11\" >0.138958</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col12\" class=\"data row7 col12\" >0.003505</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col13\" class=\"data row7 col13\" >-0.036134</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col14\" class=\"data row7 col14\" >-0.251360</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col15\" class=\"data row7 col15\" >-0.047669</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow7_col16\" class=\"data row7 col16\" >0.305904</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col0\" class=\"data row8 col0\" >0.412392</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col1\" class=\"data row8 col1\" >-0.398420</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col2\" class=\"data row8 col2\" >0.328767</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col3\" class=\"data row8 col3\" >0.292499</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col4\" class=\"data row8 col4\" >-0.060277</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col5\" class=\"data row8 col5\" >0.032205</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col6\" class=\"data row8 col6\" >0.285450</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col7\" class=\"data row8 col7\" >0.121438</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col9\" class=\"data row8 col9\" >0.567998</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col10\" class=\"data row8 col10\" >0.464387</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col11\" class=\"data row8 col11\" >0.383509</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col12\" class=\"data row8 col12\" >0.440584</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col13\" class=\"data row8 col13\" >-0.004659</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col14\" class=\"data row8 col14\" >0.175615</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col15\" class=\"data row8 col15\" >-0.052524</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow8_col16\" class=\"data row8 col16\" >0.682145</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col0\" class=\"data row9 col0\" >0.319222</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col1\" class=\"data row9 col1\" >-0.258199</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col2\" class=\"data row9 col2\" >0.473763</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col3\" class=\"data row9 col3\" >0.341860</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col4\" class=\"data row9 col4\" >0.058522</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col5\" class=\"data row9 col5\" >0.041150</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col6\" class=\"data row9 col6\" >0.573175</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col7\" class=\"data row9 col7\" >0.059279</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col8\" class=\"data row9 col8\" >0.567998</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col10\" class=\"data row9 col10\" >0.566879</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col11\" class=\"data row9 col11\" >0.696074</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col12\" class=\"data row9 col12\" >0.401949</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col13\" class=\"data row9 col13\" >-0.233757</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col14\" class=\"data row9 col14\" >-0.043582</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col15\" class=\"data row9 col15\" >-0.130879</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow9_col16\" class=\"data row9 col16\" >0.805227</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col0\" class=\"data row10 col0\" >0.446917</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col1\" class=\"data row10 col1\" >0.198464</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col2\" class=\"data row10 col2\" >0.282029</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col3\" class=\"data row10 col3\" >0.292601</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col4\" class=\"data row10 col4\" >-0.011675</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col5\" class=\"data row10 col5\" >0.251503</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col6\" class=\"data row10 col6\" >0.630472</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col7\" class=\"data row10 col7\" >0.263597</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col8\" class=\"data row10 col8\" >0.464387</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col9\" class=\"data row10 col9\" >0.566879</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col11\" class=\"data row10 col11\" >0.670059</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col12\" class=\"data row10 col12\" >0.368463</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col13\" class=\"data row10 col13\" >0.024874</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col14\" class=\"data row10 col14\" >-0.151774</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col15\" class=\"data row10 col15\" >-0.052282</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow10_col16\" class=\"data row10 col16\" >0.827174</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col0\" class=\"data row11 col0\" >0.308925</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col1\" class=\"data row11 col1\" >0.031980</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col2\" class=\"data row11 col2\" >0.508086</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col3\" class=\"data row11 col3\" >0.371458</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col4\" class=\"data row11 col4\" >0.149990</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col5\" class=\"data row11 col5\" >0.113741</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col6\" class=\"data row11 col6\" >0.508708</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col7\" class=\"data row11 col7\" >0.138958</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col8\" class=\"data row11 col8\" >0.383509</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col9\" class=\"data row11 col9\" >0.696074</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col10\" class=\"data row11 col10\" >0.670059</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col12\" class=\"data row11 col12\" >0.423459</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col13\" class=\"data row11 col13\" >-0.184363</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col14\" class=\"data row11 col14\" >-0.138439</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col15\" class=\"data row11 col15\" >-0.215580</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow11_col16\" class=\"data row11 col16\" >0.799112</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col0\" class=\"data row12 col0\" >0.253131</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col1\" class=\"data row12 col1\" >-0.239628</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col2\" class=\"data row12 col2\" >0.005002</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col3\" class=\"data row12 col3\" >0.194473</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col4\" class=\"data row12 col4\" >-0.005531</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col5\" class=\"data row12 col5\" >0.075879</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col6\" class=\"data row12 col6\" >0.183198</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col7\" class=\"data row12 col7\" >0.003505</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col8\" class=\"data row12 col8\" >0.440584</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col9\" class=\"data row12 col9\" >0.401949</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col10\" class=\"data row12 col10\" >0.368463</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col11\" class=\"data row12 col11\" >0.423459</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col13\" class=\"data row12 col13\" >0.050447</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col14\" class=\"data row12 col14\" >0.195851</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col15\" class=\"data row12 col15\" >0.008889</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow12_col16\" class=\"data row12 col16\" >0.578718</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col0\" class=\"data row13 col0\" >-0.038573</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col1\" class=\"data row13 col1\" >0.162626</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col2\" class=\"data row13 col2\" >-0.104149</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col3\" class=\"data row13 col3\" >-0.162792</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col4\" class=\"data row13 col4\" >-0.126270</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col5\" class=\"data row13 col5\" >-0.040026</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col6\" class=\"data row13 col6\" >-0.037804</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col7\" class=\"data row13 col7\" >-0.036134</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col8\" class=\"data row13 col8\" >-0.004659</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col9\" class=\"data row13 col9\" >-0.233757</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col10\" class=\"data row13 col10\" >0.024874</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col11\" class=\"data row13 col11\" >-0.184363</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col12\" class=\"data row13 col12\" >0.050447</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col14\" class=\"data row13 col14\" >0.341428</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col15\" class=\"data row13 col15\" >0.337448</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow13_col16\" class=\"data row13 col16\" >-0.039217</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col0\" class=\"data row14 col0\" >-0.000219</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col1\" class=\"data row14 col1\" >-0.251986</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col2\" class=\"data row14 col2\" >-0.210632</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col3\" class=\"data row14 col3\" >-0.074425</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col4\" class=\"data row14 col4\" >-0.053548</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col5\" class=\"data row14 col5\" >-0.331121</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col6\" class=\"data row14 col6\" >-0.133537</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col7\" class=\"data row14 col7\" >-0.251360</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col8\" class=\"data row14 col8\" >0.175615</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col9\" class=\"data row14 col9\" >-0.043582</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col10\" class=\"data row14 col10\" >-0.151774</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col11\" class=\"data row14 col11\" >-0.138439</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col12\" class=\"data row14 col12\" >0.195851</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col13\" class=\"data row14 col13\" >0.341428</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col15\" class=\"data row14 col15\" >0.418933</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow14_col16\" class=\"data row14 col16\" >-0.074138</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col0\" class=\"data row15 col0\" >-0.032679</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col1\" class=\"data row15 col1\" >0.240602</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col2\" class=\"data row15 col2\" >-0.113836</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col3\" class=\"data row15 col3\" >-0.321801</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col4\" class=\"data row15 col4\" >-0.296636</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col5\" class=\"data row15 col5\" >0.064234</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col6\" class=\"data row15 col6\" >-0.024482</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col7\" class=\"data row15 col7\" >-0.047669</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col8\" class=\"data row15 col8\" >-0.052524</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col9\" class=\"data row15 col9\" >-0.130879</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col10\" class=\"data row15 col10\" >-0.052282</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col11\" class=\"data row15 col11\" >-0.215580</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col12\" class=\"data row15 col12\" >0.008889</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col13\" class=\"data row15 col13\" >0.337448</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col14\" class=\"data row15 col14\" >0.418933</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow15_col16\" class=\"data row15 col16\" >-0.053714</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0alevel0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col0\" class=\"data row16 col0\" >0.415935</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col1\" class=\"data row16 col1\" >0.017334</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col2\" class=\"data row16 col2\" >0.391581</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col3\" class=\"data row16 col3\" >0.249299</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col4\" class=\"data row16 col4\" >-0.074247</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col5\" class=\"data row16 col5\" >0.277509</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col6\" class=\"data row16 col6\" >0.692313</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col7\" class=\"data row16 col7\" >0.305904</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col8\" class=\"data row16 col8\" >0.682145</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col9\" class=\"data row16 col9\" >0.805227</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col10\" class=\"data row16 col10\" >0.827174</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col11\" class=\"data row16 col11\" >0.799112</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col12\" class=\"data row16 col12\" >0.578718</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col13\" class=\"data row16 col13\" >-0.039217</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col14\" class=\"data row16 col14\" >-0.074138</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col15\" class=\"data row16 col15\" >-0.053714</td>\n",
        "                        <td id=\"T_13eca6fc_e2fb_11ea_bb6f_525400a49a0arow16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7fcd61de6550>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "zero-size array to reduction operation minimum which has no identity",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0mFigureCanvasBase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2191\u001b[0m                            else suppress())\n\u001b[1;32m   2192\u001b[0m                     \u001b[0;32mwith\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2193\u001b[0;31m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2194\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2195\u001b[0m                     bbox_inches = self.figure.get_tightbbox(\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1863\u001b[0;31m             mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   1864\u001b[0m                 renderer, self, artists, self.suppressComposite)\n\u001b[1;32m   1865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    409\u001b[0m                          \u001b[0;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m                 **kwargs)\n\u001b[0;32m--> 411\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2746\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2747\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2748\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2749\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2750\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    929\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_sizes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m         \u001b[0mCollection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    383\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m                 \u001b[0mcombined_transform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 385\u001b[0;31m             \u001b[0mextents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpaths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_extents\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined_transform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m             if (extents.width < self.figure.bbox.width\n\u001b[1;32m    387\u001b[0m                     and extents.height < self.figure.bbox.height):\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/path.py\u001b[0m in \u001b[0;36mget_extents\u001b[0;34m(self, transform, **kwargs)\u001b[0m\n\u001b[1;32m    601\u001b[0m                 \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mdzeros\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m             \u001b[0mxys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mBbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    604\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    605\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mintersects_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilled\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_amin\u001b[0;34m(a, axis, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m     41\u001b[0m def _amin(a, axis=None, out=None, keepdims=False,\n\u001b[1;32m     42\u001b[0m           initial=_NoValue, where=True):\n\u001b[0;32m---> 43\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mumr_minimum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m def _sum(a, axis=None, dtype=None, out=None, keepdims=False,\n",
        "\u001b[0;31mValueError\u001b[0m: zero-size array to reduction operation minimum which has no identity"
       ]
      },
      {
       "output_type": "display_data",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
