{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.13.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "196"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **16th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{2: ['Timor-Leste', 'Holy See', 'Solomon Islands'],\n",
        " 3: ['Saint Kitts and Nevis', 'Laos', 'Tanzania'],\n",
        " 4: ['Saint Lucia', 'Brunei', 'Grenada', 'Dominica'],\n",
        " 5: ['Fiji', 'Equatorial Guinea'],\n",
        " 6: ['Saint Vincent and the Grenadines', 'Mauritius', 'Antigua and Barbuda'],\n",
        " 7: ['Gambia'],\n",
        " 8: ['Madagascar', 'Trinidad and Tobago', 'Cambodia', 'Monaco', 'Vietnam',\n",
        "     'Bahamas', 'Seychelles', 'Liechtenstein', 'Kyrgyzstan',\n",
        "     'Northern Mariana Islands'],\n",
        " 9: ['Belize', 'Ghana', 'Malawi', 'Suriname', 'Bolivia', 'Djibouti',\n",
        "     'South Africa', 'Burundi', 'Swaziland', 'Zimbabwe', 'Virgin Islands, U.S.',\n",
        "     'Zambia', 'Republic of the Congo', 'Uzbekistan', 'Sao Tome and Principe',\n",
        "     'Oman', 'Barbados', 'Kazakhstan', 'Bermuda', 'Australia', 'Lesotho'],\n",
        " 10: ['Senegal', 'New Zealand', 'Rwanda', \"Cote d'Ivoire\", 'Honduras',\n",
        "      'Venezuela', 'Bahrain', 'Botswana', 'Chile', 'Maldives', 'Guatemala',\n",
        "      'Liberia', 'Saudi Arabia', 'Comoros', 'Israel', 'Singapore',\n",
        "      'Dominican Republic', 'Syria', 'Libya', 'Mozambique', 'Gabon', 'Algeria',\n",
        "      'Bhutan', 'Papua New Guinea', 'Jamaica', 'Eritrea', 'Philippines',\n",
        "      'Mongolia', 'Guyana', 'Central African Republic', 'Benin', 'Ethiopia',\n",
        "      'Angola', 'Nigeria', 'Kuwait', 'Namibia'],\n",
        " 11: ['Cameroon', 'Panama', 'Bangladesh', 'Guam', 'Sierra Leone',\n",
        "      'Guinea-Bissau', 'Montenegro', 'Taiwan', 'Mexico', 'Brazil', 'Guinea',\n",
        "      'Colombia', 'Pakistan', 'Yemen', 'Sudan', 'El Salvador', 'Togo', 'Jordan',\n",
        "      'India', 'Cape Verde', 'Costa Rica', 'Chad', 'Iraq', 'Peru',\n",
        "      'Puerto Rico', 'Kenya', 'Nepal', 'Ecuador', 'Nicaragua', 'Egypt',\n",
        "      'Paraguay'],\n",
        " 12: ['Japan', 'Argentina', 'Georgia', 'United Arab Emirates',\n",
        "      'Democratic Republic of the Congo', 'Kosovo', 'Niger', 'Azerbaijan',\n",
        "      'Indonesia', 'Iceland', 'South Sudan', 'Tajikistan', 'Slovakia',\n",
        "      'Qatar'],\n",
        " 13: ['Sri Lanka', 'Mauritania', 'Cuba', 'Hungary', 'Greece', 'Armenia',\n",
        "      'Haiti', 'Slovenia', 'Moldova', 'Uganda', 'Luxembourg', 'Serbia', 'Mali',\n",
        "      'Palestine', 'Burkina Faso', 'San Marino', 'United States', 'Russia',\n",
        "      'Croatia', 'Tunisia', 'Malta', 'Andorra', 'Poland', 'Cyprus', 'Somalia',\n",
        "      'China', 'Myanmar', 'Belarus', 'Bulgaria'],\n",
        " 14: ['Bosnia and Herzegovina', 'Albania', 'Czech Republic', 'Malaysia',\n",
        "      'Lithuania', 'Iran', 'Ireland', 'Morocco', 'Uruguay', 'Afghanistan',\n",
        "      'Norway', 'Thailand', 'North Macedonia', 'Spain', 'Latvia', 'Turkey'],\n",
        " 15: ['Finland', 'Sweden', 'Italy', 'Estonia', 'Switzerland', 'Lebanon',\n",
        "      'Romania', 'Canada', 'Germany'],\n",
        " 16: ['Netherlands', 'Ukraine', 'Denmark', 'Austria', 'Belgium',\n",
        "      'United Kingdom', 'Portugal'],\n",
        " 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=16)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "8"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{16: ['Netherlands', 'Ukraine', 'Denmark', 'Austria', 'Belgium',\n",
        "      'United Kingdom', 'Portugal'],\n",
        " 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>30Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>31Mar2020</td>\n",
        "      <td>22Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>19Aug2020</td>\n",
        "      <td>02Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Sep2020</td>\n",
        "      <td>14Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Sep2020</td>\n",
        "      <td>22Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>03Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Dec2020</td>\n",
        "      <td>13Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "France  0th    Past  07Feb2020  30Mar2020    66977107\n",
        "        1st    Past  31Mar2020  22Apr2020    66977107\n",
        "        2nd    Past  23Apr2020  08Jul2020    66977107\n",
        "        3rd    Past  09Jul2020  18Aug2020    66977107\n",
        "        4th    Past  19Aug2020  02Sep2020    66977107\n",
        "        5th    Past  03Sep2020  14Sep2020    66977107\n",
        "        6th    Past  15Sep2020  22Sep2020    66977107\n",
        "        7th    Past  23Sep2020  01Oct2020    66977107\n",
        "        8th    Past  02Oct2020  08Oct2020    66977107\n",
        "        9th    Past  09Oct2020  15Oct2020    66977107\n",
        "        10th   Past  16Oct2020  21Oct2020    66977107\n",
        "        11th   Past  22Oct2020  31Oct2020    66977107\n",
        "        12th   Past  01Nov2020  10Nov2020    66977107\n",
        "        13th   Past  11Nov2020  16Nov2020    66977107\n",
        "        14th   Past  17Nov2020  24Nov2020    66977107\n",
        "        15th   Past  25Nov2020  03Dec2020    66977107\n",
        "        16th   Past  04Dec2020  13Dec2020    66977107"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF, timeout=10)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>\n",
        "Running optimization with 4 CPUs...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  1st phase (13Apr2020 - 02May2020): finished  322 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 13th phase (18Nov2020 - 25Nov2020): finished  340 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  4th phase (18Aug2020 - 06Sep2020): finished  330 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  2nd phase (24Apr2020 - 11May2020): finished  334 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  2nd phase (09Jul2020 - 11Aug2020): finished  327 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  0th phase (11Mar2020 - 31Mar2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 10th phase (26Oct2020 - 05Nov2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 15th phase (05Dec2020 - 13Dec2020): finished  339 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  7th phase (29Sep2020 - 06Oct2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (23Apr2020 - 08Jul2020): finished  315 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 10th phase (23Oct2020 - 01Nov2020): finished  335 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  1st phase (07Apr2020 - 23Apr2020): finished  334 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (02Oct2020 - 13Oct2020): finished  315 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 14th phase (26Nov2020 - 04Dec2020): finished  316 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (31Mar2020 - 22Apr2020): finished  302 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  9th phase (30Oct2020 - 05Nov2020): finished  319 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (15Sep2020 - 22Sep2020): finished  325 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  9th phase (14Oct2020 - 21Oct2020): finished  325 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 11th phase (02Nov2020 - 07Nov2020): finished  325 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  0th phase (13Mar2020 - 30Mar2020): finished  323 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 10th phase (30Oct2020 - 04Nov2020): finished  328 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 12th phase (12Nov2020 - 17Nov2020): finished  329 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  9th phase (23Oct2020 - 29Oct2020): finished  328 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (23Sep2020 - 01Oct2020): finished  325 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 13th phase (17Nov2020 - 22Nov2020): finished  328 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  4th phase (28Jul2020 - 22Aug2020): finished  322 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 14th phase (26Nov2020 - 02Dec2020): finished  329 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  3rd phase (08May2020 - 27Jul2020): finished  302 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 10th phase (06Nov2020 - 12Nov2020): finished  329 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 13th phase (25Nov2020 - 30Nov2020): finished  330 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  9th phase (15Oct2020 - 24Oct2020): finished  327 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  6th phase (15Sep2020 - 28Sep2020): finished  322 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (09Oct2020 - 15Oct2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  8th phase (07Oct2020 - 14Oct2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 15th phase (02Dec2020 - 13Dec2020): finished  310 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  8th phase (07Oct2020 - 12Oct2020): finished  312 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 13th phase (15Nov2020 - 22Nov2020): finished  318 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (21May2020 - 18Jun2020): finished  311 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  9th phase (20Oct2020 - 25Oct2020): finished  322 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 13th phase (20Nov2020 - 25Nov2020): finished  319 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 11th phase (04Nov2020 - 13Nov2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 12th phase (14Nov2020 - 19Nov2020): finished  315 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 11th phase (13Nov2020 - 18Nov2020): finished  318 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 15th phase (07Dec2020 - 13Dec2020): finished  318 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  8th phase (12Oct2020 - 19Oct2020): finished  323 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 12th phase (08Nov2020 - 14Nov2020): finished  326 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  0th phase (05Mar2020 - 24Mar2020): finished  321 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (19Aug2020 - 02Sep2020): finished  323 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  6th phase (18Sep2020 - 02Oct2020): finished  306 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (26Aug2020 - 15Sep2020): finished  301 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  9th phase (15Oct2020 - 20Oct2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 14th phase (23Nov2020 - 01Dec2020): finished  305 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  7th phase (28Sep2020 - 04Oct2020): finished  312 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (07Feb2020 - 30Mar2020): finished  301 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 12th phase (03Nov2020 - 12Nov2020): finished  315 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 10th phase (25Oct2020 - 03Nov2020): finished  314 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 11th phase (06Nov2020 - 11Nov2020): finished  302 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  4th phase (08Aug2020 - 04Sep2020): finished  290 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 16th phase (04Dec2020 - 13Dec2020): finished  298 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  3rd phase (11Jul2020 - 17Aug2020): finished  287 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  2nd phase (09Apr2020 - 10Jul2020): finished  285 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  5th phase (07Sep2020 - 16Sep2020): finished  310 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (02Apr2020 - 18Apr2020): finished  311 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  4th phase (01Sep2020 - 16Sep2020): finished  304 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  0th phase (19Mar2020 - 12Apr2020): finished  289 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (16Oct2020 - 21Oct2020): finished  295 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  4th phase (10Aug2020 - 08Sep2020): finished  287 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  5th phase (09Sep2020 - 20Sep2020): finished  293 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  1st phase (01Apr2020 - 16Apr2020): finished  311 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  6th phase (21Sep2020 - 30Sep2020): finished  314 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (03Sep2020 - 14Sep2020): finished  312 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 15th phase (03Dec2020 - 13Dec2020): finished  311 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 15th phase (25Nov2020 - 03Dec2020): finished  314 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 11th phase (05Nov2020 - 10Nov2020): finished  319 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (15Jul2020 - 25Aug2020): finished  302 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (02Oct2020 - 08Oct2020): finished  314 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  3rd phase (12Aug2020 - 31Aug2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  6th phase (17Sep2020 - 27Sep2020): finished  313 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  0th phase (21Mar2020 - 30May2020): finished  295 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 10th phase (22Oct2020 - 27Oct2020): finished  312 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  1st phase (31May2020 - 08Jul2020): finished  302 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 12th phase (10Nov2020 - 19Nov2020): finished  313 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 14th phase (17Nov2020 - 24Nov2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  0th phase (18Feb2020 - 06Apr2020): finished  295 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  5th phase (23Aug2020 - 14Sep2020): finished  292 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 12th phase (01Nov2020 - 10Nov2020): finished  299 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  7th phase (01Oct2020 - 12Oct2020): finished  297 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 13th phase (11Nov2020 - 16Nov2020): finished  301 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  3rd phase (22May2020 - 07Aug2020): finished  293 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 11th phase (22Oct2020 - 31Oct2020): finished  316 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  2nd phase (14Apr2020 - 07May2020): finished  308 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  5th phase (05Sep2020 - 18Sep2020): finished  311 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 13th phase (13Nov2020 - 22Nov2020): finished  299 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 10th phase (21Oct2020 - 30Oct2020): finished  299 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (16Sep2020 - 01Oct2020): finished  293 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 13th phase (20Nov2020 - 30Nov2020): finished  287 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  6th phase (19Sep2020 - 27Sep2020): finished  309 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  3rd phase (12May2020 - 11Jun2020): finished  300 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  7th phase (03Oct2020 - 11Oct2020): finished  308 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  5th phase (18Aug2020 - 17Sep2020): finished  304 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  5th phase (17Sep2020 - 30Sep2020): finished  293 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  4th phase (12Jun2020 - 17Aug2020): finished  278 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT, 11th phase (28Oct2020 - 02Nov2020): finished  297 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (19Jun2020 - 14Jul2020): finished  290 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  3rd phase (13Jun2020 - 09Aug2020): finished  305 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  8th phase (22Oct2020 - 29Oct2020): finished  316 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  6th phase (01Oct2020 - 11Oct2020): finished  317 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  7th phase (28Sep2020 - 06Oct2020): finished  332 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  1st phase (25Mar2020 - 08Apr2020): finished  328 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  8th phase (05Oct2020 - 14Oct2020): finished  330 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  8th phase (13Oct2020 - 22Oct2020): finished  312 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  2nd phase (17Apr2020 - 21May2020): finished  301 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 14th phase (23Nov2020 - 02Dec2020): finished  310 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  2nd phase (03May2020 - 12Jun2020): finished  299 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT, 11th phase (31Oct2020 - 09Nov2020): finished  310 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  7th phase (12Oct2020 - 21Oct2020): finished  311 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (19Apr2020 - 20May2020): finished  313 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  1st phase (31Mar2020 - 13Apr2020): finished  320 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 12th phase (19Nov2020 - 24Nov2020): finished  323 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (09Jul2020 - 18Aug2020): finished  310 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 14th phase (01Dec2020 - 06Dec2020): finished  323 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  0th phase (14Mar2020 - 01Apr2020): finished  317 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 5 min 47 sec\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>30Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>9.73</td>\n",
        "      <td>0.000491</td>\n",
        "      <td>0.000096</td>\n",
        "      <td>0.040774</td>\n",
        "      <td>0.004091</td>\n",
        "      <td>360</td>\n",
        "      <td>2595</td>\n",
        "      <td>61</td>\n",
        "      <td>0.000</td>\n",
        "      <td>6</td>\n",
        "      <td>1.302491</td>\n",
        "      <td>301</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>31Mar2020</td>\n",
        "      <td>22Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.71</td>\n",
        "      <td>0.346351</td>\n",
        "      <td>0.001473</td>\n",
        "      <td>0.024343</td>\n",
        "      <td>0.021055</td>\n",
        "      <td>360</td>\n",
        "      <td>169</td>\n",
        "      <td>11</td>\n",
        "      <td>0.346</td>\n",
        "      <td>10</td>\n",
        "      <td>0.187872</td>\n",
        "      <td>302</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.59</td>\n",
        "      <td>0.537173</td>\n",
        "      <td>0.000080</td>\n",
        "      <td>0.016951</td>\n",
        "      <td>0.013248</td>\n",
        "      <td>360</td>\n",
        "      <td>3111</td>\n",
        "      <td>18</td>\n",
        "      <td>0.537</td>\n",
        "      <td>14</td>\n",
        "      <td>0.340536</td>\n",
        "      <td>315</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.45</td>\n",
        "      <td>0.005601</td>\n",
        "      <td>0.000558</td>\n",
        "      <td>0.024208</td>\n",
        "      <td>0.016098</td>\n",
        "      <td>360</td>\n",
        "      <td>448</td>\n",
        "      <td>15</td>\n",
        "      <td>0.006</td>\n",
        "      <td>10</td>\n",
        "      <td>0.096560</td>\n",
        "      <td>310</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>19Aug2020</td>\n",
        "      <td>02Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.04</td>\n",
        "      <td>0.001289</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.030650</td>\n",
        "      <td>0.014930</td>\n",
        "      <td>360</td>\n",
        "      <td>3514</td>\n",
        "      <td>16</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>0.031933</td>\n",
        "      <td>323</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Sep2020</td>\n",
        "      <td>14Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.61</td>\n",
        "      <td>0.000452</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.026417</td>\n",
        "      <td>0.016213</td>\n",
        "      <td>360</td>\n",
        "      <td>1065</td>\n",
        "      <td>15</td>\n",
        "      <td>0.000</td>\n",
        "      <td>9</td>\n",
        "      <td>0.024890</td>\n",
        "      <td>312</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Sep2020</td>\n",
        "      <td>22Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.48</td>\n",
        "      <td>0.000864</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>0.025987</td>\n",
        "      <td>0.017436</td>\n",
        "      <td>360</td>\n",
        "      <td>1666</td>\n",
        "      <td>14</td>\n",
        "      <td>0.001</td>\n",
        "      <td>9</td>\n",
        "      <td>0.019375</td>\n",
        "      <td>325</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.001278</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.024934</td>\n",
        "      <td>0.018240</td>\n",
        "      <td>360</td>\n",
        "      <td>3152</td>\n",
        "      <td>13</td>\n",
        "      <td>0.001</td>\n",
        "      <td>10</td>\n",
        "      <td>0.033578</td>\n",
        "      <td>325</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.21</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.029320</td>\n",
        "      <td>0.024009</td>\n",
        "      <td>360</td>\n",
        "      <td>1642</td>\n",
        "      <td>10</td>\n",
        "      <td>0.000</td>\n",
        "      <td>8</td>\n",
        "      <td>0.034712</td>\n",
        "      <td>314</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.001050</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.025168</td>\n",
        "      <td>0.014910</td>\n",
        "      <td>360</td>\n",
        "      <td>1645</td>\n",
        "      <td>16</td>\n",
        "      <td>0.001</td>\n",
        "      <td>9</td>\n",
        "      <td>0.035339</td>\n",
        "      <td>309</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.81</td>\n",
        "      <td>0.000490</td>\n",
        "      <td>0.000096</td>\n",
        "      <td>0.027800</td>\n",
        "      <td>0.015224</td>\n",
        "      <td>360</td>\n",
        "      <td>2598</td>\n",
        "      <td>16</td>\n",
        "      <td>0.000</td>\n",
        "      <td>8</td>\n",
        "      <td>0.031750</td>\n",
        "      <td>295</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.52</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>0.028712</td>\n",
        "      <td>0.011235</td>\n",
        "      <td>360</td>\n",
        "      <td>1666</td>\n",
        "      <td>22</td>\n",
        "      <td>0.002</td>\n",
        "      <td>8</td>\n",
        "      <td>0.044265</td>\n",
        "      <td>316</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.39</td>\n",
        "      <td>0.000573</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.025845</td>\n",
        "      <td>0.018335</td>\n",
        "      <td>360</td>\n",
        "      <td>1064</td>\n",
        "      <td>13</td>\n",
        "      <td>0.001</td>\n",
        "      <td>9</td>\n",
        "      <td>0.029435</td>\n",
        "      <td>299</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.65</td>\n",
        "      <td>0.001978</td>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.013372</td>\n",
        "      <td>0.020379</td>\n",
        "      <td>360</td>\n",
        "      <td>1289</td>\n",
        "      <td>12</td>\n",
        "      <td>0.002</td>\n",
        "      <td>18</td>\n",
        "      <td>0.010552</td>\n",
        "      <td>301</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.41</td>\n",
        "      <td>0.014157</td>\n",
        "      <td>0.000238</td>\n",
        "      <td>0.013429</td>\n",
        "      <td>0.031950</td>\n",
        "      <td>360</td>\n",
        "      <td>1051</td>\n",
        "      <td>7</td>\n",
        "      <td>0.014</td>\n",
        "      <td>18</td>\n",
        "      <td>0.029371</td>\n",
        "      <td>309</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>03Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.41</td>\n",
        "      <td>0.005087</td>\n",
        "      <td>0.000482</td>\n",
        "      <td>0.015334</td>\n",
        "      <td>0.036683</td>\n",
        "      <td>360</td>\n",
        "      <td>518</td>\n",
        "      <td>6</td>\n",
        "      <td>0.005</td>\n",
        "      <td>16</td>\n",
        "      <td>0.030546</td>\n",
        "      <td>314</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Dec2020</td>\n",
        "      <td>13Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>360</td>\n",
        "      <td>869</td>\n",
        "      <td>12</td>\n",
        "      <td>0.023</td>\n",
        "      <td>10</td>\n",
        "      <td>0.024513</td>\n",
        "      <td>298</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt     theta  \\\n",
        "Country Phase                                                                  \n",
        "France  0th    Past  07Feb2020  30Mar2020    66977107  SIR-F  9.73  0.000491   \n",
        "        1st    Past  31Mar2020  22Apr2020    66977107  SIR-F  0.71  0.346351   \n",
        "        2nd    Past  23Apr2020  08Jul2020    66977107  SIR-F  0.59  0.537173   \n",
        "        3rd    Past  09Jul2020  18Aug2020    66977107  SIR-F  1.45  0.005601   \n",
        "        4th    Past  19Aug2020  02Sep2020    66977107  SIR-F  2.04  0.001289   \n",
        "        5th    Past  03Sep2020  14Sep2020    66977107  SIR-F  1.61  0.000452   \n",
        "        6th    Past  15Sep2020  22Sep2020    66977107  SIR-F  1.48  0.000864   \n",
        "        7th    Past  23Sep2020  01Oct2020    66977107  SIR-F  1.36  0.001278   \n",
        "        8th    Past  02Oct2020  08Oct2020    66977107  SIR-F  1.21  0.000066   \n",
        "        9th    Past  09Oct2020  15Oct2020    66977107  SIR-F  1.67  0.001050   \n",
        "        10th   Past  16Oct2020  21Oct2020    66977107  SIR-F  1.81  0.000490   \n",
        "        11th   Past  22Oct2020  31Oct2020    66977107  SIR-F  2.52  0.001843   \n",
        "        12th   Past  01Nov2020  10Nov2020    66977107  SIR-F  1.39  0.000573   \n",
        "        13th   Past  11Nov2020  16Nov2020    66977107  SIR-F  0.65  0.001978   \n",
        "        14th   Past  17Nov2020  24Nov2020    66977107  SIR-F  0.41  0.014157   \n",
        "        15th   Past  25Nov2020  03Dec2020    66977107  SIR-F  0.41  0.005087   \n",
        "        16th   Past  04Dec2020  13Dec2020    66977107  SIR-F  1.13  0.022552   \n",
        "\n",
        "                  kappa       rho     sigma  tau  1/alpha2 [day]  \\\n",
        "Country Phase                                                      \n",
        "France  0th    0.000096  0.040774  0.004091  360            2595   \n",
        "        1st    0.001473  0.024343  0.021055  360             169   \n",
        "        2nd    0.000080  0.016951  0.013248  360            3111   \n",
        "        3rd    0.000558  0.024208  0.016098  360             448   \n",
        "        4th    0.000071  0.030650  0.014930  360            3514   \n",
        "        5th    0.000235  0.026417  0.016213  360            1065   \n",
        "        6th    0.000150  0.025987  0.017436  360            1666   \n",
        "        7th    0.000079  0.024934  0.018240  360            3152   \n",
        "        8th    0.000152  0.029320  0.024009  360            1642   \n",
        "        9th    0.000152  0.025168  0.014910  360            1645   \n",
        "        10th   0.000096  0.027800  0.015224  360            2598   \n",
        "        11th   0.000150  0.028712  0.011235  360            1666   \n",
        "        12th   0.000235  0.025845  0.018335  360            1064   \n",
        "        13th   0.000194  0.013372  0.020379  360            1289   \n",
        "        14th   0.000238  0.013429  0.031950  360            1051   \n",
        "        15th   0.000482  0.015334  0.036683  360             518   \n",
        "        16th   0.000287  0.023494  0.020018  360             869   \n",
        "\n",
        "               1/gamma [day]  alpha1 [-]  1/beta [day]     RMSLE  Trials  \\\n",
        "Country Phase                                                              \n",
        "France  0th               61       0.000             6  1.302491     301   \n",
        "        1st               11       0.346            10  0.187872     302   \n",
        "        2nd               18       0.537            14  0.340536     315   \n",
        "        3rd               15       0.006            10  0.096560     310   \n",
        "        4th               16       0.001             8  0.031933     323   \n",
        "        5th               15       0.000             9  0.024890     312   \n",
        "        6th               14       0.001             9  0.019375     325   \n",
        "        7th               13       0.001            10  0.033578     325   \n",
        "        8th               10       0.000             8  0.034712     314   \n",
        "        9th               16       0.001             9  0.035339     309   \n",
        "        10th              16       0.000             8  0.031750     295   \n",
        "        11th              22       0.002             8  0.044265     316   \n",
        "        12th              13       0.001             9  0.029435     299   \n",
        "        13th              12       0.002            18  0.010552     301   \n",
        "        14th               7       0.014            18  0.029371     309   \n",
        "        15th               6       0.005            16  0.030546     314   \n",
        "        16th              12       0.023            10  0.024513     298   \n",
        "\n",
        "                    Runtime  \n",
        "Country Phase                \n",
        "France  0th    0 min 10 sec  \n",
        "        1st    0 min 10 sec  \n",
        "        2nd    0 min 10 sec  \n",
        "        3rd    0 min 10 sec  \n",
        "        4th    0 min 10 sec  \n",
        "        5th    0 min 10 sec  \n",
        "        6th    0 min 10 sec  \n",
        "        7th    0 min 10 sec  \n",
        "        8th    0 min 10 sec  \n",
        "        9th    0 min 10 sec  \n",
        "        10th   0 min 10 sec  \n",
        "        11th   0 min 10 sec  \n",
        "        12th   0 min 10 sec  \n",
        "        13th   0 min 10 sec  \n",
        "        14th   0 min 10 sec  \n",
        "        15th   0 min 10 sec  \n",
        "        16th   0 min 10 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0261929</td>\n",
        "      <td>0.00115931</td>\n",
        "      <td>0.0430256</td>\n",
        "      <td>0.00471051</td>\n",
        "      <td>0.026</td>\n",
        "      <td>215</td>\n",
        "      <td>5</td>\n",
        "      <td>53</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0261929</td>\n",
        "      <td>0.00115931</td>\n",
        "      <td>0.0430256</td>\n",
        "      <td>0.00471051</td>\n",
        "      <td>0.026</td>\n",
        "      <td>215</td>\n",
        "      <td>5</td>\n",
        "      <td>53</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0261929</td>\n",
        "      <td>0.00115931</td>\n",
        "      <td>0.0430256</td>\n",
        "      <td>0.00471051</td>\n",
        "      <td>0.026</td>\n",
        "      <td>215</td>\n",
        "      <td>5</td>\n",
        "      <td>53</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0261929</td>\n",
        "      <td>0.00115931</td>\n",
        "      <td>0.0430256</td>\n",
        "      <td>0.00471051</td>\n",
        "      <td>0.026</td>\n",
        "      <td>215</td>\n",
        "      <td>5</td>\n",
        "      <td>53</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-03-11</td>\n",
        "      <td>Netherlands</td>\n",
        "      <td>0.0261929</td>\n",
        "      <td>0.00115931</td>\n",
        "      <td>0.0430256</td>\n",
        "      <td>0.00471051</td>\n",
        "      <td>0.026</td>\n",
        "      <td>215</td>\n",
        "      <td>5</td>\n",
        "      <td>53</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>18.52</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date      Country      theta       kappa        rho       sigma  \\\n",
        "0 2020-03-11  Netherlands  0.0261929  0.00115931  0.0430256  0.00471051   \n",
        "1 2020-03-11  Netherlands  0.0261929  0.00115931  0.0430256  0.00471051   \n",
        "2 2020-03-11  Netherlands  0.0261929  0.00115931  0.0430256  0.00471051   \n",
        "3 2020-03-11  Netherlands  0.0261929  0.00115931  0.0430256  0.00471051   \n",
        "4 2020-03-11  Netherlands  0.0261929  0.00115931  0.0430256  0.00471051   \n",
        "\n",
        "  alpha1 [-] 1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0      0.026            215            5            53  ...             2   \n",
        "1      0.026            215            5            53  ...             0   \n",
        "2      0.026            215            5            53  ...             0   \n",
        "3      0.026            215            5            53  ...             0   \n",
        "4      0.026            215            5            53  ...             0   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       1   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        0                  0                       0   \n",
        "4                        0                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    0   \n",
        "1                               0                                    0   \n",
        "2                               0                                    0   \n",
        "3                               0                                    0   \n",
        "4                               0                                    0   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               1                2             18.52  \n",
        "1                      0               1                2             18.52  \n",
        "2                      0               1                2             18.52  \n",
        "3                      0               1                2             18.52  \n",
        "4                      0               1                2             18.52  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>1.06</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.83</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>1.06</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.83</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>1.06</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.83</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>1.06</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.83</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>1.06</td>\n",
        "      <td>0.98</td>\n",
        "      <td>1.14</td>\n",
        "      <td>1.13</td>\n",
        "      <td>1.62</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.83</td>\n",
        "      <td>1.2</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Austria  Belgium  Denmark  France  Netherlands  Portugal  Ukraine  \\\n",
        "Date                                                                            \n",
        "2020-12-09     1.06     0.98     1.14    1.13         1.62      1.18     0.83   \n",
        "2020-12-10     1.06     0.98     1.14    1.13         1.62      1.18     0.83   \n",
        "2020-12-11     1.06     0.98     1.14    1.13         1.62      1.18     0.83   \n",
        "2020-12-12     1.06     0.98     1.14    1.13         1.62      1.18     0.83   \n",
        "2020-12-13     1.06     0.98     1.14    1.13         1.62      1.18     0.83   \n",
        "\n",
        "Country     United Kingdom  \n",
        "Date                        \n",
        "2020-12-09             1.2  \n",
        "2020-12-10             1.2  \n",
        "2020-12-11             1.2  \n",
        "2020-12-12             1.2  \n",
        "2020-12-13             1.2  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.012926</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.019958</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.01939</td>\n",
        "      <td>0.008041</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.012926</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.019958</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.01939</td>\n",
        "      <td>0.008041</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.012926</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.019958</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.01939</td>\n",
        "      <td>0.008041</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.012926</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.019958</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.01939</td>\n",
        "      <td>0.008041</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.012926</td>\n",
        "      <td>0.015006</td>\n",
        "      <td>0.019958</td>\n",
        "      <td>0.023494</td>\n",
        "      <td>0.028974</td>\n",
        "      <td>0.01939</td>\n",
        "      <td>0.008041</td>\n",
        "      <td>0.024527</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                        \n",
        "2020-12-09  0.012926  0.015006  0.019958  0.023494     0.028974   0.01939   \n",
        "2020-12-10  0.012926  0.015006  0.019958  0.023494     0.028974   0.01939   \n",
        "2020-12-11  0.012926  0.015006  0.019958  0.023494     0.028974   0.01939   \n",
        "2020-12-12  0.012926  0.015006  0.019958  0.023494     0.028974   0.01939   \n",
        "2020-12-13  0.012926  0.015006  0.019958  0.023494     0.028974   0.01939   \n",
        "\n",
        "Country      Ukraine  United Kingdom  \n",
        "Date                                  \n",
        "2020-12-09  0.008041        0.024527  \n",
        "2020-12-10  0.008041        0.024527  \n",
        "2020-12-11  0.008041        0.024527  \n",
        "2020-12-12  0.008041        0.024527  \n",
        "2020-12-13  0.008041        0.024527  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.011922</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.017445</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.016255</td>\n",
        "      <td>0.00949</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.011922</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.017445</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.016255</td>\n",
        "      <td>0.00949</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.011922</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.017445</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.016255</td>\n",
        "      <td>0.00949</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.011922</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.017445</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.016255</td>\n",
        "      <td>0.00949</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.011922</td>\n",
        "      <td>0.014189</td>\n",
        "      <td>0.017445</td>\n",
        "      <td>0.020018</td>\n",
        "      <td>0.017755</td>\n",
        "      <td>0.016255</td>\n",
        "      <td>0.00949</td>\n",
        "      <td>0.019873</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                        \n",
        "2020-12-09  0.011922  0.014189  0.017445  0.020018     0.017755  0.016255   \n",
        "2020-12-10  0.011922  0.014189  0.017445  0.020018     0.017755  0.016255   \n",
        "2020-12-11  0.011922  0.014189  0.017445  0.020018     0.017755  0.016255   \n",
        "2020-12-12  0.011922  0.014189  0.017445  0.020018     0.017755  0.016255   \n",
        "2020-12-13  0.011922  0.014189  0.017445  0.020018     0.017755  0.016255   \n",
        "\n",
        "Country     Ukraine  United Kingdom  \n",
        "Date                                 \n",
        "2020-12-09  0.00949        0.019873  \n",
        "2020-12-10  0.00949        0.019873  \n",
        "2020-12-11  0.00949        0.019873  \n",
        "2020-12-12  0.00949        0.019873  \n",
        "2020-12-13  0.00949        0.019873  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000553</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000287</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000229</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.000201</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                        \n",
        "2020-12-09  0.000229  0.000553  0.000059  0.000287     0.000014  0.000229   \n",
        "2020-12-10  0.000229  0.000553  0.000059  0.000287     0.000014  0.000229   \n",
        "2020-12-11  0.000229  0.000553  0.000059  0.000287     0.000014  0.000229   \n",
        "2020-12-12  0.000229  0.000553  0.000059  0.000287     0.000014  0.000229   \n",
        "2020-12-13  0.000229  0.000553  0.000059  0.000287     0.000014  0.000229   \n",
        "\n",
        "Country      Ukraine  United Kingdom  \n",
        "Date                                  \n",
        "2020-12-09  0.000151        0.000201  \n",
        "2020-12-10  0.000151        0.000201  \n",
        "2020-12-11  0.000151        0.000201  \n",
        "2020-12-12  0.000151        0.000201  \n",
        "2020-12-13  0.000151        0.000201  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>France</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-09</th>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002389</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-10</th>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002389</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002389</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002389</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.036571</td>\n",
        "      <td>0.002389</td>\n",
        "      <td>0.022552</td>\n",
        "      <td>0.004924</td>\n",
        "      <td>0.000121</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.016736</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Austria   Belgium   Denmark    France  Netherlands  Portugal  \\\n",
        "Date                                                                        \n",
        "2020-12-09  0.000121  0.036571  0.002389  0.022552     0.004924  0.000121   \n",
        "2020-12-10  0.000121  0.036571  0.002389  0.022552     0.004924  0.000121   \n",
        "2020-12-11  0.000121  0.036571  0.002389  0.022552     0.004924  0.000121   \n",
        "2020-12-12  0.000121  0.036571  0.002389  0.022552     0.004924  0.000121   \n",
        "2020-12-13  0.000121  0.036571  0.002389  0.022552     0.004924  0.000121   \n",
        "\n",
        "Country      Ukraine  United Kingdom  \n",
        "Date                                  \n",
        "2020-12-09  0.000067        0.016736  \n",
        "2020-12-10  0.000067        0.016736  \n",
        "2020-12-11  0.000067        0.016736  \n",
        "2020-12-12  0.000067        0.016736  \n",
        "2020-12-13  0.000067        0.016736  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 25699 entries, 0 to 25796\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 25699 non-null  datetime64[ns]\n",
        " 1   Country                              25699 non-null  object        \n",
        " 2   Rt                                   25699 non-null  float64       \n",
        " 3   theta                                25699 non-null  float64       \n",
        " 4   kappa                                25699 non-null  float64       \n",
        " 5   rho                                  25699 non-null  float64       \n",
        " 6   sigma                                25699 non-null  float64       \n",
        " 7   School_closing                       25699 non-null  int64         \n",
        " 8   Workplace_closing                    25699 non-null  int64         \n",
        " 9   Cancel_events                        25699 non-null  int64         \n",
        " 10  Gatherings_restrictions              25699 non-null  int64         \n",
        " 11  Transport_closing                    25699 non-null  int64         \n",
        " 12  Stay_home_restrictions               25699 non-null  int64         \n",
        " 13  Internal_movement_restrictions       25699 non-null  int64         \n",
        " 14  International_movement_restrictions  25699 non-null  int64         \n",
        " 15  Information_campaigns                25699 non-null  int64         \n",
        " 16  Testing_policy                       25699 non-null  int64         \n",
        " 17  Contact_tracing                      25699 non-null  int64         \n",
        " 18  Stringency_index                     25699 non-null  float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 3.9+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col0,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col1,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col2,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col3,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col1,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col0{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col2,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col0{\n",
        "            background-color:  #bbc7e0;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col3,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col0{\n",
        "            background-color:  #2a88bc;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col0{\n",
        "            background-color:  #f8f1f8;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col0{\n",
        "            background-color:  #bfc9e1;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col0{\n",
        "            background-color:  #c9cee4;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col0{\n",
        "            background-color:  #dfddec;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col0{\n",
        "            background-color:  #e7e3f0;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col3,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col1,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col0{\n",
        "            background-color:  #dddbec;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col0{\n",
        "            background-color:  #d1d2e6;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col0{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col0,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col0,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col0{\n",
        "            background-color:  #d2d3e7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col0{\n",
        "            background-color:  #e0deed;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col0{\n",
        "            background-color:  #d9d8ea;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col2,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col1{\n",
        "            background-color:  #b5c4df;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col1{\n",
        "            background-color:  #acc0dd;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col1{\n",
        "            background-color:  #5ea0ca;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col1{\n",
        "            background-color:  #73a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col1{\n",
        "            background-color:  #71a8ce;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col1{\n",
        "            background-color:  #86b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col1{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col1{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col1,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col4{\n",
        "            background-color:  #63a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col1{\n",
        "            background-color:  #94b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col1,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col10{\n",
        "            background-color:  #9fbad9;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col1{\n",
        "            background-color:  #e4e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col1{\n",
        "            background-color:  #c1cae2;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col1{\n",
        "            background-color:  #5a9ec9;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col3,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col2{\n",
        "            background-color:  #96b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col2{\n",
        "            background-color:  #a1bbda;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col2{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col2{\n",
        "            background-color:  #afc1dd;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col2{\n",
        "            background-color:  #9ebad9;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col2,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col6{\n",
        "            background-color:  #d4d4e8;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col2{\n",
        "            background-color:  #b4c4df;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col2{\n",
        "            background-color:  #cccfe5;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col2{\n",
        "            background-color:  #c6cce3;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col2{\n",
        "            background-color:  #b0c2de;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col2,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col11{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col2{\n",
        "            background-color:  #cdd0e5;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col2{\n",
        "            background-color:  #9ab8d8;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col2{\n",
        "            background-color:  #c5cce3;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col3{\n",
        "            background-color:  #efe9f3;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col3{\n",
        "            background-color:  #e8e4f0;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col3{\n",
        "            background-color:  #f0eaf4;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col3{\n",
        "            background-color:  #fcf4fa;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col3,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col3{\n",
        "            background-color:  #fef6fa;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col3{\n",
        "            background-color:  #f2ecf5;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col3{\n",
        "            background-color:  #dedcec;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col3,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col3{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col3{\n",
        "            background-color:  #e9e5f1;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col3{\n",
        "            background-color:  #e1dfed;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col3{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col4{\n",
        "            background-color:  #7bacd1;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col7{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col5{\n",
        "            background-color:  #60a1ca;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col6{\n",
        "            background-color:  #3b92c1;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col4{\n",
        "            background-color:  #7eadd1;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col4{\n",
        "            background-color:  #81aed2;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col4{\n",
        "            background-color:  #529bc7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col4{\n",
        "            background-color:  #89b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col4{\n",
        "            background-color:  #6da6cd;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col4,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col9{\n",
        "            background-color:  #97b7d7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col4{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col5{\n",
        "            background-color:  #046299;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col5{\n",
        "            background-color:  #187cb6;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col7{\n",
        "            background-color:  #2383ba;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col6{\n",
        "            background-color:  #3d93c2;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col13{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col5{\n",
        "            background-color:  #2786bb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col5,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col7{\n",
        "            background-color:  #a4bcda;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col5{\n",
        "            background-color:  #dcdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col5{\n",
        "            background-color:  #d6d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col5{\n",
        "            background-color:  #045c90;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col6{\n",
        "            background-color:  #04639b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col6{\n",
        "            background-color:  #0872b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col6,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col12{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col6{\n",
        "            background-color:  #0569a4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col6{\n",
        "            background-color:  #75a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col6{\n",
        "            background-color:  #dbdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col6{\n",
        "            background-color:  #034e7b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col8,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col7{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col7,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col13{\n",
        "            background-color:  #3991c1;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col7{\n",
        "            background-color:  #2484ba;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col7{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col7{\n",
        "            background-color:  #045a8d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col8{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col8{\n",
        "            background-color:  #056dab;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col8{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col8{\n",
        "            background-color:  #2081b9;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col8{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col8{\n",
        "            background-color:  #046198;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col9,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col9{\n",
        "            background-color:  #62a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col11,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col9{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col9{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col10{\n",
        "            background-color:  #5c9fc9;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col10,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col12{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col10{\n",
        "            background-color:  #c4cbe3;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col10{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col12,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col11{\n",
        "            background-color:  #8cb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col13,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col11{\n",
        "            background-color:  #549cc7;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col11{\n",
        "            background-color:  #a9bfdc;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col11{\n",
        "            background-color:  #1278b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col14,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col12{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col12{\n",
        "            background-color:  #2987bc;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col15,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col13{\n",
        "            background-color:  #4a98c5;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col14{\n",
        "            background-color:  #b9c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col16,#T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col15{\n",
        "            background-color:  #ced0e6;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4e\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col1\" class=\"data row0 col1\" >-0.122074</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col2\" class=\"data row0 col2\" >-0.030295</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col3\" class=\"data row0 col3\" >0.483283</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col4\" class=\"data row0 col4\" >-0.431959</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col5\" class=\"data row0 col5\" >-0.043903</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col6\" class=\"data row0 col6\" >-0.090968</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col7\" class=\"data row0 col7\" >-0.220770</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col8\" class=\"data row0 col8\" >-0.280561</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col9\" class=\"data row0 col9\" >-0.210950</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col10\" class=\"data row0 col10\" >-0.129153</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col11\" class=\"data row0 col11\" >-0.245642</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col12\" class=\"data row0 col12\" >-0.138342</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col13\" class=\"data row0 col13\" >-0.141822</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col14\" class=\"data row0 col14\" >-0.234271</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col15\" class=\"data row0 col15\" >-0.181728</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow0_col16\" class=\"data row0 col16\" >-0.142802</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col0\" class=\"data row1 col0\" >-0.122074</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col2\" class=\"data row1 col2\" >-0.006572</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col3\" class=\"data row1 col3\" >-0.213163</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col4\" class=\"data row1 col4\" >0.033498</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col5\" class=\"data row1 col5\" >0.314852</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col6\" class=\"data row1 col6\" >0.252503</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col7\" class=\"data row1 col7\" >0.258329</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col8\" class=\"data row1 col8\" >0.181106</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col9\" class=\"data row1 col9\" >0.078406</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col10\" class=\"data row1 col10\" >0.165981</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col11\" class=\"data row1 col11\" >0.296775</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col12\" class=\"data row1 col12\" >0.129220</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col13\" class=\"data row1 col13\" >0.090462</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col14\" class=\"data row1 col14\" >-0.258556</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col15\" class=\"data row1 col15\" >-0.060010</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow1_col16\" class=\"data row1 col16\" >0.328004</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col0\" class=\"data row2 col0\" >-0.030295</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col1\" class=\"data row2 col1\" >-0.006572</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col3\" class=\"data row2 col3\" >0.122969</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col4\" class=\"data row2 col4\" >0.083699</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col5\" class=\"data row2 col5\" >-0.013226</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col6\" class=\"data row2 col6\" >0.024637</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col7\" class=\"data row2 col7\" >0.094174</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col8\" class=\"data row2 col8\" >-0.150799</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col9\" class=\"data row2 col9\" >0.001752</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col10\" class=\"data row2 col10\" >-0.106812</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col11\" class=\"data row2 col11\" >-0.082323</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col12\" class=\"data row2 col12\" >0.016405</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col13\" class=\"data row2 col13\" >0.064322</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col14\" class=\"data row2 col14\" >-0.113620</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col15\" class=\"data row2 col15\" >0.108597</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow2_col16\" class=\"data row2 col16\" >-0.078234</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col0\" class=\"data row3 col0\" >0.483283</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col1\" class=\"data row3 col1\" >-0.213163</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col2\" class=\"data row3 col2\" >0.122969</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col4\" class=\"data row3 col4\" >-0.337627</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col5\" class=\"data row3 col5\" >-0.285260</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col6\" class=\"data row3 col6\" >-0.345524</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col7\" class=\"data row3 col7\" >-0.466405</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col8\" class=\"data row3 col8\" >-0.487831</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col9\" class=\"data row3 col9\" >-0.485103</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col10\" class=\"data row3 col10\" >-0.370376</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col11\" class=\"data row3 col11\" >-0.218684</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col12\" class=\"data row3 col12\" >-0.501182</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col13\" class=\"data row3 col13\" >-0.290305</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col14\" class=\"data row3 col14\" >-0.500769</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col15\" class=\"data row3 col15\" >-0.238792</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow3_col16\" class=\"data row3 col16\" >-0.420656</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col0\" class=\"data row4 col0\" >-0.431959</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col1\" class=\"data row4 col1\" >0.033498</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col2\" class=\"data row4 col2\" >0.083699</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col3\" class=\"data row4 col3\" >-0.337627</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col5\" class=\"data row4 col5\" >0.221556</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col6\" class=\"data row4 col6\" >0.292859</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col7\" class=\"data row4 col7\" >0.313781</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col8\" class=\"data row4 col8\" >0.420356</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col9\" class=\"data row4 col9\" >0.213875</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col10\" class=\"data row4 col10\" >0.199578</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col11\" class=\"data row4 col11\" >0.351784</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col12\" class=\"data row4 col12\" >0.169029</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col13\" class=\"data row4 col13\" >0.271457</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col14\" class=\"data row4 col14\" >0.115324</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col15\" class=\"data row4 col15\" >0.296562</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow4_col16\" class=\"data row4 col16\" >0.275324</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col0\" class=\"data row5 col0\" >-0.043903</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col1\" class=\"data row5 col1\" >0.314852</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col2\" class=\"data row5 col2\" >-0.013226</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col3\" class=\"data row5 col3\" >-0.285260</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col4\" class=\"data row5 col4\" >0.221556</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col6\" class=\"data row5 col6\" >0.742424</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col7\" class=\"data row5 col7\" >0.554141</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col8\" class=\"data row5 col8\" >0.508246</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col9\" class=\"data row5 col9\" >0.418202</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col10\" class=\"data row5 col10\" >0.537415</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col11\" class=\"data row5 col11\" >0.490515</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col12\" class=\"data row5 col12\" >0.068242</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col13\" class=\"data row5 col13\" >0.313387</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col14\" class=\"data row5 col14\" >-0.203275</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col15\" class=\"data row5 col15\" >-0.162504</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow5_col16\" class=\"data row5 col16\" >0.791418</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col0\" class=\"data row6 col0\" >-0.090968</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col1\" class=\"data row6 col1\" >0.252503</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col2\" class=\"data row6 col2\" >0.024637</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col3\" class=\"data row6 col3\" >-0.345524</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col4\" class=\"data row6 col4\" >0.292859</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col5\" class=\"data row6 col5\" >0.742424</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col7\" class=\"data row6 col7\" >0.735831</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col8\" class=\"data row6 col8\" >0.612659</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col9\" class=\"data row6 col9\" >0.393893</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col10\" class=\"data row6 col10\" >0.685223</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col11\" class=\"data row6 col11\" >0.415882</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col12\" class=\"data row6 col12\" >0.247051</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col13\" class=\"data row6 col13\" >0.419532</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col14\" class=\"data row6 col14\" >-0.150938</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col15\" class=\"data row6 col15\" >-0.197044</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow6_col16\" class=\"data row6 col16\" >0.875927</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col0\" class=\"data row7 col0\" >-0.220770</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col1\" class=\"data row7 col1\" >0.258329</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col2\" class=\"data row7 col2\" >0.094174</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col3\" class=\"data row7 col3\" >-0.466405</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col4\" class=\"data row7 col4\" >0.313781</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col5\" class=\"data row7 col5\" >0.554141</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col6\" class=\"data row7 col6\" >0.735831</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col8\" class=\"data row7 col8\" >0.638413</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col9\" class=\"data row7 col9\" >0.431009</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col10\" class=\"data row7 col10\" >0.505768</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col11\" class=\"data row7 col11\" >0.424751</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col12\" class=\"data row7 col12\" >0.291158</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col13\" class=\"data row7 col13\" >0.508701</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col14\" class=\"data row7 col14\" >0.071789</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col15\" class=\"data row7 col15\" >-0.043771</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow7_col16\" class=\"data row7 col16\" >0.807304</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col0\" class=\"data row8 col0\" >-0.280561</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col1\" class=\"data row8 col1\" >0.181106</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col2\" class=\"data row8 col2\" >-0.150799</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col3\" class=\"data row8 col3\" >-0.487831</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col4\" class=\"data row8 col4\" >0.420356</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col5\" class=\"data row8 col5\" >0.508246</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col6\" class=\"data row8 col6\" >0.612659</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col7\" class=\"data row8 col7\" >0.638413</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col9\" class=\"data row8 col9\" >0.537018</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col10\" class=\"data row8 col10\" >0.471723</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col11\" class=\"data row8 col11\" >0.648429</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col12\" class=\"data row8 col12\" >0.448007</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col13\" class=\"data row8 col13\" >0.522916</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col14\" class=\"data row8 col14\" >0.273502</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col15\" class=\"data row8 col15\" >0.175042</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow8_col16\" class=\"data row8 col16\" >0.752242</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col0\" class=\"data row9 col0\" >-0.210950</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col1\" class=\"data row9 col1\" >0.078406</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col2\" class=\"data row9 col2\" >0.001752</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col3\" class=\"data row9 col3\" >-0.485103</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col4\" class=\"data row9 col4\" >0.213875</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col5\" class=\"data row9 col5\" >0.418202</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col6\" class=\"data row9 col6\" >0.393893</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col7\" class=\"data row9 col7\" >0.431009</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col8\" class=\"data row9 col8\" >0.537018</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col10\" class=\"data row9 col10\" >0.353620</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col11\" class=\"data row9 col11\" >0.446618</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col12\" class=\"data row9 col12\" >0.302269</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col13\" class=\"data row9 col13\" >0.410736</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col14\" class=\"data row9 col14\" >0.307610</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col15\" class=\"data row9 col15\" >0.117249</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow9_col16\" class=\"data row9 col16\" >0.518086</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col0\" class=\"data row10 col0\" >-0.129153</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col1\" class=\"data row10 col1\" >0.165981</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col2\" class=\"data row10 col2\" >-0.106812</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col3\" class=\"data row10 col3\" >-0.370376</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col4\" class=\"data row10 col4\" >0.199578</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col5\" class=\"data row10 col5\" >0.537415</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col6\" class=\"data row10 col6\" >0.685223</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col7\" class=\"data row10 col7\" >0.505768</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col8\" class=\"data row10 col8\" >0.471723</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col9\" class=\"data row10 col9\" >0.353620</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col11\" class=\"data row10 col11\" >0.412366</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col12\" class=\"data row10 col12\" >0.322253</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col13\" class=\"data row10 col13\" >0.355903</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col14\" class=\"data row10 col14\" >0.087248</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col15\" class=\"data row10 col15\" >-0.067463</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow10_col16\" class=\"data row10 col16\" >0.654403</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col0\" class=\"data row11 col0\" >-0.245642</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col1\" class=\"data row11 col1\" >0.296775</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col2\" class=\"data row11 col2\" >-0.082323</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col3\" class=\"data row11 col3\" >-0.218684</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col4\" class=\"data row11 col4\" >0.351784</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col5\" class=\"data row11 col5\" >0.490515</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col6\" class=\"data row11 col6\" >0.415882</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col7\" class=\"data row11 col7\" >0.424751</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col8\" class=\"data row11 col8\" >0.648429</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col9\" class=\"data row11 col9\" >0.446618</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col10\" class=\"data row11 col10\" >0.412366</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col12\" class=\"data row11 col12\" >0.159478</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col13\" class=\"data row11 col13\" >0.348952</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col14\" class=\"data row11 col14\" >0.065024</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col15\" class=\"data row11 col15\" >0.049661</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow11_col16\" class=\"data row11 col16\" >0.575514</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col0\" class=\"data row12 col0\" >-0.138342</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col1\" class=\"data row12 col1\" >0.129220</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col2\" class=\"data row12 col2\" >0.016405</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col3\" class=\"data row12 col3\" >-0.501182</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col4\" class=\"data row12 col4\" >0.169029</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col5\" class=\"data row12 col5\" >0.068242</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col6\" class=\"data row12 col6\" >0.247051</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col7\" class=\"data row12 col7\" >0.291158</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col8\" class=\"data row12 col8\" >0.448007</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col9\" class=\"data row12 col9\" >0.302269</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col10\" class=\"data row12 col10\" >0.322253</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col11\" class=\"data row12 col11\" >0.159478</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col13\" class=\"data row12 col13\" >0.392741</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col14\" class=\"data row12 col14\" >0.437053</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col15\" class=\"data row12 col15\" >0.487560</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow12_col16\" class=\"data row12 col16\" >0.358007</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col0\" class=\"data row13 col0\" >-0.141822</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col1\" class=\"data row13 col1\" >0.090462</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col2\" class=\"data row13 col2\" >0.064322</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col3\" class=\"data row13 col3\" >-0.290305</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col4\" class=\"data row13 col4\" >0.271457</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col5\" class=\"data row13 col5\" >0.313387</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col6\" class=\"data row13 col6\" >0.419532</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col7\" class=\"data row13 col7\" >0.508701</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col8\" class=\"data row13 col8\" >0.522916</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col9\" class=\"data row13 col9\" >0.410736</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col10\" class=\"data row13 col10\" >0.355903</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col11\" class=\"data row13 col11\" >0.348952</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col12\" class=\"data row13 col12\" >0.392741</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col14\" class=\"data row13 col14\" >0.427055</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col15\" class=\"data row13 col15\" >0.376864</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow13_col16\" class=\"data row13 col16\" >0.537311</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col0\" class=\"data row14 col0\" >-0.234271</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col1\" class=\"data row14 col1\" >-0.258556</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col2\" class=\"data row14 col2\" >-0.113620</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col3\" class=\"data row14 col3\" >-0.500769</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col4\" class=\"data row14 col4\" >0.115324</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col5\" class=\"data row14 col5\" >-0.203275</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col6\" class=\"data row14 col6\" >-0.150938</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col7\" class=\"data row14 col7\" >0.071789</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col8\" class=\"data row14 col8\" >0.273502</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col9\" class=\"data row14 col9\" >0.307610</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col10\" class=\"data row14 col10\" >0.087248</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col11\" class=\"data row14 col11\" >0.065024</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col12\" class=\"data row14 col12\" >0.437053</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col13\" class=\"data row14 col13\" >0.427055</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col15\" class=\"data row14 col15\" >0.577246</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow14_col16\" class=\"data row14 col16\" >-0.022652</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col0\" class=\"data row15 col0\" >-0.181728</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col1\" class=\"data row15 col1\" >-0.060010</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col2\" class=\"data row15 col2\" >0.108597</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col3\" class=\"data row15 col3\" >-0.238792</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col4\" class=\"data row15 col4\" >0.296562</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col5\" class=\"data row15 col5\" >-0.162504</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col6\" class=\"data row15 col6\" >-0.197044</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col7\" class=\"data row15 col7\" >-0.043771</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col8\" class=\"data row15 col8\" >0.175042</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col9\" class=\"data row15 col9\" >0.117249</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col10\" class=\"data row15 col10\" >-0.067463</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col11\" class=\"data row15 col11\" >0.049661</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col12\" class=\"data row15 col12\" >0.487560</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col13\" class=\"data row15 col13\" >0.376864</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col14\" class=\"data row15 col14\" >0.577246</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow15_col16\" class=\"data row15 col16\" >-0.117230</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4elevel0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col0\" class=\"data row16 col0\" >-0.142802</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col1\" class=\"data row16 col1\" >0.328004</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col2\" class=\"data row16 col2\" >-0.078234</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col3\" class=\"data row16 col3\" >-0.420656</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col4\" class=\"data row16 col4\" >0.275324</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col5\" class=\"data row16 col5\" >0.791418</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col6\" class=\"data row16 col6\" >0.875927</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col7\" class=\"data row16 col7\" >0.807304</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col8\" class=\"data row16 col8\" >0.752242</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col9\" class=\"data row16 col9\" >0.518086</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col10\" class=\"data row16 col10\" >0.654403</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col11\" class=\"data row16 col11\" >0.575514</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col12\" class=\"data row16 col12\" >0.358007</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col13\" class=\"data row16 col13\" >0.537311</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col14\" class=\"data row16 col14\" >-0.022652</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col15\" class=\"data row16 col15\" >-0.117230</td>\n",
        "                        <td id=\"T_7dd28afc_3d67_11eb_ae43_52540035dd4erow16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f52e8574790>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
