{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1596469977201"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-mu.new.57.72.167.176.191.fix.120.155.157.163.164.165.174.188.prep'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "184"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **10th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "2"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Bahamas', 'Papua New Guinea', 'Gambia']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "3"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Grenada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brunei'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Montenegro'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Peru'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Antigua and Barbuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tanzania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lesotho'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Seychelles'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritius'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Lucia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iceland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Benin'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Norway'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Suriname'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sao Tome and Principe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Vincent and the Grenadines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Botswana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'New Zealand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Central African Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liechtenstein'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zambia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guatemala'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belize'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Paraguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zimbabwe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Palestine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kyrgyzstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ethiopia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guyana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Venezuela'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malawi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Eritrea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Madagascar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lebanon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Angola'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Netherlands'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Haiti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Morocco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Swaziland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Philippines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Croatia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Equatorial Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Libya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kosovo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chad'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nicaragua'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Comoros'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bermuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cambodia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Andorra'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Japan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kenya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bolivia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Argentina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Costa Rica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Colombia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Niger'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bosnia and Herzegovina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malta'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea-Bissau'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Syria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ireland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovakia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "6"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Rwanda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Thailand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Macedonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sri Lanka'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Panama'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cape Verde'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uganda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'San Marino'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Taiwan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bulgaria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Afghanistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Barbados'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Albania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Trinidad and Tobago'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cyprus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mongolia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cameroon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burundi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Switzerland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Congo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Azerbaijan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'El Salvador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Togo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ecuador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Germany'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Honduras'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tajikistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Latvia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Africa'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Israel'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Somalia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kazakhstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Yemen'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Australia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'India'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Spain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Oman'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iraq'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uzbekistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "7"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Algeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burkina Faso'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Gabon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Myanmar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Qatar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mali'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'China'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Egypt'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sierra Leone'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lithuania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Pakistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Djibouti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Maldives'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jordan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Finland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mozambique'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bangladesh'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nepal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ghana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brazil'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Luxembourg'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Armenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liberia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Serbia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Greece'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belgium'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Indonesia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Dominican Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tunisia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Estonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bhutan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Monaco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cuba'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belarus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "8"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jamaica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Singapore'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chile'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uruguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Vietnam'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malaysia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Russia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Romania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Hungary'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nigeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Georgia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United States'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Turkey'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Denmark'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'France'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kuwait'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Bahrain', 'Iran', 'Guinea', 'Senegal']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=10)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "4"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{10: ['Bahrain', 'Iran', 'Guinea', 'Senegal']}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>19May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>08Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jun2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439\n",
        "        2nd    Past  26May2020  04Jun2020     1569439\n",
        "        3rd    Past  05Jun2020  13Jun2020     1569439\n",
        "        4th    Past  14Jun2020  21Jun2020     1569439\n",
        "        5th    Past  22Jun2020  29Jun2020     1569439\n",
        "        6th    Past  30Jun2020  07Jul2020     1569439\n",
        "        7th    Past  08Jul2020  15Jul2020     1569439\n",
        "        8th    Past  16Jul2020  25Jul2020     1569439\n",
        "        9th    Past  26Jul2020  04Aug2020     1569439\n",
        "        10th   Past  05Aug2020  16Aug2020     1569439\n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269\n",
        "        2nd    Past  13Apr2020  04May2020    81800269\n",
        "        3rd    Past  05May2020  20May2020    81800269\n",
        "        4th    Past  21May2020  02Jun2020    81800269\n",
        "        5th    Past  03Jun2020  15Jun2020    81800269\n",
        "        6th    Past  16Jun2020  27Jun2020    81800269\n",
        "        7th    Past  28Jun2020  09Jul2020    81800269\n",
        "        8th    Past  10Jul2020  21Jul2020    81800269\n",
        "        9th    Past  22Jul2020  02Aug2020    81800269\n",
        "        10th   Past  03Aug2020  16Aug2020    81800269\n",
        "Guinea  1st    Past  02May2020  11May2020    12414318\n",
        "        2nd    Past  12May2020  19May2020    12414318\n",
        "        3rd    Past  20May2020  28May2020    12414318\n",
        "        4th    Past  29May2020  08Jun2020    12414318\n",
        "        5th    Past  09Jun2020  17Jun2020    12414318\n",
        "        6th    Past  18Jun2020  02Jul2020    12414318\n",
        "        7th    Past  03Jul2020  14Jul2020    12414318\n",
        "        8th    Past  15Jul2020  23Jul2020    12414318\n",
        "        9th    Past  24Jul2020  03Aug2020    12414318\n",
        "        10th   Past  04Aug2020  16Aug2020    12414318\n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360\n",
        "        2nd    Past  15May2020  29May2020    15854360\n",
        "        3rd    Past  30May2020  09Jun2020    15854360\n",
        "        4th    Past  10Jun2020  19Jun2020    15854360\n",
        "        5th    Past  20Jun2020  30Jun2020    15854360\n",
        "        6th    Past  01Jul2020  10Jul2020    15854360\n",
        "        7th    Past  11Jul2020  20Jul2020    15854360\n",
        "        8th    Past  21Jul2020  28Jul2020    15854360\n",
        "        9th    Past  29Jul2020  06Aug2020    15854360\n",
        "        10th   Past  07Aug2020  16Aug2020    15854360"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN, 10th phase (03Aug2020 - 16Aug2020): finished  434 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  2nd phase (26May2020 - 04Jun2020): finished 1093 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  1st phase (06May2020 - 25May2020): finished 1852 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  4th phase (14Jun2020 - 21Jun2020): finished 1854 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  7th phase (11Jul2020 - 20Jul2020): finished  432 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  7th phase (03Jul2020 - 14Jul2020): finished 1847 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  2nd phase (13Apr2020 - 04May2020): finished  603 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  5th phase (09Jun2020 - 17Jun2020): finished  619 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  2nd phase (12May2020 - 19May2020): finished 1880 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR, 10th phase (05Aug2020 - 16Aug2020): finished  218 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  7th phase (28Jun2020 - 09Jul2020): finished  233 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  9th phase (29Jul2020 - 06Aug2020): finished  630 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  3rd phase (05Jun2020 - 13Jun2020): finished 1910 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  7th phase (08Jul2020 - 15Jul2020): finished 1863 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  5th phase (22Jun2020 - 29Jun2020): finished 1870 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  9th phase (22Jul2020 - 02Aug2020): finished  225 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  3rd phase (30May2020 - 09Jun2020): finished 1866 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  4th phase (21May2020 - 02Jun2020): finished 1854 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  5th phase (20Jun2020 - 30Jun2020): finished  609 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  8th phase (21Jul2020 - 28Jul2020): finished 1878 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN, 10th phase (04Aug2020 - 16Aug2020): finished  600 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  9th phase (24Jul2020 - 03Aug2020): finished 1895 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  6th phase (01Jul2020 - 10Jul2020): finished 1878 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  8th phase (10Jul2020 - 21Jul2020): finished  233 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  5th phase (03Jun2020 - 15Jun2020): finished  630 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  6th phase (30Jun2020 - 07Jul2020): finished  617 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  4th phase (29May2020 - 08Jun2020): finished 1875 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  4th phase (10Jun2020 - 19Jun2020): finished 1884 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  9th phase (26Jul2020 - 04Aug2020): finished  433 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  1st phase (28Mar2020 - 12Apr2020): finished 1868 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  1st phase (30Apr2020 - 14May2020): finished 1861 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  8th phase (15Jul2020 - 23Jul2020): finished 1863 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  6th phase (18Jun2020 - 02Jul2020): finished 1859 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  3rd phase (05May2020 - 20May2020): finished  422 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  1st phase (02May2020 - 11May2020): finished 1849 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN, 10th phase (07Aug2020 - 16Aug2020): finished  637 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  6th phase (16Jun2020 - 27Jun2020): finished 1894 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  8th phase (16Jul2020 - 25Jul2020): finished  449 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  3rd phase (20May2020 - 28May2020): finished 1966 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  2nd phase (15May2020 - 29May2020): finished 2076 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 7 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.63</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>31</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>0.174479</td>\n",
        "      <td>1852</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.44</td>\n",
        "      <td>0.000019</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.022700</td>\n",
        "      <td>0.015726</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>15</td>\n",
        "      <td>6137</td>\n",
        "      <td>11</td>\n",
        "      <td>0.042331</td>\n",
        "      <td>1093</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.02</td>\n",
        "      <td>0.000011</td>\n",
        "      <td>0.000099</td>\n",
        "      <td>0.021976</td>\n",
        "      <td>0.021443</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>11</td>\n",
        "      <td>2526</td>\n",
        "      <td>11</td>\n",
        "      <td>0.027213</td>\n",
        "      <td>1910</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.000636</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.022416</td>\n",
        "      <td>0.022518</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>11</td>\n",
        "      <td>2143</td>\n",
        "      <td>11</td>\n",
        "      <td>0.032996</td>\n",
        "      <td>1854</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.93</td>\n",
        "      <td>0.000487</td>\n",
        "      <td>0.000106</td>\n",
        "      <td>0.024455</td>\n",
        "      <td>0.026103</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>9</td>\n",
        "      <td>2363</td>\n",
        "      <td>10</td>\n",
        "      <td>0.022274</td>\n",
        "      <td>1870</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.84</td>\n",
        "      <td>0.000252</td>\n",
        "      <td>0.000076</td>\n",
        "      <td>0.026814</td>\n",
        "      <td>0.032004</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>7</td>\n",
        "      <td>3296</td>\n",
        "      <td>9</td>\n",
        "      <td>0.019609</td>\n",
        "      <td>617</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.000637</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.030096</td>\n",
        "      <td>0.034677</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>2144</td>\n",
        "      <td>8</td>\n",
        "      <td>0.016334</td>\n",
        "      <td>1863</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.000491</td>\n",
        "      <td>0.000096</td>\n",
        "      <td>0.029834</td>\n",
        "      <td>0.034328</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>7</td>\n",
        "      <td>2598</td>\n",
        "      <td>8</td>\n",
        "      <td>0.013540</td>\n",
        "      <td>449</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.000348</td>\n",
        "      <td>0.000080</td>\n",
        "      <td>0.029303</td>\n",
        "      <td>0.033168</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>7</td>\n",
        "      <td>3123</td>\n",
        "      <td>8</td>\n",
        "      <td>0.028659</td>\n",
        "      <td>433</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.024261</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>10</td>\n",
        "      <td>3514</td>\n",
        "      <td>8</td>\n",
        "      <td>0.020073</td>\n",
        "      <td>218</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.35</td>\n",
        "      <td>0.052383</td>\n",
        "      <td>0.000156</td>\n",
        "      <td>0.023055</td>\n",
        "      <td>0.016002</td>\n",
        "      <td>360</td>\n",
        "      <td>0.052</td>\n",
        "      <td>15</td>\n",
        "      <td>1599</td>\n",
        "      <td>10</td>\n",
        "      <td>0.195790</td>\n",
        "      <td>1868</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.70</td>\n",
        "      <td>0.026814</td>\n",
        "      <td>0.000725</td>\n",
        "      <td>0.018222</td>\n",
        "      <td>0.024623</td>\n",
        "      <td>360</td>\n",
        "      <td>0.027</td>\n",
        "      <td>10</td>\n",
        "      <td>344</td>\n",
        "      <td>13</td>\n",
        "      <td>0.030652</td>\n",
        "      <td>603</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.42</td>\n",
        "      <td>0.018373</td>\n",
        "      <td>0.000483</td>\n",
        "      <td>0.026592</td>\n",
        "      <td>0.017854</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>14</td>\n",
        "      <td>517</td>\n",
        "      <td>9</td>\n",
        "      <td>0.019420</td>\n",
        "      <td>422</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.17</td>\n",
        "      <td>0.000945</td>\n",
        "      <td>0.000603</td>\n",
        "      <td>0.024190</td>\n",
        "      <td>0.019984</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>12</td>\n",
        "      <td>414</td>\n",
        "      <td>10</td>\n",
        "      <td>0.013543</td>\n",
        "      <td>1854</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.11</td>\n",
        "      <td>0.017161</td>\n",
        "      <td>0.000338</td>\n",
        "      <td>0.020119</td>\n",
        "      <td>0.017535</td>\n",
        "      <td>360</td>\n",
        "      <td>0.017</td>\n",
        "      <td>14</td>\n",
        "      <td>740</td>\n",
        "      <td>12</td>\n",
        "      <td>0.019490</td>\n",
        "      <td>630</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.96</td>\n",
        "      <td>0.000320</td>\n",
        "      <td>0.000970</td>\n",
        "      <td>0.020738</td>\n",
        "      <td>0.020516</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>12</td>\n",
        "      <td>257</td>\n",
        "      <td>12</td>\n",
        "      <td>0.022436</td>\n",
        "      <td>1894</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.92</td>\n",
        "      <td>0.058897</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.023455</td>\n",
        "      <td>0.023965</td>\n",
        "      <td>360</td>\n",
        "      <td>0.059</td>\n",
        "      <td>10</td>\n",
        "      <td>3510</td>\n",
        "      <td>10</td>\n",
        "      <td>0.007695</td>\n",
        "      <td>233</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.065878</td>\n",
        "      <td>0.000562</td>\n",
        "      <td>0.024587</td>\n",
        "      <td>0.026143</td>\n",
        "      <td>360</td>\n",
        "      <td>0.066</td>\n",
        "      <td>9</td>\n",
        "      <td>444</td>\n",
        "      <td>10</td>\n",
        "      <td>0.007631</td>\n",
        "      <td>233</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.082387</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>360</td>\n",
        "      <td>0.082</td>\n",
        "      <td>10</td>\n",
        "      <td>3708</td>\n",
        "      <td>8</td>\n",
        "      <td>0.008688</td>\n",
        "      <td>225</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.044434</td>\n",
        "      <td>0.000622</td>\n",
        "      <td>0.022579</td>\n",
        "      <td>0.019800</td>\n",
        "      <td>360</td>\n",
        "      <td>0.044</td>\n",
        "      <td>12</td>\n",
        "      <td>401</td>\n",
        "      <td>11</td>\n",
        "      <td>0.024890</td>\n",
        "      <td>434</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.77</td>\n",
        "      <td>0.000060</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.012669</td>\n",
        "      <td>0.007044</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>35</td>\n",
        "      <td>2048</td>\n",
        "      <td>19</td>\n",
        "      <td>0.082589</td>\n",
        "      <td>1849</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>19May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.000176</td>\n",
        "      <td>0.013064</td>\n",
        "      <td>0.011474</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>21</td>\n",
        "      <td>1419</td>\n",
        "      <td>19</td>\n",
        "      <td>0.077227</td>\n",
        "      <td>1880</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.15</td>\n",
        "      <td>0.000666</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.014206</td>\n",
        "      <td>0.006554</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>38</td>\n",
        "      <td>6775</td>\n",
        "      <td>17</td>\n",
        "      <td>0.047430</td>\n",
        "      <td>1966</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>08Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.67</td>\n",
        "      <td>0.000663</td>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.011765</td>\n",
        "      <td>0.017434</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>10518</td>\n",
        "      <td>21</td>\n",
        "      <td>0.063894</td>\n",
        "      <td>1875</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.000256</td>\n",
        "      <td>0.000076</td>\n",
        "      <td>0.008303</td>\n",
        "      <td>0.009056</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>27</td>\n",
        "      <td>3296</td>\n",
        "      <td>30</td>\n",
        "      <td>0.018590</td>\n",
        "      <td>619</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jun2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.58</td>\n",
        "      <td>0.001277</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.007497</td>\n",
        "      <td>0.012860</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>19</td>\n",
        "      <td>3051</td>\n",
        "      <td>33</td>\n",
        "      <td>0.053645</td>\n",
        "      <td>1859</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.58</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000104</td>\n",
        "      <td>0.012511</td>\n",
        "      <td>0.007832</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>31</td>\n",
        "      <td>2400</td>\n",
        "      <td>19</td>\n",
        "      <td>0.028288</td>\n",
        "      <td>1847</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.51</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.000082</td>\n",
        "      <td>0.016311</td>\n",
        "      <td>0.031821</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>3051</td>\n",
        "      <td>15</td>\n",
        "      <td>0.042014</td>\n",
        "      <td>1863</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.09</td>\n",
        "      <td>0.000131</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.017826</td>\n",
        "      <td>0.016187</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>15</td>\n",
        "      <td>1486</td>\n",
        "      <td>14</td>\n",
        "      <td>0.028080</td>\n",
        "      <td>1895</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.40</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>19</td>\n",
        "      <td>6769</td>\n",
        "      <td>13</td>\n",
        "      <td>0.027903</td>\n",
        "      <td>600</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.46</td>\n",
        "      <td>0.000362</td>\n",
        "      <td>0.000255</td>\n",
        "      <td>0.025118</td>\n",
        "      <td>0.009952</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>25</td>\n",
        "      <td>979</td>\n",
        "      <td>9</td>\n",
        "      <td>0.103196</td>\n",
        "      <td>1861</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.000172</td>\n",
        "      <td>0.000165</td>\n",
        "      <td>0.012952</td>\n",
        "      <td>0.010079</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>24</td>\n",
        "      <td>1518</td>\n",
        "      <td>19</td>\n",
        "      <td>0.040043</td>\n",
        "      <td>2076</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.000546</td>\n",
        "      <td>0.000148</td>\n",
        "      <td>0.013077</td>\n",
        "      <td>0.013792</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>18</td>\n",
        "      <td>1690</td>\n",
        "      <td>19</td>\n",
        "      <td>0.051299</td>\n",
        "      <td>1866</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.97</td>\n",
        "      <td>0.015244</td>\n",
        "      <td>0.000183</td>\n",
        "      <td>0.015596</td>\n",
        "      <td>0.015578</td>\n",
        "      <td>360</td>\n",
        "      <td>0.015</td>\n",
        "      <td>16</td>\n",
        "      <td>1367</td>\n",
        "      <td>16</td>\n",
        "      <td>0.020905</td>\n",
        "      <td>1884</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.75</td>\n",
        "      <td>0.000648</td>\n",
        "      <td>0.000361</td>\n",
        "      <td>0.012464</td>\n",
        "      <td>0.006773</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>36</td>\n",
        "      <td>692</td>\n",
        "      <td>20</td>\n",
        "      <td>0.015926</td>\n",
        "      <td>609</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.27</td>\n",
        "      <td>0.032005</td>\n",
        "      <td>0.000019</td>\n",
        "      <td>0.011261</td>\n",
        "      <td>0.008546</td>\n",
        "      <td>360</td>\n",
        "      <td>0.032</td>\n",
        "      <td>29</td>\n",
        "      <td>13292</td>\n",
        "      <td>22</td>\n",
        "      <td>0.020087</td>\n",
        "      <td>1878</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.000630</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.009430</td>\n",
        "      <td>0.006701</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>37</td>\n",
        "      <td>1065</td>\n",
        "      <td>26</td>\n",
        "      <td>0.011093</td>\n",
        "      <td>432</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.70</td>\n",
        "      <td>0.017807</td>\n",
        "      <td>0.000086</td>\n",
        "      <td>0.011672</td>\n",
        "      <td>0.006641</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>37</td>\n",
        "      <td>2908</td>\n",
        "      <td>21</td>\n",
        "      <td>0.012224</td>\n",
        "      <td>1878</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.65</td>\n",
        "      <td>0.001014</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.007286</td>\n",
        "      <td>0.004197</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>59</td>\n",
        "      <td>1161</td>\n",
        "      <td>34</td>\n",
        "      <td>0.009632</td>\n",
        "      <td>630</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.39</td>\n",
        "      <td>0.001022</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.008737</td>\n",
        "      <td>0.003444</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>72</td>\n",
        "      <td>1161</td>\n",
        "      <td>28</td>\n",
        "      <td>0.011604</td>\n",
        "      <td>637</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt     theta  \\\n",
        "Country Phase                                                                  \n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439  SIR-F  2.63  0.001254   \n",
        "        2nd    Past  26May2020  04Jun2020     1569439  SIR-F  1.44  0.000019   \n",
        "        3rd    Past  05Jun2020  13Jun2020     1569439  SIR-F  1.02  0.000011   \n",
        "        4th    Past  14Jun2020  21Jun2020     1569439  SIR-F  0.99  0.000636   \n",
        "        5th    Past  22Jun2020  29Jun2020     1569439  SIR-F  0.93  0.000487   \n",
        "        6th    Past  30Jun2020  07Jul2020     1569439  SIR-F  0.84  0.000252   \n",
        "        7th    Past  08Jul2020  15Jul2020     1569439  SIR-F  0.86  0.000637   \n",
        "        8th    Past  16Jul2020  25Jul2020     1569439  SIR-F  0.87  0.000491   \n",
        "        9th    Past  26Jul2020  04Aug2020     1569439  SIR-F  0.88  0.000348   \n",
        "        10th   Past  05Aug2020  16Aug2020     1569439  SIR-F  1.25  0.001149   \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269  SIR-F  1.35  0.052383   \n",
        "        2nd    Past  13Apr2020  04May2020    81800269  SIR-F  0.70  0.026814   \n",
        "        3rd    Past  05May2020  20May2020    81800269  SIR-F  1.42  0.018373   \n",
        "        4th    Past  21May2020  02Jun2020    81800269  SIR-F  1.17  0.000945   \n",
        "        5th    Past  03Jun2020  15Jun2020    81800269  SIR-F  1.11  0.017161   \n",
        "        6th    Past  16Jun2020  27Jun2020    81800269  SIR-F  0.96  0.000320   \n",
        "        7th    Past  28Jun2020  09Jul2020    81800269  SIR-F  0.92  0.058897   \n",
        "        8th    Past  10Jul2020  21Jul2020    81800269  SIR-F  0.86  0.065878   \n",
        "        9th    Past  22Jul2020  02Aug2020    81800269  SIR-F  1.12  0.082387   \n",
        "        10th   Past  03Aug2020  16Aug2020    81800269  SIR-F  1.06  0.044434   \n",
        "Guinea  1st    Past  02May2020  11May2020    12414318  SIR-F  1.77  0.000060   \n",
        "        2nd    Past  12May2020  19May2020    12414318  SIR-F  1.12  0.000154   \n",
        "        3rd    Past  20May2020  28May2020    12414318  SIR-F  2.15  0.000666   \n",
        "        4th    Past  29May2020  08Jun2020    12414318  SIR-F  0.67  0.000663   \n",
        "        5th    Past  09Jun2020  17Jun2020    12414318  SIR-F  0.91  0.000256   \n",
        "        6th    Past  18Jun2020  02Jul2020    12414318  SIR-F  0.58  0.001277   \n",
        "        7th    Past  03Jul2020  14Jul2020    12414318  SIR-F  1.58  0.000122   \n",
        "        8th    Past  15Jul2020  23Jul2020    12414318  SIR-F  0.51  0.001267   \n",
        "        9th    Past  24Jul2020  03Aug2020    12414318  SIR-F  1.09  0.000131   \n",
        "        10th   Past  04Aug2020  16Aug2020    12414318  SIR-F  1.40  0.000665   \n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360  SIR-F  2.46  0.000362   \n",
        "        2nd    Past  15May2020  29May2020    15854360  SIR-F  1.26  0.000172   \n",
        "        3rd    Past  30May2020  09Jun2020    15854360  SIR-F  0.94  0.000546   \n",
        "        4th    Past  10Jun2020  19Jun2020    15854360  SIR-F  0.97  0.015244   \n",
        "        5th    Past  20Jun2020  30Jun2020    15854360  SIR-F  1.75  0.000648   \n",
        "        6th    Past  01Jul2020  10Jul2020    15854360  SIR-F  1.27  0.032005   \n",
        "        7th    Past  11Jul2020  20Jul2020    15854360  SIR-F  1.36  0.000630   \n",
        "        8th    Past  21Jul2020  28Jul2020    15854360  SIR-F  1.70  0.017807   \n",
        "        9th    Past  29Jul2020  06Aug2020    15854360  SIR-F  1.65  0.001014   \n",
        "        10th   Past  07Aug2020  16Aug2020    15854360  SIR-F  2.39  0.001022   \n",
        "\n",
        "                  kappa       rho     sigma  tau  alpha1 [-]  1/gamma [day]  \\\n",
        "Country Phase                                                                 \n",
        "Bahrain 1st    0.000001  0.020811  0.007911  360       0.001             31   \n",
        "        2nd    0.000041  0.022700  0.015726  360       0.000             15   \n",
        "        3rd    0.000099  0.021976  0.021443  360       0.000             11   \n",
        "        4th    0.000117  0.022416  0.022518  360       0.001             11   \n",
        "        5th    0.000106  0.024455  0.026103  360       0.000              9   \n",
        "        6th    0.000076  0.026814  0.032004  360       0.000              7   \n",
        "        7th    0.000117  0.030096  0.034677  360       0.001              7   \n",
        "        8th    0.000096  0.029834  0.034328  360       0.000              7   \n",
        "        9th    0.000080  0.029303  0.033168  360       0.000              7   \n",
        "        10th   0.000071  0.030386  0.024261  360       0.001             10   \n",
        "Iran    1st    0.000156  0.023055  0.016002  360       0.052             15   \n",
        "        2nd    0.000725  0.018222  0.024623  360       0.027             10   \n",
        "        3rd    0.000483  0.026592  0.017854  360       0.018             14   \n",
        "        4th    0.000603  0.024190  0.019984  360       0.001             12   \n",
        "        5th    0.000338  0.020119  0.017535  360       0.017             14   \n",
        "        6th    0.000970  0.020738  0.020516  360       0.000             12   \n",
        "        7th    0.000071  0.023455  0.023965  360       0.059             10   \n",
        "        8th    0.000562  0.024587  0.026143  360       0.066              9   \n",
        "        9th    0.000067  0.028204  0.022989  360       0.082             10   \n",
        "        10th   0.000622  0.022579  0.019800  360       0.044             12   \n",
        "Guinea  1st    0.000122  0.012669  0.007044  360       0.000             35   \n",
        "        2nd    0.000176  0.013064  0.011474  360       0.000             21   \n",
        "        3rd    0.000037  0.014206  0.006554  360       0.001             38   \n",
        "        4th    0.000024  0.011765  0.017434  360       0.001             14   \n",
        "        5th    0.000076  0.008303  0.009056  360       0.000             27   \n",
        "        6th    0.000082  0.007497  0.012860  360       0.001             19   \n",
        "        7th    0.000104  0.012511  0.007832  360       0.000             31   \n",
        "        8th    0.000082  0.016311  0.031821  360       0.001              7   \n",
        "        9th    0.000168  0.017826  0.016187  360       0.000             15   \n",
        "        10th   0.000037  0.018092  0.012832  360       0.001             19   \n",
        "Senegal 1st    0.000255  0.025118  0.009952  360       0.000             25   \n",
        "        2nd    0.000165  0.012952  0.010079  360       0.000             24   \n",
        "        3rd    0.000148  0.013077  0.013792  360       0.001             18   \n",
        "        4th    0.000183  0.015596  0.015578  360       0.015             16   \n",
        "        5th    0.000361  0.012464  0.006773  360       0.001             36   \n",
        "        6th    0.000019  0.011261  0.008546  360       0.032             29   \n",
        "        7th    0.000235  0.009430  0.006701  360       0.001             37   \n",
        "        8th    0.000086  0.011672  0.006641  360       0.018             37   \n",
        "        9th    0.000215  0.007286  0.004197  360       0.001             59   \n",
        "        10th   0.000215  0.008737  0.003444  360       0.001             72   \n",
        "\n",
        "               1/alpha2 [day]  1/beta [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                                \n",
        "Bahrain 1st            174012            12  0.174479    1852  1 min  0 sec  \n",
        "        2nd              6137            11  0.042331    1093  0 min 30 sec  \n",
        "        3rd              2526            11  0.027213    1910  1 min  0 sec  \n",
        "        4th              2143            11  0.032996    1854  1 min  0 sec  \n",
        "        5th              2363            10  0.022274    1870  1 min  0 sec  \n",
        "        6th              3296             9  0.019609     617  0 min 15 sec  \n",
        "        7th              2144             8  0.016334    1863  1 min  0 sec  \n",
        "        8th              2598             8  0.013540     449  0 min 10 sec  \n",
        "        9th              3123             8  0.028659     433  0 min 10 sec  \n",
        "        10th             3514             8  0.020073     218  0 min  5 sec  \n",
        "Iran    1st              1599            10  0.195790    1868  1 min  0 sec  \n",
        "        2nd               344            13  0.030652     603  0 min 15 sec  \n",
        "        3rd               517             9  0.019420     422  0 min 10 sec  \n",
        "        4th               414            10  0.013543    1854  1 min  0 sec  \n",
        "        5th               740            12  0.019490     630  0 min 15 sec  \n",
        "        6th               257            12  0.022436    1894  1 min  0 sec  \n",
        "        7th              3510            10  0.007695     233  0 min  5 sec  \n",
        "        8th               444            10  0.007631     233  0 min  5 sec  \n",
        "        9th              3708             8  0.008688     225  0 min  5 sec  \n",
        "        10th              401            11  0.024890     434  0 min 10 sec  \n",
        "Guinea  1st              2048            19  0.082589    1849  1 min  0 sec  \n",
        "        2nd              1419            19  0.077227    1880  1 min  0 sec  \n",
        "        3rd              6775            17  0.047430    1966  1 min  0 sec  \n",
        "        4th             10518            21  0.063894    1875  1 min  0 sec  \n",
        "        5th              3296            30  0.018590     619  0 min 15 sec  \n",
        "        6th              3051            33  0.053645    1859  1 min  0 sec  \n",
        "        7th              2400            19  0.028288    1847  1 min  0 sec  \n",
        "        8th              3051            15  0.042014    1863  1 min  0 sec  \n",
        "        9th              1486            14  0.028080    1895  1 min  0 sec  \n",
        "        10th             6769            13  0.027903     600  0 min 15 sec  \n",
        "Senegal 1st               979             9  0.103196    1861  1 min  0 sec  \n",
        "        2nd              1518            19  0.040043    2076  1 min  0 sec  \n",
        "        3rd              1690            19  0.051299    1866  1 min  0 sec  \n",
        "        4th              1367            16  0.020905    1884  1 min  0 sec  \n",
        "        5th               692            20  0.015926     609  0 min 15 sec  \n",
        "        6th             13292            22  0.020087    1878  1 min  0 sec  \n",
        "        7th              1065            26  0.011093     432  0 min 10 sec  \n",
        "        8th              2908            21  0.012224    1878  1 min  0 sec  \n",
        "        9th              1161            34  0.009632     630  0 min 15 sec  \n",
        "        10th             1161            28  0.011604     637  0 min 15 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-05-06</td>\n",
        "      <td>Bahrain</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>0.001</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>31</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>75.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-05-07</td>\n",
        "      <td>Bahrain</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>0.001</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>31</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>75.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-05-08</td>\n",
        "      <td>Bahrain</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>0.001</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>31</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>75.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-05-09</td>\n",
        "      <td>Bahrain</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>0.001</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>31</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>75.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-05-10</td>\n",
        "      <td>Bahrain</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>0.001</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>31</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>75.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date  Country     theta     kappa       rho     sigma  alpha1 [-]  \\\n",
        "0 2020-05-06  Bahrain  0.001254  0.000001  0.020811  0.007911       0.001   \n",
        "1 2020-05-07  Bahrain  0.001254  0.000001  0.020811  0.007911       0.001   \n",
        "2 2020-05-08  Bahrain  0.001254  0.000001  0.020811  0.007911       0.001   \n",
        "3 2020-05-09  Bahrain  0.001254  0.000001  0.020811  0.007911       0.001   \n",
        "4 2020-05-10  Bahrain  0.001254  0.000001  0.020811  0.007911       0.001   \n",
        "\n",
        "   1/alpha2 [day]  1/beta [day]  1/gamma [day]  ...  Cancel_events  \\\n",
        "0          174012            12             31  ...              2   \n",
        "1          174012            12             31  ...              2   \n",
        "2          174012            12             31  ...              2   \n",
        "3          174012            12             31  ...              2   \n",
        "4          174012            12             31  ...              2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        4                  1                       1   \n",
        "1                        4                  1                       1   \n",
        "2                        4                  1                       1   \n",
        "3                        4                  1                       1   \n",
        "4                        4                  1                       1   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               1                                    3   \n",
        "1                               1                                    3   \n",
        "2                               1                                    3   \n",
        "3                               1                                    3   \n",
        "4                               1                                    3   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               3                2              75.0  \n",
        "1                      2               3                2              75.0  \n",
        "2                      2               3                2              75.0  \n",
        "3                      2               3                2              75.0  \n",
        "4                      2               3                2              75.0  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Senegal</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>1.25</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.06</td>\n",
        "      <td>2.39</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>1.25</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.06</td>\n",
        "      <td>2.39</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>1.25</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.06</td>\n",
        "      <td>2.39</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>1.25</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.06</td>\n",
        "      <td>2.39</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>1.25</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.06</td>\n",
        "      <td>2.39</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Bahrain  Guinea  Iran  Senegal\n",
        "Date                                      \n",
        "2020-08-12     1.25     1.4  1.06     2.39\n",
        "2020-08-13     1.25     1.4  1.06     2.39\n",
        "2020-08-14     1.25     1.4  1.06     2.39\n",
        "2020-08-15     1.25     1.4  1.06     2.39\n",
        "2020-08-16     1.25     1.4  1.06     2.39"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Senegal</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022579</td>\n",
        "      <td>0.008737</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022579</td>\n",
        "      <td>0.008737</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022579</td>\n",
        "      <td>0.008737</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022579</td>\n",
        "      <td>0.008737</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022579</td>\n",
        "      <td>0.008737</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Bahrain    Guinea      Iran   Senegal\n",
        "Date                                              \n",
        "2020-08-12  0.030386  0.018092  0.022579  0.008737\n",
        "2020-08-13  0.030386  0.018092  0.022579  0.008737\n",
        "2020-08-14  0.030386  0.018092  0.022579  0.008737\n",
        "2020-08-15  0.030386  0.018092  0.022579  0.008737\n",
        "2020-08-16  0.030386  0.018092  0.022579  0.008737"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Senegal</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.0198</td>\n",
        "      <td>0.003444</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.0198</td>\n",
        "      <td>0.003444</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.0198</td>\n",
        "      <td>0.003444</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.0198</td>\n",
        "      <td>0.003444</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.0198</td>\n",
        "      <td>0.003444</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Bahrain    Guinea    Iran   Senegal\n",
        "Date                                            \n",
        "2020-08-12  0.024261  0.012832  0.0198  0.003444\n",
        "2020-08-13  0.024261  0.012832  0.0198  0.003444\n",
        "2020-08-14  0.024261  0.012832  0.0198  0.003444\n",
        "2020-08-15  0.024261  0.012832  0.0198  0.003444\n",
        "2020-08-16  0.024261  0.012832  0.0198  0.003444"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Senegal</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000622</td>\n",
        "      <td>0.000215</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000622</td>\n",
        "      <td>0.000215</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000622</td>\n",
        "      <td>0.000215</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000622</td>\n",
        "      <td>0.000215</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000622</td>\n",
        "      <td>0.000215</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Bahrain    Guinea      Iran   Senegal\n",
        "Date                                              \n",
        "2020-08-12  0.000071  0.000037  0.000622  0.000215\n",
        "2020-08-13  0.000071  0.000037  0.000622  0.000215\n",
        "2020-08-14  0.000071  0.000037  0.000622  0.000215\n",
        "2020-08-15  0.000071  0.000037  0.000622  0.000215\n",
        "2020-08-16  0.000071  0.000037  0.000622  0.000215"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Senegal</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.044434</td>\n",
        "      <td>0.001022</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.044434</td>\n",
        "      <td>0.001022</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.044434</td>\n",
        "      <td>0.001022</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.044434</td>\n",
        "      <td>0.001022</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.044434</td>\n",
        "      <td>0.001022</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Bahrain    Guinea      Iran   Senegal\n",
        "Date                                              \n",
        "2020-08-12  0.001149  0.000665  0.044434  0.001022\n",
        "2020-08-13  0.001149  0.000665  0.044434  0.001022\n",
        "2020-08-14  0.001149  0.000665  0.044434  0.001022\n",
        "2020-08-15  0.001149  0.000665  0.044434  0.001022\n",
        "2020-08-16  0.001149  0.000665  0.044434  0.001022"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import seaborn as sns\n",
      "from matplotlib import pyplot as plt\n",
      "# Reproduction number\n",
      "df = analyser.track()\n",
      "delay = 14\n",
      "df[\"Rt\"] = df.loc[:, \"Rt\"].shift(0 - abs(delay))\n",
      "df = df.dropna(how=\"any\")\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "zero-size array to reduction operation minimum which has no identity",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
        "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0mFigureCanvasBase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2191\u001b[0m                            else suppress())\n\u001b[1;32m   2192\u001b[0m                     \u001b[0;32mwith\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2193\u001b[0;31m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2194\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2195\u001b[0m                     bbox_inches = self.figure.get_tightbbox(\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1863\u001b[0;31m             mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   1864\u001b[0m                 renderer, self, artists, self.suppressComposite)\n\u001b[1;32m   1865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    409\u001b[0m                          \u001b[0;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m                 **kwargs)\n\u001b[0;32m--> 411\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2746\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2747\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2748\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2749\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2750\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    929\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_sizes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m         \u001b[0mCollection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    383\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m                 \u001b[0mcombined_transform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 385\u001b[0;31m             \u001b[0mextents\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpaths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_extents\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined_transform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m             if (extents.width < self.figure.bbox.width\n\u001b[1;32m    387\u001b[0m                     and extents.height < self.figure.bbox.height):\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/matplotlib/path.py\u001b[0m in \u001b[0;36mget_extents\u001b[0;34m(self, transform, **kwargs)\u001b[0m\n\u001b[1;32m    601\u001b[0m                 \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mdzeros\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m             \u001b[0mxys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mBbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    604\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    605\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mintersects_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilled\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;32m~/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_amin\u001b[0;34m(a, axis, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m     41\u001b[0m def _amin(a, axis=None, out=None, keepdims=False,\n\u001b[1;32m     42\u001b[0m           initial=_NoValue, where=True):\n\u001b[0;32m---> 43\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mumr_minimum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m def _sum(a, axis=None, dtype=None, out=None, keepdims=False,\n",
        "\u001b[0;31mValueError\u001b[0m: zero-size array to reduction operation minimum which has no identity"
       ]
      },
      {
       "output_type": "display_data",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 19
    }
   ],
   "metadata": {}
  }
 ]
}
