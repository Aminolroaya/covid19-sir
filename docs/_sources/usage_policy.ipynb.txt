{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1596469977201"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.7.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "184"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **9th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "2"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Papua New Guinea', 'Bahamas', 'Gambia']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "3"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Seychelles'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lesotho'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tanzania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Montenegro'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritius'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brunei'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Peru'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Grenada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Antigua and Barbuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "4"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Central African Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Suriname'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ethiopia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Norway'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Venezuela'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zimbabwe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Vincent and the Grenadines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Eritrea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Benin'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saint Lucia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sao Tome and Principe'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Palestine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iceland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liechtenstein'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Zambia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Paraguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guatemala'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Madagascar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kyrgyzstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malawi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'New Zealand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guyana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Botswana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belize'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "5"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Japan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bermuda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malta'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Costa Rica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bosnia and Herzegovina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lebanon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Philippines'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cambodia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nicaragua'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Syria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Niger'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Argentina'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ireland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Swaziland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Angola'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kosovo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Equatorial Guinea'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chad'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kenya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Guinea-Bissau'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Libya'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Comoros'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Haiti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Netherlands'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Andorra'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Croatia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovakia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Slovenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Morocco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Colombia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bolivia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "6"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uganda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Taiwan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Australia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Thailand'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burundi'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ecuador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Spain'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'India'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Switzerland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uzbekistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cyprus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Azerbaijan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'San Marino'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Honduras'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Trinidad and Tobago'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sudan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Togo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cameroon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mongolia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Israel'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Macedonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Rwanda'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cape Verde'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Panama'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Oman'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Congo'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Iraq'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Latvia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Barbados'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bulgaria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tajikistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Somalia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Germany'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sri Lanka'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'El Salvador'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Yemen'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'South Africa'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Albania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kazakhstan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mauritania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Afghanistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "7"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Egypt'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Serbia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jordan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belgium'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Greece'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Gabon'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mexico'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Monaco'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bangladesh'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Algeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Burkina Faso'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Estonia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Djibouti'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Pakistan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Maldives'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Dominican Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nepal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ghana'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Liberia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Belarus'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mali'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Armenia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Lithuania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Tunisia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Qatar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Myanmar'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Luxembourg'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Cuba'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Indonesia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Mozambique'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Sierra Leone'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Brazil'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Finland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'China'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Bhutan'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "8"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Uruguay'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Russia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Saudi Arabia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Romania'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Georgia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Vietnam'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Denmark'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'France'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Turkey'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Korea, South'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Malaysia'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Singapore'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United States'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Hungary'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Jamaica'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Nigeria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Chile'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kuwait'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Senegal', 'Guinea', 'Iran', 'Bahrain']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=9)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "14"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "["
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'United Arab Emirates'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Italy'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Poland'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Moldova'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Czech Republic'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        "     "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Kuwait'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Portugal'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Canada'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Ukraine'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ", "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "'Austria'"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "]"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ",\n",
        " "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "10"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        ": "
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Senegal', 'Guinea', 'Iran', 'Bahrain']"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "}"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>19May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>08Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jun2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360\n",
        "        2nd    Past  15May2020  29May2020    15854360\n",
        "        3rd    Past  30May2020  09Jun2020    15854360\n",
        "        4th    Past  10Jun2020  19Jun2020    15854360\n",
        "        5th    Past  20Jun2020  30Jun2020    15854360\n",
        "        6th    Past  01Jul2020  10Jul2020    15854360\n",
        "        7th    Past  11Jul2020  20Jul2020    15854360\n",
        "        8th    Past  21Jul2020  28Jul2020    15854360\n",
        "        9th    Past  29Jul2020  06Aug2020    15854360\n",
        "        10th   Past  07Aug2020  16Aug2020    15854360\n",
        "Guinea  1st    Past  02May2020  11May2020    12414318\n",
        "        2nd    Past  12May2020  19May2020    12414318\n",
        "        3rd    Past  20May2020  28May2020    12414318\n",
        "        4th    Past  29May2020  08Jun2020    12414318\n",
        "        5th    Past  09Jun2020  17Jun2020    12414318\n",
        "        6th    Past  18Jun2020  02Jul2020    12414318\n",
        "        7th    Past  03Jul2020  14Jul2020    12414318\n",
        "        8th    Past  15Jul2020  23Jul2020    12414318\n",
        "        9th    Past  24Jul2020  03Aug2020    12414318\n",
        "        10th   Past  04Aug2020  16Aug2020    12414318\n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269\n",
        "        2nd    Past  13Apr2020  04May2020    81800269\n",
        "        3rd    Past  05May2020  20May2020    81800269\n",
        "        4th    Past  21May2020  02Jun2020    81800269\n",
        "        5th    Past  03Jun2020  15Jun2020    81800269\n",
        "        6th    Past  16Jun2020  27Jun2020    81800269\n",
        "        7th    Past  28Jun2020  09Jul2020    81800269\n",
        "        8th    Past  10Jul2020  21Jul2020    81800269\n",
        "        9th    Past  22Jul2020  02Aug2020    81800269\n",
        "        10th   Past  03Aug2020  16Aug2020    81800269\n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439\n",
        "        2nd    Past  26May2020  04Jun2020     1569439\n",
        "        3rd    Past  05Jun2020  13Jun2020     1569439\n",
        "        4th    Past  14Jun2020  21Jun2020     1569439\n",
        "        5th    Past  22Jun2020  29Jun2020     1569439\n",
        "        6th    Past  30Jun2020  07Jul2020     1569439\n",
        "        7th    Past  08Jul2020  15Jul2020     1569439\n",
        "        8th    Past  16Jul2020  25Jul2020     1569439\n",
        "        9th    Past  26Jul2020  04Aug2020     1569439\n",
        "        10th   Past  05Aug2020  16Aug2020     1569439"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  9th phase (22Jul2020 - 02Aug2020): finished  198 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  5th phase (03Jun2020 - 15Jun2020): finished  703 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  4th phase (04Jun2020 - 11Jun2020): finished 1137 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  9th phase (26Jul2020 - 04Aug2020): finished  375 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR, 10th phase (05Aug2020 - 16Aug2020): finished  199 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  2nd phase (23May2020 - 08Jun2020): finished 1233 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  1st phase (24Mar2020 - 31Mar2020): finished  159 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  9th phase (07Jul2020 - 16Aug2020): finished  335 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  6th phase (30Jun2020 - 07Jul2020): finished  517 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  2nd phase (13May2020 - 24May2020): finished 1681 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  8th phase (25Jul2020 - 01Aug2020): finished  820 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  9th phase (30Jul2020 - 16Aug2020): finished  508 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  3rd phase (25May2020 - 03Jun2020): finished 1092 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  2nd phase (12May2020 - 19May2020): finished 1672 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  9th phase (31Jul2020 - 16Aug2020): finished  520 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  1st phase (07May2020 - 22May2020): finished 1652 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  9th phase (26Jul2020 - 16Aug2020): finished  332 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  5th phase (07Jun2020 - 24Jun2020): finished  180 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  3rd phase (21May2020 - 04Jun2020): finished  784 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  4th phase (07Jun2020 - 16Jun2020): finished  910 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  3rd phase (20May2020 - 28May2020): finished 1615 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  1st phase (05May2020 - 17May2020): finished 1558 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  7th phase (08Jul2020 - 15Jul2020): finished 1566 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  8th phase (11Jul2020 - 25Jul2020): finished 1568 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  4th phase (07May2020 - 15May2020): finished  174 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN, 10th phase (07Aug2020 - 16Aug2020): finished  484 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  2nd phase (01Apr2020 - 12Apr2020): finished 1557 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  5th phase (02May2020 - 09May2020): finished  340 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  3rd phase (06Jun2020 - 15Jun2020): finished  621 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  7th phase (14Jul2020 - 24Jul2020): finished  175 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  3rd phase (05Jun2020 - 13Jun2020): finished 1558 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  7th phase (08Jul2020 - 16Jul2020): finished  171 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  6th phase (01Jul2020 - 10Jul2020): finished 1545 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  5th phase (22Jun2020 - 29Jun2020): finished 1535 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  3rd phase (05May2020 - 20May2020): finished  423 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  7th phase (03Jul2020 - 10Jul2020): finished 1486 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  5th phase (27Jun2020 - 08Jul2020): finished 1467 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  7th phase (28Jun2020 - 09Jul2020): finished  173 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  2nd phase (18May2020 - 28May2020): finished 1480 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  6th phase (02Jul2020 - 17Jul2020): finished  438 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  1st phase (02May2020 - 11May2020): finished 1480 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  3rd phase (13Apr2020 - 21Apr2020): finished  162 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  1st phase (28Apr2020 - 12May2020): finished 1474 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  6th phase (05Jul2020 - 14Jul2020): finished  454 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  1st phase (28Mar2020 - 12Apr2020): finished 1455 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  6th phase (16Jun2020 - 27Jun2020): finished 1458 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  5th phase (09Jun2020 - 17Jun2020): finished  552 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  6th phase (01Jul2020 - 13Jul2020): finished  437 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  2nd phase (17Apr2020 - 27Apr2020): finished  315 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  4th phase (14Jun2020 - 21Jun2020): finished 1443 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  6th phase (25Jun2020 - 08Jul2020): finished 1450 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  3rd phase (10Jun2020 - 17Jun2020): finished  440 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  4th phase (18Jun2020 - 26Jun2020): finished  705 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  7th phase (07Jun2020 - 01Jul2020): finished  305 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  1st phase (12May2020 - 28May2020): finished 1387 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  2nd phase (06Apr2020 - 22Apr2020): finished 1231 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  2nd phase (26May2020 - 04Jun2020): finished 1091 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  7th phase (20Jul2020 - 29Jul2020): finished  308 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  1st phase (08Apr2020 - 16Apr2020): finished 1098 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  7th phase (03Jul2020 - 14Jul2020): finished 1061 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  8th phase (21Jul2020 - 30Jul2020): finished 1165 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  3rd phase (28Apr2020 - 15May2020): finished 1162 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  7th phase (09Jul2020 - 20Jul2020): finished 1132 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN, 10th phase (03Aug2020 - 16Aug2020): finished  466 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  5th phase (28Jun2020 - 07Jul2020): finished  328 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  8th phase (17Jul2020 - 29Jul2020): finished  531 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  1st phase (23Apr2020 - 08May2020): finished 1118 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  5th phase (17Jun2020 - 30Jun2020): finished  405 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  2nd phase (29May2020 - 09Jun2020): finished 1142 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  8th phase (24Jul2020 - 04Aug2020): finished  221 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  8th phase (21Jul2020 - 28Jul2020): finished 1158 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  4th phase (16Jun2020 - 24Jun2020): finished 1108 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  8th phase (29Jul2020 - 07Aug2020): finished 1158 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  6th phase (25May2020 - 06Jun2020): finished  235 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  3rd phase (23Apr2020 - 09May2020): finished  735 trials in 0 min 35 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  7th phase (20May2020 - 04Jun2020): finished  450 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  6th phase (18Jun2020 - 02Jul2020): finished 1153 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  5th phase (20Jun2020 - 30Jun2020): finished  535 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  1st phase (08Apr2020 - 15Apr2020): finished 1174 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  4th phase (10May2020 - 29May2020): finished  245 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  4th phase (05Jun2020 - 16Jun2020): finished  244 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  6th phase (09Jul2020 - 19Jul2020): finished  232 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  7th phase (11Jul2020 - 20Jul2020): finished  377 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  8th phase (02Jul2020 - 25Jul2020): finished 1175 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  5th phase (12Jun2020 - 22Jun2020): finished 1071 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  3rd phase (30May2020 - 09Jun2020): finished 1141 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  8th phase (16Jul2020 - 25Jul2020): finished  135 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  4th phase (29May2020 - 08Jun2020): finished 1146 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  4th phase (20Jun2020 - 27Jun2020): finished  251 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  1st phase (29Mar2020 - 05Apr2020): finished  221 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  4th phase (22Apr2020 - 01May2020): finished  447 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  7th phase (17Jul2020 - 24Jul2020): finished  226 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  5th phase (16May2020 - 24May2020): finished  229 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCZE,  4th phase (16May2020 - 06Jun2020): finished  352 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  1st phase (30Apr2020 - 14May2020): finished 1150 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  6th phase (26Jun2020 - 07Jul2020): finished  233 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  2nd phase (09May2020 - 20May2020): finished 1146 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  5th phase (30May2020 - 01Jul2020): finished 1161 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  7th phase (18Jul2020 - 28Jul2020): finished  239 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  2nd phase (15May2020 - 29May2020): finished 1173 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  5th phase (25Jun2020 - 04Jul2020): finished 1191 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  8th phase (05Jun2020 - 06Jul2020): finished  465 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  5th phase (17Jun2020 - 25Jun2020): finished  241 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tAUT,  9th phase (08Aug2020 - 16Aug2020): finished  350 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  4th phase (10Jun2020 - 19Jun2020): finished 1170 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tARE,  6th phase (23Jun2020 - 02Jul2020): finished 1170 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  1st phase (11May2020 - 23May2020): finished 1152 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  4th phase (21May2020 - 02Jun2020): finished 1156 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tKWT,  2nd phase (24May2020 - 05Jun2020): finished 1139 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tMDA,  8th phase (30Jul2020 - 06Aug2020): finished  444 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  2nd phase (13Apr2020 - 04May2020): finished  616 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPRT,  3rd phase (29May2020 - 06Jun2020): finished  488 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tSEN,  9th phase (29Jul2020 - 06Aug2020): finished  428 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  2nd phase (16Apr2020 - 23Apr2020): finished 1140 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  3rd phase (09Jun2020 - 19Jun2020): finished 1092 trials in 0 min 55 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tPOL,  9th phase (02Aug2020 - 16Aug2020): finished 1223 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN, 10th phase (04Aug2020 - 16Aug2020): finished  510 trials in 0 min 20 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  3rd phase (24Apr2020 - 06May2020): finished  162 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  9th phase (24Jul2020 - 03Aug2020): finished 1290 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGIN,  8th phase (15Jul2020 - 23Jul2020): finished 1449 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBHR,  1st phase (06May2020 - 25May2020): finished 1443 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tIRN,  8th phase (10Jul2020 - 21Jul2020): finished  155 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  6th phase (10May2020 - 19May2020): finished  456 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 19 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Senegal</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.46</td>\n",
        "      <td>0.000201</td>\n",
        "      <td>0.000273</td>\n",
        "      <td>0.025586</td>\n",
        "      <td>0.010116</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>916</td>\n",
        "      <td>9</td>\n",
        "      <td>24</td>\n",
        "      <td>0.114548</td>\n",
        "      <td>1150</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.000436</td>\n",
        "      <td>0.000185</td>\n",
        "      <td>0.012878</td>\n",
        "      <td>0.010080</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1354</td>\n",
        "      <td>19</td>\n",
        "      <td>24</td>\n",
        "      <td>0.037140</td>\n",
        "      <td>1173</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>30May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000112</td>\n",
        "      <td>0.013266</td>\n",
        "      <td>0.013307</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2237</td>\n",
        "      <td>18</td>\n",
        "      <td>18</td>\n",
        "      <td>0.045424</td>\n",
        "      <td>1141</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>19Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.03</td>\n",
        "      <td>0.021585</td>\n",
        "      <td>0.000096</td>\n",
        "      <td>0.016086</td>\n",
        "      <td>0.015129</td>\n",
        "      <td>360</td>\n",
        "      <td>0.022</td>\n",
        "      <td>2595</td>\n",
        "      <td>15</td>\n",
        "      <td>16</td>\n",
        "      <td>0.024138</td>\n",
        "      <td>1170</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Jun2020</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.75</td>\n",
        "      <td>0.000648</td>\n",
        "      <td>0.000361</td>\n",
        "      <td>0.012464</td>\n",
        "      <td>0.006773</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>692</td>\n",
        "      <td>20</td>\n",
        "      <td>36</td>\n",
        "      <td>0.015926</td>\n",
        "      <td>535</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.27</td>\n",
        "      <td>0.032005</td>\n",
        "      <td>0.000019</td>\n",
        "      <td>0.011261</td>\n",
        "      <td>0.008546</td>\n",
        "      <td>360</td>\n",
        "      <td>0.032</td>\n",
        "      <td>13292</td>\n",
        "      <td>22</td>\n",
        "      <td>29</td>\n",
        "      <td>0.020087</td>\n",
        "      <td>1545</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>20Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.000630</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.009430</td>\n",
        "      <td>0.006701</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1065</td>\n",
        "      <td>26</td>\n",
        "      <td>37</td>\n",
        "      <td>0.011093</td>\n",
        "      <td>377</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>28Jul2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.74</td>\n",
        "      <td>0.018089</td>\n",
        "      <td>0.000070</td>\n",
        "      <td>0.011744</td>\n",
        "      <td>0.006567</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>3592</td>\n",
        "      <td>21</td>\n",
        "      <td>38</td>\n",
        "      <td>0.012512</td>\n",
        "      <td>1158</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Jul2020</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.64</td>\n",
        "      <td>0.001866</td>\n",
        "      <td>0.000233</td>\n",
        "      <td>0.007471</td>\n",
        "      <td>0.004304</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>1072</td>\n",
        "      <td>33</td>\n",
        "      <td>58</td>\n",
        "      <td>0.012666</td>\n",
        "      <td>428</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>15854360</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.39</td>\n",
        "      <td>0.001022</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.008737</td>\n",
        "      <td>0.003444</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1161</td>\n",
        "      <td>28</td>\n",
        "      <td>72</td>\n",
        "      <td>0.011604</td>\n",
        "      <td>484</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Guinea</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.81</td>\n",
        "      <td>0.002199</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>0.012572</td>\n",
        "      <td>0.006839</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>3152</td>\n",
        "      <td>19</td>\n",
        "      <td>36</td>\n",
        "      <td>0.079455</td>\n",
        "      <td>1480</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>19May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.000154</td>\n",
        "      <td>0.000176</td>\n",
        "      <td>0.013064</td>\n",
        "      <td>0.011474</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1419</td>\n",
        "      <td>19</td>\n",
        "      <td>21</td>\n",
        "      <td>0.077227</td>\n",
        "      <td>1672</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.15</td>\n",
        "      <td>0.000666</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.014206</td>\n",
        "      <td>0.006554</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>6775</td>\n",
        "      <td>17</td>\n",
        "      <td>38</td>\n",
        "      <td>0.047430</td>\n",
        "      <td>1615</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>08Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.67</td>\n",
        "      <td>0.000663</td>\n",
        "      <td>0.000024</td>\n",
        "      <td>0.011765</td>\n",
        "      <td>0.017434</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>10518</td>\n",
        "      <td>21</td>\n",
        "      <td>14</td>\n",
        "      <td>0.063894</td>\n",
        "      <td>1146</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>17Jun2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.91</td>\n",
        "      <td>0.000256</td>\n",
        "      <td>0.000076</td>\n",
        "      <td>0.008303</td>\n",
        "      <td>0.009056</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>3296</td>\n",
        "      <td>30</td>\n",
        "      <td>27</td>\n",
        "      <td>0.018590</td>\n",
        "      <td>552</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Jun2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.57</td>\n",
        "      <td>0.000502</td>\n",
        "      <td>0.000087</td>\n",
        "      <td>0.007106</td>\n",
        "      <td>0.012401</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2872</td>\n",
        "      <td>35</td>\n",
        "      <td>20</td>\n",
        "      <td>0.054708</td>\n",
        "      <td>1153</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>14Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.58</td>\n",
        "      <td>0.000122</td>\n",
        "      <td>0.000104</td>\n",
        "      <td>0.012511</td>\n",
        "      <td>0.007832</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>2400</td>\n",
        "      <td>19</td>\n",
        "      <td>31</td>\n",
        "      <td>0.028288</td>\n",
        "      <td>1061</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.52</td>\n",
        "      <td>0.000515</td>\n",
        "      <td>0.000096</td>\n",
        "      <td>0.016725</td>\n",
        "      <td>0.032267</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2593</td>\n",
        "      <td>14</td>\n",
        "      <td>7</td>\n",
        "      <td>0.041793</td>\n",
        "      <td>1449</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.09</td>\n",
        "      <td>0.000131</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.017826</td>\n",
        "      <td>0.016187</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1486</td>\n",
        "      <td>14</td>\n",
        "      <td>15</td>\n",
        "      <td>0.028080</td>\n",
        "      <td>1290</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>12414318</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.40</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>6769</td>\n",
        "      <td>13</td>\n",
        "      <td>19</td>\n",
        "      <td>0.027903</td>\n",
        "      <td>510</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Iran</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.35</td>\n",
        "      <td>0.052383</td>\n",
        "      <td>0.000156</td>\n",
        "      <td>0.023055</td>\n",
        "      <td>0.016002</td>\n",
        "      <td>360</td>\n",
        "      <td>0.052</td>\n",
        "      <td>1599</td>\n",
        "      <td>10</td>\n",
        "      <td>15</td>\n",
        "      <td>0.195790</td>\n",
        "      <td>1455</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>04May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.70</td>\n",
        "      <td>0.026814</td>\n",
        "      <td>0.000725</td>\n",
        "      <td>0.018222</td>\n",
        "      <td>0.024623</td>\n",
        "      <td>360</td>\n",
        "      <td>0.027</td>\n",
        "      <td>344</td>\n",
        "      <td>13</td>\n",
        "      <td>10</td>\n",
        "      <td>0.030652</td>\n",
        "      <td>616</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05May2020</td>\n",
        "      <td>20May2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.42</td>\n",
        "      <td>0.018373</td>\n",
        "      <td>0.000483</td>\n",
        "      <td>0.026592</td>\n",
        "      <td>0.017854</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>517</td>\n",
        "      <td>9</td>\n",
        "      <td>14</td>\n",
        "      <td>0.019420</td>\n",
        "      <td>423</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>21May2020</td>\n",
        "      <td>02Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.17</td>\n",
        "      <td>0.018216</td>\n",
        "      <td>0.000182</td>\n",
        "      <td>0.024205</td>\n",
        "      <td>0.020082</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>1376</td>\n",
        "      <td>10</td>\n",
        "      <td>12</td>\n",
        "      <td>0.013804</td>\n",
        "      <td>1156</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jun2020</td>\n",
        "      <td>15Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.10</td>\n",
        "      <td>0.016744</td>\n",
        "      <td>0.000212</td>\n",
        "      <td>0.020530</td>\n",
        "      <td>0.018062</td>\n",
        "      <td>360</td>\n",
        "      <td>0.017</td>\n",
        "      <td>1178</td>\n",
        "      <td>12</td>\n",
        "      <td>13</td>\n",
        "      <td>0.019591</td>\n",
        "      <td>703</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jun2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.96</td>\n",
        "      <td>0.000320</td>\n",
        "      <td>0.000970</td>\n",
        "      <td>0.020738</td>\n",
        "      <td>0.020516</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>257</td>\n",
        "      <td>12</td>\n",
        "      <td>12</td>\n",
        "      <td>0.022436</td>\n",
        "      <td>1458</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>09Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.92</td>\n",
        "      <td>0.054893</td>\n",
        "      <td>0.000303</td>\n",
        "      <td>0.023552</td>\n",
        "      <td>0.023842</td>\n",
        "      <td>360</td>\n",
        "      <td>0.055</td>\n",
        "      <td>824</td>\n",
        "      <td>10</td>\n",
        "      <td>10</td>\n",
        "      <td>0.011671</td>\n",
        "      <td>173</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jul2020</td>\n",
        "      <td>21Jul2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.065878</td>\n",
        "      <td>0.000562</td>\n",
        "      <td>0.024587</td>\n",
        "      <td>0.026143</td>\n",
        "      <td>360</td>\n",
        "      <td>0.066</td>\n",
        "      <td>444</td>\n",
        "      <td>10</td>\n",
        "      <td>9</td>\n",
        "      <td>0.007631</td>\n",
        "      <td>155</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>02Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.12</td>\n",
        "      <td>0.082387</td>\n",
        "      <td>0.000067</td>\n",
        "      <td>0.028204</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>360</td>\n",
        "      <td>0.082</td>\n",
        "      <td>3708</td>\n",
        "      <td>8</td>\n",
        "      <td>10</td>\n",
        "      <td>0.008688</td>\n",
        "      <td>198</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>81800269</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.05</td>\n",
        "      <td>0.046873</td>\n",
        "      <td>0.000642</td>\n",
        "      <td>0.022945</td>\n",
        "      <td>0.020183</td>\n",
        "      <td>360</td>\n",
        "      <td>0.047</td>\n",
        "      <td>389</td>\n",
        "      <td>10</td>\n",
        "      <td>12</td>\n",
        "      <td>0.023361</td>\n",
        "      <td>466</td>\n",
        "      <td>0 min 20 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"10\" valign=\"top\">Bahrain</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>06May2020</td>\n",
        "      <td>25May2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.63</td>\n",
        "      <td>0.001254</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.020811</td>\n",
        "      <td>0.007911</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>174012</td>\n",
        "      <td>12</td>\n",
        "      <td>31</td>\n",
        "      <td>0.174479</td>\n",
        "      <td>1443</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>26May2020</td>\n",
        "      <td>04Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.44</td>\n",
        "      <td>0.000019</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.022700</td>\n",
        "      <td>0.015726</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>6137</td>\n",
        "      <td>11</td>\n",
        "      <td>15</td>\n",
        "      <td>0.042331</td>\n",
        "      <td>1091</td>\n",
        "      <td>0 min 55 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Jun2020</td>\n",
        "      <td>13Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.000455</td>\n",
        "      <td>0.000084</td>\n",
        "      <td>0.022557</td>\n",
        "      <td>0.021142</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>2977</td>\n",
        "      <td>11</td>\n",
        "      <td>11</td>\n",
        "      <td>0.027833</td>\n",
        "      <td>1558</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>14Jun2020</td>\n",
        "      <td>21Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.99</td>\n",
        "      <td>0.000636</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.022416</td>\n",
        "      <td>0.022518</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2143</td>\n",
        "      <td>11</td>\n",
        "      <td>11</td>\n",
        "      <td>0.032996</td>\n",
        "      <td>1443</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Jun2020</td>\n",
        "      <td>29Jun2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.93</td>\n",
        "      <td>0.000433</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.024508</td>\n",
        "      <td>0.026288</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>2549</td>\n",
        "      <td>10</td>\n",
        "      <td>9</td>\n",
        "      <td>0.023426</td>\n",
        "      <td>1535</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>30Jun2020</td>\n",
        "      <td>07Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.84</td>\n",
        "      <td>0.000252</td>\n",
        "      <td>0.000076</td>\n",
        "      <td>0.026814</td>\n",
        "      <td>0.032004</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>3296</td>\n",
        "      <td>9</td>\n",
        "      <td>7</td>\n",
        "      <td>0.019609</td>\n",
        "      <td>517</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Jul2020</td>\n",
        "      <td>15Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.000637</td>\n",
        "      <td>0.000117</td>\n",
        "      <td>0.030096</td>\n",
        "      <td>0.034677</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2144</td>\n",
        "      <td>8</td>\n",
        "      <td>7</td>\n",
        "      <td>0.016334</td>\n",
        "      <td>1566</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.93</td>\n",
        "      <td>0.000550</td>\n",
        "      <td>0.000109</td>\n",
        "      <td>0.029959</td>\n",
        "      <td>0.032049</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>2283</td>\n",
        "      <td>8</td>\n",
        "      <td>7</td>\n",
        "      <td>0.041333</td>\n",
        "      <td>135</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.000348</td>\n",
        "      <td>0.000080</td>\n",
        "      <td>0.029303</td>\n",
        "      <td>0.033168</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>3123</td>\n",
        "      <td>8</td>\n",
        "      <td>7</td>\n",
        "      <td>0.028659</td>\n",
        "      <td>375</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>1569439</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.024261</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3514</td>\n",
        "      <td>8</td>\n",
        "      <td>10</td>\n",
        "      <td>0.020073</td>\n",
        "      <td>199</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE    Rt     theta  \\\n",
        "Country Phase                                                                  \n",
        "Senegal 1st    Past  30Apr2020  14May2020    15854360  SIR-F  2.46  0.000201   \n",
        "        2nd    Past  15May2020  29May2020    15854360  SIR-F  1.25  0.000436   \n",
        "        3rd    Past  30May2020  09Jun2020    15854360  SIR-F  0.99  0.000665   \n",
        "        4th    Past  10Jun2020  19Jun2020    15854360  SIR-F  1.03  0.021585   \n",
        "        5th    Past  20Jun2020  30Jun2020    15854360  SIR-F  1.75  0.000648   \n",
        "        6th    Past  01Jul2020  10Jul2020    15854360  SIR-F  1.27  0.032005   \n",
        "        7th    Past  11Jul2020  20Jul2020    15854360  SIR-F  1.36  0.000630   \n",
        "        8th    Past  21Jul2020  28Jul2020    15854360  SIR-F  1.74  0.018089   \n",
        "        9th    Past  29Jul2020  06Aug2020    15854360  SIR-F  1.64  0.001866   \n",
        "        10th   Past  07Aug2020  16Aug2020    15854360  SIR-F  2.39  0.001022   \n",
        "Guinea  1st    Past  02May2020  11May2020    12414318  SIR-F  1.81  0.002199   \n",
        "        2nd    Past  12May2020  19May2020    12414318  SIR-F  1.12  0.000154   \n",
        "        3rd    Past  20May2020  28May2020    12414318  SIR-F  2.15  0.000666   \n",
        "        4th    Past  29May2020  08Jun2020    12414318  SIR-F  0.67  0.000663   \n",
        "        5th    Past  09Jun2020  17Jun2020    12414318  SIR-F  0.91  0.000256   \n",
        "        6th    Past  18Jun2020  02Jul2020    12414318  SIR-F  0.57  0.000502   \n",
        "        7th    Past  03Jul2020  14Jul2020    12414318  SIR-F  1.58  0.000122   \n",
        "        8th    Past  15Jul2020  23Jul2020    12414318  SIR-F  0.52  0.000515   \n",
        "        9th    Past  24Jul2020  03Aug2020    12414318  SIR-F  1.09  0.000131   \n",
        "        10th   Past  04Aug2020  16Aug2020    12414318  SIR-F  1.40  0.000665   \n",
        "Iran    1st    Past  28Mar2020  12Apr2020    81800269  SIR-F  1.35  0.052383   \n",
        "        2nd    Past  13Apr2020  04May2020    81800269  SIR-F  0.70  0.026814   \n",
        "        3rd    Past  05May2020  20May2020    81800269  SIR-F  1.42  0.018373   \n",
        "        4th    Past  21May2020  02Jun2020    81800269  SIR-F  1.17  0.018216   \n",
        "        5th    Past  03Jun2020  15Jun2020    81800269  SIR-F  1.10  0.016744   \n",
        "        6th    Past  16Jun2020  27Jun2020    81800269  SIR-F  0.96  0.000320   \n",
        "        7th    Past  28Jun2020  09Jul2020    81800269  SIR-F  0.92  0.054893   \n",
        "        8th    Past  10Jul2020  21Jul2020    81800269  SIR-F  0.86  0.065878   \n",
        "        9th    Past  22Jul2020  02Aug2020    81800269  SIR-F  1.12  0.082387   \n",
        "        10th   Past  03Aug2020  16Aug2020    81800269  SIR-F  1.05  0.046873   \n",
        "Bahrain 1st    Past  06May2020  25May2020     1569439  SIR-F  2.63  0.001254   \n",
        "        2nd    Past  26May2020  04Jun2020     1569439  SIR-F  1.44  0.000019   \n",
        "        3rd    Past  05Jun2020  13Jun2020     1569439  SIR-F  1.06  0.000455   \n",
        "        4th    Past  14Jun2020  21Jun2020     1569439  SIR-F  0.99  0.000636   \n",
        "        5th    Past  22Jun2020  29Jun2020     1569439  SIR-F  0.93  0.000433   \n",
        "        6th    Past  30Jun2020  07Jul2020     1569439  SIR-F  0.84  0.000252   \n",
        "        7th    Past  08Jul2020  15Jul2020     1569439  SIR-F  0.86  0.000637   \n",
        "        8th    Past  16Jul2020  25Jul2020     1569439  SIR-F  0.93  0.000550   \n",
        "        9th    Past  26Jul2020  04Aug2020     1569439  SIR-F  0.88  0.000348   \n",
        "        10th   Past  05Aug2020  16Aug2020     1569439  SIR-F  1.25  0.001149   \n",
        "\n",
        "                  kappa       rho     sigma  tau  alpha1 [-]  1/alpha2 [day]  \\\n",
        "Country Phase                                                                  \n",
        "Senegal 1st    0.000273  0.025586  0.010116  360       0.000             916   \n",
        "        2nd    0.000185  0.012878  0.010080  360       0.000            1354   \n",
        "        3rd    0.000112  0.013266  0.013307  360       0.001            2237   \n",
        "        4th    0.000096  0.016086  0.015129  360       0.022            2595   \n",
        "        5th    0.000361  0.012464  0.006773  360       0.001             692   \n",
        "        6th    0.000019  0.011261  0.008546  360       0.032           13292   \n",
        "        7th    0.000235  0.009430  0.006701  360       0.001            1065   \n",
        "        8th    0.000070  0.011744  0.006567  360       0.018            3592   \n",
        "        9th    0.000233  0.007471  0.004304  360       0.002            1072   \n",
        "        10th   0.000215  0.008737  0.003444  360       0.001            1161   \n",
        "Guinea  1st    0.000079  0.012572  0.006839  360       0.002            3152   \n",
        "        2nd    0.000176  0.013064  0.011474  360       0.000            1419   \n",
        "        3rd    0.000037  0.014206  0.006554  360       0.001            6775   \n",
        "        4th    0.000024  0.011765  0.017434  360       0.001           10518   \n",
        "        5th    0.000076  0.008303  0.009056  360       0.000            3296   \n",
        "        6th    0.000087  0.007106  0.012401  360       0.001            2872   \n",
        "        7th    0.000104  0.012511  0.007832  360       0.000            2400   \n",
        "        8th    0.000096  0.016725  0.032267  360       0.001            2593   \n",
        "        9th    0.000168  0.017826  0.016187  360       0.000            1486   \n",
        "        10th   0.000037  0.018092  0.012832  360       0.001            6769   \n",
        "Iran    1st    0.000156  0.023055  0.016002  360       0.052            1599   \n",
        "        2nd    0.000725  0.018222  0.024623  360       0.027             344   \n",
        "        3rd    0.000483  0.026592  0.017854  360       0.018             517   \n",
        "        4th    0.000182  0.024205  0.020082  360       0.018            1376   \n",
        "        5th    0.000212  0.020530  0.018062  360       0.017            1178   \n",
        "        6th    0.000970  0.020738  0.020516  360       0.000             257   \n",
        "        7th    0.000303  0.023552  0.023842  360       0.055             824   \n",
        "        8th    0.000562  0.024587  0.026143  360       0.066             444   \n",
        "        9th    0.000067  0.028204  0.022989  360       0.082            3708   \n",
        "        10th   0.000642  0.022945  0.020183  360       0.047             389   \n",
        "Bahrain 1st    0.000001  0.020811  0.007911  360       0.001          174012   \n",
        "        2nd    0.000041  0.022700  0.015726  360       0.000            6137   \n",
        "        3rd    0.000084  0.022557  0.021142  360       0.000            2977   \n",
        "        4th    0.000117  0.022416  0.022518  360       0.001            2143   \n",
        "        5th    0.000098  0.024508  0.026288  360       0.000            2549   \n",
        "        6th    0.000076  0.026814  0.032004  360       0.000            3296   \n",
        "        7th    0.000117  0.030096  0.034677  360       0.001            2144   \n",
        "        8th    0.000109  0.029959  0.032049  360       0.001            2283   \n",
        "        9th    0.000080  0.029303  0.033168  360       0.000            3123   \n",
        "        10th   0.000071  0.030386  0.024261  360       0.001            3514   \n",
        "\n",
        "               1/beta [day]  1/gamma [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                               \n",
        "Senegal 1st               9             24  0.114548    1150  1 min  0 sec  \n",
        "        2nd              19             24  0.037140    1173  1 min  0 sec  \n",
        "        3rd              18             18  0.045424    1141  1 min  0 sec  \n",
        "        4th              15             16  0.024138    1170  1 min  0 sec  \n",
        "        5th              20             36  0.015926     535  0 min 25 sec  \n",
        "        6th              22             29  0.020087    1545  1 min  0 sec  \n",
        "        7th              26             37  0.011093     377  0 min 15 sec  \n",
        "        8th              21             38  0.012512    1158  1 min  0 sec  \n",
        "        9th              33             58  0.012666     428  0 min 20 sec  \n",
        "        10th             28             72  0.011604     484  0 min 15 sec  \n",
        "Guinea  1st              19             36  0.079455    1480  1 min  0 sec  \n",
        "        2nd              19             21  0.077227    1672  1 min  0 sec  \n",
        "        3rd              17             38  0.047430    1615  1 min  0 sec  \n",
        "        4th              21             14  0.063894    1146  1 min  0 sec  \n",
        "        5th              30             27  0.018590     552  0 min 20 sec  \n",
        "        6th              35             20  0.054708    1153  1 min  0 sec  \n",
        "        7th              19             31  0.028288    1061  1 min  0 sec  \n",
        "        8th              14              7  0.041793    1449  1 min  0 sec  \n",
        "        9th              14             15  0.028080    1290  1 min  0 sec  \n",
        "        10th             13             19  0.027903     510  0 min 20 sec  \n",
        "Iran    1st              10             15  0.195790    1455  1 min  0 sec  \n",
        "        2nd              13             10  0.030652     616  0 min 30 sec  \n",
        "        3rd               9             14  0.019420     423  0 min 15 sec  \n",
        "        4th              10             12  0.013804    1156  1 min  0 sec  \n",
        "        5th              12             13  0.019591     703  0 min 20 sec  \n",
        "        6th              12             12  0.022436    1458  1 min  0 sec  \n",
        "        7th              10             10  0.011671     173  0 min  5 sec  \n",
        "        8th              10              9  0.007631     155  0 min  5 sec  \n",
        "        9th               8             10  0.008688     198  0 min  5 sec  \n",
        "        10th             10             12  0.023361     466  0 min 20 sec  \n",
        "Bahrain 1st              12             31  0.174479    1443  1 min  0 sec  \n",
        "        2nd              11             15  0.042331    1091  0 min 55 sec  \n",
        "        3rd              11             11  0.027833    1558  1 min  0 sec  \n",
        "        4th              11             11  0.032996    1443  1 min  0 sec  \n",
        "        5th              10              9  0.023426    1535  1 min  0 sec  \n",
        "        6th               9              7  0.019609     517  0 min 15 sec  \n",
        "        7th               8              7  0.016334    1566  1 min  0 sec  \n",
        "        8th               8              7  0.041333     135  0 min  5 sec  \n",
        "        9th               8              7  0.028659     375  0 min 10 sec  \n",
        "        10th              8             10  0.020073     199  0 min  5 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-04-30</td>\n",
        "      <td>Senegal</td>\n",
        "      <td>0.000200927</td>\n",
        "      <td>0.000272771</td>\n",
        "      <td>0.0255856</td>\n",
        "      <td>0.010116</td>\n",
        "      <td>0</td>\n",
        "      <td>916</td>\n",
        "      <td>9</td>\n",
        "      <td>24</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>77.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-05-01</td>\n",
        "      <td>Senegal</td>\n",
        "      <td>0.000200927</td>\n",
        "      <td>0.000272771</td>\n",
        "      <td>0.0255856</td>\n",
        "      <td>0.010116</td>\n",
        "      <td>0</td>\n",
        "      <td>916</td>\n",
        "      <td>9</td>\n",
        "      <td>24</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>77.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-05-02</td>\n",
        "      <td>Senegal</td>\n",
        "      <td>0.000200927</td>\n",
        "      <td>0.000272771</td>\n",
        "      <td>0.0255856</td>\n",
        "      <td>0.010116</td>\n",
        "      <td>0</td>\n",
        "      <td>916</td>\n",
        "      <td>9</td>\n",
        "      <td>24</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>77.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-05-03</td>\n",
        "      <td>Senegal</td>\n",
        "      <td>0.000200927</td>\n",
        "      <td>0.000272771</td>\n",
        "      <td>0.0255856</td>\n",
        "      <td>0.010116</td>\n",
        "      <td>0</td>\n",
        "      <td>916</td>\n",
        "      <td>9</td>\n",
        "      <td>24</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>77.78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-05-04</td>\n",
        "      <td>Senegal</td>\n",
        "      <td>0.000200927</td>\n",
        "      <td>0.000272771</td>\n",
        "      <td>0.0255856</td>\n",
        "      <td>0.010116</td>\n",
        "      <td>0</td>\n",
        "      <td>916</td>\n",
        "      <td>9</td>\n",
        "      <td>24</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>77.78</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date  Country        theta        kappa        rho     sigma  \\\n",
        "0 2020-04-30  Senegal  0.000200927  0.000272771  0.0255856  0.010116   \n",
        "1 2020-05-01  Senegal  0.000200927  0.000272771  0.0255856  0.010116   \n",
        "2 2020-05-02  Senegal  0.000200927  0.000272771  0.0255856  0.010116   \n",
        "3 2020-05-03  Senegal  0.000200927  0.000272771  0.0255856  0.010116   \n",
        "4 2020-05-04  Senegal  0.000200927  0.000272771  0.0255856  0.010116   \n",
        "\n",
        "  alpha1 [-] 1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0          0            916            9            24  ...             2   \n",
        "1          0            916            9            24  ...             2   \n",
        "2          0            916            9            24  ...             2   \n",
        "3          0            916            9            24  ...             2   \n",
        "4          0            916            9            24  ...             2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        4                  0                       3   \n",
        "1                        4                  0                       3   \n",
        "2                        4                  0                       3   \n",
        "3                        4                  0                       3   \n",
        "4                        4                  0                       3   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               2                                    4   \n",
        "1                               2                                    4   \n",
        "2                               2                                    4   \n",
        "3                               2                                    4   \n",
        "4                               2                                    4   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               2                2             77.78  \n",
        "1                      2               2                2             77.78  \n",
        "2                      2               2                2             77.78  \n",
        "3                      2               2                2             77.78  \n",
        "4                      2               2                2             77.78  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>1.54</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.1</td>\n",
        "      <td>1.59</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.05</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.41</td>\n",
        "      <td>0.92</td>\n",
        "      <td>2.39</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.87</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>1.54</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.1</td>\n",
        "      <td>1.59</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.05</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.41</td>\n",
        "      <td>0.92</td>\n",
        "      <td>2.39</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.87</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>1.54</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.1</td>\n",
        "      <td>1.59</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.05</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.41</td>\n",
        "      <td>0.92</td>\n",
        "      <td>2.39</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.87</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>1.54</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.1</td>\n",
        "      <td>1.59</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.05</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.41</td>\n",
        "      <td>0.92</td>\n",
        "      <td>2.39</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.87</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>1.54</td>\n",
        "      <td>1.25</td>\n",
        "      <td>0.1</td>\n",
        "      <td>1.59</td>\n",
        "      <td>1.4</td>\n",
        "      <td>1.05</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.34</td>\n",
        "      <td>2.41</td>\n",
        "      <td>0.92</td>\n",
        "      <td>2.39</td>\n",
        "      <td>0.88</td>\n",
        "      <td>0.87</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Austria  Bahrain  Canada  Czech Republic  Guinea  Iran  Italy  \\\n",
        "Date                                                                        \n",
        "2020-08-12     1.54     1.25     0.1            1.59     1.4  1.05   0.88   \n",
        "2020-08-13     1.54     1.25     0.1            1.59     1.4  1.05   0.88   \n",
        "2020-08-14     1.54     1.25     0.1            1.59     1.4  1.05   0.88   \n",
        "2020-08-15     1.54     1.25     0.1            1.59     1.4  1.05   0.88   \n",
        "2020-08-16     1.54     1.25     0.1            1.59     1.4  1.05   0.88   \n",
        "\n",
        "Country     Kuwait  Moldova  Poland  Portugal  Senegal  Ukraine  \\\n",
        "Date                                                              \n",
        "2020-08-12    0.77     1.34    2.41      0.92     2.39     0.88   \n",
        "2020-08-13    0.77     1.34    2.41      0.92     2.39     0.88   \n",
        "2020-08-14    0.77     1.34    2.41      0.92     2.39     0.88   \n",
        "2020-08-15    0.77     1.34    2.41      0.92     2.39     0.88   \n",
        "2020-08-16    0.77     1.34    2.41      0.92     2.39     0.88   \n",
        "\n",
        "Country     United Arab Emirates  \n",
        "Date                              \n",
        "2020-08-12                  0.87  \n",
        "2020-08-13                  0.87  \n",
        "2020-08-14                  0.87  \n",
        "2020-08-15                  0.87  \n",
        "2020-08-16                  0.87  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.027514</td>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.003248</td>\n",
        "      <td>0.009044</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022945</td>\n",
        "      <td>0.004228</td>\n",
        "      <td>0.016105</td>\n",
        "      <td>0.012902</td>\n",
        "      <td>0.013271</td>\n",
        "      <td>0.004035</td>\n",
        "      <td>0.008737</td>\n",
        "      <td>0.007216</td>\n",
        "      <td>0.01118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.027514</td>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.003248</td>\n",
        "      <td>0.009044</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022945</td>\n",
        "      <td>0.004228</td>\n",
        "      <td>0.016105</td>\n",
        "      <td>0.012902</td>\n",
        "      <td>0.013271</td>\n",
        "      <td>0.004035</td>\n",
        "      <td>0.008737</td>\n",
        "      <td>0.007216</td>\n",
        "      <td>0.01118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.027514</td>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.003248</td>\n",
        "      <td>0.009044</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022945</td>\n",
        "      <td>0.004228</td>\n",
        "      <td>0.016105</td>\n",
        "      <td>0.012902</td>\n",
        "      <td>0.013271</td>\n",
        "      <td>0.004035</td>\n",
        "      <td>0.008737</td>\n",
        "      <td>0.007216</td>\n",
        "      <td>0.01118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.027514</td>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.003248</td>\n",
        "      <td>0.009044</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022945</td>\n",
        "      <td>0.004228</td>\n",
        "      <td>0.016105</td>\n",
        "      <td>0.012902</td>\n",
        "      <td>0.013271</td>\n",
        "      <td>0.004035</td>\n",
        "      <td>0.008737</td>\n",
        "      <td>0.007216</td>\n",
        "      <td>0.01118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.027514</td>\n",
        "      <td>0.030386</td>\n",
        "      <td>0.003248</td>\n",
        "      <td>0.009044</td>\n",
        "      <td>0.018092</td>\n",
        "      <td>0.022945</td>\n",
        "      <td>0.004228</td>\n",
        "      <td>0.016105</td>\n",
        "      <td>0.012902</td>\n",
        "      <td>0.013271</td>\n",
        "      <td>0.004035</td>\n",
        "      <td>0.008737</td>\n",
        "      <td>0.007216</td>\n",
        "      <td>0.01118</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Austria   Bahrain    Canada  Czech Republic    Guinea      Iran  \\\n",
        "Date                                                                           \n",
        "2020-08-12  0.027514  0.030386  0.003248        0.009044  0.018092  0.022945   \n",
        "2020-08-13  0.027514  0.030386  0.003248        0.009044  0.018092  0.022945   \n",
        "2020-08-14  0.027514  0.030386  0.003248        0.009044  0.018092  0.022945   \n",
        "2020-08-15  0.027514  0.030386  0.003248        0.009044  0.018092  0.022945   \n",
        "2020-08-16  0.027514  0.030386  0.003248        0.009044  0.018092  0.022945   \n",
        "\n",
        "Country        Italy    Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                                     \n",
        "2020-08-12  0.004228  0.016105  0.012902  0.013271  0.004035  0.008737   \n",
        "2020-08-13  0.004228  0.016105  0.012902  0.013271  0.004035  0.008737   \n",
        "2020-08-14  0.004228  0.016105  0.012902  0.013271  0.004035  0.008737   \n",
        "2020-08-15  0.004228  0.016105  0.012902  0.013271  0.004035  0.008737   \n",
        "2020-08-16  0.004228  0.016105  0.012902  0.013271  0.004035  0.008737   \n",
        "\n",
        "Country      Ukraine  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-12  0.007216               0.01118  \n",
        "2020-08-13  0.007216               0.01118  \n",
        "2020-08-14  0.007216               0.01118  \n",
        "2020-08-15  0.007216               0.01118  \n",
        "2020-08-16  0.007216               0.01118  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.017555</td>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.010756</td>\n",
        "      <td>0.005665</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.020183</td>\n",
        "      <td>0.004543</td>\n",
        "      <td>0.020805</td>\n",
        "      <td>0.009428</td>\n",
        "      <td>0.005417</td>\n",
        "      <td>0.004317</td>\n",
        "      <td>0.003444</td>\n",
        "      <td>0.00802</td>\n",
        "      <td>0.012829</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.017555</td>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.010756</td>\n",
        "      <td>0.005665</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.020183</td>\n",
        "      <td>0.004543</td>\n",
        "      <td>0.020805</td>\n",
        "      <td>0.009428</td>\n",
        "      <td>0.005417</td>\n",
        "      <td>0.004317</td>\n",
        "      <td>0.003444</td>\n",
        "      <td>0.00802</td>\n",
        "      <td>0.012829</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.017555</td>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.010756</td>\n",
        "      <td>0.005665</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.020183</td>\n",
        "      <td>0.004543</td>\n",
        "      <td>0.020805</td>\n",
        "      <td>0.009428</td>\n",
        "      <td>0.005417</td>\n",
        "      <td>0.004317</td>\n",
        "      <td>0.003444</td>\n",
        "      <td>0.00802</td>\n",
        "      <td>0.012829</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.017555</td>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.010756</td>\n",
        "      <td>0.005665</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.020183</td>\n",
        "      <td>0.004543</td>\n",
        "      <td>0.020805</td>\n",
        "      <td>0.009428</td>\n",
        "      <td>0.005417</td>\n",
        "      <td>0.004317</td>\n",
        "      <td>0.003444</td>\n",
        "      <td>0.00802</td>\n",
        "      <td>0.012829</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.017555</td>\n",
        "      <td>0.024261</td>\n",
        "      <td>0.010756</td>\n",
        "      <td>0.005665</td>\n",
        "      <td>0.012832</td>\n",
        "      <td>0.020183</td>\n",
        "      <td>0.004543</td>\n",
        "      <td>0.020805</td>\n",
        "      <td>0.009428</td>\n",
        "      <td>0.005417</td>\n",
        "      <td>0.004317</td>\n",
        "      <td>0.003444</td>\n",
        "      <td>0.00802</td>\n",
        "      <td>0.012829</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Austria   Bahrain    Canada  Czech Republic    Guinea      Iran  \\\n",
        "Date                                                                           \n",
        "2020-08-12  0.017555  0.024261  0.010756        0.005665  0.012832  0.020183   \n",
        "2020-08-13  0.017555  0.024261  0.010756        0.005665  0.012832  0.020183   \n",
        "2020-08-14  0.017555  0.024261  0.010756        0.005665  0.012832  0.020183   \n",
        "2020-08-15  0.017555  0.024261  0.010756        0.005665  0.012832  0.020183   \n",
        "2020-08-16  0.017555  0.024261  0.010756        0.005665  0.012832  0.020183   \n",
        "\n",
        "Country        Italy    Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                                     \n",
        "2020-08-12  0.004543  0.020805  0.009428  0.005417  0.004317  0.003444   \n",
        "2020-08-13  0.004543  0.020805  0.009428  0.005417  0.004317  0.003444   \n",
        "2020-08-14  0.004543  0.020805  0.009428  0.005417  0.004317  0.003444   \n",
        "2020-08-15  0.004543  0.020805  0.009428  0.005417  0.004317  0.003444   \n",
        "2020-08-16  0.004543  0.020805  0.009428  0.005417  0.004317  0.003444   \n",
        "\n",
        "Country     Ukraine  United Arab Emirates  \n",
        "Date                                       \n",
        "2020-08-12  0.00802              0.012829  \n",
        "2020-08-13  0.00802              0.012829  \n",
        "2020-08-14  0.00802              0.012829  \n",
        "2020-08-15  0.00802              0.012829  \n",
        "2020-08-16  0.00802              0.012829  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.013981</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000642</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000002</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.013981</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000642</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000002</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.013981</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000642</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000002</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.013981</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000642</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000002</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.013981</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000037</td>\n",
        "      <td>0.000642</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.000046</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.00007</td>\n",
        "      <td>0.000215</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>0.000002</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Austria   Bahrain    Canada  Czech Republic    Guinea      Iran  \\\n",
        "Date                                                                           \n",
        "2020-08-12  0.000257  0.000071  0.013981        0.000037  0.000037  0.000642   \n",
        "2020-08-13  0.000257  0.000071  0.013981        0.000037  0.000037  0.000642   \n",
        "2020-08-14  0.000257  0.000071  0.013981        0.000037  0.000037  0.000642   \n",
        "2020-08-15  0.000257  0.000071  0.013981        0.000037  0.000037  0.000642   \n",
        "2020-08-16  0.000257  0.000071  0.013981        0.000037  0.000037  0.000642   \n",
        "\n",
        "Country        Italy    Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                                     \n",
        "2020-08-12  0.000231  0.000071  0.000046  0.000002   0.00007  0.000215   \n",
        "2020-08-13  0.000231  0.000071  0.000046  0.000002   0.00007  0.000215   \n",
        "2020-08-14  0.000231  0.000071  0.000046  0.000002   0.00007  0.000215   \n",
        "2020-08-15  0.000231  0.000071  0.000046  0.000002   0.00007  0.000215   \n",
        "2020-08-16  0.000231  0.000071  0.000046  0.000002   0.00007  0.000215   \n",
        "\n",
        "Country      Ukraine  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-12  0.000014              0.000002  \n",
        "2020-08-13  0.000014              0.000002  \n",
        "2020-08-14  0.000014              0.000002  \n",
        "2020-08-15  0.000014              0.000002  \n",
        "2020-08-16  0.000014              0.000002  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.param_history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Austria</th>\n",
        "      <th>Bahrain</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Czech Republic</th>\n",
        "      <th>Guinea</th>\n",
        "      <th>Iran</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Kuwait</th>\n",
        "      <th>Moldova</th>\n",
        "      <th>Poland</th>\n",
        "      <th>Portugal</th>\n",
        "      <th>Senegal</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Arab Emirates</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>0.000258</td>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.232506</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.046873</td>\n",
        "      <td>0.001075</td>\n",
        "      <td>0.003157</td>\n",
        "      <td>0.017766</td>\n",
        "      <td>0.015786</td>\n",
        "      <td>0.001757</td>\n",
        "      <td>0.001022</td>\n",
        "      <td>0.023906</td>\n",
        "      <td>0.001919</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>0.000258</td>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.232506</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.046873</td>\n",
        "      <td>0.001075</td>\n",
        "      <td>0.003157</td>\n",
        "      <td>0.017766</td>\n",
        "      <td>0.015786</td>\n",
        "      <td>0.001757</td>\n",
        "      <td>0.001022</td>\n",
        "      <td>0.023906</td>\n",
        "      <td>0.001919</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>0.000258</td>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.232506</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.046873</td>\n",
        "      <td>0.001075</td>\n",
        "      <td>0.003157</td>\n",
        "      <td>0.017766</td>\n",
        "      <td>0.015786</td>\n",
        "      <td>0.001757</td>\n",
        "      <td>0.001022</td>\n",
        "      <td>0.023906</td>\n",
        "      <td>0.001919</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>0.000258</td>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.232506</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.046873</td>\n",
        "      <td>0.001075</td>\n",
        "      <td>0.003157</td>\n",
        "      <td>0.017766</td>\n",
        "      <td>0.015786</td>\n",
        "      <td>0.001757</td>\n",
        "      <td>0.001022</td>\n",
        "      <td>0.023906</td>\n",
        "      <td>0.001919</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>0.000258</td>\n",
        "      <td>0.001149</td>\n",
        "      <td>0.232506</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.000665</td>\n",
        "      <td>0.046873</td>\n",
        "      <td>0.001075</td>\n",
        "      <td>0.003157</td>\n",
        "      <td>0.017766</td>\n",
        "      <td>0.015786</td>\n",
        "      <td>0.001757</td>\n",
        "      <td>0.001022</td>\n",
        "      <td>0.023906</td>\n",
        "      <td>0.001919</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Austria   Bahrain    Canada  Czech Republic    Guinea      Iran  \\\n",
        "Date                                                                           \n",
        "2020-08-12  0.000258  0.001149  0.232506        0.000665  0.000665  0.046873   \n",
        "2020-08-13  0.000258  0.001149  0.232506        0.000665  0.000665  0.046873   \n",
        "2020-08-14  0.000258  0.001149  0.232506        0.000665  0.000665  0.046873   \n",
        "2020-08-15  0.000258  0.001149  0.232506        0.000665  0.000665  0.046873   \n",
        "2020-08-16  0.000258  0.001149  0.232506        0.000665  0.000665  0.046873   \n",
        "\n",
        "Country        Italy    Kuwait   Moldova    Poland  Portugal   Senegal  \\\n",
        "Date                                                                     \n",
        "2020-08-12  0.001075  0.003157  0.017766  0.015786  0.001757  0.001022   \n",
        "2020-08-13  0.001075  0.003157  0.017766  0.015786  0.001757  0.001022   \n",
        "2020-08-14  0.001075  0.003157  0.017766  0.015786  0.001757  0.001022   \n",
        "2020-08-15  0.001075  0.003157  0.017766  0.015786  0.001757  0.001022   \n",
        "2020-08-16  0.001075  0.003157  0.017766  0.015786  0.001757  0.001022   \n",
        "\n",
        "Country      Ukraine  United Arab Emirates  \n",
        "Date                                        \n",
        "2020-08-12  0.023906              0.001919  \n",
        "2020-08-13  0.023906              0.001919  \n",
        "2020-08-14  0.023906              0.001919  \n",
        "2020-08-15  0.023906              0.001919  \n",
        "2020-08-16  0.023906              0.001919  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Reproduction number\n",
      "df = analyser.track()\n",
      "delay = 14\n",
      "df.loc[:, [\"Rt\", *cs.SIRF.PARAMETERS]] = df.loc[:, [\"Rt\", *cs.SIRF.PARAMETERS]].shift(0 - abs(delay))\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col0,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col1,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col2,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col3,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col4,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col5,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col11{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col1,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col0{\n",
        "            background-color:  #2484ba;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col2,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col0{\n",
        "            background-color:  #04629a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col3,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col0{\n",
        "            background-color:  #4a98c5;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col4,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col0{\n",
        "            background-color:  #86b0d3;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col5,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col0{\n",
        "            background-color:  #2383ba;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col0{\n",
        "            background-color:  #63a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col0{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col0{\n",
        "            background-color:  #c2cbe2;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col0{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col0,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col10{\n",
        "            background-color:  #e4e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col0{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col2,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col1,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col7{\n",
        "            background-color:  #167bb6;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col3,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col1{\n",
        "            background-color:  #1c7fb8;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col4,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col1{\n",
        "            background-color:  #569dc8;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col5,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col1{\n",
        "            background-color:  #056fae;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col1,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col3{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col1{\n",
        "            background-color:  #5a9ec9;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col1{\n",
        "            background-color:  #b9c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col4,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col3,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col1{\n",
        "            background-color:  #65a3cb;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col1{\n",
        "            background-color:  #f3edf5;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col1{\n",
        "            background-color:  #045e94;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col3,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col2,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col5{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col4,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col2{\n",
        "            background-color:  #96b6d7;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col5,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col2{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col2{\n",
        "            background-color:  #7bacd1;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col2{\n",
        "            background-color:  #9fbad9;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col2,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col8{\n",
        "            background-color:  #c0c9e2;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col2{\n",
        "            background-color:  #8cb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col2{\n",
        "            background-color:  #e1dfed;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col2{\n",
        "            background-color:  #056dab;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col5,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col3{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col3{\n",
        "            background-color:  #3991c1;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col3{\n",
        "            background-color:  #157ab5;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col3{\n",
        "            background-color:  #afc1dd;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col3{\n",
        "            background-color:  #f5eef6;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col3{\n",
        "            background-color:  #05659f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col5,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col4{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col4{\n",
        "            background-color:  #3b92c1;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col4,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col5{\n",
        "            background-color:  #b5c4df;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col4{\n",
        "            background-color:  #e2dfee;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col4{\n",
        "            background-color:  #dcdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col4{\n",
        "            background-color:  #97b7d7;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col4{\n",
        "            background-color:  #056faf;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col5{\n",
        "            background-color:  #89b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col5{\n",
        "            background-color:  #bcc7e1;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col5{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col5{\n",
        "            background-color:  #045687;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col7,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col6{\n",
        "            background-color:  #2a88bc;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col6{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col6{\n",
        "            background-color:  #4295c3;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col6,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col9{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col6{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col8,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col7{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col7{\n",
        "            background-color:  #f8f1f8;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col7{\n",
        "            background-color:  #4094c3;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col9,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col8{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col10,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col8{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col11,#T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col9{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >School_closing</th>        <th class=\"col_heading level0 col1\" >Workplace_closing</th>        <th class=\"col_heading level0 col2\" >Cancel_events</th>        <th class=\"col_heading level0 col3\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col4\" >Transport_closing</th>        <th class=\"col_heading level0 col5\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col6\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col7\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col8\" >Information_campaigns</th>        <th class=\"col_heading level0 col9\" >Testing_policy</th>        <th class=\"col_heading level0 col10\" >Contact_tracing</th>        <th class=\"col_heading level0 col11\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row0\" class=\"row_heading level0 row0\" >School_closing</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col1\" class=\"data row0 col1\" >0.500780</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col2\" class=\"data row0 col2\" >0.741052</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col3\" class=\"data row0 col3\" >0.374620</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col4\" class=\"data row0 col4\" >0.179397</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col5\" class=\"data row0 col5\" >0.511673</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col6\" class=\"data row0 col6\" >0.295176</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col7\" class=\"data row0 col7\" >0.075504</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col8\" class=\"data row0 col8\" >-0.065453</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col9\" class=\"data row0 col9\" >0.172048</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col10\" class=\"data row0 col10\" >-0.257308</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row0_col11\" class=\"data row0 col11\" >0.654743</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row1\" class=\"row_heading level0 row1\" >Workplace_closing</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col0\" class=\"data row1 col0\" >0.500780</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col2\" class=\"data row1 col2\" >0.558632</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col3\" class=\"data row1 col3\" >0.535857</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col4\" class=\"data row1 col4\" >0.341617</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col5\" class=\"data row1 col5\" >0.632569</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col6\" class=\"data row1 col6\" >0.495779</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col7\" class=\"data row1 col7\" >0.326208</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col8\" class=\"data row1 col8\" >-0.023708</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col9\" class=\"data row1 col9\" >0.290161</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col10\" class=\"data row1 col10\" >-0.384464</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row1_col11\" class=\"data row1 col11\" >0.771127</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row2\" class=\"row_heading level0 row2\" >Cancel_events</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col0\" class=\"data row2 col0\" >0.741052</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col1\" class=\"data row2 col1\" >0.558632</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col3\" class=\"data row2 col3\" >0.436008</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col4\" class=\"data row2 col4\" >0.123331</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col5\" class=\"data row2 col5\" >0.516915</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col6\" class=\"data row2 col6\" >0.222775</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col7\" class=\"data row2 col7\" >0.085039</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col8\" class=\"data row2 col8\" >-0.055143</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col9\" class=\"data row2 col9\" >0.159939</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col10\" class=\"data row2 col10\" >-0.242228</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row2_col11\" class=\"data row2 col11\" >0.647920</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row3\" class=\"row_heading level0 row3\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col0\" class=\"data row3 col0\" >0.374620</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col1\" class=\"data row3 col1\" >0.535857</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col2\" class=\"data row3 col2\" >0.436008</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col4\" class=\"data row3 col4\" >0.292689</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col5\" class=\"data row3 col5\" >0.469920</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col6\" class=\"data row3 col6\" >0.428187</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col7\" class=\"data row3 col7\" >0.563837</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col8\" class=\"data row3 col8\" >0.020748</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col9\" class=\"data row3 col9\" >0.496628</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col10\" class=\"data row3 col10\" >-0.398743</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row3_col11\" class=\"data row3 col11\" >0.717007</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row4\" class=\"row_heading level0 row4\" >Transport_closing</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col0\" class=\"data row4 col0\" >0.179397</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col1\" class=\"data row4 col1\" >0.341617</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col2\" class=\"data row4 col2\" >0.123331</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col3\" class=\"data row4 col3\" >0.292689</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col5\" class=\"data row4 col5\" >0.537399</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col6\" class=\"data row4 col6\" >0.422443</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col7\" class=\"data row4 col7\" >-0.004554</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col8\" class=\"data row4 col8\" >-0.248277</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col9\" class=\"data row4 col9\" >-0.207097</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col10\" class=\"data row4 col10\" >0.113494</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row4_col11\" class=\"data row4 col11\" >0.629230</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row5\" class=\"row_heading level0 row5\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col0\" class=\"data row5 col0\" >0.511673</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col1\" class=\"data row5 col1\" >0.632569</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col2\" class=\"data row5 col2\" >0.516915</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col3\" class=\"data row5 col3\" >0.469920</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col4\" class=\"data row5 col4\" >0.537399</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col6\" class=\"data row5 col6\" >0.431760</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col7\" class=\"data row5 col7\" >0.168443</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col8\" class=\"data row5 col8\" >-0.006922</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col9\" class=\"data row5 col9\" >-0.039166</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col10\" class=\"data row5 col10\" >-0.044035</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row5_col11\" class=\"data row5 col11\" >0.835326</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row6\" class=\"row_heading level0 row6\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col0\" class=\"data row6 col0\" >0.295176</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col1\" class=\"data row6 col1\" >0.495779</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col2\" class=\"data row6 col2\" >0.222775</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col3\" class=\"data row6 col3\" >0.428187</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col4\" class=\"data row6 col4\" >0.422443</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col5\" class=\"data row6 col5\" >0.431760</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col7\" class=\"data row6 col7\" >0.482326</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col8\" class=\"data row6 col8\" >-0.123510</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col9\" class=\"data row6 col9\" >0.398345</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col10\" class=\"data row6 col10\" >-0.503688</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row6_col11\" class=\"data row6 col11\" >0.639678</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row7\" class=\"row_heading level0 row7\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col0\" class=\"data row7 col0\" >0.075504</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col1\" class=\"data row7 col1\" >0.326208</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col2\" class=\"data row7 col2\" >0.085039</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col3\" class=\"data row7 col3\" >0.563837</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col4\" class=\"data row7 col4\" >-0.004554</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col5\" class=\"data row7 col5\" >0.168443</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col6\" class=\"data row7 col6\" >0.482326</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col8\" class=\"data row7 col8\" >0.099885</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col9\" class=\"data row7 col9\" >0.554755</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col10\" class=\"data row7 col10\" >-0.428634</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row7_col11\" class=\"data row7 col11\" >0.404808</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row8\" class=\"row_heading level0 row8\" >Information_campaigns</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col0\" class=\"data row8 col0\" >-0.065453</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col1\" class=\"data row8 col1\" >-0.023708</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col2\" class=\"data row8 col2\" >-0.055143</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col3\" class=\"data row8 col3\" >0.020748</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col4\" class=\"data row8 col4\" >-0.248277</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col5\" class=\"data row8 col5\" >-0.006922</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col6\" class=\"data row8 col6\" >-0.123510</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col7\" class=\"data row8 col7\" >0.099885</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col9\" class=\"data row8 col9\" >0.272983</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col10\" class=\"data row8 col10\" >0.163886</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row8_col11\" class=\"data row8 col11\" >-0.051446</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row9\" class=\"row_heading level0 row9\" >Testing_policy</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col0\" class=\"data row9 col0\" >0.172048</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col1\" class=\"data row9 col1\" >0.290161</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col2\" class=\"data row9 col2\" >0.159939</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col3\" class=\"data row9 col3\" >0.496628</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col4\" class=\"data row9 col4\" >-0.207097</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col5\" class=\"data row9 col5\" >-0.039166</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col6\" class=\"data row9 col6\" >0.398345</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col7\" class=\"data row9 col7\" >0.554755</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col8\" class=\"data row9 col8\" >0.272983</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col10\" class=\"data row9 col10\" >-0.498839</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row9_col11\" class=\"data row9 col11\" >0.205499</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row10\" class=\"row_heading level0 row10\" >Contact_tracing</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col0\" class=\"data row10 col0\" >-0.257308</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col1\" class=\"data row10 col1\" >-0.384464</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col2\" class=\"data row10 col2\" >-0.242228</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col3\" class=\"data row10 col3\" >-0.398743</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col4\" class=\"data row10 col4\" >0.113494</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col5\" class=\"data row10 col5\" >-0.044035</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col6\" class=\"data row10 col6\" >-0.503688</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col7\" class=\"data row10 col7\" >-0.428634</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col8\" class=\"data row10 col8\" >0.163886</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col9\" class=\"data row10 col9\" >-0.498839</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row10_col11\" class=\"data row10 col11\" >-0.257014</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0level0_row11\" class=\"row_heading level0 row11\" >Stringency_index</th>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col0\" class=\"data row11 col0\" >0.654743</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col1\" class=\"data row11 col1\" >0.771127</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col2\" class=\"data row11 col2\" >0.647920</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col3\" class=\"data row11 col3\" >0.717007</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col4\" class=\"data row11 col4\" >0.629230</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col5\" class=\"data row11 col5\" >0.835326</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col6\" class=\"data row11 col6\" >0.639678</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col7\" class=\"data row11 col7\" >0.404808</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col8\" class=\"data row11 col8\" >-0.051446</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col9\" class=\"data row11 col9\" >0.205499</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col10\" class=\"data row11 col10\" >-0.257014</td>\n",
        "                        <td id=\"T_641039e8_dfc0_11ea_9b39_5254008ebfe0row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f043cbb68b0>"
       ]
      }
     ],
     "prompt_number": 19
    }
   ],
   "metadata": {}
  }
 ]
}
