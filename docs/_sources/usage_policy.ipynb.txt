{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.12.0-rho.new.339.357.359.362.366.367.383.fix.360.373'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "196"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **16th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{2: ['Holy See', 'Timor-Leste', 'Solomon Islands'],\n",
        " 3: ['Saint Kitts and Nevis', 'Laos', 'Tanzania'],\n",
        " 4: ['Brunei', 'Grenada', 'Saint Lucia', 'Dominica'],\n",
        " 5: ['Equatorial Guinea', 'Fiji'],\n",
        " 6: ['Antigua and Barbuda', 'Mauritius', 'Saint Vincent and the Grenadines'],\n",
        " 7: ['Northern Mariana Islands', 'Gambia'],\n",
        " 8: ['Liechtenstein', 'Cambodia', 'Malawi', 'Seychelles', 'Lesotho',\n",
        "     'Trinidad and Tobago', 'Vietnam', 'Madagascar', 'Monaco', 'Bahamas',\n",
        "     'Virgin Islands, U.S.', 'Barbados', 'Kyrgyzstan'],\n",
        " 9: ['Ghana', 'Oman', 'Bhutan', 'Burundi', 'Suriname', 'Zimbabwe', 'Zambia',\n",
        "     'Bolivia', 'Republic of the Congo', 'Swaziland', 'Australia', 'Uzbekistan',\n",
        "     'Kazakhstan', 'Sao Tome and Principe', 'Senegal', 'Guyana', 'Venezuela',\n",
        "     'Benin', 'Djibouti', 'Namibia', 'South Africa'],\n",
        " 10: ['Botswana', 'Central African Republic', 'Bermuda', 'Eritrea', 'Egypt',\n",
        "      'Chile', 'Jamaica', 'Brazil', 'El Salvador', 'Ethiopia', 'Guatemala',\n",
        "      'Rwanda', 'Philippines', 'Colombia', 'Singapore', 'Kuwait', 'Liberia',\n",
        "      'Myanmar', 'Libya', 'Belize', \"Cote d'Ivoire\", 'Syria', 'Mongolia',\n",
        "      'Mozambique', 'Gabon', 'Peru', 'Saudi Arabia', 'Comoros',\n",
        "      'Papua New Guinea', 'Maldives', 'Honduras', 'Bahrain', 'New Zealand',\n",
        "      'Israel', 'Nigeria', 'Guam'],\n",
        " 11: ['Sudan', 'Andorra', 'Bangladesh', 'India', 'Pakistan', 'Iraq', 'Angola',\n",
        "      'Cape Verde', 'Yemen', 'Algeria', 'Guinea', 'Argentina', 'Togo',\n",
        "      'Puerto Rico', 'Costa Rica', 'Dominican Republic', 'Nicaragua', 'Ecuador',\n",
        "      'Sierra Leone', 'Guinea-Bissau', 'Paraguay', 'Kosovo', 'Cameroon', 'Chad',\n",
        "      'Kenya', 'Taiwan', 'Panama', 'Mexico'],\n",
        " 12: ['Iceland', 'Haiti', 'Nepal', 'Tunisia', 'Georgia', 'Sri Lanka',\n",
        "      'Democratic Republic of the Congo', 'Jordan', 'Uruguay', 'Uganda',\n",
        "      'Croatia', 'San Marino', 'South Sudan', 'Qatar', 'Tajikistan', 'Serbia',\n",
        "      'Palestine', 'Japan', 'Cuba', 'United Arab Emirates', 'Azerbaijan',\n",
        "      'Niger'],\n",
        " 13: ['Burkina Faso', 'Mauritania', 'United States', 'Moldova', 'Malta',\n",
        "      'Afghanistan', 'Mali', 'Slovakia', 'Ireland', 'Bosnia and Herzegovina',\n",
        "      'Hungary', 'Bulgaria', 'Slovenia', 'Armenia', 'Belarus', 'Cyprus',\n",
        "      'Montenegro', 'Indonesia', 'China', 'Latvia', 'Luxembourg',\n",
        "      'Czech Republic', 'Russia'],\n",
        " 14: ['Malaysia', 'Lithuania', 'North Macedonia', 'Turkey', 'Poland', 'Estonia',\n",
        "      'Morocco', 'Spain', 'Thailand', 'Greece', 'Albania', 'Iran', 'Somalia'],\n",
        " 15: ['Denmark', 'Lebanon', 'Norway', 'Netherlands', 'Switzerland', 'Portugal',\n",
        "      'Ukraine', 'Sweden', 'Belgium', 'Canada', 'Austria', 'Germany', 'Finland',\n",
        "      'United Kingdom', 'Italy'],\n",
        " 16: ['Romania'],\n",
        " 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=16)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "2"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{16: ['Romania'], 17: ['France']}\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>26Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Aug2020</td>\n",
        "      <td>07Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Sep2020</td>\n",
        "      <td>16Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>06Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "               Type      Start        End  Population\n",
        "Country Phase                                        \n",
        "France  0th    Past  07Feb2020  28Mar2020    66977107\n",
        "        1st    Past  29Mar2020  12Apr2020    66977107\n",
        "        2nd    Past  13Apr2020  28May2020    66977107\n",
        "        3rd    Past  29May2020  05Aug2020    66977107\n",
        "        4th    Past  06Aug2020  26Aug2020    66977107\n",
        "        5th    Past  27Aug2020  07Sep2020    66977107\n",
        "        6th    Past  08Sep2020  16Sep2020    66977107\n",
        "        7th    Past  17Sep2020  23Sep2020    66977107\n",
        "        8th    Past  24Sep2020  01Oct2020    66977107\n",
        "        9th    Past  02Oct2020  08Oct2020    66977107\n",
        "        10th   Past  09Oct2020  15Oct2020    66977107\n",
        "        11th   Past  16Oct2020  21Oct2020    66977107\n",
        "        12th   Past  22Oct2020  31Oct2020    66977107\n",
        "        13th   Past  01Nov2020  10Nov2020    66977107\n",
        "        14th   Past  11Nov2020  16Nov2020    66977107\n",
        "        15th   Past  17Nov2020  24Nov2020    66977107\n",
        "        16th   Past  25Nov2020  06Dec2020    66977107"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF, timeout=10)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>\n",
        "Running optimization with 4 CPUs...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  5th phase (29Aug2020 - 15Sep2020): finished  357 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 13th phase (18Nov2020 - 23Nov2020): finished  363 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  9th phase (21Oct2020 - 28Oct2020): finished  365 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (17Sep2020 - 23Sep2020): finished  364 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  8th phase (13Oct2020 - 20Oct2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  2nd phase (26Jun2020 - 23Jul2020): finished  338 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  4th phase (11Aug2020 - 28Aug2020): finished  344 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  7th phase (02Oct2020 - 12Oct2020): finished  352 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  6th phase (16Sep2020 - 01Oct2020): finished  341 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 12th phase (22Oct2020 - 31Oct2020): finished  341 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  1st phase (26Apr2020 - 25Jun2020): finished  326 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (24Sep2020 - 01Oct2020): finished  341 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (07Feb2020 - 28Mar2020): finished  319 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (02Oct2020 - 08Oct2020): finished  337 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (08Sep2020 - 16Sep2020): finished  346 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 10th phase (29Oct2020 - 04Nov2020): finished  353 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (29May2020 - 05Aug2020): finished  328 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (29Mar2020 - 12Apr2020): finished  339 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 11th phase (05Nov2020 - 11Nov2020): finished  349 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  3rd phase (24Jul2020 - 10Aug2020): finished  345 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 14th phase (11Nov2020 - 16Nov2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 15th phase (30Nov2020 - 06Dec2020): finished  336 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (27Aug2020 - 07Sep2020): finished  331 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (06Aug2020 - 26Aug2020): finished  330 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  0th phase (05Mar2020 - 25Apr2020): finished  346 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 11th phase (16Oct2020 - 21Oct2020): finished  362 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 14th phase (24Nov2020 - 29Nov2020): finished  363 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 12th phase (12Nov2020 - 17Nov2020): finished  358 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (09Oct2020 - 15Oct2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (13Apr2020 - 28May2020): finished  340 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 13th phase (01Nov2020 - 10Nov2020): finished  354 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 15th phase (17Nov2020 - 24Nov2020): finished  351 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 16th phase (25Nov2020 - 06Dec2020): finished  355 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 38 sec\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">France</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Feb2020</td>\n",
        "      <td>28Mar2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>10.59</td>\n",
        "      <td>0.000282</td>\n",
        "      <td>0.000080</td>\n",
        "      <td>0.042663</td>\n",
        "      <td>0.003948</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>63</td>\n",
        "      <td>3124</td>\n",
        "      <td>5</td>\n",
        "      <td>1.147923</td>\n",
        "      <td>319</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>29Mar2020</td>\n",
        "      <td>12Apr2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.061692</td>\n",
        "      <td>0.000899</td>\n",
        "      <td>0.029330</td>\n",
        "      <td>0.013738</td>\n",
        "      <td>360</td>\n",
        "      <td>0.062</td>\n",
        "      <td>18</td>\n",
        "      <td>278</td>\n",
        "      <td>8</td>\n",
        "      <td>1.428310</td>\n",
        "      <td>339</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>13Apr2020</td>\n",
        "      <td>28May2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.58</td>\n",
        "      <td>0.287116</td>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.022954</td>\n",
        "      <td>0.028374</td>\n",
        "      <td>360</td>\n",
        "      <td>0.287</td>\n",
        "      <td>8</td>\n",
        "      <td>5135</td>\n",
        "      <td>10</td>\n",
        "      <td>0.140858</td>\n",
        "      <td>340</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>29May2020</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.09</td>\n",
        "      <td>0.176562</td>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.022478</td>\n",
        "      <td>0.016903</td>\n",
        "      <td>360</td>\n",
        "      <td>0.177</td>\n",
        "      <td>14</td>\n",
        "      <td>5111</td>\n",
        "      <td>11</td>\n",
        "      <td>0.150203</td>\n",
        "      <td>328</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Aug2020</td>\n",
        "      <td>26Aug2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.72</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.000152</td>\n",
        "      <td>0.029559</td>\n",
        "      <td>0.017016</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>14</td>\n",
        "      <td>1641</td>\n",
        "      <td>8</td>\n",
        "      <td>0.034941</td>\n",
        "      <td>330</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>27Aug2020</td>\n",
        "      <td>07Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000433</td>\n",
        "      <td>0.000098</td>\n",
        "      <td>0.026896</td>\n",
        "      <td>0.012698</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>19</td>\n",
        "      <td>2549</td>\n",
        "      <td>9</td>\n",
        "      <td>0.029504</td>\n",
        "      <td>331</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>08Sep2020</td>\n",
        "      <td>16Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.004030</td>\n",
        "      <td>0.000048</td>\n",
        "      <td>0.026168</td>\n",
        "      <td>0.016881</td>\n",
        "      <td>360</td>\n",
        "      <td>0.004</td>\n",
        "      <td>14</td>\n",
        "      <td>5171</td>\n",
        "      <td>9</td>\n",
        "      <td>0.019581</td>\n",
        "      <td>346</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>23Sep2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.54</td>\n",
        "      <td>0.000066</td>\n",
        "      <td>0.000151</td>\n",
        "      <td>0.028003</td>\n",
        "      <td>0.018062</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>1650</td>\n",
        "      <td>8</td>\n",
        "      <td>0.025541</td>\n",
        "      <td>364</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Sep2020</td>\n",
        "      <td>01Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.45</td>\n",
        "      <td>0.018035</td>\n",
        "      <td>0.000070</td>\n",
        "      <td>0.024123</td>\n",
        "      <td>0.016247</td>\n",
        "      <td>360</td>\n",
        "      <td>0.018</td>\n",
        "      <td>15</td>\n",
        "      <td>3586</td>\n",
        "      <td>10</td>\n",
        "      <td>0.039605</td>\n",
        "      <td>341</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>08Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.18</td>\n",
        "      <td>0.000569</td>\n",
        "      <td>0.000426</td>\n",
        "      <td>0.028723</td>\n",
        "      <td>0.023946</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>10</td>\n",
        "      <td>586</td>\n",
        "      <td>8</td>\n",
        "      <td>0.033326</td>\n",
        "      <td>337</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Oct2020</td>\n",
        "      <td>15Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.68</td>\n",
        "      <td>0.000130</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.025418</td>\n",
        "      <td>0.014956</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>16</td>\n",
        "      <td>1486</td>\n",
        "      <td>9</td>\n",
        "      <td>0.034461</td>\n",
        "      <td>355</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>16Oct2020</td>\n",
        "      <td>21Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.89</td>\n",
        "      <td>0.000130</td>\n",
        "      <td>0.000168</td>\n",
        "      <td>0.027840</td>\n",
        "      <td>0.014528</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>17</td>\n",
        "      <td>1488</td>\n",
        "      <td>8</td>\n",
        "      <td>0.031188</td>\n",
        "      <td>362</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>22Oct2020</td>\n",
        "      <td>31Oct2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.52</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>0.000150</td>\n",
        "      <td>0.028712</td>\n",
        "      <td>0.011235</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>22</td>\n",
        "      <td>1666</td>\n",
        "      <td>8</td>\n",
        "      <td>0.044265</td>\n",
        "      <td>341</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>01Nov2020</td>\n",
        "      <td>10Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.37</td>\n",
        "      <td>0.000202</td>\n",
        "      <td>0.000257</td>\n",
        "      <td>0.025695</td>\n",
        "      <td>0.018538</td>\n",
        "      <td>360</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>974</td>\n",
        "      <td>9</td>\n",
        "      <td>0.026715</td>\n",
        "      <td>354</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>16Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.65</td>\n",
        "      <td>0.001978</td>\n",
        "      <td>0.000194</td>\n",
        "      <td>0.013372</td>\n",
        "      <td>0.020379</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>12</td>\n",
        "      <td>1289</td>\n",
        "      <td>18</td>\n",
        "      <td>0.010552</td>\n",
        "      <td>336</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.41</td>\n",
        "      <td>0.000574</td>\n",
        "      <td>0.000426</td>\n",
        "      <td>0.013244</td>\n",
        "      <td>0.031996</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>586</td>\n",
        "      <td>18</td>\n",
        "      <td>0.029266</td>\n",
        "      <td>351</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>06Dec2020</td>\n",
        "      <td>66977107</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.50</td>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.035030</td>\n",
        "      <td>360</td>\n",
        "      <td>0.030</td>\n",
        "      <td>7</td>\n",
        "      <td>5146</td>\n",
        "      <td>13</td>\n",
        "      <td>0.047743</td>\n",
        "      <td>355</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Type      Start        End  Population    ODE     Rt     theta  \\\n",
        "Country Phase                                                                   \n",
        "France  0th    Past  07Feb2020  28Mar2020    66977107  SIR-F  10.59  0.000282   \n",
        "        1st    Past  29Mar2020  12Apr2020    66977107  SIR-F   1.88  0.061692   \n",
        "        2nd    Past  13Apr2020  28May2020    66977107  SIR-F   0.58  0.287116   \n",
        "        3rd    Past  29May2020  05Aug2020    66977107  SIR-F   1.09  0.176562   \n",
        "        4th    Past  06Aug2020  26Aug2020    66977107  SIR-F   1.72  0.000066   \n",
        "        5th    Past  27Aug2020  07Sep2020    66977107  SIR-F   2.10  0.000433   \n",
        "        6th    Past  08Sep2020  16Sep2020    66977107  SIR-F   1.54  0.004030   \n",
        "        7th    Past  17Sep2020  23Sep2020    66977107  SIR-F   1.54  0.000066   \n",
        "        8th    Past  24Sep2020  01Oct2020    66977107  SIR-F   1.45  0.018035   \n",
        "        9th    Past  02Oct2020  08Oct2020    66977107  SIR-F   1.18  0.000569   \n",
        "        10th   Past  09Oct2020  15Oct2020    66977107  SIR-F   1.68  0.000130   \n",
        "        11th   Past  16Oct2020  21Oct2020    66977107  SIR-F   1.89  0.000130   \n",
        "        12th   Past  22Oct2020  31Oct2020    66977107  SIR-F   2.52  0.001843   \n",
        "        13th   Past  01Nov2020  10Nov2020    66977107  SIR-F   1.37  0.000202   \n",
        "        14th   Past  11Nov2020  16Nov2020    66977107  SIR-F   0.65  0.001978   \n",
        "        15th   Past  17Nov2020  24Nov2020    66977107  SIR-F   0.41  0.000574   \n",
        "        16th   Past  25Nov2020  06Dec2020    66977107  SIR-F   0.50  0.030038   \n",
        "\n",
        "                  kappa       rho     sigma  tau  alpha1 [-]  1/gamma [day]  \\\n",
        "Country Phase                                                                 \n",
        "France  0th    0.000080  0.042663  0.003948  360       0.000             63   \n",
        "        1st    0.000899  0.029330  0.013738  360       0.062             18   \n",
        "        2nd    0.000049  0.022954  0.028374  360       0.287              8   \n",
        "        3rd    0.000049  0.022478  0.016903  360       0.177             14   \n",
        "        4th    0.000152  0.029559  0.017016  360       0.000             14   \n",
        "        5th    0.000098  0.026896  0.012698  360       0.000             19   \n",
        "        6th    0.000048  0.026168  0.016881  360       0.004             14   \n",
        "        7th    0.000151  0.028003  0.018062  360       0.000             13   \n",
        "        8th    0.000070  0.024123  0.016247  360       0.018             15   \n",
        "        9th    0.000426  0.028723  0.023946  360       0.001             10   \n",
        "        10th   0.000168  0.025418  0.014956  360       0.000             16   \n",
        "        11th   0.000168  0.027840  0.014528  360       0.000             17   \n",
        "        12th   0.000150  0.028712  0.011235  360       0.002             22   \n",
        "        13th   0.000257  0.025695  0.018538  360       0.000             13   \n",
        "        14th   0.000194  0.013372  0.020379  360       0.002             12   \n",
        "        15th   0.000426  0.013244  0.031996  360       0.001              7   \n",
        "        16th   0.000049  0.018128  0.035030  360       0.030              7   \n",
        "\n",
        "               1/alpha2 [day]  1/beta [day]     RMSLE  Trials       Runtime  \n",
        "Country Phase                                                                \n",
        "France  0th              3124             5  1.147923     319  0 min 10 sec  \n",
        "        1st               278             8  1.428310     339  0 min 10 sec  \n",
        "        2nd              5135            10  0.140858     340  0 min 10 sec  \n",
        "        3rd              5111            11  0.150203     328  0 min 10 sec  \n",
        "        4th              1641             8  0.034941     330  0 min 10 sec  \n",
        "        5th              2549             9  0.029504     331  0 min 10 sec  \n",
        "        6th              5171             9  0.019581     346  0 min 10 sec  \n",
        "        7th              1650             8  0.025541     364  0 min 10 sec  \n",
        "        8th              3586            10  0.039605     341  0 min 10 sec  \n",
        "        9th               586             8  0.033326     337  0 min 10 sec  \n",
        "        10th             1486             9  0.034461     355  0 min 10 sec  \n",
        "        11th             1488             8  0.031188     362  0 min 10 sec  \n",
        "        12th             1666             8  0.044265     341  0 min 10 sec  \n",
        "        13th              974             9  0.026715     354  0 min 10 sec  \n",
        "        14th             1289            18  0.010552     336  0 min 10 sec  \n",
        "        15th              586            18  0.029266     351  0 min 10 sec  \n",
        "        16th             5146            13  0.047743     355  0 min 10 sec  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-03-05</td>\n",
        "      <td>Romania</td>\n",
        "      <td>0.048203</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.040052</td>\n",
        "      <td>0.005002</td>\n",
        "      <td>0.048</td>\n",
        "      <td>6145</td>\n",
        "      <td>6</td>\n",
        "      <td>49</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>16.67</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-03-06</td>\n",
        "      <td>Romania</td>\n",
        "      <td>0.048203</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.040052</td>\n",
        "      <td>0.005002</td>\n",
        "      <td>0.048</td>\n",
        "      <td>6145</td>\n",
        "      <td>6</td>\n",
        "      <td>49</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>16.67</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-03-07</td>\n",
        "      <td>Romania</td>\n",
        "      <td>0.048203</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.040052</td>\n",
        "      <td>0.005002</td>\n",
        "      <td>0.048</td>\n",
        "      <td>6145</td>\n",
        "      <td>6</td>\n",
        "      <td>49</td>\n",
        "      <td>...</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>16.67</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-03-08</td>\n",
        "      <td>Romania</td>\n",
        "      <td>0.048203</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.040052</td>\n",
        "      <td>0.005002</td>\n",
        "      <td>0.048</td>\n",
        "      <td>6145</td>\n",
        "      <td>6</td>\n",
        "      <td>49</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-03-09</td>\n",
        "      <td>Romania</td>\n",
        "      <td>0.048203</td>\n",
        "      <td>0.000041</td>\n",
        "      <td>0.040052</td>\n",
        "      <td>0.005002</td>\n",
        "      <td>0.048</td>\n",
        "      <td>6145</td>\n",
        "      <td>6</td>\n",
        "      <td>49</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>33.33</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date  Country     theta     kappa       rho     sigma  alpha1 [-]  \\\n",
        "0 2020-03-05  Romania  0.048203  0.000041  0.040052  0.005002       0.048   \n",
        "1 2020-03-06  Romania  0.048203  0.000041  0.040052  0.005002       0.048   \n",
        "2 2020-03-07  Romania  0.048203  0.000041  0.040052  0.005002       0.048   \n",
        "3 2020-03-08  Romania  0.048203  0.000041  0.040052  0.005002       0.048   \n",
        "4 2020-03-09  Romania  0.048203  0.000041  0.040052  0.005002       0.048   \n",
        "\n",
        "   1/alpha2 [day]  1/beta [day]  1/gamma [day]  ...  Cancel_events  \\\n",
        "0            6145             6             49  ...              0   \n",
        "1            6145             6             49  ...              0   \n",
        "2            6145             6             49  ...              0   \n",
        "3            6145             6             49  ...              2   \n",
        "4            6145             6             49  ...              2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       0   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        1                  0                       0   \n",
        "4                        1                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    2   \n",
        "1                               0                                    2   \n",
        "2                               0                                    2   \n",
        "3                               0                                    2   \n",
        "4                               0                                    3   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               0                0             16.67  \n",
        "1                      2               0                0             16.67  \n",
        "2                      2               0                0             16.67  \n",
        "3                      2               0                0             30.56  \n",
        "4                      2               0                0             33.33  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.5</td>\n",
        "      <td>0.7</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     France  Romania\n",
        "Date                       \n",
        "2020-12-02     0.5      0.7\n",
        "2020-12-03     0.5      0.7\n",
        "2020-12-04     0.5      0.7\n",
        "2020-12-05     0.5      0.7\n",
        "2020-12-06     0.5      0.7"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.018128</td>\n",
        "      <td>0.014575</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country       France   Romania\n",
        "Date                          \n",
        "2020-12-02  0.018128  0.014575\n",
        "2020-12-03  0.018128  0.014575\n",
        "2020-12-04  0.018128  0.014575\n",
        "2020-12-05  0.018128  0.014575\n",
        "2020-12-06  0.018128  0.014575"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.03503</td>\n",
        "      <td>0.020302</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      France   Romania\n",
        "Date                         \n",
        "2020-12-02  0.03503  0.020302\n",
        "2020-12-03  0.03503  0.020302\n",
        "2020-12-04  0.03503  0.020302\n",
        "2020-12-05  0.03503  0.020302\n",
        "2020-12-06  0.03503  0.020302"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.000049</td>\n",
        "      <td>0.000096</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country       France   Romania\n",
        "Date                          \n",
        "2020-12-02  0.000049  0.000096\n",
        "2020-12-03  0.000049  0.000096\n",
        "2020-12-04  0.000049  0.000096\n",
        "2020-12-05  0.000049  0.000096\n",
        "2020-12-06  0.000049  0.000096"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>France</th>\n",
        "      <th>Romania</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-02</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-03</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-04</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-05</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-06</th>\n",
        "      <td>0.030038</td>\n",
        "      <td>0.0172</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country       France  Romania\n",
        "Date                         \n",
        "2020-12-02  0.030038   0.0172\n",
        "2020-12-03  0.030038   0.0172\n",
        "2020-12-04  0.030038   0.0172\n",
        "2020-12-05  0.030038   0.0172\n",
        "2020-12-06  0.030038   0.0172"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 7849 entries, 0 to 7862\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 7849 non-null   datetime64[ns]\n",
        " 1   Country                              7849 non-null   object        \n",
        " 2   Rt                                   7849 non-null   float64       \n",
        " 3   theta                                7849 non-null   float64       \n",
        " 4   kappa                                7849 non-null   float64       \n",
        " 5   rho                                  7849 non-null   float64       \n",
        " 6   sigma                                7849 non-null   float64       \n",
        " 7   School_closing                       7849 non-null   int64         \n",
        " 8   Workplace_closing                    7849 non-null   int64         \n",
        " 9   Cancel_events                        7849 non-null   int64         \n",
        " 10  Gatherings_restrictions              7849 non-null   int64         \n",
        " 11  Transport_closing                    7849 non-null   int64         \n",
        " 12  Stay_home_restrictions               7849 non-null   int64         \n",
        " 13  Internal_movement_restrictions       7849 non-null   int64         \n",
        " 14  International_movement_restrictions  7849 non-null   int64         \n",
        " 15  Information_campaigns                7849 non-null   int64         \n",
        " 16  Testing_policy                       7849 non-null   int64         \n",
        " 17  Contact_tracing                      7849 non-null   int64         \n",
        " 18  Stringency_index                     7849 non-null   float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 1.2+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col0,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col1,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col2,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col3,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col1,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col0,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col3{\n",
        "            background-color:  #d7d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col2,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col0{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col3,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col0,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col10{\n",
        "            background-color:  #03476f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col0{\n",
        "            background-color:  #faf2f8;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col0{\n",
        "            background-color:  #dad9ea;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col0,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col3{\n",
        "            background-color:  #e0dded;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col0{\n",
        "            background-color:  #dfddec;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col0,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col0{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col3,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col0,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col0{\n",
        "            background-color:  #f3edf5;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col0{\n",
        "            background-color:  #e5e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col0{\n",
        "            background-color:  #f9f2f8;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col3,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col0{\n",
        "            background-color:  #dcdaeb;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col0{\n",
        "            background-color:  #f0eaf4;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col0{\n",
        "            background-color:  #eae6f1;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col2,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col1{\n",
        "            background-color:  #bfc9e1;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col3,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col1{\n",
        "            background-color:  #d3d4e7;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col1{\n",
        "            background-color:  #0872b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col1{\n",
        "            background-color:  #2a88bc;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col1{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col1{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col1,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col1{\n",
        "            background-color:  #358fc0;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col1{\n",
        "            background-color:  #4a98c5;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col1{\n",
        "            background-color:  #328dbf;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col1{\n",
        "            background-color:  #3790c0;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col2,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col1{\n",
        "            background-color:  #4697c4;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col1{\n",
        "            background-color:  #acc0dd;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col1{\n",
        "            background-color:  #6fa7ce;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col1{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col3,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col2{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col2{\n",
        "            background-color:  #8eb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col2{\n",
        "            background-color:  #4c99c5;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col2,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col2{\n",
        "            background-color:  #67a4cc;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col2,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col10{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col2{\n",
        "            background-color:  #73a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col2{\n",
        "            background-color:  #4897c4;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col2{\n",
        "            background-color:  #71a8ce;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col2{\n",
        "            background-color:  #6da6cd;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col2{\n",
        "            background-color:  #89b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col2,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col5{\n",
        "            background-color:  #93b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col2{\n",
        "            background-color:  #549cc7;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col3{\n",
        "            background-color:  #f7f0f7;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col3{\n",
        "            background-color:  #dedcec;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col3,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col3{\n",
        "            background-color:  #e4e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col3{\n",
        "            background-color:  #ebe6f2;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col3{\n",
        "            background-color:  #f5eff6;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col3{\n",
        "            background-color:  #ece7f2;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col3{\n",
        "            background-color:  #d6d6e9;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col3{\n",
        "            background-color:  #e7e3f0;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col12{\n",
        "            background-color:  #167bb6;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col4{\n",
        "            background-color:  #0570b0;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col4{\n",
        "            background-color:  #0c74b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col4,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col6{\n",
        "            background-color:  #0569a5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col4{\n",
        "            background-color:  #056fae;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col4{\n",
        "            background-color:  #056aa6;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col4{\n",
        "            background-color:  #056ba9;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col4{\n",
        "            background-color:  #1278b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col4{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col4{\n",
        "            background-color:  #1e80b8;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col4{\n",
        "            background-color:  #056dab;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col6{\n",
        "            background-color:  #034165;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col5{\n",
        "            background-color:  #04588a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col9{\n",
        "            background-color:  #056faf;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col5{\n",
        "            background-color:  #034a74;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col5,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col13{\n",
        "            background-color:  #056ead;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col5{\n",
        "            background-color:  #0569a4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col5{\n",
        "            background-color:  #0771b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col5{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col5{\n",
        "            background-color:  #034369;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col6{\n",
        "            background-color:  #045788;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col6{\n",
        "            background-color:  #0567a1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col6,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col10{\n",
        "            background-color:  #056dac;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col6{\n",
        "            background-color:  #03446a;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col6{\n",
        "            background-color:  #0a73b2;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col6{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col6{\n",
        "            background-color:  #80aed2;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col7{\n",
        "            background-color:  #045f95;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col7,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col7{\n",
        "            background-color:  #056ba7;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col7{\n",
        "            background-color:  #79abd0;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col7{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col7{\n",
        "            background-color:  #03456c;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col8{\n",
        "            background-color:  #034d79;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col8{\n",
        "            background-color:  #046097;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col8{\n",
        "            background-color:  #023b5d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col8,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col12{\n",
        "            background-color:  #045483;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col8{\n",
        "            background-color:  #1379b5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col9,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col8{\n",
        "            background-color:  #04639b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col8{\n",
        "            background-color:  #045c90;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col9{\n",
        "            background-color:  #046198;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col9{\n",
        "            background-color:  #034267;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col9{\n",
        "            background-color:  #03517e;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col9{\n",
        "            background-color:  #308cbe;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col10,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col9{\n",
        "            background-color:  #046299;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col10{\n",
        "            background-color:  #046096;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col10{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col12,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col11{\n",
        "            background-color:  #034871;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col13,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col12{\n",
        "            background-color:  #045d92;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col14,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col11{\n",
        "            background-color:  #2081b9;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col11{\n",
        "            background-color:  #0568a3;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col11,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col13{\n",
        "            background-color:  #045e93;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col12{\n",
        "            background-color:  #05659f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col15,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col13{\n",
        "            background-color:  #04649d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col14{\n",
        "            background-color:  #81aed2;\n",
        "            color:  #000000;\n",
        "        }#T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col16,#T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col15{\n",
        "            background-color:  #509ac6;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col1\" class=\"data row0 col1\" >-0.435653</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col2\" class=\"data row0 col2\" >-0.103225</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col3\" class=\"data row0 col3\" >0.896444</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col4\" class=\"data row0 col4\" >-0.774977</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col5\" class=\"data row0 col5\" >-0.462503</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col6\" class=\"data row0 col6\" >-0.504583</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col7\" class=\"data row0 col7\" >-0.496686</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col8\" class=\"data row0 col8\" >-0.836454</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col9\" class=\"data row0 col9\" >-0.689837</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col10\" class=\"data row0 col10\" >-0.547613</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col11\" class=\"data row0 col11\" >-0.761339</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col12\" class=\"data row0 col12\" >-0.840170</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col13\" class=\"data row0 col13\" >-0.693275</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col14\" class=\"data row0 col14\" >-0.477031</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col15\" class=\"data row0 col15\" >-0.652960</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row0_col16\" class=\"data row0 col16\" >-0.595487</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col0\" class=\"data row1 col0\" >-0.435653</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col2\" class=\"data row1 col2\" >-0.280033</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col3\" class=\"data row1 col3\" >-0.404117</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col4\" class=\"data row1 col4\" >0.519221</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col5\" class=\"data row1 col5\" >0.363051</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col6\" class=\"data row1 col6\" >0.318118</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col7\" class=\"data row1 col7\" >0.408414</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col8\" class=\"data row1 col8\" >0.314634</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col9\" class=\"data row1 col9\" >0.310504</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col10\" class=\"data row1 col10\" >0.232182</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col11\" class=\"data row1 col11\" >0.324998</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col12\" class=\"data row1 col12\" >0.304086</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col13\" class=\"data row1 col13\" >0.247634</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col14\" class=\"data row1 col14\" >-0.183185</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col15\" class=\"data row1 col15\" >0.095468</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row1_col16\" class=\"data row1 col16\" >0.386910</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col0\" class=\"data row2 col0\" >-0.103225</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col1\" class=\"data row2 col1\" >-0.280033</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col3\" class=\"data row2 col3\" >-0.010657</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col4\" class=\"data row2 col4\" >-0.035475</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col5\" class=\"data row2 col5\" >0.223713</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col6\" class=\"data row2 col6\" >0.250713</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col7\" class=\"data row2 col7\" >0.125279</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col8\" class=\"data row2 col8\" >0.113559</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col9\" class=\"data row2 col9\" >0.086926</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col10\" class=\"data row2 col10\" >0.243899</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col11\" class=\"data row2 col11\" >0.093204</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col12\" class=\"data row2 col12\" >0.127616</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col13\" class=\"data row2 col13\" >0.106154</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col14\" class=\"data row2 col14\" >-0.018827</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col15\" class=\"data row2 col15\" >-0.057298</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row2_col16\" class=\"data row2 col16\" >0.200395</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col0\" class=\"data row3 col0\" >0.896444</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col1\" class=\"data row3 col1\" >-0.404117</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col2\" class=\"data row3 col2\" >-0.010657</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col4\" class=\"data row3 col4\" >-0.734384</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col5\" class=\"data row3 col5\" >-0.435982</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col6\" class=\"data row3 col6\" >-0.474107</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col7\" class=\"data row3 col7\" >-0.492443</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col8\" class=\"data row3 col8\" >-0.695063</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col9\" class=\"data row3 col9\" >-0.539927</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col10\" class=\"data row3 col10\" >-0.505738</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col11\" class=\"data row3 col11\" >-0.600359</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col12\" class=\"data row3 col12\" >-0.725094</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col13\" class=\"data row3 col13\" >-0.604441</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col14\" class=\"data row3 col14\" >-0.428383</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col15\" class=\"data row3 col15\" >-0.569859</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row3_col16\" class=\"data row3 col16\" >-0.539282</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col0\" class=\"data row4 col0\" >-0.774977</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col1\" class=\"data row4 col1\" >0.519221</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col2\" class=\"data row4 col2\" >-0.035475</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col3\" class=\"data row4 col3\" >-0.734384</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col5\" class=\"data row4 col5\" >0.456146</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col6\" class=\"data row4 col6\" >0.533549</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col7\" class=\"data row4 col7\" >0.504599</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col8\" class=\"data row4 col8\" >0.610114</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col9\" class=\"data row4 col9\" >0.534787</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col10\" class=\"data row4 col10\" >0.551241</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col11\" class=\"data row4 col11\" >0.599960</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col12\" class=\"data row4 col12\" >0.585790</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col13\" class=\"data row4 col13\" >0.480297</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col14\" class=\"data row4 col14\" >0.279083</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col15\" class=\"data row4 col15\" >0.424781</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row4_col16\" class=\"data row4 col16\" >0.574419</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col0\" class=\"data row5 col0\" >-0.462503</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col1\" class=\"data row5 col1\" >0.363051</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col2\" class=\"data row5 col2\" >0.223713</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col3\" class=\"data row5 col3\" >-0.435982</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col4\" class=\"data row5 col4\" >0.456146</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col6\" class=\"data row5 col6\" >0.940325</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col7\" class=\"data row5 col7\" >0.777656</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col8\" class=\"data row5 col8\" >0.611209</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col9\" class=\"data row5 col9\" >0.544786</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col10\" class=\"data row5 col10\" >0.875381</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col11\" class=\"data row5 col11\" >0.556871</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col12\" class=\"data row5 col12\" >0.615670</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col13\" class=\"data row5 col13\" >0.526815</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col14\" class=\"data row5 col14\" >-0.239559</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col15\" class=\"data row5 col15\" >-0.062803</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row5_col16\" class=\"data row5 col16\" >0.925837</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col0\" class=\"data row6 col0\" >-0.504583</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col1\" class=\"data row6 col1\" >0.318118</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col2\" class=\"data row6 col2\" >0.250713</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col3\" class=\"data row6 col3\" >-0.474107</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col4\" class=\"data row6 col4\" >0.533549</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col5\" class=\"data row6 col5\" >0.940325</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col7\" class=\"data row6 col7\" >0.786074</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col8\" class=\"data row6 col8\" >0.637834</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col9\" class=\"data row6 col9\" >0.564703</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col10\" class=\"data row6 col10\" >0.920841</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col11\" class=\"data row6 col11\" >0.609795</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col12\" class=\"data row6 col12\" >0.637897</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col13\" class=\"data row6 col13\" >0.517712</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col14\" class=\"data row6 col14\" >-0.145467</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col15\" class=\"data row6 col15\" >0.024887</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row6_col16\" class=\"data row6 col16\" >0.936350</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col0\" class=\"data row7 col0\" >-0.496686</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col1\" class=\"data row7 col1\" >0.408414</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col2\" class=\"data row7 col2\" >0.125279</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col3\" class=\"data row7 col3\" >-0.492443</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col4\" class=\"data row7 col4\" >0.504599</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col5\" class=\"data row7 col5\" >0.777656</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col6\" class=\"data row7 col6\" >0.786074</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col8\" class=\"data row7 col8\" >0.599269</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col9\" class=\"data row7 col9\" >0.541010</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col10\" class=\"data row7 col10\" >0.715040</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col11\" class=\"data row7 col11\" >0.593573</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col12\" class=\"data row7 col12\" >0.594937</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col13\" class=\"data row7 col13\" >0.716122</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col14\" class=\"data row7 col14\" >0.052894</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col15\" class=\"data row7 col15\" >0.254207</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row7_col16\" class=\"data row7 col16\" >0.907253</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col0\" class=\"data row8 col0\" >-0.836454</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col1\" class=\"data row8 col1\" >0.314634</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col2\" class=\"data row8 col2\" >0.113559</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col3\" class=\"data row8 col3\" >-0.695063</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col4\" class=\"data row8 col4\" >0.610114</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col5\" class=\"data row8 col5\" >0.611209</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col6\" class=\"data row8 col6\" >0.637834</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col7\" class=\"data row8 col7\" >0.599269</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col9\" class=\"data row8 col9\" >0.850786</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col10\" class=\"data row8 col10\" >0.702213</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col11\" class=\"data row8 col11\" >0.922883</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col12\" class=\"data row8 col12\" >0.971606</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col13\" class=\"data row8 col13\" >0.808592</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col14\" class=\"data row8 col14\" >0.471984</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col15\" class=\"data row8 col15\" >0.673511</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row8_col16\" class=\"data row8 col16\" >0.743699</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col0\" class=\"data row9 col0\" >-0.689837</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col1\" class=\"data row9 col1\" >0.310504</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col2\" class=\"data row9 col2\" >0.086926</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col3\" class=\"data row9 col3\" >-0.539927</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col4\" class=\"data row9 col4\" >0.534787</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col5\" class=\"data row9 col5\" >0.544786</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col6\" class=\"data row9 col6\" >0.564703</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col7\" class=\"data row9 col7\" >0.541010</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col8\" class=\"data row9 col8\" >0.850786</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col10\" class=\"data row9 col10\" >0.697867</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col11\" class=\"data row9 col11\" >0.928721</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col12\" class=\"data row9 col12\" >0.829582</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col13\" class=\"data row9 col13\" >0.669979</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col14\" class=\"data row9 col14\" >0.337597</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col15\" class=\"data row9 col15\" >0.542096</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row9_col16\" class=\"data row9 col16\" >0.687948</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col0\" class=\"data row10 col0\" >-0.547613</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col1\" class=\"data row10 col1\" >0.232182</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col2\" class=\"data row10 col2\" >0.243899</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col3\" class=\"data row10 col3\" >-0.505738</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col4\" class=\"data row10 col4\" >0.551241</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col5\" class=\"data row10 col5\" >0.875381</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col6\" class=\"data row10 col6\" >0.920841</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col7\" class=\"data row10 col7\" >0.715040</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col8\" class=\"data row10 col8\" >0.702213</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col9\" class=\"data row10 col9\" >0.697867</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col11\" class=\"data row10 col11\" >0.707523</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col12\" class=\"data row10 col12\" >0.689549</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col13\" class=\"data row10 col13\" >0.563034</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col14\" class=\"data row10 col14\" >-0.025940</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col15\" class=\"data row10 col15\" >0.108836</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row10_col16\" class=\"data row10 col16\" >0.895895</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col0\" class=\"data row11 col0\" >-0.761339</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col1\" class=\"data row11 col1\" >0.324998</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col2\" class=\"data row11 col2\" >0.093204</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col3\" class=\"data row11 col3\" >-0.600359</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col4\" class=\"data row11 col4\" >0.599960</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col5\" class=\"data row11 col5\" >0.556871</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col6\" class=\"data row11 col6\" >0.609795</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col7\" class=\"data row11 col7\" >0.593573</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col8\" class=\"data row11 col8\" >0.922883</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col9\" class=\"data row11 col9\" >0.928721</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col10\" class=\"data row11 col10\" >0.707523</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col12\" class=\"data row11 col12\" >0.888559</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col13\" class=\"data row11 col13\" >0.739176</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col14\" class=\"data row11 col14\" >0.414875</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col15\" class=\"data row11 col15\" >0.626198</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row11_col16\" class=\"data row11 col16\" >0.732753</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col0\" class=\"data row12 col0\" >-0.840170</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col1\" class=\"data row12 col1\" >0.304086</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col2\" class=\"data row12 col2\" >0.127616</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col3\" class=\"data row12 col3\" >-0.725094</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col4\" class=\"data row12 col4\" >0.585790</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col5\" class=\"data row12 col5\" >0.615670</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col6\" class=\"data row12 col6\" >0.637897</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col7\" class=\"data row12 col7\" >0.594937</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col8\" class=\"data row12 col8\" >0.971606</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col9\" class=\"data row12 col9\" >0.829582</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col10\" class=\"data row12 col10\" >0.689549</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col11\" class=\"data row12 col11\" >0.888559</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col13\" class=\"data row12 col13\" >0.807579</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col14\" class=\"data row12 col14\" >0.459281</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col15\" class=\"data row12 col15\" >0.648903</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row12_col16\" class=\"data row12 col16\" >0.738515</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col0\" class=\"data row13 col0\" >-0.693275</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col1\" class=\"data row13 col1\" >0.247634</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col2\" class=\"data row13 col2\" >0.106154</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col3\" class=\"data row13 col3\" >-0.604441</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col4\" class=\"data row13 col4\" >0.480297</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col5\" class=\"data row13 col5\" >0.526815</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col6\" class=\"data row13 col6\" >0.517712</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col7\" class=\"data row13 col7\" >0.716122</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col8\" class=\"data row13 col8\" >0.808592</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col9\" class=\"data row13 col9\" >0.669979</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col10\" class=\"data row13 col10\" >0.563034</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col11\" class=\"data row13 col11\" >0.739176</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col12\" class=\"data row13 col12\" >0.807579</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col14\" class=\"data row13 col14\" >0.560205</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col15\" class=\"data row13 col15\" >0.668954</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row13_col16\" class=\"data row13 col16\" >0.729961</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col0\" class=\"data row14 col0\" >-0.477031</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col1\" class=\"data row14 col1\" >-0.183185</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col2\" class=\"data row14 col2\" >-0.018827</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col3\" class=\"data row14 col3\" >-0.428383</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col4\" class=\"data row14 col4\" >0.279083</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col5\" class=\"data row14 col5\" >-0.239559</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col6\" class=\"data row14 col6\" >-0.145467</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col7\" class=\"data row14 col7\" >0.052894</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col8\" class=\"data row14 col8\" >0.471984</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col9\" class=\"data row14 col9\" >0.337597</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col10\" class=\"data row14 col10\" >-0.025940</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col11\" class=\"data row14 col11\" >0.414875</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col12\" class=\"data row14 col12\" >0.459281</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col13\" class=\"data row14 col13\" >0.560205</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col15\" class=\"data row14 col15\" >0.906776</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row14_col16\" class=\"data row14 col16\" >0.021641</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col0\" class=\"data row15 col0\" >-0.652960</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col1\" class=\"data row15 col1\" >0.095468</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col2\" class=\"data row15 col2\" >-0.057298</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col3\" class=\"data row15 col3\" >-0.569859</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col4\" class=\"data row15 col4\" >0.424781</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col5\" class=\"data row15 col5\" >-0.062803</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col6\" class=\"data row15 col6\" >0.024887</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col7\" class=\"data row15 col7\" >0.254207</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col8\" class=\"data row15 col8\" >0.673511</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col9\" class=\"data row15 col9\" >0.542096</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col10\" class=\"data row15 col10\" >0.108836</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col11\" class=\"data row15 col11\" >0.626198</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col12\" class=\"data row15 col12\" >0.648903</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col13\" class=\"data row15 col13\" >0.668954</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col14\" class=\"data row15 col14\" >0.906776</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row15_col16\" class=\"data row15 col16\" >0.214667</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6level0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col0\" class=\"data row16 col0\" >-0.595487</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col1\" class=\"data row16 col1\" >0.386910</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col2\" class=\"data row16 col2\" >0.200395</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col3\" class=\"data row16 col3\" >-0.539282</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col4\" class=\"data row16 col4\" >0.574419</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col5\" class=\"data row16 col5\" >0.925837</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col6\" class=\"data row16 col6\" >0.936350</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col7\" class=\"data row16 col7\" >0.907253</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col8\" class=\"data row16 col8\" >0.743699</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col9\" class=\"data row16 col9\" >0.687948</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col10\" class=\"data row16 col10\" >0.895895</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col11\" class=\"data row16 col11\" >0.732753</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col12\" class=\"data row16 col12\" >0.738515</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col13\" class=\"data row16 col13\" >0.729961</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col14\" class=\"data row16 col14\" >0.021641</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col15\" class=\"data row16 col15\" >0.214667</td>\n",
        "                        <td id=\"T_4f3e8caa_37da_11eb_be89_525400f32dd6row16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f4719a38c10>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
