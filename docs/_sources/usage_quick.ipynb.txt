{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1597313350107"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-lambda.new.57.72.167.176.191.fix.120.155.157.163.164.165.174.188'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "176775      2020-08-11          6          2       0    107808.0  COL   \n",
        "176776      2020-08-12          6          2       0    107808.0  COL   \n",
        "176777      2020-08-13          6          2       0    107808.0  COL   \n",
        "176778      2020-08-14          6          5       0    107808.0  COL   \n",
        "176779      2020-08-15          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "176775        Vichada       Colombia               3                  3   \n",
        "176776        Vichada       Colombia               3                  3   \n",
        "176777        Vichada       Colombia               3                  3   \n",
        "176778        Vichada       Colombia               3                  3   \n",
        "176779        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "176775 2020-08-11  Colombia  Vichada          6         4      0          2\n",
        "176776 2020-08-12  Colombia  Vichada          6         4      0          2\n",
        "176777 2020-08-13  Colombia  Vichada          6         4      0          2\n",
        "176778 2020-08-14  Colombia  Vichada          6         1      0          5\n",
        "176779 2020-08-15  Colombia  Vichada          6         1      0          5"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>209</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>16252</td>\n",
        "      <td>3946</td>\n",
        "      <td>336</td>\n",
        "      <td>11970</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>210</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>16474</td>\n",
        "      <td>3918</td>\n",
        "      <td>336</td>\n",
        "      <td>12220</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>16680</td>\n",
        "      <td>3816</td>\n",
        "      <td>338</td>\n",
        "      <td>12526</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>17069</td>\n",
        "      <td>3883</td>\n",
        "      <td>338</td>\n",
        "      <td>12848</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>17454</td>\n",
        "      <td>3842</td>\n",
        "      <td>338</td>\n",
        "      <td>13274</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "209 2020-08-11      16252      3946    336      11970\n",
        "210 2020-08-12      16474      3918    336      12220\n",
        "211 2020-08-13      16680      3816    338      12526\n",
        "212 2020-08-14      17069      3883    338      12848\n",
        "213 2020-08-15      17454      3842    338      13274"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>20337539</td>\n",
        "      <td>7071677</td>\n",
        "      <td>744404</td>\n",
        "      <td>12521458</td>\n",
        "      <td>0.018301</td>\n",
        "      <td>0.307841</td>\n",
        "      <td>0.056114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>20617055</td>\n",
        "      <td>7109156</td>\n",
        "      <td>751074</td>\n",
        "      <td>12756825</td>\n",
        "      <td>0.018215</td>\n",
        "      <td>0.309376</td>\n",
        "      <td>0.055603</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>20926847</td>\n",
        "      <td>7251234</td>\n",
        "      <td>760749</td>\n",
        "      <td>12914864</td>\n",
        "      <td>0.018176</td>\n",
        "      <td>0.308572</td>\n",
        "      <td>0.055628</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>21137356</td>\n",
        "      <td>7166571</td>\n",
        "      <td>765702</td>\n",
        "      <td>13205083</td>\n",
        "      <td>0.018113</td>\n",
        "      <td>0.312364</td>\n",
        "      <td>0.054807</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>21139582</td>\n",
        "      <td>7166471</td>\n",
        "      <td>765872</td>\n",
        "      <td>13207239</td>\n",
        "      <td>0.018115</td>\n",
        "      <td>0.312382</td>\n",
        "      <td>0.054810</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-08-11   20337539   7071677  744404   12521458             0.018301   \n",
        "2020-08-12   20617055   7109156  751074   12756825             0.018215   \n",
        "2020-08-13   20926847   7251234  760749   12914864             0.018176   \n",
        "2020-08-14   21137356   7166571  765702   13205083             0.018113   \n",
        "2020-08-15   21139582   7166471  765872   13207239             0.018115   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-08-11                 0.307841                        0.056114  \n",
        "2020-08-12                 0.309376                        0.055603  \n",
        "2020-08-13                 0.308572                        0.055628  \n",
        "2020-08-14                 0.312364                        0.054807  \n",
        "2020-08-15                 0.312382                        0.054810  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>50382</td>\n",
        "      <td>15366</td>\n",
        "      <td>1060</td>\n",
        "      <td>33956</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>51360</td>\n",
        "      <td>15420</td>\n",
        "      <td>1065</td>\n",
        "      <td>34875</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>52534</td>\n",
        "      <td>15344</td>\n",
        "      <td>1076</td>\n",
        "      <td>36114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>53894</td>\n",
        "      <td>15338</td>\n",
        "      <td>1085</td>\n",
        "      <td>37471</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>55121</td>\n",
        "      <td>15128</td>\n",
        "      <td>1092</td>\n",
        "      <td>38901</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "220 2020-08-11      50382     15366   1060      33956\n",
        "221 2020-08-12      51360     15420   1065      34875\n",
        "222 2020-08-13      52534     15344   1076      36114\n",
        "223 2020-08-14      53894     15338   1085      37471\n",
        "224 2020-08-15      55121     15128   1092      38901"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "176775      2020-08-11          6          2       0    107808.0  COL   \n",
        "176776      2020-08-12          6          2       0    107808.0  COL   \n",
        "176777      2020-08-13          6          2       0    107808.0  COL   \n",
        "176778      2020-08-14          6          5       0    107808.0  COL   \n",
        "176779      2020-08-15          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "176775        Vichada       Colombia               3                  3   \n",
        "176776        Vichada       Colombia               3                  3   \n",
        "176777        Vichada       Colombia               3                  3   \n",
        "176778        Vichada       Colombia               3                  3   \n",
        "176779        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>173351</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173352</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173353</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173354</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173355</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "173351  COL  Colombia  Vichada 2020-08-11      107808\n",
        "173352  COL  Colombia  Vichada 2020-08-12      107808\n",
        "173353  COL  Colombia  Vichada 2020-08-13      107808\n",
        "173354  COL  Colombia  Vichada 2020-08-14      107808\n",
        "173355  COL  Colombia  Vichada 2020-08-15      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "176775      2020-08-11          6          2       0    107808.0  COL   \n",
        "176776      2020-08-12          6          2       0    107808.0  COL   \n",
        "176777      2020-08-13          6          2       0    107808.0  COL   \n",
        "176778      2020-08-14          6          5       0    107808.0  COL   \n",
        "176779      2020-08-15          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "176775        Vichada       Colombia               3                  3   \n",
        "176776        Vichada       Colombia               3                  3   \n",
        "176777        Vichada       Colombia               3                  3   \n",
        "176778        Vichada       Colombia               3                  3   \n",
        "176779        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "176775 2020-08-11  Colombia  COL               3                  3   \n",
        "176776 2020-08-12  Colombia  COL               3                  3   \n",
        "176777 2020-08-13  Colombia  COL               3                  3   \n",
        "176778 2020-08-14  Colombia  COL               3                  3   \n",
        "176779 2020-08-15  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "220 2020-08-11               1                  1              1   \n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "220                        0                  0                       1   \n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "220                               1                                    3   \n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "220                      2               2                1             30.56  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "220 2020-08-11               1                  1              1   \n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "220                        0                  0                       1   \n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "220                               1                                    3   \n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "220                      2               2                1             30.56  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  17Apr2020  01May2020   126529100\n",
        "2nd  Past  02May2020  14May2020   126529100\n",
        "3rd  Past  15May2020  09Jun2020   126529100\n",
        "4th  Past  10Jun2020  01Jul2020   126529100\n",
        "5th  Past  02Jul2020  11Jul2020   126529100\n",
        "6th  Past  12Jul2020  22Jul2020   126529100\n",
        "7th  Past  23Jul2020  31Jul2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase (23Jul2020 - 31Jul2020): finished  929 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase (10Jun2020 - 01Jul2020): finished  435 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase (02Jul2020 - 11Jul2020): finished  426 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase (15May2020 - 09Jun2020): finished  927 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase (02May2020 - 14May2020): finished 1890 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase (17Apr2020 - 01May2020): finished 1890 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase (12Jul2020 - 22Jul2020): finished 1935 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 46 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>23</td>\n",
        "      <td>0.000</td>\n",
        "      <td>51</td>\n",
        "      <td>442</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1890</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>72</td>\n",
        "      <td>0.052</td>\n",
        "      <td>16</td>\n",
        "      <td>586</td>\n",
        "      <td>0.154920</td>\n",
        "      <td>1890</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>56</td>\n",
        "      <td>0.101</td>\n",
        "      <td>12</td>\n",
        "      <td>522</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>927</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.020953</td>\n",
        "      <td>0.000625</td>\n",
        "      <td>0.022549</td>\n",
        "      <td>0.025136</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>0.021</td>\n",
        "      <td>13</td>\n",
        "      <td>533</td>\n",
        "      <td>0.123667</td>\n",
        "      <td>435</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>6</td>\n",
        "      <td>0.000</td>\n",
        "      <td>14</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.028599</td>\n",
        "      <td>426</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.023234</td>\n",
        "      <td>1935</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>4249</td>\n",
        "      <td>0.033589</td>\n",
        "      <td>929</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE    Rt     theta     kappa  \\\n",
        "1st  Past  17Apr2020  01May2020   126529100  SIR-F  2.00  0.000299  0.000753   \n",
        "2nd  Past  02May2020  14May2020   126529100  SIR-F  0.21  0.051825  0.000568   \n",
        "3rd  Past  15May2020  09Jun2020   126529100  SIR-F  0.20  0.100924  0.000638   \n",
        "4th  Past  10Jun2020  01Jul2020   126529100  SIR-F  0.86  0.020953  0.000625   \n",
        "5th  Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10  0.000078  0.000231   \n",
        "6th  Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00  0.000676  0.000021   \n",
        "7th  Past  23Jul2020  31Jul2020   126529100  SIR-F  1.88  0.000068  0.000078   \n",
        "\n",
        "          rho     sigma  tau  1/beta [day]  alpha1 [-]  1/gamma [day]  \\\n",
        "1st  0.014476  0.006498  480            23       0.000             51   \n",
        "2nd  0.004625  0.020161  480            72       0.052             16   \n",
        "3rd  0.005899  0.026441  480            56       0.101             12   \n",
        "4th  0.022549  0.025136  480            14       0.021             13   \n",
        "5th  0.049821  0.023470  480             6       0.000             14   \n",
        "6th  0.044626  0.022286  480             7       0.001             14   \n",
        "7th  0.046273  0.024516  480             7       0.000             13   \n",
        "\n",
        "     1/alpha2 [day]     RMSLE  Trials       Runtime  \n",
        "1st             442  0.136012    1890  1 min  0 sec  \n",
        "2nd             586  0.154920    1890  1 min  0 sec  \n",
        "3rd             522  0.111488     927  0 min 25 sec  \n",
        "4th             533  0.123667     435  0 min 10 sec  \n",
        "5th            1441  0.028599     426  0 min 10 sec  \n",
        "6th           15662  0.023234    1935  1 min  0 sec  \n",
        "7th            4249  0.033589     929  0 min 25 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "0.86"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.319470</td>\n",
        "      <td>0.407499</td>\n",
        "      <td>1.557674</td>\n",
        "      <td>3.441583</td>\n",
        "      <td>3.082732</td>\n",
        "      <td>3.196519</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>3.102454</td>\n",
        "      <td>4.068999</td>\n",
        "      <td>3.868165</td>\n",
        "      <td>3.611699</td>\n",
        "      <td>3.429456</td>\n",
        "      <td>3.772676</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       1st       2nd       3rd       4th       5th       6th       7th\n",
        "rho    1.0  0.319470  0.407499  1.557674  3.441583  3.082732  3.196519\n",
        "sigma  1.0  3.102454  4.068999  3.868165  3.611699  3.429456  3.772676"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>2.0</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.2</td>\n",
        "      <td>0.86</td>\n",
        "      <td>2.1</td>\n",
        "      <td>2.0</td>\n",
        "      <td>1.88</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "    1st   2nd  3rd   4th  5th  6th   7th\n",
        "Rt  2.0  0.21  0.2  0.86  2.1  2.0  1.88"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAn0AAAGmCAYAAAAJYjK8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAABt5UlEQVR4nO3deXxU1f3/8dcnIWyy7ygIggoqS1C0ihsq7mJdatWKWxes2lqqttXq12ptrd+q/alttVZr8Su24lYVW62KgguKiAmCyCb7GsISlrAkmfP7495AiCwJc27m3sn72UdqMvfOZ97nzIQ5OffMveacQ0RERESyW06mA4iIiIhI9DToExEREakHNOgTERERqQc06BMRERGpBzToExEREakHNOgTERERqQc06BNJk5k5Mxscfn+8mW3IQIb5ZnZVXT/unlTtm0wzsyvMbKGZbTCz72U6TzrMrJeZzTOzfSKqv8HMjo+idlyZ2RdmdlkN921iZnPN7OCoc4n4pEGf1IiZjTSzkZnOURvhgGNT+Aa2yszGm9lxUT6mc+5951yzGubrHmbsHmUmATNrADwK/MQ518w597dMZ0rT/cADzrmNAGZ2Z/haGlV9RzP7INx2VU2Lh330vr+48eecO8w590wN990EPADcF20qEb806JNsd2Y4COsKTAX+bWYtqu9kZg3MzOo8ndRKGs9TJ6ApUOA5Up0zs17AycDT1TbNAr5pZm2r7NsX6A0sr7uEyWJmDffyrqOAIWbW02cekShp0Ce1ZmZ3m9mccAZtQfhzTpXt48zsYTN72czWm9nsqodNzKyzmf3bzIrMbJ2ZTTKzk6tsr5wBG2Zmn4c1JphZ773N7JwrBf4CtAAOMrPB4WNcYmZzgFJgHzPbz8z+YWZLwnz/NLP2VbJ1MLOXzGxteHjn0mp9M9jMXLXbrjazKWZWYmbLzOw34aYvKv8b9uUD4f6tzOzRsG9Xmdl/zKxHlXrNzOxv4bYlZjZiT+0PD//eZmavV3lOvlll+51mNq7afXaY3Q1r3GFmY81so5lNM7MBZnZxWK/EzP5uZnnVHj7fzCaHjzvRzA6v9jhXVOmfL8zskur9Wf152kn7cs3sl+Hrcm34ehlUWQOYWa2vO+yin84NM64xs5Vm9mSVbY/b9sPDs83sR1W2mZn92swWh+1cbGb3VNm+p9fVj8zsq/C+K2z3s+rnAZ8450qq3b4M+C9wdZXbfgg8BWyp8liNzewFM1saPt40M/t2tX6oumSh8jk438xmWfA7+18z67yrgGZ2kpl9Gj6nq8zsQzNrHW5rYGY/M7Mvw8dfYGbXV7nvNyz4N2SVbf/3pUG1bNeFz/EGC/6NGFRl+2Az+8jMVoc1xpjZAVW2XxW+lkeY2UJgYXj7DkskzOy48DHWhq+rW8wst3J72P+TwudDJBmcc/rS1x6/gJHAyPD7YUAXwIAjgWLgB1X2HUfw5nw20CD87xbgG+H2LsD5BG/eDYHbgRKgXbi9O+AI3sA6Ao2Bl4CxVR7jO8DaPWR2wODw+2bAn4E1QHNgcLj9BaBN+BiNgBnA/4bZmhHMprxVpeabwL+B1uHXK9UeZ3Dwa7Vt/2uAFQQzM7lAS+C4au3sXmV/A94NH7dNmOleYDqQF+7zV4I3m/3CnE8AZcBVu+mL+eHXAII/9n4W9nmzcPudwLhdPedVanwFHArkEcx0zA0ffx+gW/hauLLaczALOCRsy51hfzQPt18V1j0izHVcmOu4qv1Z7XmynbTv52GdvmG264ENQNdd9fVOapxO8Lq9gOB12RQ4qcr27wHtw5xnELymTw23nQosBvYPf24DHBN+v9vXFXBQ+Lh9qrxWT9hNztHAH6vddifB790pwGyC11EzYG1Yf37l6wNoAlxJ8FpsEH5fBhyyi9+dyufg/8L7tAI+Av62m4xLCAafFvblMcA+4bbfha+JI8Lt7YGjwm29gPXARWG2bkAhcFu1bJ8BPcN9/gh8VWX7scDR4eugDfAy8GGV7VcB5cAj4fPRtMrru7KPuoXPyQ/DOv0IBoc3VmvnH4FnM/3vs770VdOvjAfQVzK+qDYAqLbtIWB0lZ/HVf05vG008Nhu6q8lOBQL29+gB1XZfg6wvpaZHcEb/xqCWZA32f5GXPlG1rPK/heE/7Bblds6hvt1IRhkuWpvjofs7A2yyvYvgBG7yFfZzu5Vbjsc2Fz5RhTelhu24ziCAcfmyr4KtzcP38Su2k1fzAd+WeXnZuFjHxH+fCc1G/TdWuXns8Ianavc9hJVBiTh9mur/JwTPheXhj9/Dnyv2uM+Cjyxq+dpF+2bCVxX7bZPgVt21dc7qfFv4MFavL5eAf43/P5EggHvmUCTavvt6XV1ALAJuBhoUYPHfRP4TbXb7iT4vbOwL04FhgNvV3nudvf6mFLtedrZoG/fKtt/BEzdTb15wG+A/ardbgSDuvN2cb+Hgaer3XYxMKdatu9U+blPeFvbXdQcAKTYPri7CtgKNN7J78hV4fe3EsymVt3+I2BGtdt+C7xZ09eMvvSV6S8d3pVaM7NrzawwPAS2lmA2q/rhsnk7+blreP82ZvZkeDhlXVijxU5qLK3y/QaCgUptneOca+2c6+ycO80599Fuch4E7AusCQ/prCV4A90C7E/wBl39PtXbWV13th9arImDCGZGllbJsIpg4NeVYFakUdXHdc6tJxhw7Mm2/nTOVX7CuHktskEwYKtUGtaqflv1mlWzpoAFhK8FgvY+VNnWsL2XEzwPO62xC10JZh2rmkPwvNVUd3bxXIWHb/8nPCRZEuY8k/A165wbTzDbeAuwPDw8eUp4992+rpxz84BLCGbGFoaHl3c43FrNaoIZt69xzjmCZQzXEsxS/WUnbWlkZv8vPGRZ+ft3GF///ateu/rv4+5eO+cCPYDJ4aHwX4WHRtsR/B7v6nfiIOCiaq+HxwnWZFZVPQuVecws34IlEUvNbB0wnu0zipWWO+c27yZ/TV9PLQieD5FE0KBPaiVcO/MgcAPQ3jnXCniM4B/Vqrrv5OfF4ff3EsxuHEvw5tUaWLeTGpELByGVlgNznXOtqn01ds5NYHv+7lXuU/X7nZkP7Oq0Dqmd3LacYNanXbUMTZxz/wRWEgwWtj2umTUjeDNNx3q+vlau+sBrb3Wv/MaCtZ/7s70vlwPDq7W1mXPurKoFqj1PO7OI4DVVVU/C9Vo1NJ9dP1eXEsz0XAK0Dl/3r1PlNeuce9I5dyLB4OlVYIyZNWXPryucc684584geB4fAP5pu/6AwGSCQdqujCQ4VN2J4NBmdTeF288AWoZt+QKPv3/OuanOue845zoRHKq9DriC4I+TDey6n5cD/1etn1q4Gn4iPvQcwXKIQ51zLQhmYWHH9vl6PfUhmFEWSQQN+qS2WgIVBIOPCgvO5bWzc1sNNbMzLVhgfybBGr6/V6mxieCwa2OCw0B7M4vn20tAYws+1NAStn1w42IA59wSYCxwn5m1Dhem/24PNR8CbjWzE8O+aGnbTxuzkuDNp1eV/T8AvgQesfDDBuFjXWhmTcPBzyjgLjPbNxxUPOCh7Z8SfODimDDnRcAJHuoCjLDgvHKV6zcbAK+F2x4EfmVmA80sJ5yFOtLMjqjlYzwJ/NzMDjOzPDO7lmDt4T9qUeMhYLiZnRfWaGpmJ4XbWhIcQi8mmPg7n+AQKgQ3HGVmJ5hZE4JDh+vDTSn28LoK++YsM2vmnCsnWNNoBL9nO/MycJTt5FPoAM65NQQDndPDetW1JPjDoRhoEPbV7gaRtWJmDS348FLlzFoJQVsqwpnIPwL/a8GHgMzM2pvZkeG+jwDfDl/vDcPX4oFmdkYtIrQk+CNynZl1BH69F834J9DXzIaHr4U+BDO5T1RpZwvgKILD/CKJoEGf1IYj+HDF34APCQ5r3ADs7NxWfyM47LuW4B/5H1Q5tPo/BP8wryQ4zLOC7TM/NWJml5nnkyCHh0mPIfgLf2p4aGgCOw5+hhG8gc0nWEz+3B5q/pVgoPMngr6YQTDLggvO9fVL4KnwUNbvnXMVBIOJzcBEM1tPsN7qfIL+B/gpwUzGNIJF+19Sy/7bSc7xBAPYVwiel8HAi+nUrOIvBIOv1QRrM89yzq0LH/chgjflx8LtSwjOfVbbkw4/QPCae5VgMHMFcIZzrsYzfc65Nwn+gLk9rLGA4PmGYPbsPYJ+X05waLfqm30z4A9AEcHzPBw43zm3uQavq4bAbcCScNsDwOXOufm7yDkbeCds467a8qlzbuouNj/A9t+5hQTLFj7cVa299C2CT0pvJDi8OpLgjxWAO8KfnyUYHH8KDAxzTyL4/biG4LWwiuBDPN1q8djfI3je1gNvEwy6ayXs+zMIDrkXEzzXfwX+X5XdhgHvhM+HSCJY8IeXyO6Z2b+A2c65n9dg33EEHwq4M+pcIvWRBefqe4PgE78bM52nvglndL8g+EBVbdbsimRUgz3vIvWdBeeIO4HglA0ikmHhQKP6mjOpI+EsfY897igSMzq8K7tlZo8RHPr5OztfFC4iIiIJoMO7IiIiIvWAZvpERERE6gEN+kRERETqAX2Qw4O8vDzXv3//yOrPnBl8OKxXr1572DMedaMUx8w+MvlsVzq14ti/IpJ5kydPLnbOtd/znhJnGvR50LNnTz79NLqTsk+YMAGAQYMGJaJulOKY2Ucmn+1Kp1Yc+1dEMs/MFmQ6g6RPH+TwYODAgS7KQZ+IiEgmmdlk59zATOeQ9GhNnwebNm2KtP60adOYNm1aYupGKY6ZfWTy2a50asWxf0VExA/N9HnQvHlzt379+j3vuJcGDx4MwLhx4xJRN0pxzOwjk892pVMrjv0rIpmnmb7soDV9HnTp0iXS+vfdd1+i6kYpjpl9ZPLZrnRqxbF/RUTED830eaA1fSIiks0005cdtKbPg9LS0kjrFxYWUlhYmJi6UYpjZh+ZfLYrnVpx7F8REfFDM30eaE1f3YljZq3pE5Fsp5m+7KBBnweHHnqomz59emT1K2de8vPzE1E3SnHM7COTz3alUyuO/SsimadBX3bQoM8DrekTEZFspkFfdtCaPg82btwYaf1JkyYxadKkxNSNUhwz+8jks13p1Ipj/4qIiB+a6fNAa/rqThwza02fiGQ7zfRlBw36PDjssMPcF198EVn9yisk9OnTJxF1oxTHzD4y+WxXOrXi2L8iknka9GUHDfo80Jo+ERHJZhr0ZQet6fNgw4YNkdafMGECEyZMSEzdKMUxs49MPtuVTq049q+IiPihmT4PtKav7sQxs9b0iUg2e3fhu5zc7WTN9GUBXXvXg27dukVa/7HHHktU3SjFMbOPTD7blU6tOPaviGTWh0s/zHQE8UQzfR5oTZ+IiGSri8ZcxAvnvqCZviygNX0eRHloF2D8+PGMHz8+MXWjFMfMPjL5bFc6teLYvyKSORvLNjJrzaxMxxBPNNPngdb01Z04ZtaaPhHJVhOWTuCat65h2lXTNNOXBbSmz4Pu3btHWv/JJ59MVN0oxTGzj0w+25VOrTj2r4hkTmFRITmmg4LZQjN9HmhNn4iIZKMfvPkD1mxew4vffFEzfVlAw3cP1q1bF2n9t99+m7fffjsxdaMUx8w+MvlsVzq14ti/IpIZ5alyPl/5Ofkd8jMdRTzRTJ8HWtNXd+KYWWv6RCQbzVg9g4vGXMS9x9/LOT3P0UxfFtCaPg8OOOCASOs//fTTiaobpThm9pHJZ7vSqRXH/hWRzCgoKgBgQIcBGU4ivmjQ50HDhg0jrd+1a9dE1Y1SHDP7yOSzXenUimP/ikhmFBQV0KFpBzrv0znTUcQTrenzIOo1fW+88QZvvPFGYupGKY6ZfWTy2a50asWxf0UkMwqLCslvn4+ZZTqKeKI1fR5oTV/diWNmrekTkWyzfONyTn3hVH5x5C8YdugwzExr+rKADu960KNHj0jrP/vss4mqG6U4ZvaRyWe70qkVx/4VkbpXuLIQ0Hq+bKNBnwd5eXmR1u/UqVOi6kYpjpl9ZPLZrnRqxbF/RaTuFRYV0qRBEw5uc3Cmo4hHWtPnQUlJSaT1x4wZw5gxYxJTN0pxzOwjk892pVMrjv0rInWvoKiAvu36kpcT7aSG1C2t6fNAa/rqThwza02fiGST0rJSBv1zEN/t811uOPwGAK3pyxIa9HmQn5/vCgsLI6tfXFwMQLt27RJRN0pxzOwjk892pVMrjv0rInVr4rKJfP/N7/PIKY9wfJfjAQ36soXW9HnQoEG03RjVG3AS39jjmNlHJp/tSqdWHPtXROpWQVEBhtG/Q/9MRxHPtKbPg7Vr10Za/6WXXuKll15KTN0oxTGzj0w+25VOrTj2r4jUrcKVhfRs1ZMWDVtkOop4psO7HmhNX92JY2at6RORbJFyKY7753GcccAZ3HHMHdtu1+Hd7KBBnwcDBgxwBQUFkdWv/HRwy5YtE1E3SnHM7COTz3alUyuO/SsidWfWmllc+OqF3HPcPQztOXTb7Rr0ZQet6fMgNzc30vpRvQEn8Y09jpl9ZPLZrnRqxbF/RaTuFBYVApDfPj+jOSQaWtPnwZo1ayKtP3r0aEaPHp2YulGKY2YfmXy2K51acexfEak7BUUFtG3cli7Nu2Q6ikRAh3c90Jq+uhPHzFrTJyLZ4swXz6R3m978v5P+3w636/BudtCgz4PDDz/cffbZZ5HVLy0tBaBp06aJqBulOGb2kclnu9KpFcf+FZG6UbypmJOeO4mbB97MlYdducM2Dfqyg9b0eZCTE+1R8qjegJP4xh7HzD4y+WxXOrXi2L8iUjcKioIPJA7oMCDDSSQqWtPnwerVqyOtP2rUKEaNGpWYulGKY2YfmXy2K51acexfEakbBUUFNMptxCFtDsl0FImIDu96oDV9dSeOmbWmT0SywXf+/R3ycvJ46synvrZNh3ezgwZ9HhxxxBFu8uTJkdUvKysDIC8vLxF1oxTHzD4y+WxXOrXi2L8iEr3N5Zs55h/HcOVhVzLiiBFf265BX3bQmj4PzCzS+lG9ASfxjT2OmX1k8tmudGrFsX9FJHrTiqdR7sq1ni/LaU2fB6tWrYq0/siRIxk5cmRi6kYpjpl9ZPLZrnRqxbF/RSR6hSsLAejfvn9mg0ikdHjXA63pqztxzKw1fSKSdNePvZ5F6xfx6nmv7nS7Du9mBw36PBg4cKD79NNPMx1DRESk1lIuxfHPHs+QbkO4a9BdO91Hg77soMO7IiIi9di8knms27pO19utBzTo86C4uDjS+o8//jiPP/54YupGKY6ZfWTy2a50asWxf0UkWoVFhYBOylwf6PCuBy1atHDr1q2LrP6QIUMAePvttxNRN0pxzOwjk892pVMrjv0rItG6/YPbeX/J+4z79rhdno1Ch3ezgwZ9HmhNn4iIJNU5/zqHHi178PDJD+9yHw36soMO74qIiNRTqzatYsG6BeR3yM90FKkDGvR5sHLlykjrP/LIIzzyyCOJqRulOGb2kclnu9KpFcf+FZHoVJ6fT+v56odIB31mNt/MZphZYfh1enj70WY2xcxmmdmbZtahyn0Ssa2qtWvXeuuznRkzZgxjxoxJTN0oxTGzj0w+25VOrTj2r4hEZ0rRFPJy8ji07aGZjiJ1INI1fWY2HzjHOTetym05wCzgKufcB2Z2O9DDOffdpGyr3k6t6RMRkSS6/D+XA/D0WU/vdj+t6csOmTi8ewSw2Tn3QfjzX4BvJ2ybiIhIom2p2MIXq77Qod16pC4Gfc+Y2edm9oiZtQL2BxZUbnTOFQM5ZtYmQdt2MHfuXAYOHLjt669//eve9NMuPfTQQzz00ENea0ZZN0pxzOwjk892pVMrjv0rItGYvmo6Zaky+nfQ9Xbri6gHfcc75/oDRwIG/Cnix8uIVCrFp59+uu1r+PDhXuuPHTuWsWPHeq0ZZd0oxTGzj0w+25VOrTj2r4hEo6CoAEBX4qhHGkRZ3Dm3KPzvFjN7BHgVeAjoVrmPmbUDUs651Wa2MAnbqrfzwAMP3NsuqpFXX935BbDjWjdKcczsI5PPdqVTK479KyLRKCgqoFuLbrRt0jbTUaSORDbTZ2b7mFnL8HsDLgEKgclAEzM7Ltz1h8Dz4fdJ2SYiIpJYzjmmFE3RLF89E+VMX0fgRTPLBXKB6cB1zrmUmV0OPGZmjYH5wDCApGyrbsWKFT76a5fuv/9+AG6++eZE1I1SHDP7yOSzXenUimP/ioh/C9YtYM2WNfoQRz0T2aDPOTcX2OmryTk3Aeib5G1VbdiwYU+7pOWjjz5KVN0oxTGzj0w+25VOrTj2r4j4V7meT4O++kXX3vVA5+kTEZEk+dWEX/H2grd5/5L3ybE9r/TSefqygy7DJiIiUs8UFBWQ3yG/RgM+yR56tj1Yvnx5pPXvvfde7r333sTUjVIcM/vI5LNd6dSKY/+KiF9rN69lXsk8HdqthyI9ZUt9UVpaGmn9wsLCRNWNUhwz+8jks13p1Ipj/4qIX1NWTgF0fr76SGv6PNCaPhERSYoHJz/IU188xUff+YjGDRrX6D5a05cddHhXRESkHikoKuCQtofUeMAn2UODPg+WLVsWaf27776bu+++OzF1oxTHzD4y+WxXOrXi2L8i4k9ZRRlfrPqC/A75mY4iGaA1fR5s3rw50vozZ85MVN0oxTGzj0w+25VOrTj2r4j4M331dLZUbNGHOOoprenzQGv6REQkCZ764inu//R+3v32u7Rr0q7G99Oavuygw7siIiL1RGFRIV2adanVgE+yhwZ9HixdujTS+nfccQd33HFHYupGKY6ZfWTy2a50asWxf0XED+fctpMyS/2kNX0ebN26NdL6ixYtSlTdKMUxs49MPtuVTq049q+I+LF4/WJWbV6l9Xz1mNb0eaA1fSIiEnevfvUqt31wGy+e+yIHtz64VvfVmr7soMO7IiIi9UBhUSHN85pzYKsDMx1FMkSDPg+WLFkSaf1bb72VW2+9NTF1oxTHzD4y+WxXOrXi2L8i4kdBUQH9OvQjx/TWX19pTZ8H5eXlkdZftWpVoupGKY6ZfWTy2a50asWxf0Ukfeu2ruOrtV9xRvczMh1FMkhr+jzQmj4REYmz9xe/z3Vjr+OJ057gG52/Uev7a01fdtAcr4iISJYrKCog13Lp265vpqNIBmnQ58HixYsjrX/zzTdz8803J6ZulOKY2Ucmn+1Kp1Yc+1dE0jdl5RR6telF07ymmY4iGaQ1fR6kUqlI62/atClRdaMUx8w+MvlsVzq14ti/IpKeslQZU4uncsFBF2Q6imSY1vR5oDV9IiISV18Uf8El/76E+068b68/yKE1fdlBh3dFRESyWEFRAQD57fMzG0QyToM+D6K+dNWIESMYMWJEYupGKY6ZfWTy2a50asWxf0UkPQVFBXTepzOd9umU6SiSYRr0iYiIZCnnHIVFheR3yM90FIkBrenzQGv6REQkjpZuWMrpL57OL7/xSy7tfele19GavuygmT4REZEsVbmeb0CHARlOInGgQZ8HCxcujLT+9ddfz/XXX5+YulGKY2YfmXy2K51acexfEdl7BUUFNG3QlANbHZjpKBIDOk+fBzk50Y6dmzRpkqi6UYpjZh+ZfLYrnVpx7F8R2XuFRYX0a9+PBjl6uxet6fNCa/pERCRuNmzdwLHPHss1/a7huvzr0qqlNX3ZQYd3RUREstDnxZ+Tcil9cle20aDPgwULFkRaf/jw4QwfPjwxdaMUx8w+MvlsVzq14ti/IrJ3CosKybEc+rfvn+koEhM6yO9BgwbRdmPbtm0TVTdKcczsI5PPdqVTK479KyJ7p6CogINbH8w+eftkOorEhNb0eaA1fSIiEiflqXKO/eexDO05lNuPvj3telrTlx10eFdERCTLzF4zm9LyUp2fT3agQZ8H8+fPj7T+1VdfzdVXX52YulGKY2YfmXy2K51acexfEak9nZRZdkZr+jxo2LBhpPW7du2aqLpRimNmH5l8tiudWnHsXxGpvcKVhXRo2oHO+3TOdBSJEa3p80Br+kREJE5Oe+E0+rXvx/0n3u+lntb0ZQcd3hUREckiyzcuZ9nGZeS3z890FIkZDfo8mDdvXqT1hw0bxrBhwxJTN0pxzOwjk892pVMrjv0rIrVTWFQIaD2ffJ3W9HnQuHHjSOv36tUrUXWjFMfMPjL5bFc6teLYvyJSOwVFBTRp0ISD2xyc6SgSM1rT54HW9ImISFxc/NrFNMtrxt9O/5u3mlrTlx10eFdERCRLlJaVMnP1TF1vV3ZKgz4P5s6dG2n9Sy65hEsuuSQxdaMUx8w+MvlsVzq14ti/IlJzU4unUuEqtJ5Pdkpr+jxo2rRppPXz8/MTVTdKcczsI5PPdqVTK479KyI191nRZxhG//b9Mx1FYkhr+jzQmj4REYmDa966hpWbVvLSuS95ras1fdlBh3dFRESyQEWqgikrpzCgvQ7tys5p0OfBV199FWn9Cy+8kAsvvDAxdaMUx8w+MvlsVzq14ti/IlIzc9bOYWPZRn2IQ3ZJa/o8aNasWaT1jznmmETVjVIcM/vI5LNd6dSKY/+KSM0UFBUAOimz7JrW9HmgNX0iIpJpv3jvF0xaPomxF43FzLzW1pq+7KDDuyIiIlmgsKiQ/A753gd8kj006PNgzpw5kdY/99xzOffccxNTN0pxzOwjk892pVMrjv0rInu2YuMKlm5cqkO7slta0+dBixYtIq1/yimnJKpulOKY2Ucmn+1Kp1Yc+1dE9qxgpdbzyZ7VyZo+M/sVcCfQ1zk3zcyOBh4DmgDzgWHOuaJw30Rsq0pr+kREJJPu/eReXpr9Eh9e+iF5OXne62tNX3aI/PCumR0OHA0sCH/OAUYB1zvnDgbeA+5N0jYREZE4KSgqoE+7PpEM+CR7RDroM7NGwJ+Ba6vcfASw2Tn3QfjzX4BvJ2zbDmbPnr3zDvDkzDPP5Mwzz0xM3SjFMbOPTD7blU6tOPaviOxeaVkpM1fPJL99fqajSMxFvabv18Ao59z8Kp8m2p9w1g/AOVdsZjlm1iYp25xzq6s2slWrVnvdQTUxdOjQRNWNUhwz+8jks13p1Ipj/4rI7k0tnkqFq9B6PtmjyAZ9ZnYMMBC4JarHiJOBA7cvdRg+fDjDhw/3Vvu6667zVqsu6kYpjpl9ZPLZrnRqxbF/RWT3CooKMIz+HfpnOorEXJQzfScChwDzwlm+LsB/gYeBbpU7mVk7IOWcW21mC5OwrXpD27dvjz7IISIimVBYVEjPVj1p0TDaM0lI8kW2ps85d69zbl/nXHfnXHdgMXA6cB/QxMyOC3f9IfB8+P3khGzbwaxZs3bbF+kaMmQIQ4YMSUzdKMUxs49MPtuVTq049q+I7FpFqoIpK6fo0K7USJ2fp885lzKzy4HHzKwx4alQkrStujZt2vjqnp26+OKLE1U3SnHM7COTz3alUyuO/SsiuzZn7Rw2lG3QoE9qRNfe9UDn6RMRkUwYPWM0v5n4G/5zwX/o2rxrZI+j8/RlB12GTUREJKEKVhbQrkk7ujTrkukokgAa9Hkwc+bMSOsPHjyYwYMHJ6ZulOKY2Ucmn+1Kp1Yc+1dEdq2wqJABHQZQ5bRoIruka+960K5du0jrX3XVVYmqG6U4ZvaRyWe70qkVx/4VkZ0rKi1iyYYlfKf3dzIdRRJCa/o80Jo+ERGpa/+d/19uHn8z/zjrH/Rt3zfSx9Kavuygw7seRD1wLisro6ysLDF1oxTHzD4y+WxXOrXi2L8isnOFRYU0zm1M77a9Mx1FEkKHdz2I+jx9p556KgDjxo1LRN0oxTGzj0w+25VOrTj2r4jsXEFRAX3a9SEvJy/TUSQhNOjzoH379pHW//73v5+oulGKY2YfmXy2K51acexfEfm60rJSZqyewXf7fDfTUSRBtKbPA63pExGRuvTJsk/43pvf48+n/JkTupwQ+eNpTV920Jo+D1KpVKT1S0tLKS0tTUzdKMUxs49MPtuVTq049q+IfF1BUQEA/dv3z3ASSRId3vVg9uzZkdY/66yzAP/rrKKqG6U4ZvaRyWe70qkVx/4Vka8rWFnAga0OpGWjlpmOIgmiQZ8HHTp0iLT+tddem6i6UYpjZh+ZfLYrnVpx7F8R2VHKpfi86HNOP+D0TEeRhNGaPg+0pk9EROrKrDWzuPDVC/ntcb/l3J7n1sljak1fdtCaPg8qKioirV9SUkJJSUli6kYpjpl9ZPLZrnRqxbF/RWRHhUWFAAxoPyCzQSRxdHjXgzlz5kRa/5vf/Cbgf51VVHWjFMfMPjL5bFc6teLYvyKyo4KiAto2bkuX5l0yHUUSRoM+Dzp27Bhp/RtuuCFRdaMUx8w+MvlsVzq14ti/IrKjgqICBnQYgJllOookjNb0eaA1fSIiUhdWlq7k5OdP5uaBN3PlYVfW2eNqTV920Jo+D8rLyyOtX1xcTHFxcWLqRimOmX1k8tmudGrFsX9FZLvK8/MN6KD1fFJ7OrzrwVdffRVp/W9961uA/3VWUdWNUhwz+8jks13p1Ipj/4rIdgVFBTTKbcQhbQ7JdBRJIA36POjUqVOk9W+66aZE1Y1SHDP7yOSzXenUimP/ish2hUWF9GnXh7zcvExHkQTSmj4PtKZPRESitql8E4P+MYir+lzFTw7/SZ0+ttb0ZQet6fOgrKws0vrLly9n+fLliakbpThm9pHJZ7vSqRXH/hWRwLTiaZS7cq3nk72mw7sezJ07N9L6l1xyCeB/nVVUdaMUx8w+MvlsVzq14ti/IhKo/BBH//b9M5xEkkqDPg86d+4caf1bbrklUXWjFMfMPjL5bFc6teLYvyISKCgqoGfLnrRs1DLTUSShtKbPA63pExGRKKVciuOePY7Tup3GnYPurPPH15q+7KA1fR5s3bo10vqLFi1i0aJFiakbpThm9pHJZ7vSqRXH/hUR+GrtV6zful7r+SQtOrzrwbx58yKtf/nllwP+11lFVTdKcczsI5PPdqVTK479KyI6KbP4oUGfB1Gv6bv99tsTVTdKcczsI5PPdqVTK479KyLB+fnaNG5D1+ZdMx1FEkxr+jzQmj4REYnSmS+eSa82vXjwpAcz8vha05cdtKbPgy1btkRaf+7cuZGcFiaqulGKY2YfmXy2K51acexfkfqueFMxizcs1qFdSZtm+jxo3ry5W79+fWT1Bw8eDPhfZxVV3SjFMbOPTD7blU6tOPavSH331oK3uHHcjYw6a1TGztGnmb7soDV9Huy7776R1r/rrrsSVTdKcczsI5PPdqVTK479K1LfFRQV0Ci3EYe2OTTTUSThNNPngdb0iYhIVL7z7++Ql5PHU2c+lbEMmunLDlrT58HmzZsjrT9z5kxmzpyZmLpRimNmH5l8tiudWnHsX5H6bFP5Jr5c9aXW84kXmunzQGv66k4cM2tNn4hEZdLySXz3v9/lTyf/iRO7npixHJrpyw5a0+fBfvvtF2n9e+65J1F1oxTHzD4y+WxXOrXi2L8i9VlhUSEA+R3yM5pDsoNm+jzQmj4REYnCdW9fx5INS3jlvFcymkMzfdlBa/o82LRpU6T1p02bxrRp0xJTN0pxzOwjk892pVMrjv0rUl+lXIrClYVazyfeaKbPA63pqztxzKw1fSIShTlr5nD+q+dz97F3c96B52U0i2b6soPW9HnQpUuXSOvfd999iaobpThm9pHJZ7vSqRXH/hWprwpWFgBopk+80UyfB1rTJyIivt32wW18sOQDxn17HGaW0Sya6csOWtPnQWlpaaT1CwsLKSwsTEzdKMUxs49MPtuVTq049q9IfVVQVEB++/yMD/gke2imzwOt6as7ccysNX0i4lvxpmJOeu4kbjriJq7qc1Wm42imL0toTZ8HXbt2jbT+gw8+mKi6UYpjZh+ZfLYrnVpx7F+R+kjn55Mo1Hqmz8waAm2cc8ujiZQ8WtMnIiI+3TfpPp6d8SwffecjGuY2zHQczfRliRqt6TOzZ82spZk1AaYB083s5mijJcfGjRsjrT9p0iQmTZqUmLpRimNmH5l8tiudWnHsX5H6qLCokD7t+sRiwCfZo0YzfWZW4JwbYGbfAoYANwIfO+f6RR0wCbSmr+7EMbPW9ImIT5vLN3PMP4/hikOv4KdH/DTTcQDN9GWLmq7pywv/eyLwH+dcqZmlIsqUOPvvv3+k9f/0pz8lqm6U4pjZRyaf7UqnVhz7V6S+mVY8jfJUuc7PJ97VdNA33cxeBw4BbgkP80qoSZNou6NPnz6JqhulOGb2kclnu9KpFcf+FalvClcWApDfPj+jOST71HTQdyVwOjDFObfRzPYDbokuVrJs2LAh0voTJkwAYNCgQYmoG6U4ZvaRyWe70qkVx/4VqW8Kigo4oOUBtGrcKtNRJMvU+NO7ZnYwcIhz7hUzaw7kOedWR5ouIbSmr+7EMbPW9ImILymX4vhnj2dItyHcNeiuTMfZRmv6skONZvrM7ErgVqAh8AqwL/Bngg911HvdunWLtP5jjz2WqLpRimNmH5l8tiudWnHsX5H6ZF7JPNZtXadDuxKJmh7eHQEMBN4HcM7NNLNOUYVKmsaNG0dav1evXomqG6U4ZvaRyWe70qkVx/4VqU8KigoA9CEOiURNr7271TlXfeFaue8wSRXloV2A8ePHM378+MTUjVIcM/vI5LNd6dSKY/+K1CcFRQW0adyGbi2iPYIk9VNNz9P3H4LZvmedc4eb2TDgEufcOXu438vAAUAK2AD82DlXGK4PfApoC6wCrnDOzQ7vk4htVWlNX92JY2at6RMRX85+6Wx6turJwyc/nOkoO9CavuxQ00HfwcA/CE7ZshIoBYY6577aw/1aOudKwu+/CfwqHDS+AzzpnBsVDiC/65w7OdwvEduq6tu3r5s6deoe+3FvzZ07F4AePXokom6U4pjZRyaf7UqnVhz7V6S+KN5UzEnPncSNR9zI1X2uznScHWjQlx1q8+ndXOBgwICZzrmKWj2Q2RXADcBZwCygrXOuIqy7CjgorB37bc65lVXbpmvviohIusYuGMuIcSN4+synye+Qn+k4O9CgLzvU9NO7BwMLnXNfmtnpwLlm9phzbk0N7vsEcBrBIOoMoCuwpHLQGA6oloa3W0K27TDoW7RoEQMHbv9dGD58OMOHD69J19bI22+/DcCQIX4/LB1V3SjFMbOPTD7blU6tOPavSH1RUFRAw5yGHNr20ExHkSxV00/vPgccaWYHAI8BbxKsdTt3T3d0zn0fwMwuB+4D/mfvosZXaWkpUc70/eY3vwH8vxFHVTdKcczsI5PPdqVTK479K1JfFKws4LB2h9Ewt2Gmo0iWqumgL+WcKzOzs4FHnHO/N7PC2jyQc+5pM/srsBjYz8xyqxw23RdYRDC7loRtOzjggANq0xW19vTTTyeqbpTimNlHJp/tSqdWHPtXpD7YXL6Z6aumc/mhl2c6imSxmg76GptZR2AocFt4m+3uDmbWDGjtnFsU/jwUWA0UAYXApcCo8L8FlevkwsFk7LdV1bBhtH+Vde3aNVF1oxTHzD4y+WxXOrXi2L8i9cEXq76gPFXOgPY6P59Ep6aDvgeBmcBY59ynZtYDKNnDffYBnjezfYAKggHfUOecM7MfAk+Z2R3AGuCKKvdLyrZt1q1bt4euSM8bb7wBwBlnnJGIulGKY2YfmXy2K51acexfkfqg8qTMcfsAh2SXGn96d4c7meUADZxzW/1HSh6dp6/uxDGzztMnIun64ds/ZOmGpbx63quZjrJT+vRudqjNKVt6Af2Bbdccc879X0S5EqV///5uypQpkdVfvnw5AJ06+b3yXVR1oxTHzD4y+WxXOrXi2L8i2a6sooxjnz2Wb/b8Jrcdfdue75ABGvRlh5qesuUG4BqgMzAJOB4YD2jQB+Tl5UVaP6o34CS+sccxs49MPtuVTq049q9ItptaPJVN5Zs4uvPRmY4iWa6m194dDhxFcK6+08Pvo73gbIKUlOxpeWN6xowZw5gxYxJTN0pxzOwjk892pVMrjv0rku0mLpuIYQzspIk0iVZNL8P2qXNuoJl9DvQPP4xR6JzLjzxhAmhNX92JY2at6RORdFz5+pVsrtjM6HNGZzrKLunwbnao6aDvPeAU4ElgGcG56oY75/pGGy8Z8vPzXWFhYWT1i4uLAWjXrl0i6kYpjpl9ZPLZrnRqxbF/RbJZaVkpxz57LJcfejk3HnFjpuPskgZ92WG3a/rCExI3Aq4DGgI3AfcABwBXRR0uKRo0qOmZb/ZOVG/ASXxjj2NmH5l8tiudWnHsX5FsVlBUQHmqnKM7aT2fRG9Pa/ruBb7jnJvmnNvonCsKL6v2BnBx9PGSYe3atZHWf+mll3jppZcSUzdKcczsI5PPdqVTK479K5LNJi6bSIOcBjo/n9SJ3R7eNbPJwJHOuVS123OAz51zfSLOlwha01d34phZa/pEZG99e8y3aZrXlJFnjMx0lN3S4d3ssKdB3y4/rGFmnzvn+kUVLEkGDBjgCgoKIqtf+engli1bJqJulOKY2Ucmn+1Kp1Yc+1ckW5VsKeH4Z4/n2vxrubb/tZmOs1sa9GWHPS1Ga2JmTZ1zpVVvDK+r2yi6WMmSm5sbaf2o3oCT+MYex8w+MvlsVzq14ti/Itlq0vJJOJzOzyd1Zk9r+kYTXHu2ReUNZtYSeAJ4PspgSbJmzZpI648ePZrRo/1/lD+qulGKY2YfmXy2K51acexfkWz18bKPadKgCX3aaqWU1I09Hd5tAIwEvgnMDm8+CHgVuNI5Vx51wCTQmr66E8fMWtMnIntj6L+G0qV5Fx4d8mimo+yRDu9mh5qep+9AYED4Y4Fzbk6kqRLm8MMPd5999llk9UtLg6PrTZs2TUTdKMUxs49MPtuVTq049q9INlqxcQVDXhjCzQNv5srDrsx0nD3SoC871OgEc+EgTwO9XcjJqenV7PZOVG/ASXxjj2NmH5l8tiudWnHsX5Fs9MnyTwA4qtNRGU4i9Um0o5V6YvXq1ZHWHzVqFKNGjUpM3SjFMbOPTD7blU6tOPavSDb6eNnHtGrUil5temU6itQjNTq8K7unNX11J46ZtaZPRGrDOcepL5xKv/b9+MPgP2Q6To3o8G520KDPgyOOOMJNnjw5svplZWUA5OXlJaJulOKY2Ucmn+1Kp1Yc+1ck2yxYt4Bz/nUO/3P0//DtXt/OdJwa0aAvO0R70dh6wswirR/VG3AS39jjmNlHJp/tSqdWHPtXJNtMXDYR0Ho+qXta0+fBqlWrIq0/cuRIRo4cmZi6UYpjZh+ZfLYrnVpx7F+RbPPxso/p2LQj3Vp0y3QUqWd0eNcDremrO3HMrDV9IlJTKZfixNEnckKXE/jtcb/NdJwa0+Hd7KBBnwcDBw50n376aaZjiIhIzM1YPYOLxlzEPcfdw9CeQzMdp8Y06MsOOrwrIiJSR7SeTzJJgz4PiouLI63/+OOP8/jjjyembpTimNlHJp/tSqdWHPtXJJt8vOxjurfoTsd9OmY6itRDOrzrQYsWLdy6desiqz9kyBAA3n777UTUjVIcM/vI5LNd6dSKY/+KZIuyijKOffZYzu15LrcffXum49SKDu9mBw36PNCaPhER2ZOCogKueP0K/t/g/8eQbkMyHadWNOjLDjq8KyIiUgc+XvYxhnFkpyMzHUXqKQ36PFi5cmWk9R955BEeeeSRxNSNUhwz+8jks13p1Ipj/4pki4nLJtK7TW9aNmqZ6ShST2nQ58HatWsjrT9mzBjGjBmTmLpRimNmH5l8tiudWnHsX5FsUFpWypSVUzi689GZjiL1mNb0eaA1fSIisjsTlkzgmrev4dEhj3LcfsdlOk6taU1fdtBMn4iISMQ+Xv4xDXIacHiHwzMdReoxDfo8KCoqirT+Qw89xEMPPZSYulGKY2YfmXy2K51acexfkWwwcdlE+rXrR9O8ppmOIvWYBn0eRHmOPoCxY8cyduzYxNSNUhwz+8jks13p1Ipj/4okXcmWEr5c9aXW80nGaU2fB1rTJyIiuzJ2wVhGjBvByDNGckTHIzIdZ69oTV920EyfiIhIhD5e9jFNGjShX7t+mY4i9ZwGfR6sWLEi0vr3338/999/f2LqRimOmX1k8tmudGrFsX9Fkm7i8okc3vFw8nLzMh1F6rkGmQ6QDTZs2BBp/Y8++ihRdaMUx8w+MvlsVzq14ti/Ikm2YuMK5pXM44IDL8h0FBGt6fNBa/pERGRnxnw1hl9+8EtGnzOaQ9semuk4e01r+rKDDu+KiIhEZOKyibRs1JLebXpnOoqIBn0+LF++PNL69957L/fee29i6kYpjpl9ZPLZrnRqxbF/RZLKOcfE5RM5qtNR5JjebiXztKbPg9LS0kjrFxYWJqpulOKY2Ucmn+1Kp1Yc+1ckqRauX8jyjcv5fp/vZzqKCKA1fV5oTZ+IiFT33MznuPvju3n1vFc5oOUBmY6TFq3pyw6abxYREYnAxGUT6dC0A91bdM90FBFAgz4vli1bFmn9u+++m7vvvjsxdaMUx8w+MvlsVzq14ti/IkmUcik+Wf4JR3c+GjPLdBwRQGv6vNi8eXOk9WfOnJmoulGKY2YfmXy2K51acexfkSSatWYWa7es5ahOR2U6isg2WtPngdb0iYhIVU998RT3f3o/b33rLTrt0ynTcdKmNX3ZQYd3RUREPBu/eDwHtjowKwZ8kj006PNg6dKlkda/4447uOOOOxJTN0pxzOwjk892pVMrjv0rkjRrN6/lsxWfcVLXkzIdRWQHWtPnwdatWyOtv2jRokTVjVIcM/vI5LNd6dSKY/+KJM17S96jwlVo0CexozV9HmhNn4iIVPrpuz/l85Wf89ZFb2XNlTi0pi87ZMerUUREJAY2l2/mw6UfMrjr4KwZ8En20CvSgyVLlkRa/9Zbb+XWW29NTN0oxTGzj0w+25VOrTj2r0iSTFw2kU3lmzhpfx3alfjRmj4PysvLI62/atWqRNWNUhwz+8jks13p1Ipj/4okybuL3mWfvH10fj6JpcjW9JlZW+BpoCewFZgNXOOcW2lmRwOPAU2A+cAw51xReL9EbKtKa/pERCTlUpz83MkM7DSQ+0+8P9NxvNKavuwQ5eFdB/zeOdfLOdcX+Aq418xygFHA9c65g4H3gHsBkrJNRESkus9Xfs6qzav0qV2JrcgGfc651c65cVVu+hjoBhwBbHbOfRDe/hfg2+H3Sdm2g8WLF++0D3y5+eabufnmmxNTN0pxzOwjk892pVMrjv0rkhTvLHqHBtaA47scn+koIjtVJ2v6wlmza4FXgf2BBZXbnHPFZpZjZm2Sss05t7pq+1KpVHodtAebNm1KVN0oxTGzj0w+25VOrTj2r0hSvLvwXQZ2GkiLhi0yHUVkp+rqgxx/BDYAfwLOr6PHrDNNmjRh4MDtSx2GDx/O8OHDvdX/85//7K1WXdSNUhwz+8jks13p1Ipj/4okwdySucxfN59Le1+a6SgiuxT5oM/M7gcOAoY651JmtpDgMG/l9nZAyjm3Oinbqrexffv26IMcIiL117sL3wXg5P1PznASkV2L9Dx9ZnYPwdq485xzW8KbJwNNzOy48OcfAs8nbNsOor501YgRIxgxYkRi6kYpjpl9ZPLZrnRqxbF/RZLg3UXvckibQ+i0T6dMRxHZpchm+szsMOBWYBYwwcwA5jnnzjezy4HHzKwx4alQAMKZwNhvExERqVS8qZjPV37OtfnXZjqKyG7p2rse6Dx9IiL11wuzXuCuj+7ihaEv0KtNr0zHiYTO05cddBk2ERGRNLy76F32a7YfB7c+ONNRRHZLgz4PFi5cGGn966+/nuuvvz4xdaMUx8w+MvlsVzq14ti/InFWWlbKx0s/5qSuJxEuYxKJLV1714OcnGjHzk2aNElU3SjFMbOPTD7blU6tOPavSJxNWDqBramtugqHJILW9HmgNX0iIvXTL9//JeMXj2f8xeNpkJO98yha05cddHhXRERkL5SnynlvyXuc2OXErB7wSfbQoM+DBQsW7HmnNPi+wkfUdaMUx8w+MvlsVzq14ti/InFVUFRAyZYSTtpfh3YlGfSniQcNGkTbjW3btk1U3SjFMbOPTD7blU6tOPavSFy9s/AdGuY05Nh9j810FJEa0Zo+D7SmT0SkfnHOceZLZ9KzVU/+fEr2X7Naa/qygw7vioiI1NKsNbNYsmGJPrUriaJBnwfz58+PtP7VV1/N1VdfnZi6UYpjZh+ZfLYrnVpx7F+ROHpn0TsYxuCugzMdRaTGtKbPg4YNG0Zav2vXromqG6U4ZvaRyWe70qkVx/4ViaN3F75Lv/b9aNekXaajiNSY1vR5oDV9IiL1x/KNyzn1hVMZcfgIvtf3e5mOUye0pi876PCuiIhILby76F0ATt7/5AwnEakdHd71YN68eZHWHzZsGACjRo1KRN0oxTGzj0w+25VOrTj2r0jcvLPwHbq36M4BLQ/IdJRtKlKO5es2s2h16bavovVb6NqmKYd0bs6hnVvSsUUjXR+4ntOgz4PGjRtHWr9Xr16JqhulOGb2kclnu9KpFcf+FYmTdVvX8enyT7n8sMszmsM5xwdzinnm44V8uXwdS9duoqxi+3ItM2jTtCGrNm7ddlvrpnkcum8LDunUgv5dW3HaYR1p1CA3E/ElQ7SmzwOt6RMRqR/+M/c//OL9X/D0mU+T3yG/zh9/c1kFrxQu4ckP5jNzxXraNWvE0T3a0LVNU7q2bkrXNk3o2rop+7ZqQsMGOazfXMaM5ev5ctk6pi9dx5fL1jFj+Xq2lKfo3LIx15zQg0uO2p/Gebsf/GlNX3bQTJ+IiEgNjV04lraN29Kvfb86fdyV67fw9McLeObjBazauJXenZpz/0X9Gdq/825n65o3zuPI7m04snubbbeVV6T4aO4q/vjOHO4cM50/vfsVw084gMu+0Y19GmlYkM000+dBmzZt3OrVqyOrf8kllwDw7LPPJqJulOKY2Ucmn+1Kp1Yc+1ckLkq2lHDycydzwUEXcNvRt9XJY24uq+B/35jBMx8vZGtFilN6d+B7xx3AMT3belmf9/HcVfzxndl8OGcVrZvm8f3je3DFMd1o3jhvh/0005cdNKT3oGnTppHWz8/PT1TdKMUxs49MPtuVTq049q9IXLwx7w22prZy/kHn18njLVpdynXPfMbUJSVccmRXfnBCD3q2b+b1MY7u0Zaje7Rl8oI1/PGd2dz335n8/cN53H9Rfwb36uD1sSTzNNPngdb0iYhkv0teu4TyVDnPD30+8k/BvjuziBHPFpJyjgcu6s9ph3WK9PEqTVm0lp+/8DkzV6znB8cfwM9O703DBjma6csSOk+fiIjIHsxaM4svVn3BeQeeF+mAryLl+MNbs/juyEl0btmYMT86rs4GfAD9u7bilR8dy+VHd+Px9+dx4aMTmF+8sc4eX6Klw7sefPXVV5HWv/DCCwF48cUXE1E3SnHM7COTz3alUyuO/SsSBy/PeZkGOQ04u8fZkT3G6o1b+cmzBbw/u5gLD+/Cb87rQ5OGdX9KlcZ5udx9Xh+OPbAdv3jxc85++P06zyDR0KDPg2bN/K6xqO6YY45JVN0oxTGzj0w+25VOrTj2r0imlVWU8dpXr3FS15No3bh1JI9RuGgt142aTPGGrfzugr5ccmTXjJ9I+Yw+nejXpSUjni1kekaTiC9a0+eB1vSJiGSvtxe8zU/H/ZQ/n/JnTuhygtfazjlGTVzIr8d8QYfmjXl02OH069LK62Okq7wiRV6DXK3pywKa6RMREdmNl+e8TIcmHRi07yDvtf/2wTx+8+8vGdyrPQ9enE+rpg29P0a6GuRq+X+20DPpwZw5cyKtf+6553Luuecmpm6U4pjZRyaf7UqnVhz7VySTikqLeH/J+wztOZQGOX7nST6Zt5rfvT6D0w/ryJNXHhnLAZ9kF830edCiRYtI659yyimJqhulOGb2kclnu9KpFcf+FcmkMV+NIeVSnHfgeV7rFq3fzI/+8Rn7t2nKfRf1Jycns+v3pH7Qmj4PtKZPRCT7OOc49+VzadO4DU+d+ZS3uuUVKS57YiJTFq/l5euPpXenaCcOfNB5+rKDDu+KiIjsxJSVU5i/br73Wb773pzJxHmr+d0FfRMx4JPsoUGfB7Nnz460/plnnsmZZ56ZmLpRimNmH5l8tiudWnHsX5FMeXnOyzRp0ITTup/mreYb05bz2Pi5DDt6f84f0MVbXZGa0Jo+D1q1ahVp/aFDhyaqbpTimNlHJp/tSqdWHPtXJBNKy0p5fd7rnN79dPbJ28dLzXnFG/nZ81Po36Ul/3POoV5qitSG1vR5oDV9IiLZ5ZU5r3D7h7cz8oyRHNHxiLTrlW4t54JHJrBi3WZeu+F49mvVxEPKuqM1fdlBM30iIiLVvDznZfZvvj+Hdzg87VrOOW771zRmrljPyKuPStyAT7KH1vR5MGvWrEjrDxkyhCFDhiSmbpTimNlHJp/tSqdWHPtXpK4tXLeQT1d8yvkHne/lUmjPTFzIvwqWMOKUgznx4PYeEorsHc30edCmTZtI61988cWJqhulOGb2kclnu9KpFcf+FalrL895mRzLYWiP9Ne4Fi5ay6/HTGdwr/b8+OQDPaQT2Xta0+eB1vSJiGSHilQFp794Oge1PohHhzyaVq3VG7cy9I8fAPDaj4+j9T7JveKG1vRlBx3eFRERCX287GNWlK7g/APPT6tORcrxk2cLWLl+C48OOzzRAz7JHjq868HMmTMjrT948GAAxo0bl4i6UYpjZh+ZfLYrnVpx7F+RuvSvOf+iZaOWDO46OK06D4+dzfuzi7nn/L7069LKSzaRdGnQ50G7du0irX/VVVclqm6U4pjZRyaf7UqnVhz7V6SulGwp4Z2F7/DtXt+mYe7ez8y9O7OIh9+ZzYWHd+HSo7p6TCiSHq3p80Br+kREku8fX/6D333yO54f+jy92/TeqxqLVpcy9E8f0KlFY/513bE0aZjrOWVmaE1fdtCaPg+iHjiXlZVRVlaWmLpRimNmH5l8tiudWnHsX5G68vKclzmkzSF7PeDbXFbBdc98RkXK8ZdhR2TNgE+yhw7vehD1efpOPfVUwP86q6jqRimOmX1k8tmudGrFsX9F6sKM1TP4cvWX3HrUrXtd49evTWfqkhL+evkRdG/n59JtIj5p0OdB+/bRnmzz+9//fqLqRimOmX1k8tmudGrFsX9F6sLLc14mLyePs3ucvVf3f2HyYv4xcSHXDu7JaYd18pxOxA+t6fNAa/pERJKrtKyU0148jW90+gYPDH6g1vefvnQd5z/yIYfv35qnv3cUDXKzb+WU1vRlh+x7ZWZAKpWKtH5paSmlpaWJqRulOGb2kclnu9KpFcf+FYnaC7NeoGRLCZcfenmt71uyqYxrn5lMq6Z5PHzpgKwc8En20OFdD2bPnh1p/bPOOgvwv84qqrpRimNmH5l8tiudWnHsX5Eoba3YylNfPMWRnY4kv0N+re6bSjlufn4KS9Zs4tnhR9O+eaNoQop4okGfBx06dIi0/rXXXpuoulGKY2YfmXy2K51acexfkSi9POdlijYV8ZvjflPr+z723lzemr6CO845lIHdo70Gu4gPWtPngdb0iYgkT3mqnHP+dQ5tGrfhmbOewcxqfN8JXxUz7ImJnNm3M3+6dECt7ptEWtOXHbT4wIOKiopI65eUlFBSUpKYulGKY2YfmXy2K51acexfkai8Pu91lmxYwg/6/qBWg7blJZu54Z8FHNBuH/73wn5ZP+CT7KGZPg+aN2/u1q9fH1l9XXt3uzhm1rV3RZIn5VKc/8r55Obk8sLQF8ixms2BlFWkuOSvH/PlsnW8cv2xHNSxecRJ40EzfdlBa/o86NixY6T1b7jhhkTVjVIcM/vI5LNd6dSKY/+KRGHswrHMLZnL70/4fY0HfAC/+88MJi9Yw8OXDqg3Az7JHprp80Br+kREksM5x8WvXczGso28et6r5ObU7HJpr32+lB/9o4CrBnXnznMPizhlvGimLztoTZ8H5eXlkdYvLi6muLg4MXWjFMfMPjL5bFc6teLYvyK+fbj0Q75c/SXf6/u9Gg/45hSt5xcvfM7h+7fil2cdEnFCkWhENtNnZvcDFwLdgb7OuWnh7QcDTwFtgVXAFc652UnaVp3W9NWdOGbWmj6RZLny9StZunEp/zn/P+Tl5u1x/41byvnmnz9kzcatvHbDcXRu2aQOUsaLZvqyQ5Rr+l4GHgLer3b7X4A/O+dGmdkw4DHg5IRt20GnTtFeZ/Gmm25KVN0oxTGzj0w+25VOrTj2r4hPny7/lM+KPuOWo26p0YDPOcctL01l7soNjPreN+rlgE+yR+Rr+sxsPnCOc26amXUAZgFtnXMVZpZLMIt2EGBJ2OacW1m9jVrTJyKSDNe8dQ0zVs/gvxf+l8YNGu9x/5EfzuPOMdP5+Rm9uG7wgXWQMJ4005cd6vrTu12BJc65CoBwQLU0vN0Ssu1rg77ly5czcOD234Xhw4czfPhwb522fPlywP+MYlR1oxTHzD4y+WxXOrXi2L8ivkwrnsaEpRMYcfiIGg34Ji9Yw2/+/SVDDunID0/oWQcJRaKlU7Z4UFJSwuLFiyOrf8kllwD+11lFVTdKcczsI5PPdqVTK479K+LL458/TvOGzbm418V73Ld4wxauf+Yz9m3VhAe+3Z+cHJ2AWZKvrgd9i4D9zCy3ymHTfcPbLSHbvqZz586RdFalW265JVF1oxTHzD4y+WxXOrXi2L8iPsxeM5t3Fr3DD/v/kGYNm+1234qU44Z/FrCmdCsvXTeIlk32vPZPJAnqdNDnnCsys0LgUmBU+N+CynVySdlWXYsWLdLum90544wzElU3SnHM7COTz3alUyuO/SviwxNTn6BJgyZc1vuyPe77wJszmfDVKu77Vj8O27dlHaQTqRtRnrLlYeACoBNQDKxyzh1mZr0JToXSGlhDcCqUmeF9ErGtun79+rnPP//cR7ft1KJFwQRj165dE1E3SnHM7COTz3alUyuO/SuSroXrFjL05aFccegV3DRw959Qf2v6Cn7wf59y6VFd+d0F/eooYfzpgxzZQVfk8EDn6as7ccys8/SJxNtN425i/OLxvH7B67Rv2n6X+y1YtZFz/vgB3do25YUfDqJxXs1O3FwfaNCXHfRBDg+iXtN3++23J6pulOKY2Ucmn+1Kp1Yc+1ckHR8u+ZA3F7zJj/J/tNsB3+ayCn446jNyzHj0siM04JOspJk+D3SePhGR+NlSsYULXrkAM+Olc1+iYW7Dne7nnONnL3zOC5MX8/erjuSk3h3qOGn8aaYvO2imz4MtW7ZEWn/u3LkA9OjRIxF1oxTHzD4y+WxXOrXi2L8ie+vJqU+ycP1C/nrqX3c54AMYPWkRL0xezA0nH6gBn2Q1zfR5oDV9dSeOmbWmTyR+Fq5byPmvnM8p+5/C70/8/S73m7q4hAv/MoFvHNCGkVcfRa7Ox7dTmunLDprp82DfffeNtP5dd92VqLpRimNmH5l8tiudWnHsX5Hacs5xz8R7yMvN4+Yjb97lfkXrN3PN05/Sbp+GPHTJAA34JOtpps8DrekTEYmPN+e/yU3jb+IXR/6CYYcO2+k+m8squPTxj/ly2Tpe+OEg+uyn8/Htjmb6soNm+jzYvHlzpPVnzgxOD9irV69E1I1SHDP7yOSzXenUimP/itTGxrKN/O+k/6V3m95c0vuSne7jnOOXL02lYOFaHr3scA34pN7QTJ8HWtNXd+KYWWv6ROLj/kn389T0pxh11ij6t++/030eHfcV//vGDG489WBuOOWgOk6YTJrpyw6a6fNgv/32i7T+Pffck6i6UYpjZh+ZfLYrnVpx7F+Rmpq1ZhajvhzFhQdduMsB31vTV/D7/85gaP99+fHJB9ZxQpHM0kyfB1rTJyKSWSmX4qo3rmJeyTzGnDeGVo1bfW2fL5et48JHJ3Bgh2Y8d80xOgFzLWimLzvkZDpANti0aVOk9adNm8a0adMSUzdKcczsI5PPdqVTK479K1ITr8x5hYKiAm484sadDviKN2zh+099SvPGDXj8ioEa8Em9pJk+D7Smr+7EMbPW9Ilk1trNaxn68lAOaHkAI88YSY7tOJ+xpbyCyx6fyLSlJTx3zTH069IqM0ETLIkzfWY2HzjHObfLv2TN7CDgufDH+51zz+zF41wFTHDOzdqL+94JNHPO7frcQh5pTZ8HXbp0ibT+fffdl6i6UYpjZh+ZfLYrnVpx7F+RPXnwswdZv3U9t33jtq8N+Jxz3P6vaXy6YA1/+s4ADfikugsIBmzXp1HjKqAYqPWgr65pps8DrekTEcmMtxa8xY3jbuTKQ6/c6YmYH39vLr/9z5fccMpB3HjqwRlImB32Zqav+y3/fhDIjyQQFM6/9+wRu9uhcqYP+BMwCTgG2Bd4zjl3i5ldBjxAsNRtKXAhUAr8EdgfaAL80zl3T1jvEOAhoBNgwP3hff8IFAHrgJudc2+b2S/Ceg2AJcAPnHPLzawl8DegD7AcWASs0ExfgpSWlkZav7CwEID8/PxE1I1SHDP7yOSzXenUimP/iuzK3LVzuf2D2+nbri83HH7D17a/M2MF97z+JWf17cQInZqlvtsfOAFoDnxlZn9zzj0THt7ddnjVzN4C7nbOvWdmDYGxZjYJeBd4BbjNOfd8uG9b59wqM7uS4NDwa+Htw4CewNHOuZSZXUswuLwMuANY55zrbWbtgM/Yfng5chr0ebBo0aJI648YMQLwv84qqrpRimNmH5l8tiudWnHsX5Gd2bB1Az959yc0btCYPwz+Aw1zG+6wfdaK9dzwz0IO27cFD1yUT44usVbn9jQTV8eed86lgBIz+5JgUDa76g5mtg8wGGhvtu310hw4hGAmsEHlgA/AObdqF491LjAQ+Cys0wAoCbedBPw4vH+xmb2UdstqQYM+D7p27Rpp/QcffDBRdaMUx8w+MvlsVzq14ti/ItWlXIrbPriNResX8fhpj9Npn047bF+9cSvfe2oSTRrm8vgVA2nSUJ/UFapeOquCnY9/cgAHHOmcK6u6wcwOq8VjGfAb59yTtU4ZMQ36PGjatGmk9aM61JbEQ3hxzOwjk892pVMrjv0rUt3fpv6Ndxa9w8+P/DlHdjpyh21by1P8cNRkVqzbwujhR9O5ZZMMpZSkcc6tN7P3gVuAuwHMrCtQBswEys3souqHdwnW8lW9lt+rwE/M7F/OuTVm1gjo7ZybArwDXA18aGZtgfOB56kjOk+fBxs3boy0/qRJk5g0aVJi6kYpjpl9ZPLZrnRqxbF/Rar6cMmH/LHgj5x5wJkMO2TYDtvKKlLc+Fwhn8xbzX3f6seA/VtnKKUk2GXAoWY21cymAqOBVs65cuCbwA/DbVOAs8L7/BW4w8wKzWyIc+5p4BlgvJl9DkwGjg33vRtobWYzgBeB9+quafr0rhc6T1/diWNmnadPpG4sXr+Yi1+7mI77dGTUmaNomrf9KMvmsgp+9I8C3v5yBbec2Zsfntgzg0mzTxLP0ydfp0GfB4cddpj74osvIqtfeYWEPn36JKJulOKY2Ucmn+1Kp1Yc+1cEYFP5Jq54/QqWbFjC6LNH07XF9rXUpVvLGf5/k/lgTjG//uZhXHFM98wFzVIa9GUHDfo80Hn6RESi45zjtg9u47W5r/GnU/7ECV1O2LZt3eYyvvv3SXy2cA2//1Z/vnVEtCfLr6806MsO+iCHBxs2bIi0/oQJEwAYNGhQIupGKY6ZfWTy2a50asWxf0X+OeOfjJk7huvyr9thwLd641aueHIiM5at54+XHs7Z/TpnMKVI/GmmzwOt6as7ccysNX0i0flk2Sdc89Y1HLvfsTx88sPbLrNWtG4zlz0xkYWrS/nLsCM4qXeHDCfNbprpyw4a9HnQp08fV7kWKgozZ84EoFevXomoG6U4ZvaRyWe70qkVx/6V+uujpR9xwzs3sG+zfXn6rKdp0bAFAIvXlHLZExNZuX4LT1w5kEE922U4afbToC87aNDngdb0iYj49d7i9/jpuz+lW8tuPH7q47Rt0haAuSs3cNkTE9m4pZyR3z2Kw3ValjqhQV920Hn6PIjy0C7A+PHjGT9+fGLqRimOmX1k8tmudGrFsX+l/hm7YCw/efcnHNj6QJ487cltA74vl63j2499zNbyFM8OP0YDPtktM5tvZjPC8+cVmtn/282+I8ysRmsEzGycmZ3jL2nd0UyfB1rTV3fimFlr+kT8eX3e69z6/q30adeHR4Y8su2QbuGitVz55Cc0yctl1Pe/wYEdmmU4af2SxJk+M5sPnOOc2+P6q1ruOw643zn3WroZ65o+vetB9+7dI63/5JPRXL4vqrpRimNmH5l8tiudWnHsX6k/XpnzCndMuIMBHQbw51P+zD55+wAwce4qvjtyEm2bNeKZ73+Drm2ivfSlZCcz+w7wE6BheNPNzrmxZnYbsC/wgpltBr4DdAZ+AzQmGCv91jn3bAZie6WZPg+0pk9EJD3Pz3qeX3/0a47pfAwPnfwQTRoE18z9z9Rl3PhcIfu1asIz3z+aTi0bZzhp/bRXM313tnwQyI8iD1DInSUjdrdDOHu3OfwC+B3wnHPOmVkvYKxzrkuVfbfN9JlZa2Cdc67CzDoSXEqtb3gt3XFopq/+WrduXaT13377bQCGDBmSiLpRimNmH5l8tiudWnHsX8l+z3z5DPd+ci8ndDmBPwz+A41yG7FhSzl3vvoFL0xeTP+urXjyyoG0bdYo01Eleb5VZSB3FPBfM9sPKAM6mVkn59zyndyvPfCkmR0ElANtgF7Ax3WUOxKa6fNAa/rqThwza02fyN5xzvG3aX/joc8eYsj+Q/j9Cb8nLzePyQtW89PRU1i8ppTrBh/IT4YcRF6uPneYSdmwps/MvgJucs69bGY5QCnQ2zk3fyf7jgVeBR4OZwZnAcOdc+M001fPHXDAAZHWf/rppxNVN0pxzOwjk892pVMrjv0r2Wn15tX86sNfMW7xOM484EzuOe4enMvhD2/N4k/vzGbfVk0Yfc0xHNm9TaajSvZoBcwLv/8uUHXqeB3Qstq+88MB36nAgXURMGoa9HnQsGHDPe+Uhq5du+55pxjVjVIcM/vI5LNd6dSKY/9K9nlv8Xvc8eEdrN+6np8f+XMuO+QyFq7axIjRhRQuWssFh+/HneceRovGeZmOKtllBPCyma0B3gBWVdn2MPB3Mysl+CDHLcAjZnYXMAn4vI6zRkKHdz04+OCD3axZsyKr/8YbbwBwxhlnJKJulOKY2Ucmn+1Kp1Yc+1eyx6byTfzh0z/w7MxnOaj1Qdx7/L0c1OogRk9axK9fm05ebg6/Pb8P5/TbN9NRpZokHt6Vr9OgzwOt6as7ccysNX0ie/blqi+55f1bmFsyl8sPvZyfHP4TNm42bnnxc96cvoJBPdvywLf707llk0xHlZ3QoC87aNDnQf/+/d2UKVMiq798efDBok6dOiWibpTimNlHJp/tSqdWHPtXkq0iVcFT05/ijwV/pE2jNtx93N0M2ncQ42et5Obnp1BSWsbPTu/F9447gJwcy3Rc2QUN+rKDBn0e6Dx9IiJft3zjcn75wS+ZtHwSp3Y7lTuOvoOGOc34/RszGTlhPgd3bMaDFw/g0H1bZDqq7IEGfdlBH+TwoKSkJNL6Y8aMAWDo0KGJqBulOGb2kclnu9KpFcf+leRxzvHG/De4++O7qUhV8OtBv2ZI13N4+uMFPPH+JFZv3MrVx3bnF2f0pnFebqbjitQbmunzQGv66k4cM2tNn0gg5VKMWzSOJ6Y+wdTiqfRr34/bj7qbsZ9X8MQH81hbWsbgXu254ZSDOHz/1pmOK7Wgmb7soEGfB/n5+a6wsDCy+sXFxQC0a9cuEXWjFMfMPjL5bFc6teLYvxJ/FakK/jv/vzw+9XHmrJ1Dl2ZduLTXlaxals/fP1zAus3lnNK7Az8+5SDyu7bKdFzZCxr0ZQcN+jzQmj4RqY/KKsp49atXeXLakyxcv5CeLXtyWa+rWbDoYJ6asJD1m8s59dCO3HDyQfTt0nLPBSW2NOjLDlrT58HatWsjrf/SSy8BcMEFFySibpTimNlHJp/tSqdWHPtX4mdT+SZemv0Sf5/2d1aUruDQtofym2PuY9bcbtz17EI2bJnLGYd14senHMhh+2qwJ5kRXlptM7AFaAg84Jx7IqOhPDCzO4Fmzrmba31fzfSlT2v66k4cM2tNn9QX67euZ/TM0Tw9/WlWb17NER2P4NxuVzBrfmee/mgBG7dWcFbfTvz45IM4pLM+kZtNkjjTV/V6umbWB/gM6O6cW5rZZDsyswbOufJa7H8nGvRlzoABA1xBQUFk9Ss/Hdyypd+/mKOqG6U4ZvaRyWe70qkVx/6VzHLOMWvNLN6Y/wajZ4xmfdl68tsdzX6cQ+Hs1sxYvh4zOLtvZ3588kH06tQ805ElAnsz6Ov7VN8HgfxIAkHh1CunjtjdDlUHfeHPK4BzCK6z+yDQjmAG8EHn3N/DfY4B7gMqX8g/c869aWZHElyqbR9gI3CDc26SmT0BTHXOPRTevw/wKtAzrPEHoB/QGHgXuNE5V2Fm44BC4GhgtXPuLDP7BXAhwVHYJcAPnHPLzawl8DegD7AcWASs2JtBnw7vepCbG+0pB6J6A07iG3scM/vI5LNd6dSKY/9K3dtasZVPl3/Ku4veZfzi8SzbuAzD6NroKHLXnMj7X7bBDAZ2a8D/nHMoZ/TpxH6tdCUNiS8zOxYoBqYAHwGXOedmmFlz4FMz+wgoAv4FXOCcm2BmuUALM2sIvAhc7Zwba2ZDgBfN7EBgJMFg8KHwoa4GRjrnnJn9ARjvnPu+meUAzwDfBR4P9+0BHOecKzezYQQDxaOdcykzuxZ4ALgMuANY55zrbWbtCGYsn9ubftCgz4M1a9ZEWn/06NEAXHzxxYmoG6U4ZvaRyWe70qkVx/6VurFm8xreX/I+4xaN48MlH1JaXkrDnEa0y+1L47WDKS7qwQzXgmN6tOWa8zpx2mEd6dC8caZjS4ztaSaujrxgZgYcCFwU/vcQ4NngZgAahbf1BKY75yYAOOcqgDVm1hfY6pwbG97+tpltBXo55z4ws+bhPl8ClwLHhHXPBY4ys5vCn5sCi6tk+0eVw7rnAgOBz8JcDYDKkwCfBPw4fOxiM3tpbztDgz4PioqKIq3/6KOPAv7fiKOqG6U4ZvaRyWe70qkVx/6V6Mwrmce4ReMYt2gchSsLSbkULfPa0j7naJYW92BVcTfW5zTi+IPacfqxnTj1kI603qdhpmOL1Ma3wjV9FwF/JxhcFTvn8qvvaGZn7+VjPAVcBYwDvnTOLagsCZznnJu7i/ttqPrwwG+cc0/uZYYa0Zo+Dw4//HD32WefRVa/tLQUgKZNmyaibpTimNlHJp/tSqdWHPtX/Ei5FMs2LuOrtV/xybJPeGfRuyxavxCAljndyN3Sh+IVPdm4vhNN8vIY3Ks9Z/TpxMm9O9C8cV6G00umJf2DHOHPzwMrgCHAb51zT4e39waWEkyETQfOd859VHl4l2AN3xzgSufcu2Z2MsEA8iDn3FYz2x/4GJgEPO+cGxXW/RtQAVwbruNrBzR3zs0L1/Td75x7Ldz3cuAnwKnOuTVm1gjo7ZybYmb3A63Cw8RtCQ7vPq81fRmSk5MTaf2o3oCT+MYex8w+MvlsVzq14ti/UjvOOVaUrmDO2jl8tfYr5qyZw4zVs5lXMpctqU3hTg0o39iD8g3fpHz9IZDbjkM6t2Bwn+Yc07MtJx7cgSYNdXk0yTq3ApMJPsxxi5n9DMglGAh+Ozx0egHwBzPbB0gBN4eHcy8EHg5v30gwg7gVwDm30MymA4MJDu9WGgH8HphiZo7g1DEjgHnVgznnng4HhePDw7s5wCMEaxDvBp40sxkEH+R4b287QDN9HvTo0cPNnbur2dv0jRo1CoBhw4Ylom6U4pjZRyaf7UqnVhz7V3bOOUdRaVEwsFs7h69KvmL2mmCgV1q+cfuOFc0p39yB1JaOpLZ0pG3Drhzatjd99+3IIZ1bcNi+LejSuglV1jeJfE0SZ/rk6zTo80Dn6as7ccys8/RJVMoqyijZWsK6LetYsXEFU1fOYubq2cwt+YolG+ezqWL7kqCcVDPKN3cIBnhbO5JT1okerXrSp+O+HLpvCw7t3ILenVvQsokO1UrtadCXHTTo2wMzO5hgkWZbYBVwhXNudtV9jjjiCDd58uTIMpSVlQGQl+f3H+uo6kYpjpl9ZPLZrnRqxbF/s8HWiq2UbClh7Za1lGwpoWRLCStL17B8w2pWblzDqk1rWbulhHVbS9hQto7NFevZ4jaSYvPXarmKJlSEs3aVXy1yu3BYx/04pHPzcIDXkh7t9yEvN9qlJ1J/aNCXHbSmb8/+AvzZOTcqPI/OY8DJVXeovEh9VP7+978zfPhw73Uz9cb+17/+da/bE7fBSDptqcpnu9KplZeX561NteGcwzlwld8DzgUfPkg5h3Mu+C8pKlKVt1dugxQpXMqRwu2wf0WqAgc8//xznP+tC7fts62eS5FyUOFSVR5j+7bK2pU1K1JBhvJUORvL1rO+bD0byoKB2vqydcF/t65j7ZYS1peVUFq+ns0VG6hgy27anoOraIqraAIVTSHVlDxrR5Pc5jRt0JwWDVvQqlEr2jVpQ7cWPZg9+QsuGnomrZs2pG2zhrRu2pDGeclef5eJ11xUvLSlcjLGOYLfiiq34Xb8Pt39XApSFeAqIFUefJ8qD28Pfn7xhecgOJGxJJxm+nbDzDoAs4C24Sdvcglm+w5yzq2s3K9xk8Zuyqyp4ZtF8AYxYcIEjvnGN7a9GVVU/teloMobVPBGU8Fnn31G//z+QY3U9jcbUo4bfngDZ515FqcMPZmUA6jgiy++pPchvcP7p8I3yhSpVAqqvPG58E1szpxZHNCjJ47tb24fvvEBDjjmtKODfx9I4VyK+QsX0qVrF1z4j0bKpQCCN8HK/7rK/CmWLVtGp06dcJX/cy7Ivu2NPPg+FW6f9MknHHHkwG3ZcJX3Y1t2wr1TDtauXU3LVq1wzvHF+Ok44NATerOtYvgarnz89evX06zZPtuzBuGDx6qyH+F9N5aW0qRpk3ALUNnOoFO2tyu8/+Ytm2nUqBHOOVavWc3a6etwwAHHdmXHRwked2vZVhrk5W2/bXv1bbcs/HAJ4Ohy7L6Ul5eTm5u7Y51q6SurQDCwqfwwkcOxZMIKADoP6rDDPQGcBa8vy7FqVYL/X/5hMc6l6Hhc+233crjgZALVWlC1cuU+zhH8t+pjVu5RZcmY2+G+hPV3dlty5DpoWpFDk4ocmqaMphU5NE3lsE8qhxbk0MLl0rQ8RbuGjWmd04DWlkvbnAa0yM2lUW4OeblGw1yjQY6FTXesWLGCjh06UPWNesJHHzHomKN3+oa+sngl7du1q7KN3b7xr161ijZt2lDTAcLatWtote0E3jvbj+3bnGPd+nW0aN58l/Uq95u/YD7t2ralWbNmNR7AlJaW0rRJkz22sXLb5s2baNyo0R73q3ysrWVlNMxrUGX33Wcqr6igQU4Om7dsDh5nD4Mv51LBOsrq22LK7lpX6pzbJ9M5JD2a6du9rsCS8ASNhAO/peHt2wZ9Za6Mb73z9QvU//H9Wj7aLs76smjdQh4b/Rfe6vHm9hsNmFGL2g2AhTveNHdM8OGTT/t8uuOGhgSfZaqpxsDaWux/KCza+FrN928KbA2+nTs+yLxs0G7OjdgUSIE5h8G2Lyq/d2BU2dak8rbgv8F+27dXHiDbtk9Dt32/1jD7w+CUTG0Gbf7afQ2wBlBeed9wG2HdyppLJiwC4OBjyrGc8Ha3Y+6cKvfdlqXyq2J77S8+XALACUdVy8HX+2SHvnGO5z5YhgGDjsypdr+g/rbcVe+7rT9t2/ZtGW3Hfg++tyr3TZFjOeE9bVudHXNtf6yKihQNcnPDn22Hx93xeTZygLLychrm5bF1yxYaNWy0vXa4Y44L64Q/b928hcaNGwdZbXuO7ZkMLBjgtXSGlaxnv+YtaJEKfg3McjCM3JwccnNzyDEjpwGEL0gWr1xCl/26bA+ABZ8PTAFllZ21vSWbihdCs7DHw/s0z0vB5nU77Fe5raS4iPatW26vvUO9sMa2hzZWrF5Lmw6dv/a4O+Sr8v2iuctotd9Be9yvctucBQUc3q3HHveb9fkyVubmceRB/Xe7X9XvCz/6iEGHDNrJftXvE/z8yfvvc8IJJ+yyXvXHff+ddznl5JNr0C+BsW+9xemnnc5zTz/NFVdcsdvsAP/5z+ucffbZe9yv8rFeeeUVvvnN83bbxqrfv/jSi1x44bf2uB9mkNOAUf/4J8MuvxJyGkBObvBfy4GcBtz0s58TXLlMkk4zfbthZkcA/+ecO6zKbdOBYc65z6rctpngXDyVVgJlbD+bdk203M3+7QguH1PT/WtbP51992b/nbUnk3nS2b8mbYlz/p2p3qY4vXb2dv+avubimr+q3bUlCfl3ph1+/83M5P7Z9Fqr1I7giJcurJxwmunbvUXAfmaWW+Xw7r7h7ds453QtIhEREYk1fbRrN5xzRUAh20+2eClQUHU9n4iIiEgS6PDuHoSXZ3kKaA2sIThly8zMphIRERGpHc307YFzboZz7hvOuYPD/3oZ8JnZfDNbFh4yrrztKjNzZvYjH4+RSWH7+mQ6h081aVMS2m1mrc1sk5k9lOksPpjZRWZWYGaFZjbDzP6R6UzpMLNGZvaAmX0VtqfAzM7bw326m1nsznkS/j5MM7OcarfF+ndkZ8LcM8xsipnNMbNXzGxQpnP5ktTnRWpHg77MWgqcXuXnq9jlZ3hFvPkOwcXBLzWzhpkOkw4z60xwfcpznXP5wCHAfRkNlb5HgC7AYc653sDlwJ/M7ITd3Kc7ELtBX6gZQRuywbecc/2dcwcSHAH6j5l9I9OhRGpKg77MGkkw0MPMegD7AFPDn08xs4/Cv/Knmtkl4e1Hmtm0qkXCvzxj+Rdn9b8eq/4cfv/rsJ3zkzLDubs2JcR3gd8AnwPfBDCzkVX7v+rPZrafmY01sy/M7FUzGxOj56oTwac+VwG4QAGAmX3DzN41s8nh19nh7d3NrDicTfs8/P06PnNN2M7MugEXA9c65zYDOOemAb8FfhXuc2uYeYqZTQhn0f4MHBrOdr6Qqfy7cCfwq+p/YJjZgeHr6nMz+8zMzghvv93M/l+V/dqGz1eszhHnnHuJ4OT9N5tZQzO7z8w+CZ+Xp82sGYCZtTSzJ6s8Z3/KbPLdM7ObzGxS+N7zkZnlV9nmzOyX4fa5ZnZhBqPKXtCgL7PGAX3NrDVwJfB/VbZ9BhznnBsADAHuN7PWzrlJwAYzOxEgfLNKOecm1G10b5o6544BBgP3Vv5DKdEws34ElxR8B/g7wQBwTx4G3g1PXfRj4MToEtbaFOATYKGZvWBmI8JBQiuCN+TvOOeOAM4BHgtvh6APpjjn+hG06Z9m1ujr5etcX2COc251tds/Bvqb2ZXAucAg51x/YKhzLgVcD0x3zuU7575Vt5H36FNgMnBttdufAf4RPgfDgFFm1p7g38FLzKzy7BLfAV51zm2sq8C1MBE4DPg5UOKcOyp8XpYCt4b7PAhsBPqH2+7MQM7a+D/n3JHhe8//EPweVbXOOXckweztw3WeTtKiQV9mOeA54JLwq+papPbAC+Gs3n+BNkCvcNvDwHXh99cT/JWfVM8COOfmE3xQpktG02S/7xH8o+6Al4BvmNl+e7jPSQQDRJxzC4Cx0UasOedcyjl3HsEfDe8CZxPMYJ4FHAC8bmaFwOsEv28HhnfdCowKa4wDNrH99yuTbA/bzwEedc6tB3DOrYo+khe3A7+o8kedAflsf11NJzhTwtHOuYXAFwTPIQRHQ0bWXdRaqXy+zgWGhTOtheHPPcNt5wD3hYNznHPRXrczfUeY2Xvhe88fCJ6nqp4N//sxsK+Z6ZRlCaLz9GXeUwR/Lb7nnFtl28/y/ijwKnCBc86Z2SyCk/4DPA/8zswGELwh12S2JlPK2fGPi+r/QFS9onwFyXhN7qlNsRQeXvsOsMXMKi8ZkEfwpprINlUKD4FOA/5swQnUDfjcOfe1dXBm1r2O49XGVOBAM2tTbbbvaILBbCI552aa2X+AG2t4l5HAlWY2j+CkwbW9vlFdOZLgdXcAcJ1z7p0M50lXDvACcIJz7jMz2xdYUm2fymUHFeH7VRL+zZaQZvoyzDk3F7gNuLvaplbA/HDAdyrbZyhwzpUBTxIMCp9xzpXWUdy9MYfgH0bM7BSgY2bjeJHUNn0TmOmc6+Kc6+6c6w6cRjDoq9qmzgR/TFQaR7D8ADPrCpxcd5F3L1xveEyVn7sQzJJPBw4ys5OqbDvStv9VVTkArlwi0YTaXdgwEuGM9/PAo5UzKOF60duAu4DXgGvNrHm4rW1413UEg6M4u5PgyERzglnXQra/rg4B+hPMHkEwC30CcBMw0sXw3GJm9k2CQ9YPEPxbfKOZNQm3NQ/bBMFz9rPK156ZtctE3lpowPYLEFy3ux0leTRCjwHn3F93cvMtwCNmdhcwia//lf8EwcLuRyOOt7caEPxF+D/AU2b2Y4J1ZAt3e694S3qbvkuwjmob59xH4QcBPgJOD2fJZhHMPlf6CfB/ZnYZMI9gDV1tLu8UpQbAXeEHIDYR/CF7u3OuwMzOBe4zswcJBnlzgaHh/VYB+Wb2c4JZwUudc1vrPP3OXQfcA0w3s60Er7mfOOfGm9l7wH7Ax2ZWRrC+9wSCfx9mhofkZsRwXR/OucVm9jTBQA7gMoJ1lj8lmGm+vPLE9865UjN7BbiaYBYtLl4wsy0EH7qbDpzlnJtoZp8RDGonmVmKYFB7F/Al8FOCdX3TzKwcGA/ckIHse9IAKAXuIGjHKoJZP8kiOjlzQpnZMII3qrP3uHMdC2eKZgCdnHObMp3Hh2xsU02FsxdlzrnysB8mAack9STl4eHdT51zcZ9xEakT9fnft/pGM30JZGb/JVgkfG6ms1RnZjcQzFTcnC3/eGRjm2rpIIKZPiNYA3hXUgd8IrIj/ftWv2imT0RERKQe0Ac5RERE6onwPJb/MbOZ4QmjXwrPj4iZHR2eQHqWmb1pZh3C2w+24ETnMyy4rN7fq3xopZGZvWHBCbTjfjqaek+DPhERkfrDAb93zvVyzvUFviI4MX4Owbkrr3fOHQy8B9wb3mcrcGN4WcB+QFPg5nBbBXA/wUUEJOY06BMREaknnHOrwxOSV/oY6AYcAWx2zn0Q3v4X4NvhfeZXXt4wPMn0J+F9cM6VO+feBtbWSQMkLRr0iYiI1EPh7N61BOcZ3B9YULktvHJIjpm1qXafJgSnf3q1DqOKJxr0iYiI1E9/BDYAf6rJzuH1kJ8F3nHOadCXQDpli4iISD1jZvcTnI5pqHMuZWYLCQ/ZhtvbAanKywGaWS7Byd3XEM+TS0sNaKZPRESkHjGzewjW8J3nnNsS3jwZaGJmx4U//5DgkoCVh4FHEnxo43txvCye1IzO0yciIlJPmNlhwDSCyy1Wnox5nnPufDMbBDwGNAbmA8OccyvM7GyCawhPIxj4AXzonLs+rDkJ6AJ0AJYBbzjnvl9HTZJa0KBPREREpB7Q4V0RERGRekCDPhEREZF6QIM+ERERkXpAgz4RERGRekCDPhEREZF6QIM+ERERkXpAgz4RERGRekCDPhEREZF64P8DW9bhgsgTMj4AAAAASUVORK5CYII=\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>68564430</td>\n",
        "      <td>172451</td>\n",
        "      <td>16251170</td>\n",
        "      <td>52140809</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>69591393</td>\n",
        "      <td>176323</td>\n",
        "      <td>16086132</td>\n",
        "      <td>53328938</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>70586749</td>\n",
        "      <td>180153</td>\n",
        "      <td>15901863</td>\n",
        "      <td>54504733</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>71549691</td>\n",
        "      <td>183937</td>\n",
        "      <td>15698992</td>\n",
        "      <td>55666762</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>260</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>72482143</td>\n",
        "      <td>187670</td>\n",
        "      <td>15481023</td>\n",
        "      <td>56813450</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date  Confirmed   Fatal  Infected  Recovered\n",
        "256 2020-12-29   68564430  172451  16251170   52140809\n",
        "257 2020-12-30   69591393  176323  16086132   53328938\n",
        "258 2020-12-31   70586749  180153  15901863   54504733\n",
        "259 2021-01-01   71549691  183937  15698992   55666762\n",
        "260 2021-01-02   72482143  187670  15481023   56813450"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.024515901161443848"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.049031802322887695"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Main</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>23</td>\n",
        "      <td>0.000</td>\n",
        "      <td>51</td>\n",
        "      <td>442</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1890</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>72</td>\n",
        "      <td>0.052</td>\n",
        "      <td>16</td>\n",
        "      <td>586</td>\n",
        "      <td>0.15492</td>\n",
        "      <td>1890</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>56</td>\n",
        "      <td>0.101</td>\n",
        "      <td>12</td>\n",
        "      <td>522</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>927</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.020953</td>\n",
        "      <td>0.000625</td>\n",
        "      <td>0.022549</td>\n",
        "      <td>0.025136</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>0.021</td>\n",
        "      <td>13</td>\n",
        "      <td>533</td>\n",
        "      <td>0.123667</td>\n",
        "      <td>435</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>6</td>\n",
        "      <td>0.000</td>\n",
        "      <td>14</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.0285986</td>\n",
        "      <td>426</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.0232342</td>\n",
        "      <td>1935</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>4249</td>\n",
        "      <td>0.0335894</td>\n",
        "      <td>929</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>4249</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"9\" valign=\"top\">Medicine</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>23</td>\n",
        "      <td>0.000</td>\n",
        "      <td>51</td>\n",
        "      <td>442</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1890</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>72</td>\n",
        "      <td>0.052</td>\n",
        "      <td>16</td>\n",
        "      <td>586</td>\n",
        "      <td>0.15492</td>\n",
        "      <td>1890</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>56</td>\n",
        "      <td>0.101</td>\n",
        "      <td>12</td>\n",
        "      <td>522</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>927</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.86</td>\n",
        "      <td>0.020953</td>\n",
        "      <td>0.000625</td>\n",
        "      <td>0.022549</td>\n",
        "      <td>0.025136</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>0.021</td>\n",
        "      <td>13</td>\n",
        "      <td>533</td>\n",
        "      <td>0.123667</td>\n",
        "      <td>435</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>6</td>\n",
        "      <td>0.000</td>\n",
        "      <td>14</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.0285986</td>\n",
        "      <td>426</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.0232342</td>\n",
        "      <td>1935</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>4249</td>\n",
        "      <td>0.0335894</td>\n",
        "      <td>929</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>31Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>4249</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.049032</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>0.000</td>\n",
        "      <td>6</td>\n",
        "      <td>4249</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE    Rt  \\\n",
        "Scenario Phase                                                          \n",
        "Main     1st      Past  17Apr2020  01May2020   126529100  SIR-F  2.00   \n",
        "         2nd      Past  02May2020  14May2020   126529100  SIR-F  0.21   \n",
        "         3rd      Past  15May2020  09Jun2020   126529100  SIR-F  0.20   \n",
        "         4th      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.86   \n",
        "         5th      Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10   \n",
        "         6th      Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00   \n",
        "         7th      Past  23Jul2020  31Jul2020   126529100  SIR-F  1.88   \n",
        "         8th    Future  01Aug2020  01Jan2021   126529100  SIR-F  1.88   \n",
        "Medicine 1st      Past  17Apr2020  01May2020   126529100  SIR-F  2.00   \n",
        "         2nd      Past  02May2020  14May2020   126529100  SIR-F  0.21   \n",
        "         3rd      Past  15May2020  09Jun2020   126529100  SIR-F  0.20   \n",
        "         4th      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.86   \n",
        "         5th      Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10   \n",
        "         6th      Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00   \n",
        "         7th      Past  23Jul2020  31Jul2020   126529100  SIR-F  1.88   \n",
        "         8th    Future  01Aug2020  31Aug2020   126529100  SIR-F  1.88   \n",
        "         9th    Future  01Sep2020  01Jan2021   126529100  SIR-F  0.94   \n",
        "\n",
        "                   theta     kappa       rho     sigma  tau  1/beta [day]  \\\n",
        "Scenario Phase                                                              \n",
        "Main     1st    0.000299  0.000753  0.014476  0.006498  480            23   \n",
        "         2nd    0.051825  0.000568  0.004625  0.020161  480            72   \n",
        "         3rd    0.100924  0.000638  0.005899  0.026441  480            56   \n",
        "         4th    0.020953  0.000625  0.022549  0.025136  480            14   \n",
        "         5th    0.000078  0.000231  0.049821  0.023470  480             6   \n",
        "         6th    0.000676  0.000021  0.044626  0.022286  480             7   \n",
        "         7th    0.000068  0.000078  0.046273  0.024516  480             7   \n",
        "         8th    0.000068  0.000078  0.046273  0.024516  480             7   \n",
        "Medicine 1st    0.000299  0.000753  0.014476  0.006498  480            23   \n",
        "         2nd    0.051825  0.000568  0.004625  0.020161  480            72   \n",
        "         3rd    0.100924  0.000638  0.005899  0.026441  480            56   \n",
        "         4th    0.020953  0.000625  0.022549  0.025136  480            14   \n",
        "         5th    0.000078  0.000231  0.049821  0.023470  480             6   \n",
        "         6th    0.000676  0.000021  0.044626  0.022286  480             7   \n",
        "         7th    0.000068  0.000078  0.046273  0.024516  480             7   \n",
        "         8th    0.000068  0.000078  0.046273  0.024516  480             7   \n",
        "         9th    0.000068  0.000078  0.046273  0.049032  480             7   \n",
        "\n",
        "                alpha1 [-]  1/gamma [day]  1/alpha2 [day]      RMSLE Trials  \\\n",
        "Scenario Phase                                                                \n",
        "Main     1st         0.000             51             442   0.136012   1890   \n",
        "         2nd         0.052             16             586    0.15492   1890   \n",
        "         3rd         0.101             12             522   0.111488    927   \n",
        "         4th         0.021             13             533   0.123667    435   \n",
        "         5th         0.000             14            1441  0.0285986    426   \n",
        "         6th         0.001             14           15662  0.0232342   1935   \n",
        "         7th         0.000             13            4249  0.0335894    929   \n",
        "         8th         0.000             13            4249          -      -   \n",
        "Medicine 1st         0.000             51             442   0.136012   1890   \n",
        "         2nd         0.052             16             586    0.15492   1890   \n",
        "         3rd         0.101             12             522   0.111488    927   \n",
        "         4th         0.021             13             533   0.123667    435   \n",
        "         5th         0.000             14            1441  0.0285986    426   \n",
        "         6th         0.001             14           15662  0.0232342   1935   \n",
        "         7th         0.000             13            4249  0.0335894    929   \n",
        "         8th         0.000             13            4249          -      -   \n",
        "         9th         0.000              6            4249          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    0 min 25 sec  \n",
        "         4th    0 min 10 sec  \n",
        "         5th    0 min 10 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th    0 min 25 sec  \n",
        "         8th               -  \n",
        "Medicine 1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    0 min 25 sec  \n",
        "         4th    0 min 10 sec  \n",
        "         5th    0 min 10 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th    0 min 25 sec  \n",
        "         8th               -  \n",
        "         9th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAn0AAAGmCAYAAAAJYjK8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAAB5lklEQVR4nO3dd5gV5fXA8e/ZzgK79CYIAoIIKApYiFGMWFCx14g1BmOJYkv0Z4k9JhgVYwXFmiiaYMEuKGDEgnQEKdI7S9nC9r3v74+ZhWHZhV1m5t6Z2fN5nn3YvTP3zDnvvew9+85754oxBqWUUkopFW1JiU5AKaWUUkr5T5s+pZRSSql6QJs+pZRSSql6QJs+pZRSSql6QJs+pZRSSql6QJs+pZRSSql6QJs+Va+IiBGRgfb3vxaRggTksFxEroj3cffGOTaJJiKXichKESkQkd8lOh83RKS7iCwTkYZxOl4n+7HsZP98iYj8VMv7JuT/RNCJyE8ickkt920gIktFpJvfeSlVV9r0RZCIvCIiryQ6j7qwX6SK7Bf5zSIyWUSO8fOYxpivjTGNapnfLi+kyj8ikgI8B9xkjGlkjHkp0Tm59BjwD2PMdgARuc9+Lr1RdUcR+Z+97QqvDm6M+Zcxpmct9631/4n6xBjT0xjzr1ruWwT8Axjhb1ZK1Z02fSpIBtsvOB2AucBHIpJVdScRSRERiXt2qk5cPE5tgExgpscpxZ2IdAd+A7xeZdMi4EwRae7YtzdwELA+fhmqPRGRtH286xvAIBHp4mU+SrmlTV/EiciDIrLEnkFbYf+c5Ng+SUSeEpH3RCRfRBY7T2OISFsR+UhENopInohME5HfOLZXzoANFZE5doypInLQvuZsjCkEngeygANFZKB9jItEZAlQCDQUkf1E5N8issbO700RaenIrZWIjBORbfbplourjM1AETFVbrtSRGaLSK6IrBORh+xNlafHfrLH8h/2/k1E5Dl7bDeLyMci0tkRr5GIvGRvWyMiw/dWv3369y4R+cTxmJzp2H6fiEyqcp9dZnftGPeKyEQR2S4i80TkMBG50I6XKyIvi0hqlcP3EZHp9nG/F5HDqxznMsf4/CQiF1Udz6qPUzX1JYvI/9nPy23282VAZQxgYZWxblXDOJ1h57hVRDaJyBjHttGy8/TwYhG5wbFNROQBEVlt17laRB5xbN/b8+oGEfnFvu8G2fOs+lnAD8aY3Cq3rwM+A6503PYH4FWgpEqdB4nIh/ax1ojIs+I4VSwiXezHOU9EFmA1mc77XyEiyx0/p4jI7SKywK5hhYhcb2/b5f9E5XNNRP5i/3/YYj/fk2s7XlWJyPEi8qP9HNosIt+ISNO95WZvP9LOZ7Ps/H2W4thuROQ6+zlVINbvpAGO7QNF5Fu7js0iMl5EDqg6ViIyXERWAivt23dZkiEix9jH2GY/j+9wjon9eE/DevyVCg5jjH5F7At4BXjF/n4o0B4QoD+QA/zese8krBfn04AU+98S4Eh7e3vgbKwX7zTgbiAXaGFv7wQYrBew1kAGMA6Y6DjGb4Fte8nZAAPt7xsBzwBbgcbAQHv7f4Bm9jHSgZ+Bv9m5NcKaTfnCEfNz4COgqf31fpXjDLT+C+zY/xpgA9aLZjKQDRxTpc5Ojv0F+Mo+bjM7p0eB+UCqvc8orF/++9l5vgiUAVfsYSyW21+HYf1hdrs95o3s7fcBk2p6zB0xfgEOBlKxZh6W2sdvCHS0nwuXV3kMFgE97Frus8ejsb39CjtuXzuvY+y8jnGOZ5XHSaqp7092nN52btcDBUCHmsa6mhgnYz1vz8F6XmYCxzu2/w5oaed5CtZz+kR724nAamB/++dmwNH293t8XgEH2sft5XiuHruHPMcC/6xy231Y/+9OABZjPY8aAdvs+Msrnx9AC2ATcKOdWwvgC2C0vT0Z6/lW+bjuB3zrHL/Kx81x/L/aj3Nf+9gtgSNq+D9xH9bzdbj9WHXH+n95aW3Gq4YxWYPV7Ir92B0NNKxFbt2BfOB8rN9VHYFZwF1VnsMzgC72Pv8EfnFs/xVwlF1LM+A94BvH9iuAcuBZu55Mx/+nyseko/0c+IMd5xCs5vCWKnX+E3grUa8D+qVf1X0lPAH98uFBrdIAVNk2Ehjr+HmS82f7trHAC3uIvw3rVCzsfIEe4Nh+OpBfx5wN1gv/VqxZkM/Z+UI80N7exbH/OfYvWnHc1trerz3Wi58Beji292DPTd9PwPAa8quss5PjtsOB4soXBvu2ZLuOY7AajuLKsbK3N7ZfVK7Yw1gsB/7P8XMj+9h97Z/vo3ZN352On0+1Y7R13DYOR0Nib7/W8XOS/VhcbP88B/hdleM+B7xY0+NUQ30Lgeuq3PYjcEdNY11NjI+AJ+vw/Hof+Jv9/XFYDe9goEGV/fb2vDoAKAIuBLJqcdzPgYeq3HYf1v87scfiRGAYMMHx2F1hf38L8HWV+x+J1cQmYzUx5diNub19MDU0ffYx84Gzash3ILs3fYuq7POfyufN3sarhmMsAx4C9qty+95yewp4vcptFwJLqjyHf+v4uZd9W/MaYh4GxNjZ3F0BlAIZ1fyfrHxM7sSavXVuvwH4ucptDwOf1/Y5ql/6FY+vHdPiKppE5FqsGayOWL9UM7BmApyWVfPzIfb9m2EtRP8N1l/GMazTrlVPua11fF+A1ajU1enGmEl72O7M80CgHbBVdl02VgLsD1RUc5+qdVbViZ2nFmvjQKyZirVVckjGWpfYEmsmZMdxjTH5IpJTi9g7xtMYU2DHb1yH3MBq2CoV2rGq3lY1pjPXmIiswKoFrHpHin1q25YCTKkpRg06YM06Oi3BetxqqxPwYXUbxBqsu7FmmNthvehnAlsAjDGTReRPwB3AWyIyE3jQGDORvTyvjDFTxTqlfS3wgogsxHqTxts15LkFa8Z4N8YYIyLP27E6AY9Us9uBwJEiss1Zol1TG6xGNMcYk+/Yvqfxb4H1f7Muz/O1VX4uYOfzZm//D1dXE+8MrMZpuojkY81CP4T1+2VPuR0IHC8iQxy3JbH7MqWqv4uw890sIn2wxrkPO39HVc4orrB/Xm+MKa4hB6j98zcL+zmnVFDomr4Is9eyPIl1aqilMaYJ8ALWLzmnTtX8XPnL+lGs2Y1fYb14NQXyqonhO2NMzPHjemCpMaZJla8MY8xUdubfyXEf5/fVWQ7UdJmFWDW3rcea9WlRJYcGxpg3sU7LlTiPKyKNsF543chn97Vy7VzGrNSp8hux1n46X7jXA8Oq1NrIGHOqM0CVx6k6q7CeU05dsNdP1dJyan6sLsaaebkIaGo/7z/B8Zw1xowxxhyH9cfLB8B4Eclk788rjDHvG2NOwXoc/wG8KTUv2J8O7Omds69gnapug3Wqsar1WLO6zlyy7XzWYD02LeznVaVOezheDlYj5NXlRPY6XlUZY+YaY35rjGmDdar2OuCyWuS2HnitynGyTN3ebfw21unwg40xWVizvrDr7zOvnr+9sGawlQoMbfqiLRtrxmsTUCEivwaqu9bUEBEZLNYC+8FYa/hedsQowjrtmoH1F3kQLukwDsiwF5pnw443blwIYL8gTgRGiEhTe6H4X/cScyRwp4gcZ49Ftuy8bMwmrBeD7o79/wcsAJ4V+80G9rHOFZFMu/l5A7hfRNrZTYVzlmxf/Yj1houj7TzPB471IC7AcLGuK1e5fjOFnTNqTwJ/EZF+IpIkIuki0l9E+tbxGGOAP4lITxFJtWejDwb+XYcYI4FhInKWHSNTRI63t2VjnfLMwZr4OxvrFCpYNxwhIseKSAOsU3mVs2Qx9vK8ssfmVBFpZIwpx1rTKOycWa7qPeAIqeZd6ADGmK1YjcfJdryqXgb6icgf7BpFRDqIyFn29u+xZpn+YW9vB9xT06AZYwzWWrO/ifXGHhGRliLSv6b77MUex6sqEUkT681SlW/0yMUau4pa5PYscIH9/yvNfu53FZFT6pBvNtYfrXki0hp4oO4l8ybQW0SG2c+9XljrVF901JkFHIG1rECpwNCmL7oM1psrXgK+wTrNcCNQ3bWmXsI6BbwN65fu740xlaeA78H6RbkJ67TLBqo/ZVMjsS4O6+kFX+3TWUdj/cU9V0TygKns2vwMxXpBWY61uLumU3CVMUdhNTpPY43Fz1izMBjr2lv/B7wq1jv2/m6MqcBqJoqB7+1TVbOxmmZjh70Za2ZhHtai/QXUcfyqyXMyVgP7PtbjMhD4r5uYDs9jNV9bsNZmnmqMybOPOxLrRfIFe/sarGuR1fWiw//Aes59gNWYXQacYoyp9UyfMeZzrD9g7rZjrMB6vMGaPZuCNe7rsda4OV98GwGPAxuxHudhwNnGmOJaPK/SgLuANfa2f2C9qWF5DXkuBr60a6yplh+NMXNr2LYSGID1PPzFzvczrDfBYDeKQ7BOfa7H+kNnTHWxHO7FGqO3sBreH4F+e7lPTbnX5v9hVedhvTN7OzDZzqXymoU15maMmYY1DtdgPfc2Y60v7FiHlH+H9TzJByZgNa11Yj/Wp2C9GSUH67k1CnjCsdtQ4Ev78VcqMMT640pFiYi8Cyw2xvypFvtOwjp9dJ/feSlVH4l1rb5Psd7xuz3R+Sh/2TPIP2G9gasuayeV8p2+kSNixLpG3LHAa4nORSkF9gt/1TVgKqLsswKd97qjUgmgp3cjRERewDqV+zLVLwpXSimlVD2lp3eVUkoppeoBnelTSimllKoHtOlTSimllKoH9I0cDqmpqebQQw/19RgLF1pv5urevfte9gxWbD8FNW+v8vKyPrexgjrWbkW1LqWCYvr06TnGmJZ731MFmTZ9Dl26dOHHH/29gPrUqdZF6gcMGBCq2H4Kat5e5eVlfW5jBXWs3YpqXUoFhVgfyahCTt/I4dCvXz/jd9OnlFJKhY2ITDfG7NNFvFVw6Jo+h6KiIt+PMW/ePObNmxe62H4Kat5e5eVlfW5jBXWs3YpqXUop5SWd6XNo3Lixyc/P3/uOLgwcOBCASZMmhSq2n4Kat1d5eVmf21hBHWu3olqXUkGhM33RoGv6HNq3b+/7MUaMGBHK2H4Kat5e5eVlfW5jBXWs3YpqXUop5SWd6XPQNX1KKaXU7nSmLxp0TZ9DYWGh78eYNWsWs2bNCl1sPwU1b6/y8rI+t7GCOtZuRbUupZTyks70OeiavsQIat66pi88olqXUkGhM33RoE2fw8EHH2zmz5/v6zEqZyP69OkTqth+CmreXuXlZX1uYwV1rN2Kal1KBYU2fdGgTZ+DrulTSimldqdNXzTomj6H7du3+36MadOmMW3atNDF9lNQ8/YqLy/rcxsrqGPtVlTrUkopL+lMn4Ou6UuMoOata/rCI6p1KRUUOtMXDdr0OfTs2dP89NNPvh6j8lMDevXqFarYfgpq3l7l5WV9bmMFdazdimpdSgWFNn3RoE2fg67pU0oppXanTV806Jo+h4KCAt+PMXXqVKZOnRq62H4Kat5e5eVlfW5jBXWs3YpqXUop5SWd6XPQNX2JEdS8dU1feES1LqWCYMrqKRzX4Tid6YsAbfocevXqZSrXBvll4cKFAHTv3j1Usf0U1Ly9ysvL+tzGCupYuxXVupRKJGMML859kX/O/Cdzr5irTV8EaNPnoGv6lFJKKSgsK+Teqffy2fLPGHzAYEYcN0KbvgjQNX0Ofp/aBZg8eTKTJ08OXWw/BTVvr/Lysj63sYI61m5FtS6lEmFNwRou++QyPl/+Obf0vYW//fpviU5JeURn+hx0TV9iBDVvXdMXHlGtS6l4m7Z+GrdMuoWKWAV/P+7vHLPfMYC+ezcqtOlz6N27t5k7d66vx1i6dCkAnTt3DlVsPwU1b6/y8rI+t7GCOtZuRbUupeLFGMO/f/43I6aNoGNWR576zVN0zOq4Y7s2fdGgTZ+DrulTSilV35RWlPLQdw/x7pJ3Gdh+IH/99V9plNZol3206YuGlEQnECR5eXm+H2PChAkADBo0KFSx/RTUvL3Ky8v63MYK6li7FdW6lPLbpsJNDJ80nDmb5nDNIddwXZ/rSBJd7h9VOtPnoGv6EiOoeeuavvCIal1K+WnuprkM/2o4+WX5PPSrhzip00k17qszfdHga9MnIqcDDwJif91vjBknIt2AV4HmwGbgMmPMYvs+cd3mdMghh5g5c+b4MRQ7rFq1CoAOHTqEKrafgpq3V3l5WZ/bWEEda7eiWpdSfnl/yfs88O0DtMxsycjjR9K92Z6vcalNXzT41vSJiABbgF8bY+aJyCHAN0A2MAEYY4x5Q0SGAlcZY35j3+/LeG5z0jV9Simloqw8Vs4/fvwHbyx4gyPbHMmI40bQNKPpXu+nTV80+N305QBnGGO+EZFjgReBY4BFQHNjTIWIJGPNvh2INRsYt23GmE3OnLt162YWLVrky3hU+vTTTwE45ZRTQhXbT0HN26u8vKzPbaygjrVbUa1LKS9tK97GbVNu4/t13zO0x1Bu7XcrKUm1W9qvTV80+H169wRgLLAdaAycCpQBrxljejr2mw8MxWrQ4rbNGDPDma+u6UuMoOata/rCI6p1KeWVRVsXceOXN7KxcCP3Hn0vZ3U9q07316YvGnx7966IpAB3AmfaM32/At4GLvXrmG5lZ2fTr9/O5/SwYcMYNmyYp8d46623PI0Xr9h+CmreXuXlZX1uYwV1rN2Kal1KeeGLFV9w1//uolFqI1455RUOaXlIolNSCeLn6d1+WDNsBztuWwBcAXxGAE/v6po+pZRSUWGM4dnZz/L87Oc5pOUhPDHwCVplttqnWDrTFw1+XoxnNdBeRLoDiEgPoDWwGJgFXGzvdzEw0xizyRizMZ7bqiacm5vrvuq9GD9+POPHjw9dbD8FNW+v8vKyPrexgjrWbkW1LqX2VXmsnHu+uYfnZz/PWV3P4uWTX97nhk9Fh99r+i4B7gBi9k1/Mca8JyIHYV1CpSmwFesSKgvt+8R1m5Ou6UuMoOata/rCI6p1KbUvisqLuH3y7UxePZnr+lzHHw75A9Z7K/edzvRFg16c2aFPnz5m1qxZvh4jJycHgBYtWoQqtp+CmrdXeXlZn9tYQR1rt6Jal1J1lVuSyw0Tb2BOzhzuOvIuLuh+gSdxtemLBm36HHRNn1JKqbBav309f/jiD6zMX8nfj/07gzp697GE2vRFg372rsO2bdt8P8a4ceMAOOecc0IV209BzdurvLysz22soI61W1GtS6naWrptKddMuIaC0gJeOPEF+rfpn+iUVADpTJ+DrulLjKDmrWv6wiOqdSlVG7M2zuKGL28gNSmV5wc9v9ePVNsXOtMXDdr0ORx22GFm5syZvh6j8h3C2dnZoYrtp6Dm7VVeXtbnNlZQx9qtqNal1N5MWT2FWyfdSqvMVjx/4vN0aOzP509r0xcNenrXITk52fdj+PmiFNYXvKDm7VVeXtbnNlZQx9qtqNal1J588MsH3PvNvXRv1p1nT3iW5g2aJzolFXDa9Dls3brV92OMHTsWgAsvvDBUsf0U1Ly9ysvL+tzGCupYuxXVupSqycvzXubx6Y9zZNsjGXn8SBqmNkx0SioE9PSug67pS4yg5q1r+sIjqnUpVVXMxHj8x8d5df6rnNLpFB4+5mHSktN8P66e3o0GbfocDj/8cDNjxgxfj1FYWAhAZmZmqGL7Kah5e5WXl/W5jRXUsXYrqnUp5VQWK+Peb+7lw6Uf8tuDfsufj/gzSeLnB2vtpE1fNOjpXYekJP//8/j5ohTWF7yg5u1VXl7W5zZWUMfarajWpVSlwrJCbpl8C9+s+YYbD7uRq3tf7fpTNlT9o02fw5YtW3w/xhtvvAHA0KFDQxXbT0HN26u8vKzPbaygjrVbUa1LKYCtxVu5fuL1/LT5J+47+j7O7XZuolNSIaWndx10TV9iBDVvXdMXHlGtS6m1BWu55otrWLd9HX8/9u/8Zv/fJCQPPb0bDdr0OfTt29dMnz7d12OUlZUBkJqaGqrYfgpq3l7l5WV9bmMFdazdimpdqn5bvHUxf5jwB4rKivjnCf+kb+u+CctFm75o0NO7DvFYH+Hni1JYX/CCmrdXeXlZn9tYQR1rt6Jal6q/ZmyYwQ1f3kBGcgavDH6Fbk27JTolFQHxedtPSGzevNn3Y7zyyiu88soroYvtp6Dm7VVeXtbnNlZQx9qtqNal6qdJqyYx7IthNM9ozuunvq4Nn/KMnt510DV9iRHUvHVNX3hEtS5V/7y7+F3u//Z+ejTrwTODnqFZRrNEpwTo6d2o0KbPoV+/fubHH39MdBpKKaXqGWMML817iZEzRjKg3QCeGPgEmanBuRSRNn3RoGv6lFJKqQSKmRgjpo3gjQVvcOoBp/LQrx4iNVnXqSrvadPnkJOT4/sxRo8eDcDvf//7UMX2U1Dz9iovL+tzGyuoY+1WVOtS0VdWUcZd39zFJ8s+YWiPodze//a4fcqGqn/09K5DVlaWycvL8/UYgwYNAmDChAmhiu2noObtVV5e1uc2VlDH2q2o1qWibXvZdm7+6ma+Xfctww8fzlW9rgrsp2zo6d1o0KbPQdf0KaWUiofCskKu+eIa5ubM5S9H/4WzDzw70SntkTZ90aCnd5VSSqk4Kiov4oYvb2BuzlxGHDeCEzuemOiUVD2hTZ/Dpk2bfD/Gs88+C8B1110Xqth+CmreXuXlZX1uYwV1rN2Kal0qekoqSrjpy5uYvmE6fz3mr9rwqbjS07sO2dnZJjc319djDB48GIBPPvkkVLH9FNS8vcrLy/rcxgrqWLsV1bpUtJRVlHHTVzfx9ZqveehXD3Fm1zMTnVKt6endaNCmz0HX9CmllPJDWayM2ybdxpervuTeo+/l/G7nJzqlOtGmLxr0feFKKaWUj8pj5dz59Z18uepL7jjijtA1fCo6tOlz2Lhxo+/HGDlyJCNHjgxdbD8FNW+v8vKyPrexgjrWbkW1LhV+FbEK7vnmHj5b/hm39r2VS3pckuiUVD2mTZ+D39foA5g4cSITJ04MXWw/BTVvr/Lysj63sYI61m5FtS4VbjET44HvHuDDpR/yx8P+yBW9rkh0Sqqe0zV9DrqmTymllBeMMTz8/cOMXTiWaw65hhsOuyHRKbmia/qiQWf6lFJKKQ8ZYxjx4wjGLhzLlT2v5Po+1yc6JaUAbfp2sWHDBt+P8dhjj/HYY4+FLrafgpq3V3l5WZ/bWEEda7eiWpcKH2MMI2eM5PX5r3NJj0u4ue/Ngf1oNVX/6MWZHQoKCnw/xrfffhvK2H4Kat5e5eVlfW5jBXWs3YpqXSp8np/9PC/Ne4nzu53Pn/v/WRs+FSi6ps9B1/QppZTaVy/OfZGRM0ZyVtezuH/A/SRJdE6m6Zq+aIjOM1IppZRKkNd+eo2RM0Zy6gGnct/R90Wq4VPRoc9Kh/Xr1/t+jEcffZRHH300dLH9FNS8vcrLy/rcxgrqWLsV1bpUOLz181uM+HEEJ3Y8kYePeZjkpOREp6RUtXxb0ycinYD3HDc1AbKMMc1EpBvwKtAc2AxcZoxZbN8vrtucCgsLvRuAGsyaNSuUsf0U1Ly9ysvL+tzGCupYuxXVulTw/XfRf3n4+4cZ2GEgfzv2b6Qk6VJ5FVxxW9MnIk8CKcaYG0TkS2CMMeYNERkKXGWM+Y29X1y3OemaPqWUUrU1/pfx3PW/uxiw3wCeOv4p0pLTEp2Sb3RNXzTEpekTkTRgDXAysBpYBDQ3xlSISDLW7NuBgMRzmzFmkzNPbfqUUkrVxqfLPuXPX/+Z/q378/QJT5ORkpHolHylTV80xGse+gxgjTFmhoj0tb+vALAbsbVAB6wGLZ7bdmn6lixZQr9+O5/Tw4YNY9iwYZ4OxIMPPgjAPffc42lcv2P7Kah5e5WXl/W5jRXUsXYrqnWpYJq4YiJ3fH0HfVr24anfPBX5hk9FR7yavquAMXE61j5LTk7G75m+hQsXhjK2n4Kat1d5eVmf21hBHWu3olqXCp4pq6dw25Tb6NmiJ88OepbM1MxEp6RUrfl+eldE9sM6vbq/MWaziLRCT+8qpZQKmalrpvLHL/9I16ZdGX3SaLLSshKdUtzo6d1oiMclWy4HPjLGbAYwxmwEZgEX29svBmYaYzbFe5v3pSqllIqiaeuncdNXN9EpuxOjThxVrxo+FR3xmOlbBNxojPnUcdtBWJdQaQpsxbqEysJEbHNq166dWbt2redj4HTvvfcC8MADD4Qqtp+CmrdXeXlZn9tYQR1rt6JalwqGmRtncs0X19CuYTvGnDKGZhnNEp1S3OlMXzT4vqbPGNOtmtt+Bo6sYf+4bnMqLS3d2y6urVq1KpSx/RTUvL3Ky8v63MYK6li7FdW6VOL9tPknrp1wLa0yWzH6pNH1suFT0aGfveuga/qUUkpVWluwlks+voS0pDReHfwqbRq2SXRKCaMzfdGglw5XSimlqsgvzef6iddTUl7Ci6e+WK8bPhUd2vQ5rFmzxvdj3HnnnQD89a9/DVVsPwU1b6/y8rI+t7GCOtZuRbUulRhlsTJunXQry3OX89yJz9GlSZdEp6SUJ7TpcygvL/f9GJs3bw5lbD8FNW+v8vKyPrexgjrWbkW1LhV/xhge/u5hvl33LQ8MeICj2h6V6JSU8oyu6XPQNX1KKVW/jZk3hiemP8Hve/+eGw+/MdHpBIau6YuGeFynTymllAq8z5Z/xhPTn2Bwp8HccNgNiU5HKc9p0+ewevVq349x2223cdttt4Uutp+CmrdXeXlZn9tYQR1rt6Jal4qfWRtn8X9f/x99WvbhwWMeJEn05VFFj67pc4jFYr4fo6ioKJSx/RTUvL3Ky8v63MYK6li7FdW6VHysyl/FTV/dROuGrRn5m5GkJ6cnOiWlfKFr+hx0TZ9SStUvuSW5XPrJpWwu2swbp77BAdkHJDqlQNI1fdGgM31KKaXqpbKKMm6ZdAur8lcx+sTR2vCpyNOmzyEeH+U0fPhwAJ588slQxfZTUPP2Ki8v63MbK6hj7VZU61L+McZw37f38cP6H3jkmEfo10YnsVT06UpVpZRS9c6oOaP44JcPuO7Q6xjSZUii01EqLnRNn4Ou6VNKqej7aOlH3PH1HQzpPISHj3kYEUl0SoGna/qiQWf6lFJK1RvTN0znnm/uoV/rftw34D5t+FS9ok2fw8qVK30/xvXXX8/1118futh+CmreXuXlZX1uYwV1rN2Kal3KWyvyVnDTVzexX6P9ePL4J0lLTkt0SkrFlb6RwyEpyf8euEGDBqGM7aeg5u1VXl7W5zZWUMfarajWpbyzrXgb1024jiSSePaEZ8lOz050SkrFna7pc9A1fUopFT0lFSUM+3wY83Lm8dLJL9GnVZ9EpxQ6uqYvGnSmTymlVGQZY7jnm3uYsXEGI44doQ2fqtd0TZ/DihUrfD/GsGHDGDZsWOhi+ymoeXuVl5f1uY0V1LF2K6p1KfeemfUMnyz7hJsOv4lTDjgl0ekolVA60+eQkuL/cDRv3jyUsf0U1Ly9ysvL+tzGCupYuxXVupQ77y95nxfmvMA5B57D73r9LtHpKJVwuqbPQdf0KaVUNPyw7geumXANfVv35blBz5GalJrolEJN1/RFg57eVUopFSlLty1l+KThdGzckccHPq4Nn1I2bfocli9f7vsxrrzySq688srQxfZTUPP2Ki8v63MbK6hj7VZU61J1t7loM9dNvI60pDSeGfQMWWlZiU5JqcDQNX0OaWn+X6izQ4cOoYztp6Dm7VVeXtbnNlZQx9qtqNal6qa4vJgbv7qRzUWbGXPyGPZrtF+iU1IqUHRNn4Ou6VNKqXCKmRi3Tb6NCSsm8MTAJzih4wmJTilSdE1fNOjpXaWUUqE3csZIvljxBbf2u1UbPqVqoE2fw7Jly3w/xtChQxk6dGjoYvspqHl7lZeX9bmNFdSxdiuqdanaGf/LeMbMG8OF3S/ksoMvS3Q6SgWWrulzyMjI8P0Y3bt3D2VsPwU1b6/y8rI+t7GCOtZuRbUutXdLti7hwe8epG/rvtxxxB2ISKJTUiqwdE2fg67pU0qp8CgsK+Sijy4irySPd4a8Q8vMlolOKbJ0TV806EyfUkqp0DHGcN/U+1iRt4LRJ47Whk+pWtA1fQ5Lly71/RgXXXQRF110Uehi+ymoeXuVl5f1uY0V1LF2K6p1qZqNXTiWT5Z/wg19buCItkckOh2lQkFn+hwyMzN9P0afPn1CGdtPQc3bq7y8rM9trKCOtVtRrUtV76ecn/j7tL/z6/1+ze9662fqKlVbuqbPQdf0KaVUsOWW5HLB+AswGN4+/W2aZDRJdEr1gq7piwZfT++KSIaIPCcii0VkroiMsm/vJiLfisgi+98DHfeJ6zallFLhEDMx7vrfXWws2sg/jvuHNnxK1ZHfa/r+DhQD3YwxvYF77NufB54xxnQDngFecNwn3tt2+OWXX/apyLo499xzOffcc0MX209BzdurvLysz22soI61W1GtS+3q5XkvM3n1ZG7vdzu9W/ZOdDpKhY5va/pEpBFwGdDe2OeQjTEbRKQVcDhwor3rm8DTItISkHhuM8ZscubcqFEjr8qv0dFHHx3K2H4Kat5e5eVlfW5jBXWs3YpqXWqnaeun8dTMpzi508lcfNDFiU5HqVDybU2fiBwKjLO/jgcKgLuBIuA1Y0xPx77zgaFYDVrcthljZjhz7tixo2nZcufb/ocNG8awYcNcjoRSSik3copyOH/8+TRKbcRbp79Fw9SGiU6p3tE1fdHg57t3k4HOwExjzO0iciQwHjjfx2O60rJlS/SNHEopFRzlsXL+NOVPFJQWMOrEUdrwKeWCn03fSqAc63QqxpjvRSQHa6ZvPxFJNsZUiEgy0A5YhTUrF89tu1iyZImPw2E544wzAPjggw9CFdtPQc3bq7y8rM9trKCOtVtRrUvBs7OeZdr6aTx8zMMc2FTfg6eUG741fcaYHBH5Cmst3eci0g1oBSwCZgEXA2/Y/86sXF8nInHd5pSVleXtIFTjhBNOCGVsPwU1b6/y8rI+t7GCOtZuRbWu+m7K6imMnjuacw88lzO6nJHodJQKPV+v0ycinYExQHOgDLjLGPOJiBwEvAo0BbYClxljFtr3ies2J71On1JKBcPagrWcP/582jVqx+uDXycjJSPRKdVruqYvGvTizA7a9CmlVOKVVpRyxadXsCx3GWNPH8v+WfsnOqV6T5u+aNCPYXNYvHix78cYPHgwAJ988kmoYvspqHl7lZeX9bmNFdSxdiuqddVXj/34GHNz5vLEwCe04VPKQ9r0OTRp0sT3YwwZMiSUsf0U1Ly9ysvL+tzGCupYuxXVuuqjT5d9yps/v8llB1/GoI6DEp2OUpGip3cd9PSuUkolzrLcZVz04UV0a9qNMaeMITUpNdEpKZue3o0Gvz+GTSmllNqrovIibpl0C+nJ6Yw4boQ2fEr5QE/vOixatMj3YwwaZJ2umDBhQqhi+ymoeXuVl5f1uY0V1LF2K6p11RfGGB767iF+2fYLzw96njYN2yQ6JaUiSZs+h2bNmvl+jAsvvDCUsf0U1Ly9ysvL+tzGCupYuxXVuuqLcYvH8cEvH3DtodcyYL8BiU5HqcjSNX0OuqZPKaXi6+ctP3PJR5fQt3Vfnhv0HMlJyYlOSVVD1/RFg67pU0oplRD5pfncMukWmmQ04dFjH9WGTymf6eldh4ULd/uQDs8NHDgQgEmTJoUqtp+CmrdXeXlZn9tYQR1rt6JaV5QZY7jnm3tYW7CWl095mWYZ/i+vUaq+06bPoUWLFr4f44orrghlbD8FNW+v8vKyPrexgjrWbkW1rih7ff7rTFw5kdv63cZhrQ5LdDpK1Qu6ps9B1/QppZT/Zm2cxZWfXslxHY7jiYFPICKJTkntha7piwZd0+cQjwa4rKyMsrKy0MX2U1Dz9iovL+tzGyuoY+1WVOuKoi3FW7h18q20bdSWB371gDZ8SsWRnt51iMd1+k488UTAn7VHfsb2U1Dz9iovL+tzGyuoY+1WVOuKmopYBXdMuYNtxdv412n/IistK9EpKVWvaNPn0LJlS9+PcfXVV4cytp+CmrdXeXlZn9tYQR1rt6JaV9SMmjOKb9d9y1+O/gsHNTso0ekoVe/omj4HXdOnlFL+mL5hOld+eiVDugzhoV89pKd1Q0bX9EWDrulziMVivh+jsLCQwsLC0MX2U1Dz9iovL+tzGyuoY+1WVOuKisKyQu7+393s12g/7jryLm34lEoQPb3rsHjxYt+PceqppwL+rD3yM7afgpq3V3l5WZ/bWEEda7eiWldUPD79cdYUrOHlU14mMzUz0ekoVW9p0+fQqlUr349x7bXXhjK2n4Kat1d5eVmf21hBHWu3olpXFExdM5WxC8dy+cGX07d130Sno1S9pmv6HHRNn1JKeSevNI+z3z+bRqmNeHvI26Qnpyc6JbWPdE1fNOhMn0NFRYXvx8jNzQUgOzs7VLH9FNS8vcrLy/rcxgrqWLsV1brC7m8//I3NRZsZefxIbfiUCgCd6XNo3Lixyc/P9/UY+tm7uwtq3vrZu+ER1brCbOLKiQz/ajjXHHINNxx2Q6LTUS7pTF806EyfQ+vWrX0/xo033hjK2H4Kat5e5eVlfW5jBXWs3YpqXWG1pXgLD3z7AD2a9eCaQ65JdDpKKZvO9Dnomj6llHLHGMOtk29l0qpJvHX6W3Rr2i3RKSkP6ExfNOh1+hzKy8t9P0ZOTg45OTmhi+2noObtVV5e1uc2VlDH2q2o1hVGHy/7mC9WfMH1fa7Xhk+pgNGZPgdd05cYQc1b1/SFR1TrCpuNhRs56/2z6JzdmVdPeZXkpOREp6Q8ojN90aBr+hzatGnj+zFuvfXWUMb2U1Dz9iovL+tzGyuoY+1WVOsKE2MMf5n6F8oqynj4mIe14VMqgHSmz0HX9Cml1L75z6L/cP+393PnEXfy2x6/TXQ6ymM60xcNuqbPoayszPdjrF+/nvXr14cutp+CmrdXeXlZn9tYQR1rt6JaV1iszl/NiGkjOLLNkVx00EWJTkcpVQOd6XPQNX2JEdS8dU1feES1rjCImRi/++x3LNiygHFnjKNdo3aJTkn5QGf6okHX9Dm0bdvW92PccccdoYztp6Dm7VVeXtbnNlZQx9qtqNYVBv9e8G9+3PAjDwx4QBs+pQJOZ/ocdE2fUkrV3tLcpVww/gKOansU//zNPxGRRKekfKIzfdGga/ocSktLfT/GqlWrWLVqVehi+ymoeXuVl5f1uY0V1LF2K6p1BVl5rJy7/3c3GSkZ/OXov2jDp1QI6Eyfg67pS4yg5q1r+sIjqnUF2eg5o3lq5lOMOHYEpxxwSqLTUT7Tmb5o8HVNn4gsB4rtL4A/G2M+E5GjgBeABsByYKgxZqN9n7huc4rHmr677747lLH9FNS8vcrLy/rcxgrqWLsV1bqCauGWhTw7+1lO6XSKNnxKhYivM31203e6MWae47YkYBFwhTHmfyJyN9DZGHNVvLdVzVfX9Cml1J6VVpRy8UcXs7loM++d+R5NMpokOiUVBzrTFw2JWNPXFyg2xvzP/vl54IIEbdtFSUnJPhdVW0uXLmXp0qWhi+2noObtVV5e1uc2VlDH2q2o1hVEz89+nkVbF3HfgPu04VMqZOJxyZZ/ibXC93/A/wH7AysqNxpjckQkSUSaxXubMWaLM9HFixfTr9/OP2SGDRvGsGHDPBoGy1VXWROMfqw98jO2n4Kat1d5eVmf21hBHWu3olpX0MzZNIeX5r3EWV3PYmCHgYlORylVR343fb82xqwSkXTgSeBp4F2fj7nPOnbsiN+nd++///5QxvZTUPP2Ki8v63MbK6hj7VZU6wqSovIi7vrfXbTObM2f+/850ekopfZB3N69KyK9gQ+wTq2+bIzpZd/eAlhujGkkIv3jua1qjrqmTymlqve3H/7GGwveYPRJozmq7VGJTkfFma7piwbf1vSJSEMRyba/F+AiYBYwHWggIsfYu/4BeMf+Pt7bdlFcXFzdzZ5auHAhCxcuDF1sPwU1b6/y8rI+t7GCOtZuRbWuoPhh3Q+8seANLj7oYm34lAox32b6RKQz8F8g2f6aD9xojFknIgOwLqGSwc5LqGyw7xfXbU56nb7ECGreep2+8IhqXUGwvWw757x/DilJKbwz5B0yUzMTnZJKAJ3piwa9OLPDQQcdZH7++WdfjzF16lQABgwYEKrYfgpq3l7l5WV9bmMFdazdimpdQXDf1Pt4d8m7vHrKq/Rp1SfR6agE0aYvGrTpc9A1fUoptdOU1VO4fuL1XNXrKm7ue3Oi01EJpE1fNOhn7zoUFRX5fox58+Yxb968ve8YsNh+CmreXuXlZX1uYwV1rN2Kal2JlFuSy31T76Nrk65c3+f6RKejlPKAzvQ56Jq+xAhq3rqmLzyiWlci/XnKn/l8+ef8+7R/06N5j0SnoxJMZ/qiIR4XZw6N9u3b+36MESNGhDK2n4Kat1d5eVmf21hBHWu3olpXokxeNZmPl33MdX2u04ZPqQjRmT4HXdOnlKrvisqLOPv9s8lIzuCdIe+Qmpya6JRUAOhMXzToTJ9DYWGh78eYNWsWAH369AlVbD8FNW+v8vKyPrexgjrWbkW1rkQYPWc0awrWMObkMdrwKRUxOtPnoGv6EiOoeeuavvCIal3xtix3Ged8cA6DOw3mkV8/kuh0VIDoTF80aNPncPDBB5v58+f7egyd6dtdUPPWmb7wiGpd8WSM4fef/575W+bzwVkf0KJBi0SnpAJEm75oqHPTJyJpQDNjzHp/UkocXdOnlKqvPl76MX/++s/cfeTdXHjQhYlORwWMNn3RUKvr9InIWyKSLSINgHnAfBG5zd/U4m/79u2+H2PatGlMmzYtdLH9FNS8vcrLy/rcxgrqWLsV1briJb80nxE/jqBn856c1+28RKejlPJJrWb6RGSmMeYwETkPGATcAnxnjDnE7wTjSdf0JUZQ89Y1feER1bri5dEfHuXfC/7Nm6e9Sc8WPROdjgognemLhtq+e7fyLVzHAR8bYwpFJOZTTgmz//77+36Mp59+OpSx/RTUvL3Ky8v63MYK6li7FdW64mHB5gW8+fObXND9Am34lIq42s70vQ00BnoAPYEY8K0xpo+v2cWZrulTStUnMRPj0o8vZXXBasafPZ6stKxEp6QCSmf6oqG2M32XAycDs40x20VkP+AO/9JKjIKCAt+PMXXqVAAGDBgQqth+CmreXuXlZX1uYwV1rN2Kal1+G7d4HHNy5vDIMY9ow6dUPVDrd++KSDeghzHmfRFpDKQaY7b4ml2c6Zq+xAhq3rqmLzyiWpefthRvYci7Q+jWtBtjTh6DiCQ6JRVgOtMXDbU9vXs5cCeQZozpLCLdgWeMMYP8TjCeevXqZebNm+frMRYuXAhA9+7dQxXbT0HN26u8vKzPbaygjrVbUa3LT/d8cw8f/vIh/znjP3Rp0iXR6aiA06YvGmr97l3g18DXxpjD7NvmGWN6+ZxfXOmaPqVUfTBjwwwu//Ryrup1FTf3vTnR6agQ0KYvGmp1nT6g1BhTdcFbudfJJJrfp3YBJk+ezOTJk0MX209BzdurvLysz22soI61W1Gtyw9lsTIe/O5B2jRswzWHXJPodJRScVTbmb6PgeHAW8aYw0VkKHCRMeZ0n/OLK13TlxhBzVvX9IVHVOvyw6s/vcpjPz7Gk8c/yQn7n5DodFRI6ExfNNS26esG/Bvrki2bgEJgiDHmF3/Ti6/evXubuXPn+nqMpUuXAtC5c+dQxfZTUPP2Ki8v63MbK6hj7VZU6/La+u3rOfO9M+nfpj///M0/9c0bqta06YuGurx7NxnoBgiw0BhT4WdiiaBr+pRSUXbrpFuZvHoy7535Hu0bt090OipEtOmLhtp+9m43rEu0LAA6ALeLSFNfM0uAvLw8348xYcIEJkyYELrYfgpq3l7l5WV9bmMFdazdimpdXvpmzTd8vuJzhh0yTBs+peqp2p7enQX0B9oDXwGfA22MMWf4ml2c6Zq+xAhq3rqmLzyiWpdXSipKOPv9s0mWZP57xn9JS05LdEoqZHSmLxpq2/TNsN/AcQOQaYz5u4jMitrHsB1yyCFmzpw5vh5j1apVAHTo0CFUsf0U1Ly9ysvL+tzGCupYuxXVurzy3KzneHb2s4w6cRRHtzs60emoENKmLxpq+zFsGSLSGhgC3GXfFrkVwGlp/v/16+eLUlhf8IKat1d5eVmf21hBHWu3olqXF1bmreTFuS8yuNNgbfiUqudqe52+J4GFQIEx5kcR6Qzk+pZVgsRjTd+nn37Kp59+GrrYfgpq3l7l5WV9bmMFdazdimpdbhljeOT7R0hNTuX2/rcnOh2lVILV+t27u9xJJAlIMcaUep9S4uiavsQIat66pi88olqXW1+s+IJbJt3CHUfcwSU9Lkl0OirE9PRuNNTlki3dgUOBjMrbjDGv+ZRXQhx66KFm9uzZvh5j/fr1ALRp0yZUsf0U1Ly9ysvL+tzGCupYuxXVutzYXradM947g2YZzXjztDdJSartah6ldqdNXzTU6reAiNwIXAO0BaZhfQ7vZCBSTV9qaqrvx/DzRSmsL3hBzdurvLysz22soI61W1Gty43nZz/PxsKNPD7wcW34lFJA7df0DQOOAFYaY062v/f/g2rjLDfX/2WK48ePZ/z48aGL7aeg5u1VXl7W5zZWUMfarajWta8WbV3E6/Nf59wDz+XQlocmOh2lVEDU9pItPxpj+onIHOBQY4yJ4iVbdE1fYgQ1b13TFx5RrWtfxEyMKz69gmW5yxh/1niaZDRJdEoqAvT0bjTUtumbApwAjAHWAauAYcaY3v6mF199+vQxs2bN8vUYOTk5ALRo0SJUsf0U1Ly9ysvL+tzGCupYuxXVuvbFe0ve455v7uGBAQ9w9oFnJzodFRHa9EXDHps++/N204HOwDKgIfAIkA08aoyZHo8k40U/e1cpFWa5JbkMeXcInbI78copr5AktV3Bo9SeadMXDXv7jfAo8FtjzDxjzHZjzEZjzNXAp8CFtT2IiPxFRIyI9LJ/PkpEZovIIhH5XERaOfaN6zanbdu21bakfTZu3DjGjRsXuth+CmreXuXlZX1uYwV1rN2Kal11NXLGSPJK87jryLu04VNK7WZvM33Tgf7GmFiV25OAOcaYXns9gMjhwMNAD+B0YD6wCLjCGPM/Ebkb6GyMucqOG7dtVXPVNX2JEdS8dU1feES1rrqYs2kOQz8eyqUHX6oXYlae05m+aNhb01fjmzVEZI4x5pA9BhdJByYBF9v/ng40AF6ubBhFpAWw3BjTSET6x3Nb1XwPO+wwM3PmzD2V5FrlO4Szs7NDFdtPQc3bq7y8rM9trKCOtVtRrau2KmIVXPzRxWwu2swHZ39Aw9SGiU5JRYw2fdGwt4s3NRCRTGNMofNGEWmEtdZvbx4A3jDGLBfZ8VG9+wMrKn8wxuSISJKINIv3NmPMFmeyycnJtSjJHT9flML6ghfUvL3Ky8v63MYK6li7FdW6auuthW+xYMsCHjvuMW34lFI12tuij7HAqyKSVXmDiGQDLwLv7OmOInI00A941m2S8bJixQr69eu342vUqFGeH2Ps2LGMHTvW87h+x/ZTUPP2Ki8v63MbK6hj7VZU66qNnKIcnp75NAPaDeCkjiclOh2lVIDt7fRuCvAKcCaw2L75QOAD4HJjTPke7nsHcCNQ+fm87YENwFPApUE8vatr+hIjqHnrmr7wiGpdtfHAtw/w7uJ3ee+s9+iY1THR6aiI0tO70VDb6/R1BQ6zf5xpjFlS5wOJLGfnGzkWYzWNlW+s6GKMudJ+00XctlXN8fDDDzczZsyoa2l1UlhonSnPzMwMVWw/BTVvr/Lysj63sYI61m5Fta69WbptKed8cA4Xdr+QO4+8M9HpqAjTpi8aavWBjHaTV+dGr4ZYMRG5FHhBRDKA5cDQRGyrKinJ/0sc+PmiFNYXvKDm7VVeXtbnNlZQx9qtqNa1N0/OeJIGKQ245tBrEp2KUioE4vYp3MaYTo7vpwLVfppHvLc5bdmyZW+7uPbGG28AMHRotX1nYGP7Kah5e5WXl/W5jRXUsXYrqnXtyfQN0/lq1VfcdPhNNMtoluh0lFIhUKvTu/WFrulLjKDmrWv6wiOqddXEGMPQj4eyvnA9H579IQ1SGiQ6JRVxeno3GrTpc+jbt6+ZPt3fT5YrKysDIDU1NVSx/RTUvL3Ky8v63MYK6li7FdW6avL58s+5dfKt+vm6Km606YuGuJ3eDQPHtQR94+eLUlhf8IKat1d5eVmf21hBHWu3olpXdcoqyhg5YyRdm3TljC5nJDodpVSI6IczOmzevNn3Y7zyyiu88soroYvtp6Dm7VVeXtbnNlZQx9qtqNZVnXcWvcPK/JXc0vcWkpP8v6C8Uio69PSug67pS4yg5q1r+sIjqnVVlV+az2njTqNb026MPml0XM5OKAV6ejcqtOlz6Nevn/nxxx8TnYZSSlXrqRlPMXruaN46/S16Nu+Z6HRUPaJNXzTo6V2llAqB9dvX89r81zj1gFO14VNK7RNt+hxycnJ8P8bo0aMZPXp06GL7Kah5e5WXl/W5jRXUsXYrqnU5PTvrWWImxo2H35joVJRSIaWndx2ysrJMXl6er8cYNGgQABMmTAhVbD8FNW+v8vKyPrexgjrWbkW1rkqLti7i/PHnc2mPS7mt/22JTkfVQ3p6Nxq06XPQNX1KqSC6bsJ1zNo0i0/O+YTs9OxEp6PqIW36okFP7yqlVIB9v+57vl7zNcN6D9OGTynlijZ9Dps2bfL9GM8++yzPPvts6GL7Kah5e5WXl/W5jRXUsXYrqnXFTIzHpz9O24ZtubjHxYlORykVctr0OWzbts33Y4wfP57x48eHLrafgpq3V3l5WZ/bWEEda7eiWtcnyz5h/ub5/PGwP5KenJ7odJRSIadr+hx0TZ9SKihKK0oZ8u4QstKzGHv6WJJE/0ZXiaNr+qJBf4sopVQAvfnzm6zdvpZb+t6iDZ9SyhP6m8Rh48aNvh9j5MiRjBw5MnSx/RTUvL3Ky8v63MYK6li7FbW6cktyGTVnFL9q9yuObnd0otNRSkWENn0Ofl+jD2DixIlMnDgxdLH9FNS8vcrLy/rcxgrqWLsVtbpemvsS+aX53Nz35kSnopSKEF3T56Br+pRSiba2YC1D3h3CKQecwsPHPJzodJQCdE1fVOhMn1JKBcjTM59GRPjjYX9MdCpKqYjRps9hw4YNvh/jscce47HHHgtdbD8FNW+v8vKyPrexgjrWbkWlrgWbF/Dh0g8Z2mMobRq2SXQ6SqmISUl0AkFSUFDg+zG+/fbbUMb2U1Dz9iovL+tzGyuoY+1WVOp6YvoTZKdn87vev0t0KkqpCNI1fQ66pk8plSjfrPmGP0z4A3/u/2eGHjw00ekotQtd0xcNenpXKaUSrCJWwePTH6d9o/Zc2P3CRKejlIoobfoc1q9f7/sxHn30UR599NHQxfZTUPP2Ki8v63MbK6hj7VbY6/pw6Ycs2rqImw6/idTk1ESno5SKKF3T51BYWOj7MWbNmhXK2H4Kat5e5eVlfW5jBXWs3QpzXcXlxfxz5j/p1bwXJ3U6KdHpKKUiTNf0OeiaPqVUvL009yWenPEkY04eQ/82/ROdjlLV0jV90aCnd5VSKkG2Fm/lxbkvclz747ThU0r5Tps+h3Xr1vl+jAcffJAHH3wwdLH9FNS8vcrLy/rcxgrqWLsV1rpGzRlFYXmhftyaUioudE2fQ3Fxse/HWLhwYShj+ymoeXuVl5f1uY0V1LF2K4x1rcpfxVsL3+LsrmfTpUmXRKejlKoHdE2fg67pU0rFy+2Tb2fy6sl8ePaHtMpsleh0lNojXdMXDXp6Vyml4mzuprl8uvxTLjv4Mm34lFJxo02fw9q1a30/xr333su9994buth+CmreXuXlZX1uYwV1rN0KU13GGB6f/jjNMppxZa8rE52OUqoe0TV9DqWlpb4fY9WqVaGM7aeg5u1VXl7W5zZWUMfarTDVNWX1FH7c8CN3HXkXDVMbJjodpVQ9omv6HHRNn1LKT+Wxcs774DzKTTnvnvkuqUn66RsqHHRNXzT4enpXRN4TkdkiMlNEvhaRPvbt3UTkWxFZZP97oOM+cd2mlFLx8uHSD/kl9xfr49a04VNKxZnfa/ouN8Ycaow5DHgMGGPf/jzwjDGmG/AM8ILjPvHetsOaNWv2rco6uPPOO7nzzjtDF9tPQc3bq7y8rM9trKCOtVthqKs8Vs7oOaPp0awHg/YflOh0lFL1kK9r+owxuY4fs4GYiLQCDgdOtG9/E3haRFoCEs9txphNznzLy8vdF70XmzdvDmVsPwU1b6/y8rI+t7GCOtZuhaGuT5Z9wsr8lTx5/JOISKLTUUrVQ76v6RORF4GTsJqvU4AM4DVjTE/HPvOBofY+cdtmjJnhzLVjx46mZcuWO34eNmwYw4YNcz0GSqn6rSJWwVnvn0VachrvDHmHJNELJ6hw0TV90eD7u3eNMVcDiMilwAjgHr+Pua9atmyJvpFDKeW1z1d8zvK85Tx23GPa8CmlEiZul2wxxrwuIqOA1cB+IpJsjKkQkWSgHbAKa1Yuntt2sXr1ar+Hgdtuuw2Axx57LFSx/RTUvL3Ky8v63MYK6li7FeS6YibGqDmj6JLdhRM7nrj3OyillE98+5NTRBqJSAfHz0OALcBGYBZwsb3pYmCmMWaTMSau26rmHIvFXFa9d0VFRRQVFYUutp+CmrdXeXlZn9tYQR1rt4Jc18SVE1mybQnDDhmms3xKqYTybU2fiLQG3gcaAhVYDd9txpgZInIQ8CrQFNgKXGaMWWjfL67bnPQ6fUopL8VMjPPHn09pRSnvnfkeyUnJiU5JqX2ia/qiwbfTu8aYDcBRNWz7GTgyCNuUUsovk1ZNYtHWRTxyzCPa8CmlEk7PNTjE46Ochg8fzvDhw0MX209BzdurvLysz22soI61W0GsyxjD87Ofp0PjDgw+YHCi01FKKW36lFLKD1+v+ZoFWxbw+96/JyVJP+ZcKZV4+tm7DrqmTynlBWMMl3x8CVuKtzD+7PH6kWsq9HRNXzToTJ9SSnls6tqpzM2Zy9W9r9aGTykVGNr0OaxcudL3Y1x//fVcf/31oYvtp6Dm7VVeXtbnNlZQx9qtINVljOG52c/RpmEbzuxyZqLTUUqpHXShiUNSkv89cIMGDUIZ209BzdurvLysz22soI61W0Gq6/v13zN702zuPvJuUpN1lk8pFRy6ps9B1/Qppdy64tMrWJW3io/P/Zj05PREp6OUJ3RNXzTo6V2llPLItPXTmL5hOlf1vkobPqVU4GjT57BixQrfjzFs2DCGDRsWuth+CmreXuXlZX1uYwV1rN0KSl0vzHmB5hnNOffAcxOdilJK7UbX9DmkpPg/HM2bNw9lbD8FNW+v8vKyPrexgjrWbgWhrpkbZ/L9uu+5rd9tZKRkJDodpZTaja7pc9A1fUqpffWHL/7Agi0L+OScT8hMzUx0Okp5Stf0RYOe3lVKKZfmbJrDN2u/4fKel2vDp5QKLG36HJYvX+77Ma688kquvPLK0MX2U1Dz9iovL+tzGyuoY+1Wout6Yc4LNElvwkXdL0pYDkoptTe6ps8hLS3N92N06NAhlLH9FNS8vcrLy/rcxgrqWLuVyLp+2vwTU1ZP4cbDbtRZPqVUoOmaPgdd06eUqqsbv7yRHzf8yOfnfk6jtEaJTkcpX+iavmjQ07tKKbWPft7yM1+t+opLD75UGz6lVOBp0+ewbNky348xdOhQhg4dGrrYfgpq3l7l5WV9bmMFdazdSlRdo+aMolFqIy7pcUncj62UUnWla/ocMjL8v7ZW9+7dQxnbT0HN26u8vKzPbaygjrVbiahr8dbFfLHiC4YdMoystKy4H18ppepK1/Q56Jo+pVRt3T75dqasnsJn535Gk4wmiU5HKV/pmr5o0NO7SilVR0tzl/LZ8s+4+KCLteFTSoWGNn0OS5cu9f0YF110ERdd5M+1vPyM7aeg5u1VXl7W5zZWUMfarXjXNXrOaDJSMris52VxO6ZSSrmla/ocMjP9v8ZWnz59QhnbT0HN26u8vKzPbaygjrVb8axrRd4KPl72MZcdfBnNMprF7bhKKeWWrulz0DV9Sqm9uft/d/Pp8k/59NxPadGgRaLTUSoudE1fNOjpXaWUqqVV+av4cOmHnN/tfG34lFKho02fwy+//OL7Mc4991zOPffc0MX2U1Dz9iovL+tzGyuoY+1WvOp6ae5LJEsyV/aK3ucXK6WiT9f0OTRq5P8V9Y8++uhQxvZTUPP2Ki8v63MbK6hj7VY86lpbsJb3l7zP+d3Pp1VmK9+Pp5RSXtM1fQ66pk8pVZMHv32Qd5e8y8fnfEybhm0SnY5ScaVr+qJBT+8qpdRerN++nnFLxnF217O14VNKhZY2fQ5Llizx/RhnnHEGZ5xxRuhi+ymoeXuVl5f1uY0V1LF2y++6xswbAwZ+1/t3vh1DKaX8pmv6HLKy/P/8zBNOOCGUsf0U1Ly9ysvL+tzGCupYu+VnXRsLN/LfRf/ljK5n0K5RO9+Oo5RSftM1fQ66pk8pVdXffvgbb/78JuPPGk+HrA6JTkephNA1fdGgp3eVUqoGOUU5/GfRfzit82na8CmlQk+bPofFixf7fozBgwczePDg0MX2U1Dz9iovL+tzGyuoY+2WX3W99tNrlMZK+X3v33seWyml4s23NX0i0hx4HegClAKLgWuMMZtE5CjgBaABsBwYaozZaN8vrtucmjRp4ukYVGfIkCGhjO2noObtVV5e1uc2VlDH2i0/6tpSvIW3Fr7F4AMG0ym7k+fxlVIq3nxb0ycizYBDjDGT7J9HAM2A3wOLgCuMMf8TkbuBzsaYq0QkKZ7bquasa/qUUpWemfUMz89+nvfPfJ/OTTonOh2lEkrX9EWDb6d3jTFbKhs+23dAR6AvUGyM+Z99+/PABfb38d6mlFK7KS4v5u2FbzOw/UBt+JRSkRGXNX32bNu1wAfA/sCKym3GmBwgyZ4ZjPe2Xfz000/069dvx9eoUaM8qd9p0KBBDBo0yPO4fsf2U1Dz9iovL+tzGyuoY+2W13V9tPQjthRv4dKDL/UsplJKJVq8rtP3T6AAeBo4O07HrLPWrVvj9+ndCy+8MJSx/RTUvL3Ky8v63MYK6li75WVdxhjeWPAG3Zt2p3+b/p7FVUqpRPP9On0i8hhwCDDEGFMiIv2Bl40xveztLYDlxphG8d5WNVdd06eUmrpmKtdMuIaHj3mYM7pE79NLlNoXuqYvGnw9vSsij2CtqTvLGFNi3zwdaCAix9g//wF4J0HblFJqF6/Nf40WDVowuFP0Lm2jlKrf/LxkS0/gTqx3zk4VEYBlxpizReRS4AURycC+hAqAMSYWz21VLVy40ONR2N3AgQMBmDRpUqhi+ymoeXuVl5f1uY0V1LF2y6u6ftn2C9+s/YYb+txAanKq+8SUUipAfGv6jDE/AVLDtqlA7yBsc2rRosXednHtiiuuCGVsPwU1b6/y8rI+t7GCOtZueVXX6/NfJz05nQu66xv8lVLRo5+966Br+pSqv7YUb+HEd07kjK5n8Jej/5LodJQKFF3TFw36MWwO8WiAy8rKKCsrC11sPwU1b6/y8rI+t7GCOtZueVHX2wvfpjRWyqU99DItSqloitclW0Jh0aJFvh/jxBNPBPxZU+VnbD8FNW+v8vKyPrexgjrWbrmtq7SilLd+fotf7fcrvRizUiqytOlzaNmype/HuPrqq0MZ209BzdurvLysz22soI61W27r+mTZJ2wu3sxlB1/mUUZKKRU8uqbPQdf0KVX/GGM4b/x5xEyMcWeMw77SgFLKQdf0RYOu6XOIxWK+H6OwsJDCwsLQxfZTUPP2Ki8v63MbK6hj7Zabun5Y/wOLti7i0oMv1YZPKRVpenrXYfHixb4f49RTTwX8WVPlZ2w/BTVvr/Lysj63sYI61m65qev1+a/TLKMZp3U+zeOslFIqWLTpc2jVqpXvx7j22mtDGdtPQc3bq7y8rM9trKCOtVv7Wtey3GVMXj2Zaw+9lvTkdI+zUkqpYNE1fQ66pk+p+uWh7x5i3OJxfH7e57Ro4P/F2ZUKK13TFw26ps+hoqLC92Pk5uaSm5sbuth+CmreXuXlZX1uYwV1rN3al7pyS3L54JcPOK3zadrwKaXqBT2967BkyRLfj3HmmWcC/qyp8jO2n4Kat1d5eVmf21hBHWu39qWudxa9Q1F5EZcerBdjVkrVD9r0ObRu3dr3Y9x4442hjO2noObtVV5e1uc2VlDH2q261lVWUcabC97kqLZH0a1pN5+yUkqpYNE1fQ66pk+p+uHDpR9y59d38swJz3Bs+2MTnY5Sgadr+qJB1/Q5lJeX+36MnJwccnJyQhfbT0HN26u8vKzPbaygjrVbdanLGMNrP73GAdkHcMx+x/icmVJKBYfO9Dk0btzY5Ofn+3qMgQMHAv6sqfIztp+CmrdXeXlZn9tYQR1rt+pS14/rf+TKz67knqPu4YLuF/ibmFIRoTN90aBr+hzatGnj+zFuvfXWUMb2U1Dz9iovL+tzGyuoY+1WXep6ff7rZKdnM6TLEB8zUkqp4NGZPgdd06dUtK3KW8Vp757G1b2v5sbDo/mmFqX8oDN90aBr+hzKysp8P8b69etZv3596GL7Kah5e5WXl/W5jRXUsXartnX96+d/kZyUzEUHXRSHrJRSKlh0ps9B1/QlRlDz1jV94VGbuvJK8xj0ziAG7T+IR379SHwSUyoidKYvGnRNn0Pbtm19P8Ydd9wRyth+CmreXuXlZX1uYwV1rN2qTV3jFo3TizErpeo1nelz0DV9SkVTeaycweMG06FxB8acPCbR6SgVOjrTFw26ps+htLTU92OsWrWKVatWhS62n4Kat1d5eVmf21hBHWu39lbXhBUTWL99PZf20Fk+pVT9pTN9DrqmLzGCmreu6QuPvdV1yUeXsK1kG+PPHk+S6N+6StWVzvRFg67pc4jHmr677747lLH9FNS8vcrLy/rcxgrqWLu1p7pmbZzFnJw53HnEndrwKaXqNZ3pc9A1fUpFzy2TbuG7dd8x4bwJZKZmJjodpUJJZ/qiQf/sdSgpKfH9GEuXLmXp0qWhi+2noObtVV5e1uc2VlDH2q2a6lpTsIaJKydyXrfztOFTStV7OtPnoGv6EiOoeeuavvCoqa4R00bwrwX/4tNzP6VNQ/8/ZlGpqNKZvmjQNX0O7dq18/0Y999/fyhj+ymoeXuVl5f1uY0V1LF2q7q6CkoLGLd4HCd1OkkbPqWUQmf6dqFr+pSKjtfnv87fp/2dN097k14teiU6HaVCTWf6okHX9DkUFxf7foyFCxeycOHC0MX2U1Dz9iovL+tzGyuoY+1W1boqYhX8a8G/OKzVYdrwKaWUTWf6HHRNX2IENW9d0xceVeuasGICN0+6mScGPsGgjoMSl5hSEaEzfdGga/oc9ttvP9+P8cgj/n3Qu5+x/RTUvL3Ky8v63MYK6li7VbWu1+a/xn6N9uP4DscnKCOllAoenelz0DV9SoXfvJx5XPzRxfyp/5+49GD92DWlvKAzfdHg25o+EXlMRJaJiBGRXo7bu4nItyKyyP73wERtq6qoqMjbQajGvHnzmDdvXuhi+ymoeXuVl5f1uY0V1LF2y1nXa/Nfo2FqQ87uenaCs1JKqWDxbaZPRI4BVgBfA6cbY+bZt38JjDHGvCEiQ4GrjDG/ScS2qnRNX2IENW9d0xcelXW99dFbDP7vYH7b47fc3v/2xCalVISEdaZPRJbj6EFq2OdA4G37x8eMMf/ah+NcAUw1xizah/veBzQyxtxW1/vW+Vh+n951DriItAIWAc2NMRUikgxsBg4EJJ7bjDGbqubao0cPs2DBAv8GA5g2bRoA/fv3D1VsPwU1b6/y8rI+t7GCOtZuVdb1ddLXvPrTq3x8zsfs18j/NbpK1RcRb/r+DOxvjLnexXEmYTWMH+7Dfe8jTk1fvN/I0QFYY4ypALAbsbX27RLnbbs1fYWFhfTrt/M5PWzYMIYNG+bpAPj5YhvWF/Kg5u1VXl7W5zZWUMfarf79+1NYVshN/7mJE/Y/QRs+pQKg0x0fPQn08Sn8rOWPnja8tjvbTdk04GigHfC2MeYOEbkEuBlIEpFfAecChcA/gf2BBsCbxphH7Dg9gJFAG6we4zGspXL9gKdE5CHgNmPMBLuZPBer11oD/N4Ys15EsoGXgF7AemAVsMHFWNSavnvXoWHDhvj9Ro5Zs2YB0KdPn1DF9lNQ8/YqLy/rcxsrqGPt1qxZs/hk2Sfkl+Zz2cGXJTodpVQw7Q8cCzQGfhGRl4wx/7JP7+6YaRORL4AHjTFTRCQNmCgi04CvgPeBu4wx79j7NjfGbBaRy3HM9NnLyboARxljYiJyLfAP4BLgXiDPGHOQiLQAZrDz9LKv4t30rQL2E5Fkx+nWdvbtEudtuye3qtqbPTV8+HDAnzVVfsb2U1Dz9iovL+tzGyuoY+3W8OHDmZszl1P+dgp9WvVJdDpKKaAuM3Fx8o4xJgbkisgCrKZssXMHEWkIDARaikjlzY2BHsBaIKWy4QMwxmyu4VhnYM3+zbDjpAC59rbjgT/a988RkXGuK6uluDZ9xpiNIjILuBh4w/53ZuX6unhvq6pDhw4eV7y7J598MpSx/RTUvL3Ky8v63MYK6li7df7t57N6+mq9RItSak+cH7tVQfU9UBJggP7GmDLnBhHpWYdjCfCQMWZMnbP0kW9Nn4g8BZyDdd57gohsNsb0BP4AvCoi9wJbAee5mHhv20VmZuY+1VoXfp5WC+spu6Dm7VVeXtbnNlZQx9qNn3J+4tVtr3L4YYfrp28opVwxxuSLyNfAHcCDACLSASgDFgLlInJ+1dO7QB6Q7Qj1AXCTiLxrjNkqIunAQcaY2cCXwJXANyLSHDgbeIc48K3pM8bcCNxYze0/A0fWcJ+4bqtq+/bttdnNFX337u6Cmre+ezf4Vuat5LqJ15G8OpmrB1xNSpIuU1ZKuXYJ8ISIzLV/zse63Nt6ETkTeNqeSIphvZHjdWAU8A8RuR3rjRyv2+v1Jtund5OAZ4HZWM3kGBH5GeuNHFPiVZh+IoeDXqcvMYKat16nL9g2F23m0k8uJb80n7Kny8hIyYhEXUoFUVgv2aJ2pU2fQ8+ePc1PP/3k6zEqPzWgV69ee9kzWLH9FNS8vcrLy/rcxgrqWNfVluIt/OGLP7AsdxkvnfwSSRusDxcKe11KBZU2fdGgTZ+DfvauUsG3Kn8V1064lvXb1/PEwCf4dftfJzolpSJPm75o0AUwDgUFBb4fY+rUqQAMGDAgVLH9FNS8vcrLy/rcxgrqWNfW/M3zuW7CdZSbcl486cUdl2cJe11KKRUPOtPnoGv6EiOoeeuavmCZumYqN0+6mez0bJ4/8Xk6Z3fesS3MdSkVBjrTFw3a9Dn06tXLVK558svChQsB6N69e6hi+ymoeXuVl5f1uY0V1LHem/G/jOfeb+6lS5MuPDvoWVplttple1jrUiostOmLBm36HHRNn1LBYoxhzLwxPDnjSY5scyRPHP8EjdMaJzotpeodbfqiQdf0Ofh9ahdg8uTJABx33HGhiu2noObtVV5e1uc2VlDHujoVsQr+Pu3v/PvnfzP4gME89KuHSEtOq3bfcR99wY8rNvPrXx/Hfk0b0L5pJk0zU3F8jJJSqh4SkeVYn8RR+WkcXxljbq5h3+HAv40xG2sRdxKOz9oNC53pc9A1fYkR1Lx1TV/ilFSUcOfXd/LFii+4/ODLuaXfLSRJUrX7LsvZTp8jBlBSHqPNbx/dcXtmWjLtmzZgvyZWE9i+aYMdDWH7pg1o3jBNm0KlaimsM31203e6MWava7fquO8ktOkLt969e5u5c+fufUcXli5dCkDnzp33smewYvspqHl7lZeX9bmNFdSxdvp5y8/cN/U+ftr8E7f3u53Letb4yYksXJ/PJS9+T9HmtTx8di+6dunCmm1FrN5axOqthazZuvP7vOLyXe6bkZq0oyG0mkH7+yYN6NC0AS0apZOUpE2hUhCdpk9EfgvcBFSeNrjNGDNRRO4C/gIsxZoV/C3QFngIyMA6M/qwMeYtO84ktOkLN13Tp1TiFJYV8tzs53h9/utkp2dz71H3ckLHE2rcf+7qXC4d8z3pKUn86+oj6dpqz2v98orLdjSBa7YW2s1gkd0kFrK1cJfPVictpbIpbFDtjGGrxhkka1Oo6ol9avruy34S6ONHPsAs7ssdvredqjm9+1fgbWOMEZHuwERjTHvHvs4GsSmQZ4ypEJHWwHSgt/1ZupMIYdOna/oc8vLyfD/GhAkTABg0yPsPhvcztp+CmrdXeXlZn9tYQR3rKaun8NB3D7Fu+zrO63Yeww8fTnZ6do37/7h8C1e+PI3szFT+ffVRLJo5leXsua6sjFSy2qbSo21Wtdu3l5TvaACtxnDnLOHna/PYvL10l/1Tk4V2TRo4GsPMnd83y6R143RSkqs/Ja2UiqvzHI3cEcBnIrIfUAa0EZE2xpj11dyvJdZn5B4IlAPNgO7Ad3HK23M60+ega/oSI6h565o+/20s3MijPzzKFyu+oEt2F/4y4C8c1uqwPd5nyqJNXPP6dNpmZ/DG1UfSrkmDuNRVWFrO2m1FrHI0hM4mcVN+yS77JycJbbMz7FnCzJ0zhk0b0KFpJm2yM0jVplCFRIRO7/4C3GqMeU9EkoBC4CBjzPJq9p0IfAA8Zc8MLgKGGWMm6UxfBBxwwAG+H+P1118PZWw/BTVvr/Lysj63sYIy1hWxCt5Z9A4jZ4ykLFbGjYfdyBU9ryA1OXUP9zGMnLiYf365mO6tG/P6746kZeN0ID51Zaal0LVV4xpPIxeXVbB22+7N4OqtRXyzJIcN+cU4/8ZOEmib3WDXU8iON5q0zW5AWoo2hUp5rAmwzP7+KiDdsS0PyK6y73K74TsR6BqPBP2kTZ9DWlr1l4PwUocOHUIZ209BzdurvLysz22sIIz1wi0LeeDbB5iTM4ej2x7N3Ufdzf5Z++/xPutzi7nxrZn8sGwL5xy+Hw+e2YuG6Tt/fQWhrozUZDq3bETnlo2q3V5SXsG6bcXVnkL+ftkW3ptVRMzRFIpA68YZjmZw11PIbbMb0CAtOU7VKRUZw4H3RGQr8Cmw2bHtKeBlESnEeiPHHcCzInI/MA2YE+dcPaendx26detmFi1a5OsxPv30UwBOOeWUUMX2U1Dz9iovL+tzGyuRY721eCsvz3uZ1+a/RnZ6Nn/q/ydOPeDUvV425cufN3Dr27MpKY/x4Jm9OLdv+932CepzqC7KKmKszy3esY6w6ozhutxiKmK7/r5ulJ5Cy8bptGiUZv+bTstG6Tu/b2x9NW+URnqKNohq34X19K7alTZ9DrqmLzGCmreu6XPPGMPsTbMZu3Asny//nNJYKeceeC439715j2/UACgtjzHis58Z/fUyDmrTmGcuOZwuNcyiBfU55KXyihgb8ktYvcVqAjfkF7Mpv4RN+SXkFJTs+L7qpWkqZTdIdTSIGTsaxZaN0mlh/9uqcTrNGqbpG1DUbrTpiwZt+hwOPfRQM3v2bF+PsX699QahNm3ahCq2n4Kat1d5eVmf21jxGuvCskI+XPohby98m4VbF9IwtSFDOg/hwu4X0rXp3pfFrNxcyB/fnMHs1blcelRH7jqtBxmpNc9UBfU5lAjFZRVs3l5qNYP5JWwq2Plv1QZxe2nFbvcXgWaZabvNFu4ym2g3iU0z0/RahvWENn3RoE2fg16nTyl3Fm9dzNiFY/lw6YdsL9tO96bdufCgCzntgNPITM2sVYwP56zlzv/OBYG/n3sIg3u39Tnr+quwtJyc/FI2FRSzKb90t8bQ2SCWlMd2u39yktC8YXUN4s5GsVXjdFo2yiCrQYp+AkqIadMXDfpGDofc3FzfjzF+/HgAhgwZEqrYfgpq3l7l5WV9bmP5MdalFaVMWDGBsQvHMmPjDNKS0ji508lc0P0CDm15aK1f6BdvyOfxLxbxybz19OnQhH9efBgdmtWuUQzqcyjoMtNS2L95Cvs33/M4G2MoKCl3nE4uZVN+sT2LaDWLOQUlLNqQT05BCWUVu08mpCUn7T5buEuDuPO2hmnJ2iAq5QOd6XPQNX2JEdS8dU1fzQrLClm8bTGTVk1i3OJxbCneQvtG7bmg+wWc1fUsmmY0rXWsFZu38+SExbw3aw2ZqckMO7YL1x3fpU7XsAvqc6g+MsaQW1S2o0GsnD3cpUG0f95cUEKsmpegjNSknesNq2kQndv0HczxoTN90aBNn0OfPn3MrFmzfD1GTk4OAC1atAhVbD8FNW+v8vKyPrex6nr/mImxJn8Ni7Yu2uVrVf4qDIYkSeK49sdxYfcLObrd0SRJ7Ru1tduK+OeXS3jnx1WkJAuXH92Ja47rQrOGdb90UlCfQ2rPKmKGrYWl1b4hJadg10ZxS5VPRKnUKD2FJpmpZDdIJSvD+je7QSpZDVIc31tfVffR6yDWnjZ90aBNn4Ou6VP1WUFpwW7N3eKtiyksLwRAEDpmdeTApgfSrWk3ujXtRu8WvWmZ2bJOx9mUX8Kzk5bwr+9WYjD89oj9uf74rrTKyvCjLBURZRUxtmwv3X0GMb+E3KIy8orKyLW/8oqtf4vLdl+H6JSRmrSzMdylYdzZJFrb7AYyc+d+mfXsFLQ2fdGga/octm3b5vsxxo0bB8A555wTqth+CmreXuXlZX1uY40bN45YLEa/E/uxcOvCXZq7NQVrduzXOK0x3Zt256yuZ+1o8Lo06VLrN2NUZ1thKc9PXsqrU5dTWhHjvMPb88cTutK+6b7HdNYFwXsOKe+kJifROiuD1nX446CkvIK8ovJdmsHK5nCXJtHeZ11uMQs35JNbVEZ+DZe+qZSSJDtnD52N4W4N4+6zj40zUknWdz3Hhf3RasVACZAG/MMY82JCk/KAiNwHNDLG3Fan++lM3066pi8xgpp3FNb05Zbk7jJz99w1z1FUXkSnOzoBkCzJdMrqZDV2zbrtaPBaZ7b2bBZj6aYC3pu5hpe/WU5BaTlnHNqO4YO6cUCLhp7Eh+A+h1R4VcQMBcXlu80e7j6ruHOffMft5dUtVnRonJ7iaBp3Now7GkXHKeuq+yXiQtthnelzfp6uiPQCZgCdjDFrE5vZrkQkxRiz5780dt3/PrTpc+ewww4zM2fO9PUYle8Qzs7e84VpgxbbT0HN26u8vKyvpljlsXJW5K1g4ZaFuzR5Gwo37NinaXpTOqV3okuTLhza4dAds3fpyel4bcnGAj6eu46P567j5/XWH1InHdyaW07qxkFtsjw/XlCfQ6p+MsZQVFax20xidaeh86rZp6hs9+snOmWkJu12Otp5Kjqrutvtf/f1ndH70vT1frX3k0CfOh+sdmbNvXzu8L3t5Gz67J83AKdjfc7uk0ALrBnAJ40xL9v7HA2MACo/aPt2Y8znItIf66PaGgLbgRuNMdNE5EVgrjFmpH3/XsAHQBc7xuPAIUAG8BVwizGmQkQmAbOAo4AtxphTReTPwLlYZ2LXAL83xqwXkWzgJaAXsB5YBWyoa9Onp3cdkpP9/+vJzxelsL7gBTVvr/Lysr7s7Gy2FG/h27Xf7nJq9pdtv1Aasxa6p0gKBzQ5gP5t+u+YuevWtBstGrTwdQ3S4g35fGQ3eos2FADQr2NT7j39YE7p1YZ2TRr4duygPodU/SQiZKalkJmWQtvsuj/vS8tjO2YWq84qVnd6emN+MYs35pNbWEZ+STl7mstJEmiYnkKj9BQa2l+N0pN3/LzLv2nJNExPoXFGNFoFEfkVkAPMBr4FLjHG/CwijYEfReRbYCPwLnCOMWaqiCQDWSKSBvwXuNIYM1FEBgH/FZGuwCtYzeBI+1BXAq8YY4yIPA5MNsZcLSJJwL+Aq4DR9r6dgWOMMeUiMhSrUTzKGBMTkWuBfwCXAPcCecaYg0SkBdaM5dt1HYNoPJIe2bp1q+/HGDt2LAAXXnhhqGL7Kah5u80rZmKUVpTy5ltvUlpRyqlnn0pxRTElFSXWV3lJtT+XVpRat5eX7NhWXFHMtuJtfPPxN+SX5pN9pNXktGjQgm5Nu3FJj0t2vMGic3ZnUpNTfanJyRjDwg35fDx3PR/PXceSjQWIQP+OzbhvyMGc0qstbbLj8+aMoD6HlNoXaSlJtLAvSVNXsZghv2T35nBnE1lOQUk520vK2V5aTn6x9X1Ofql1e2k5BcXlez09XRu1mYmLk/+I9RdvV+B8+98ewFuOP4TT7du6APONMVMBjDEVwFYR6Q2UGmMm2rdPEJFSoLsx5n8i0tjeZwFwMXC0HfcM4AgRudX+ORNY7cjt347TumcA/YAZdl4pQOUFhI8H/mgfO0dExu3LQGjT57Bx40bfj/Hcc88B/rw4+RnbT/HIuyxWtlsTVVpRSnG5o+mqKKG4fGfT9eBjDxIzMdZ1XbfbPjXdx9nAVc68Lf3rUgCe5uk65ZyRnEF6SjrpSemkp6TTOK0xBZMLyEzJZPQ9ozmwyYE0b9C8TjHdjrUxhgXr8q1Tt/PWsXTTdpIEjjigGZcd3ZNTerZJyLtww/rcV8prSUmy45Ruh32MYYyhpDxmNYYlFRSUlNPzb56mGW/n2Wv6zgdexmqucowxfaruKCKn7eMxXgWuACYBC4wxKypDAmcZY5bWcL8C5+GBh4wxY/Yxh73SNX0Ohx9+uJkxY4avxygstC5/kZnp/h2L8YxdVUWsgnJTTllFGWWxMspj5dX+u+P7irJd9nfuU7C9gPJYOUnpSbvHqCH+Ho9pH8vZ5FWYPa+RqU6sxLrcQ1qDNDKSM0hLTtvZiCVbXztuT8nYcVt6cvou+0ipkJacRnbj7F32yUhxxHTcLyM5g9Sk1GpPxbp9jOtyf2MM6/OKWbAujwXr8pm/No85a7axaksRSQJHdW7Oqb3bcnLPNrRs7P26wLqI53NfqfooCm/ksH9+B9gADAIeNsa8bt9+ELAWazJsPnC2MebbytO7WGv4lgCXG2O+EpHfYDWQBxpjSkVkf+A7YBrwjjHmDTvuS0AFcK29jq8F0NgYs8xe0/eYMeZDe99LgZuAE40xW0UkHTjIGDNbRB4DmtiniZtjnd59R9f0uZCU5P+FOv18Uapt7IpYBdtKtrG5eDNbirewuWgzm4vs74t3fp9fmr9bg1XZUMXMnq9/5YYgpCalkpqcSkpSivV90s7vq/6bmZK5623JqaRIyh6bquoauMpGbJfmLTmd5KTgXPHf7fOnpvuXlsf4ZVMB89fmsWBdHvPXWf9uLSzbsc/+zTI5uG0W1x7XlZN6tt6nU09+0WZPKVVLdwLTsd7McYeI3A4kYzWCF9inTs8BHheRhkAMuM0+nXsu8JR9+3asGcRSAGPMShGZDwzEOr1baTjwd2C2iBisS8cMB5ZVTcwY87rdFE62/+hPAp7FWoP4IDBGRH7GeiPHlH0pXmf6HDp37myWLq1pBtYbb7zxBgBDhw71NG5pRSmjXhlFQWkBA4YMsBo5Z1Pn+H5bybZqm7YUSaFZRjOaN2hOswbNyErL2tFwVW2oUpNTd2vGavq+8n7VNWypSamMGzuOZElm6NChpCalBqbJ8uqx8vIxdxvrjTfeYHtJOb0Hnm43ePksWJfH4o35Oz4vNT0lie5tGnNw2yx6tM3i4HZZHNSmMY0zql8nGAR+/b9SSlnCOtOndqVNn0NGZiPz5CezqYiZXb+MIRYzlFe5raKiyrZqbosZQ7l9W0XMMPnx6wE44oaniBlre1ZGKk0y02jWMJWmDdNomplG0wapNMgoIyllOyTnUy75FMdy2WrPxlU2cJX/5pfl71g71vnOzjtqapDSgOYZVhPXPKO51dBlNNvttuYZzclKy0rIFeaDeo21sF2nr6wixtbCUrZuL2PL9lK2FpayZfvOr1VbCvnPA1dTUh6jzW8fBaBl43SrsWubRY+2jenZLotOzRuSUofPvQ2CoD6HlIoKbfqiod40fSLSDWuhZXNgM3CZMWaxc5/0Nl1N2ytG7nK/JIHkJLG+RHZ+n5REchLWbcm7bksSIcVxmySVQ1IhJBVSXpEPSUWQVkJMCik32ymsyKeoPJ8Ss51yCiA5H0kusO5XXS2xTFLJJj0pm4bJ2WSlNaVJWjOapjWhdcPmdGjalg5ZrejYpDVts7IDf+X3sjLrFGJqarBmkrzKa1/ixGLWh9ZvKSxlq6Nx25S3na3bS8ktYUdTV/nvnj5BoHF6Cm2yM+jeqgE92mbRu0NzerTNSvhaPK8E9TmkVFRo0xcN9WlN3/PAM8aYN+xr4bwA/Ma5Q+v0cuY/cPIuDV7lzFd5rJy80jzySvLIK80jtyR3l393+d7eJ68kj9zSXEoqSnYexPmaZKz1a40bNKZ5WhZZ6Vk0SetAdnpTMpObkC7ZJJNFUkUjKsobUlbaiKKiDHKLrBmdLXllbCssZeX2UkrKnadr8+yvJYhAVkYqzRqm0SQzlWaZafZsomNWMTONZvZt6SnJJCcLKXYDm5qUtMvPKY4xcRo1ahTDhg3bpwcmiC/Ue6rH2LO25ZUzvBWGslhs520VMftfQ7l9e1mFfZ+KGMXlFWzZXmY1c46mbmcTZz2uNV0xIT0lieYNrcexWcM0OjbP3PkYNkyzH2PrMW+WmUaTzLRdPlh+1KhRHHvCvj1WQZWamurqORhUUawJolmX65qMYecF9szO22r62Zd9q9/22uuvg3URYxVy9WKmT0RaAYuA5va7Z5KxZvsONMZsqtwvIzvN3PH+jeSVFpBblk9eaQEb8jdRmlzO9vKiPR4jMzmDrNRGJJdAu6atyUptRHZqI7JSM+3vGzLmmRfp2/UYMpPTuezCIWSlNqJxcgOmTPmagccdW+v/mFO+nsKxx/x6l23FZeWMevMDikvLOemkE8grKqOgpJz8ojIWL19JwyYtKCixPiaooNj6XMlSu1G01paCsPO5UPn9zn933p4kQnISpIh1eYAUgYKCfJplZ+34OSlJSEnCmvUUSK78PsnaVpCXS9MmTUgR+O67H0hKgmN/dRTJ9r7JIiQl2bOsAhvWr6d9u7b2TKrVeMViMesUecwQMzEqYmBiMfv0eoxNOZtp2rQpFcZgYoaKXfa3bzMGY9+3sKiQtLR0Ysawbes2Fv2yAhMz9OnTa8exjH1K3jlO1Y2R899ZcxYAcPghB+14vCr3TRbITEsmMy2ZBmlJNExNpkFaMg1Tk2iQlszWTevp2qkDDdKSaZCazH8mziQ5Ca4Y3I+dD9fOX+oLF/5M9+7da3zuvPLpdKZ8PYUxD90EGBYvXsyBXbvW/LyrJs4vS5fSpXPnWu0LsGzZUg444IBavwitWLGCjvvvv4d92e2+j/93KitXruTJ4RfUXIvj5zVrVrNfu3a12hcM69ato22bNuywlxfYDRs30LpVq1rtW/n9pk05tGzRfJd9p02bRv9+/aqNs3lzDs2bNd9r3MptW7dtpWmTJrXat/Ln3Nw8srOyarUvQH5+Ho0bNd7rvitXrWL/9u3ZXridhpmZtXqMAYqKCmmQkVHttprGoaS0lPS01Frsa31XVlZq/SFay8etoqKC5KSkmo9TTRzDrr9vw0Duzys0xnj32YkqIerLTF8HYI19kUXsxm+tffuOpq+spILJv3xMdqyCrFiM1jFDtwrr+x1fFTGy7e+z7Z+zYjFqM1d1QUcYONq6CPddxS/vuH0gWJdzrKVjAX7e9bYMYNwr2wH4Ey/sfqeqHymcbH95wWB9KE2tPzXQZl8W8a3JVt5jOn605/0X1jUxYF0d96+clG0IA2dYed3TZ6r1Hqp9NHCuHafvj9XvEMP6OPDiGgLM3vnt62OtWFekf1rtrt1hDzULr7xdYL3U/O8JADrHYrAxmR1tqOxsXXf+vOu2/UpKYUv6XvbdecxWhYVQ8OMe9t01TpO8PCieX6t9K3/+79eLMMbAyql73ReElE0bICmnVvsCxDathbSiGvZlt/sWbVppXYJ1L3GdteVuXkfLJg132ZYiBmIVVfYVECFn81aat2i117iV29ZsXk3TNp1qtW/lz8uWzabP/h2q2V79MRetnE7fzj32GvenuZvY/6h+zP3+B47qdkStHmMQZkz9hl/1+lWt9q38+dvJkxl43MBaPxaTJ05g0KATa9iXXfYF+OKzzznllJN589XXuOLyy2s1vh999BGnn3Z6rR+L995/j7POOqtW+wL857/jOO+8c2u1b+XPb40dy0UXXlTtvo/+7W9YZ49U2NWXmb6+wGvGmJ6O2+YDQ40xMxy3FWNdT6fSJqCMnVfEro3sPezfAusjYOpyn7oeIxH7Q821eXWMfcnJzTFqU0/Qa6iJs7ag5ORm/8r7pFL752BQa6h6nz09D8P6/IOddYW5hqr71+V3YFief5VaYJ0pa1zDdhUS9WWmbxWwn4gkO07vtrNv38EYE/+PElBKKaWUioNwXZdhHxljNgKz2HnBxIuBmc71fEoppZRSUVYvTu8ClR+x8irQFNiKdcmWfVklppRSSikVOvVipg/AGPOzMeZIY0w3+1/PGj4RWS4i6+zTxpW3XSEiRkRu8Oo4iWbX2SvReXitNnWFpXYRaSoiRSIyMtG5eE1EzheRmSIyS0R+FpF/Jzont0QkXUT+ISK/2DXNFJGz9nKfTiIS2Oud2P9X5olIUpXbAv//pzp27j+LyGwRWSIi74vIgETn5bUwP0aq9upN0xcHa4GTHT9fgfWByErF02+xPvT7YhFJS3QyXhGRtlifQXmGMaYP0AMYkdCkvPEs0B7oaYw5CLgUeFpEjt3DfToBgW36bI2waomK84wxhxpjumKdMfpYRI5MdFJK1ZU2fd55BavRQ0Q6Y13EZK798wki8q39V/xcEbnIvr2/iMxzBrH/mgz0X5FV/yJ0/mx//4Bd7/IwzXTuqa4QuQp4CJgDnAkgIq84HwfnzyKyn4hMFJGfROQDERkf0MesDdY76TcDGMtMABE5UkS+EpHp9tdp9u2dRCTHnkmbY//f+3XNh4gvEekIXAhca4wpBjDGzAMeBv5i73OnnfdsEZlqz549Axxsz3j+J1H578V9wF+q/uEhIl3t59scEZkhIqfYt98tIk849mtuP3aBuy6cMWYc1sX+bxORNBEZISI/2I/R6yLSCEBEskVkjOPxezqxmdeOiNwqItPs16tvRaSPY5sRkf+zty8VkXMTmKraB9r0eWcS0FtEmgKXA685ts0AjjHGHAYMAh4TkabGmGlAgYgcB2C/IMWMMVPjm7rnMo0xR2NdgvDRyl+Cyl8icgjWxwx+CbyM1QDuzVPAV/bljP4IHOdfhq7MBn4AVorIf0RkuN0YNMF6Af6tMaYvcDrwgn07WOMx2xhzCFZ9b4pIUD57rjewxBizpcrt3wGHisjlwBnAAGPMocAQY0wMuB6Yb4zpY4w5L74p19qPwHTg2iq3/wv4t/14DAXeEJGWWL8vLxKRyitK/Bb4wBizPV4J19H3QE/gT0CuMeYI+zFaC9xp7/MksB041N52XwLy3BevGWP6269X92D9/3LKM8b0x5rJfSru2SlXtOnzjgHeBi6yv5zrjVoC/7Fn9T4DmmFfRxfrP8119vfXY/0VH3ZvARhjlmO9aaZ9QrOpP36H9QvbAOOAI0Vkv73c53isBhFjzApgor8p7htjTMwYcxbWHxJfAadhzWaeChwAfCIis4BPsP4vVn7MSCnwhh1jElDEzv97iSZ72X468JwxJh/AGLPZ/5Q8dTfwZ8cffQL0YefzbT7WVRWOMsasBH7CejzBOmvySvxSrbPKx+4MYKg96zrL/rmLve10YITdqGOMqct1TBOpr4hMsV+vHsd6zJzesv/9DmgnInqpsxCpL9fpi5dXsf4CnGKM2Sw7r+L+HPABcI4xxojIIqwP0QB4B/iriByG9QJcm9mZRCtn1z8Yqv6nd362RAXheZ7tra7Ask+j/RYoEZHL7JtTsV48Q1tXVfbpz3nAM2JdYF2AOcaY3dbAiUinOKdXV3OBriLSrMps31FYDW2oGWMWisjHwC21vMsrwOUisgzrQsFf+5WbB/pjPQ8PAK4zxnyZ4Hy8kgT8BzjWGDNDRNoBa6rsU7kUocJ+jQvL73eFzvR5yhizFLgLeLDKpibAcrvhO5GdsxAYY8qAMVhN4b+MMYVxSteNJVi/9BCRE4DWiU3HM2Gu60xgoTGmvTGmkzGmE3ASVtPnrKst1h8XlSZhLUdARDoAv4lfyrVnrz082vFze6wZ9PnAgSJyvGNbf9n5F1dlM1y5fKIBu32IYWLYM+HvAM9VzpbYa0jvAu4HPgSuFZHG9rbKD+bNw2qKwuA+rDMY9gfyMoudz7cewKFYM0ZgzU4fC9wKvGICej0xETkT67T1P7B+b98iIg3sbY3tusB6/G6vfC6KSItE5LsPUtj5wQXX7WlHFT7aoXvMGDOqmpvvAJ4VkfuBaez+V/yLWAu3n/M5PbdSsP7Kuwd4VUT+iLV+bGVCs3IvCnVdhbVeagdjzLf2wv9vgZPtmbFFWLPRlW4CXhORS4BlWOvm6vrxTfGQAtxvv/mhCOsP1ruNMTNF5AxghIg8idXkLQWG2PfbDPQRkT9hzQpebIwpjXv2NbsOeASYLyKlWM/Dm4wxk0VkCrAf8J2IlGGt/z0W6/fHQvv0288BXteHMWa1iLyO1cgBXIK15vJmrBnoSysvkm+MKRSR94ErsWbQguQ/IlKC9Qa9+cCpxpjvRWQGVmM7TURiWI3t/Vifpn4z1rq+eSJSDkwGbkxA7rWVAhQC92LVsxlr1k9FSL25OHOQichQrBej0xKdS03sGaKfgTbGmKJE5+OVqNZVW/YMRZkxptwei2nACVG4cLl9evdHY0xYZliUSoj6/nuwPtGZvgQTkc+wFv6ekehcaiIiN2LNSNwWpV8IUa2rjg7EmukTrDWA90eh4VNK1Y7+HqxfdKZPKaWUUqoe0DdyKKWUUvWAfW3Lj0VkoX3R6HH2dRIRkaPsi0gvEpHPRaSVfXs3sS5+/rNYH6/3suONK+ki8qlYF9IOyyVp6jVt+pRSSqn6wQB/N8Z0N8b0Bn7BuoB+Etb1LK83xnQDpgCP2vcpBW6xPybwECATuM3eVgE8hvWhAyoEtOlTSiml6gFjzBb7IuWVvgM6An2BYmPM/+zbnwcusO+zvPIjD+0LTf9g3wdjTLkxZgKwLS4FKNe06VNKKaXqGXt271qsaw3uD6yo3GZ/ekiSiDSrcp8GWJeH+iCOqSoPadOnlFJK1T//BAqAp2uzs/25yG8BXxpjtOkLKb1ki1JKKVWPiMhjWJdrGmKMiYnISuxTtvb2FkCs8uMBRSQZ6+LvWwn2BabVXuhMn1JKKVVPiMgjWGv4zjLGlNg3TwcaiMgx9s9/wPqIwMrTwK9gvWnjd0H9eDxVO3qdPqWUUqoeEJGewDysj2OsvBDzMmPM2SIyAHgByACWA0ONMRtE5DSszxGeh9X4AXxjjLnejjkNaA+0AtYBnxpjro5TSaqOtOlTSimllKoH9PSuUkoppVQ9oE2fUkoppVQ9oE2fUkoppVQ9oE2fUkoppVQ9oE2fUkoppVQ9oE2fUkoppVQ9oE2fUkoppVQ9oE2fUkoppVQ98P+DIcUTTmorowAAAABJRU5ErkJggg==\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>839535</td>\n",
        "      <td>2428</td>\n",
        "      <td>22674</td>\n",
        "      <td>814433</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>842648</td>\n",
        "      <td>2434</td>\n",
        "      <td>22461</td>\n",
        "      <td>817753</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>845730</td>\n",
        "      <td>2439</td>\n",
        "      <td>22250</td>\n",
        "      <td>821041</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>848782</td>\n",
        "      <td>2444</td>\n",
        "      <td>22040</td>\n",
        "      <td>824298</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>260</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>851808</td>\n",
        "      <td>2450</td>\n",
        "      <td>21833</td>\n",
        "      <td>827525</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "256 2020-12-29     839535   2428     22674     814433\n",
        "257 2020-12-30     842648   2434     22461     817753\n",
        "258 2020-12-31     845730   2439     22250     821041\n",
        "259 2021-01-01     848782   2444     22040     824298\n",
        "260 2021-01-02     851808   2450     21833     827525"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 02Jan2021</th>\n",
        "      <th>Fatal on 02Jan2021</th>\n",
        "      <th>9th_Rt</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>16830717</td>\n",
        "      <td>22Dec2020</td>\n",
        "      <td>15481023</td>\n",
        "      <td>187670</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>67248</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>21833</td>\n",
        "      <td>2450</td>\n",
        "      <td>0.94</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 02Jan2021  \\\n",
        "Main           16830717        22Dec2020               15481023   \n",
        "Medicine          67248        01Sep2020                  21833   \n",
        "\n",
        "          Fatal on 02Jan2021 9th_Rt  \n",
        "Main                  187670      -  \n",
        "Medicine                2450   0.94  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
