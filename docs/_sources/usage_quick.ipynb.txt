{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1595608274501"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-zeta.new.72.fix.120.155.157.163.164.165.174'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>170247</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>5</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170248</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>5</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170249</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170250</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170251</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "170247      2020-08-03          5          1       0    107808.0  COL   \n",
        "170248      2020-08-04          5          1       0    107808.0  COL   \n",
        "170249      2020-08-05         13          1       0    107808.0  COL   \n",
        "170250      2020-08-06         13          1       0    107808.0  COL   \n",
        "170251      2020-08-07         13          1       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "170247        Vichada       Colombia               3                  3   \n",
        "170248        Vichada       Colombia               3                  3   \n",
        "170249        Vichada       Colombia               3                  3   \n",
        "170250        Vichada       Colombia               3                  3   \n",
        "170251        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "170247              2                        4                  1   \n",
        "170248              2                        4                  1   \n",
        "170249              2                        4                  1   \n",
        "170250              2                        4                  1   \n",
        "170251              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "170247                       2                               2   \n",
        "170248                       2                               2   \n",
        "170249                       2                               2   \n",
        "170250                       2                               2   \n",
        "170251                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "170247                                    4                      2   \n",
        "170248                                    4                      2   \n",
        "170249                                    4                      2   \n",
        "170250                                    4                      2   \n",
        "170251                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "170247               2                2             87.04  \n",
        "170248               2                2             87.04  \n",
        "170249               2                2             87.04  \n",
        "170250               2                2             87.04  \n",
        "170251               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>170247</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>5</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170248</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>5</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170249</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>13</td>\n",
        "      <td>12</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170250</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>13</td>\n",
        "      <td>12</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170251</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>13</td>\n",
        "      <td>12</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "170247 2020-08-03  Colombia  Vichada          5         4      0          1\n",
        "170248 2020-08-04  Colombia  Vichada          5         4      0          1\n",
        "170249 2020-08-05  Colombia  Vichada         13        12      0          1\n",
        "170250 2020-08-06  Colombia  Vichada         13        12      0          1\n",
        "170251 2020-08-07  Colombia  Vichada         13        12      0          1"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>201</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>13713</td>\n",
        "      <td>3589</td>\n",
        "      <td>333</td>\n",
        "      <td>9791</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>202</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>14022</td>\n",
        "      <td>3577</td>\n",
        "      <td>333</td>\n",
        "      <td>10112</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>203</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>14285</td>\n",
        "      <td>3515</td>\n",
        "      <td>333</td>\n",
        "      <td>10437</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>204</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>14645</td>\n",
        "      <td>3625</td>\n",
        "      <td>333</td>\n",
        "      <td>10687</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>205</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>14645</td>\n",
        "      <td>3625</td>\n",
        "      <td>333</td>\n",
        "      <td>10687</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "201 2020-08-03      13713      3589    333       9791\n",
        "202 2020-08-04      14022      3577    333      10112\n",
        "203 2020-08-05      14285      3515    333      10437\n",
        "204 2020-08-06      14645      3625    333      10687\n",
        "205 2020-08-07      14645      3625    333      10687"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-03</th>\n",
        "      <td>18273812</td>\n",
        "      <td>6730431</td>\n",
        "      <td>695754</td>\n",
        "      <td>10847627</td>\n",
        "      <td>0.019037</td>\n",
        "      <td>0.296808</td>\n",
        "      <td>0.060273</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-04</th>\n",
        "      <td>18532150</td>\n",
        "      <td>6761287</td>\n",
        "      <td>702552</td>\n",
        "      <td>11068311</td>\n",
        "      <td>0.018955</td>\n",
        "      <td>0.298625</td>\n",
        "      <td>0.059686</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-05</th>\n",
        "      <td>18801099</td>\n",
        "      <td>6803586</td>\n",
        "      <td>709483</td>\n",
        "      <td>11288030</td>\n",
        "      <td>0.018868</td>\n",
        "      <td>0.300196</td>\n",
        "      <td>0.059136</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-06</th>\n",
        "      <td>18877280</td>\n",
        "      <td>6819848</td>\n",
        "      <td>710444</td>\n",
        "      <td>11346988</td>\n",
        "      <td>0.018817</td>\n",
        "      <td>0.300546</td>\n",
        "      <td>0.058922</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-07</th>\n",
        "      <td>18877293</td>\n",
        "      <td>6848733</td>\n",
        "      <td>710444</td>\n",
        "      <td>11318116</td>\n",
        "      <td>0.018817</td>\n",
        "      <td>0.299781</td>\n",
        "      <td>0.059063</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-08-03   18273812   6730431  695754   10847627             0.019037   \n",
        "2020-08-04   18532150   6761287  702552   11068311             0.018955   \n",
        "2020-08-05   18801099   6803586  709483   11288030             0.018868   \n",
        "2020-08-06   18877280   6819848  710444   11346988             0.018817   \n",
        "2020-08-07   18877293   6848733  710444   11318116             0.018817   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-08-03                 0.296808                        0.060273  \n",
        "2020-08-04                 0.298625                        0.059686  \n",
        "2020-08-05                 0.300196                        0.059136  \n",
        "2020-08-06                 0.300546                        0.058922  \n",
        "2020-08-07                 0.299781                        0.059063  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>40154</td>\n",
        "      <td>12655</td>\n",
        "      <td>1017</td>\n",
        "      <td>26482</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>41394</td>\n",
        "      <td>13180</td>\n",
        "      <td>1022</td>\n",
        "      <td>27192</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>214</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>42747</td>\n",
        "      <td>13698</td>\n",
        "      <td>1029</td>\n",
        "      <td>28020</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>215</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>44232</td>\n",
        "      <td>14325</td>\n",
        "      <td>1035</td>\n",
        "      <td>28872</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>216</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>44245</td>\n",
        "      <td>43210</td>\n",
        "      <td>1035</td>\n",
        "      <td>28470</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "212 2020-08-03      40154     12655   1017      26482\n",
        "213 2020-08-04      41394     13180   1022      27192\n",
        "214 2020-08-05      42747     13698   1029      28020\n",
        "215 2020-08-06      44232     14325   1035      28872\n",
        "216 2020-08-07      44245     43210   1035      28470"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>170247</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>5</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170248</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>5</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170249</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170250</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170251</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "170247      2020-08-03          5          1       0    107808.0  COL   \n",
        "170248      2020-08-04          5          1       0    107808.0  COL   \n",
        "170249      2020-08-05         13          1       0    107808.0  COL   \n",
        "170250      2020-08-06         13          1       0    107808.0  COL   \n",
        "170251      2020-08-07         13          1       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "170247        Vichada       Colombia               3                  3   \n",
        "170248        Vichada       Colombia               3                  3   \n",
        "170249        Vichada       Colombia               3                  3   \n",
        "170250        Vichada       Colombia               3                  3   \n",
        "170251        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "170247              2                        4                  1   \n",
        "170248              2                        4                  1   \n",
        "170249              2                        4                  1   \n",
        "170250              2                        4                  1   \n",
        "170251              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "170247                       2                               2   \n",
        "170248                       2                               2   \n",
        "170249                       2                               2   \n",
        "170250                       2                               2   \n",
        "170251                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "170247                                    4                      2   \n",
        "170248                                    4                      2   \n",
        "170249                                    4                      2   \n",
        "170250                                    4                      2   \n",
        "170251                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "170247               2                2             87.04  \n",
        "170248               2                2             87.04  \n",
        "170249               2                2             87.04  \n",
        "170250               2                2             87.04  \n",
        "170251               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>166951</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>166952</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>166953</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>166954</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>166955</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "166951  COL  Colombia  Vichada 2020-08-03      107808\n",
        "166952  COL  Colombia  Vichada 2020-08-04      107808\n",
        "166953  COL  Colombia  Vichada 2020-08-05      107808\n",
        "166954  COL  Colombia  Vichada 2020-08-06      107808\n",
        "166955  COL  Colombia  Vichada 2020-08-07      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>170247</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>5</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170248</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>5</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170249</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170250</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170251</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>13</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "170247      2020-08-03          5          1       0    107808.0  COL   \n",
        "170248      2020-08-04          5          1       0    107808.0  COL   \n",
        "170249      2020-08-05         13          1       0    107808.0  COL   \n",
        "170250      2020-08-06         13          1       0    107808.0  COL   \n",
        "170251      2020-08-07         13          1       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "170247        Vichada       Colombia               3                  3   \n",
        "170248        Vichada       Colombia               3                  3   \n",
        "170249        Vichada       Colombia               3                  3   \n",
        "170250        Vichada       Colombia               3                  3   \n",
        "170251        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "170247              2                        4                  1   \n",
        "170248              2                        4                  1   \n",
        "170249              2                        4                  1   \n",
        "170250              2                        4                  1   \n",
        "170251              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "170247                       2                               2   \n",
        "170248                       2                               2   \n",
        "170249                       2                               2   \n",
        "170250                       2                               2   \n",
        "170251                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "170247                                    4                      2   \n",
        "170248                                    4                      2   \n",
        "170249                                    4                      2   \n",
        "170250                                    4                      2   \n",
        "170251                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "170247               2                2             87.04  \n",
        "170248               2                2             87.04  \n",
        "170249               2                2             87.04  \n",
        "170250               2                2             87.04  \n",
        "170251               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>170247</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170248</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170249</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170250</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170251</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "170247 2020-08-03  Colombia  COL               3                  3   \n",
        "170248 2020-08-04  Colombia  COL               3                  3   \n",
        "170249 2020-08-05  Colombia  COL               3                  3   \n",
        "170250 2020-08-06  Colombia  COL               3                  3   \n",
        "170251 2020-08-07  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "170247              2                        4                  1   \n",
        "170248              2                        4                  1   \n",
        "170249              2                        4                  1   \n",
        "170250              2                        4                  1   \n",
        "170251              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "170247                       2                               2   \n",
        "170248                       2                               2   \n",
        "170249                       2                               2   \n",
        "170250                       2                               2   \n",
        "170251                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "170247                                    4                      2   \n",
        "170248                                    4                      2   \n",
        "170249                                    4                      2   \n",
        "170250                                    4                      2   \n",
        "170251                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "170247               2                2             87.04  \n",
        "170248               2                2             87.04  \n",
        "170249               2                2             87.04  \n",
        "170250               2                2             87.04  \n",
        "170251               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(country=\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>214</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>215</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>216</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "212 2020-08-03               1                  1              1   \n",
        "213 2020-08-04               1                  1              1   \n",
        "214 2020-08-05               1                  1              1   \n",
        "215 2020-08-06               1                  1              1   \n",
        "216 2020-08-07               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "212                        0                  0                       1   \n",
        "213                        0                  0                       1   \n",
        "214                        0                  0                       1   \n",
        "215                        0                  0                       1   \n",
        "216                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "212                               1                                    3   \n",
        "213                               1                                    3   \n",
        "214                               1                                    3   \n",
        "215                               1                                    3   \n",
        "216                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "212                      2               2                1             32.41  \n",
        "213                      2               2                1             32.41  \n",
        "214                      2               2                1             32.41  \n",
        "215                      2               2                1             32.41  \n",
        "216                      2               2                1             32.41  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(iso3=\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-03</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-04</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>214</th>\n",
        "      <td>2020-08-05</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>215</th>\n",
        "      <td>2020-08-06</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>216</th>\n",
        "      <td>2020-08-07</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "212 2020-08-03               1                  1              1   \n",
        "213 2020-08-04               1                  1              1   \n",
        "214 2020-08-05               1                  1              1   \n",
        "215 2020-08-06               1                  1              1   \n",
        "216 2020-08-07               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "212                        0                  0                       1   \n",
        "213                        0                  0                       1   \n",
        "214                        0                  0                       1   \n",
        "215                        0                  0                       1   \n",
        "216                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "212                               1                                    3   \n",
        "213                               1                                    3   \n",
        "214                               1                                    3   \n",
        "215                               1                                    3   \n",
        "216                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "212                      2               2                1             32.41  \n",
        "213                      2               2                1             32.41  \n",
        "214                      2               2                1             32.41  \n",
        "215                      2               2                1             32.41  \n",
        "216                      2               2                1             32.41  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  17Apr2020  01May2020   126529100\n",
        "2nd  Past  02May2020  14May2020   126529100\n",
        "3rd  Past  15May2020  09Jun2020   126529100\n",
        "4th  Past  10Jun2020  01Jul2020   126529100\n",
        "5th  Past  02Jul2020  11Jul2020   126529100\n",
        "6th  Past  12Jul2020  22Jul2020   126529100\n",
        "7th  Past  23Jul2020  31Jul2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model: finished 912 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model: finished 1618 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model: finished 1500 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model: finished 1628 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model: finished 1527 trials in 1 min 0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model: finished 519 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model: finished 822 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 51 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>tau</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>Rt</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>288</td>\n",
        "      <td>0.008355</td>\n",
        "      <td>0.004422</td>\n",
        "      <td>0.019560</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>1.74</td>\n",
        "      <td>0.020</td>\n",
        "      <td>669</td>\n",
        "      <td>23</td>\n",
        "      <td>45</td>\n",
        "      <td>0.134783</td>\n",
        "      <td>1618</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.003898</td>\n",
        "      <td>0.021068</td>\n",
        "      <td>0.074037</td>\n",
        "      <td>0.000528</td>\n",
        "      <td>0.17</td>\n",
        "      <td>0.074</td>\n",
        "      <td>631</td>\n",
        "      <td>85</td>\n",
        "      <td>15</td>\n",
        "      <td>0.167263</td>\n",
        "      <td>1628</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>160</td>\n",
        "      <td>0.002364</td>\n",
        "      <td>0.009122</td>\n",
        "      <td>0.078942</td>\n",
        "      <td>0.000256</td>\n",
        "      <td>0.23</td>\n",
        "      <td>0.079</td>\n",
        "      <td>433</td>\n",
        "      <td>46</td>\n",
        "      <td>12</td>\n",
        "      <td>0.121802</td>\n",
        "      <td>1500</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.023724</td>\n",
        "      <td>0.025983</td>\n",
        "      <td>0.017267</td>\n",
        "      <td>0.000715</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.017</td>\n",
        "      <td>466</td>\n",
        "      <td>14</td>\n",
        "      <td>12</td>\n",
        "      <td>0.142090</td>\n",
        "      <td>1527</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.149348</td>\n",
        "      <td>0.067909</td>\n",
        "      <td>0.000817</td>\n",
        "      <td>0.000798</td>\n",
        "      <td>2.17</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1253</td>\n",
        "      <td>6</td>\n",
        "      <td>14</td>\n",
        "      <td>0.026264</td>\n",
        "      <td>822</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.067118</td>\n",
        "      <td>0.035728</td>\n",
        "      <td>0.000660</td>\n",
        "      <td>0.000141</td>\n",
        "      <td>1.87</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3535</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.024715</td>\n",
        "      <td>519</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000</td>\n",
        "      <td>4249</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.033589</td>\n",
        "      <td>912</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE   tau       rho     sigma  \\\n",
        "1st  Past  17Apr2020  01May2020   126529100  SIR-F   288  0.008355  0.004422   \n",
        "2nd  Past  02May2020  14May2020   126529100  SIR-F   480  0.003898  0.021068   \n",
        "3rd  Past  15May2020  09Jun2020   126529100  SIR-F   160  0.002364  0.009122   \n",
        "4th  Past  10Jun2020  01Jul2020   126529100  SIR-F   480  0.023724  0.025983   \n",
        "5th  Past  02Jul2020  11Jul2020   126529100  SIR-F  1440  0.149348  0.067909   \n",
        "6th  Past  12Jul2020  22Jul2020   126529100  SIR-F   720  0.067118  0.035728   \n",
        "7th  Past  23Jul2020  31Jul2020   126529100  SIR-F   480  0.046273  0.024516   \n",
        "\n",
        "        theta     kappa    Rt  alpha1 [-]  1/alpha2 [day]  1/beta [day]  \\\n",
        "1st  0.019560  0.000299  1.74       0.020             669            23   \n",
        "2nd  0.074037  0.000528  0.17       0.074             631            85   \n",
        "3rd  0.078942  0.000256  0.23       0.079             433            46   \n",
        "4th  0.017267  0.000715  0.87       0.017             466            14   \n",
        "5th  0.000817  0.000798  2.17       0.001            1253             6   \n",
        "6th  0.000660  0.000141  1.87       0.001            3535             7   \n",
        "7th  0.000068  0.000078  1.88       0.000            4249             7   \n",
        "\n",
        "     1/gamma [day]     RMSLE  Trials       Runtime  \n",
        "1st             45  0.134783    1618   1 min 0 sec  \n",
        "2nd             15  0.167263    1628   1 min 0 sec  \n",
        "3rd             12  0.121802    1500   1 min 0 sec  \n",
        "4th             12  0.142090    1527   1 min 0 sec  \n",
        "5th             14  0.026264     822  0 min 25 sec  \n",
        "6th             13  0.024715     519  0 min 15 sec  \n",
        "7th             13  0.033589     912  0 min 25 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "0.87"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.466565</td>\n",
        "      <td>0.282995</td>\n",
        "      <td>2.839529</td>\n",
        "      <td>17.875123</td>\n",
        "      <td>8.033153</td>\n",
        "      <td>5.538328</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>4.764065</td>\n",
        "      <td>2.062699</td>\n",
        "      <td>5.875450</td>\n",
        "      <td>15.356264</td>\n",
        "      <td>8.079239</td>\n",
        "      <td>5.543789</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       1st       2nd       3rd       4th        5th       6th       7th\n",
        "rho    1.0  0.466565  0.282995  2.839529  17.875123  8.033153  5.538328\n",
        "sigma  1.0  4.764065  2.062699  5.875450  15.356264  8.079239  5.543789"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>1.74</td>\n",
        "      <td>0.17</td>\n",
        "      <td>0.23</td>\n",
        "      <td>0.87</td>\n",
        "      <td>2.17</td>\n",
        "      <td>1.87</td>\n",
        "      <td>1.88</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "     1st   2nd   3rd   4th   5th   6th   7th\n",
        "Rt  1.74  0.17  0.23  0.87  2.17  1.87  1.88"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Susceptible</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>28Dec2020</td>\n",
        "      <td>17482</td>\n",
        "      <td>4052927</td>\n",
        "      <td>4982207</td>\n",
        "      <td>117476485</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>29Dec2020</td>\n",
        "      <td>18154</td>\n",
        "      <td>4204016</td>\n",
        "      <td>5184615</td>\n",
        "      <td>117122315</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>30Dec2020</td>\n",
        "      <td>18850</td>\n",
        "      <td>4359590</td>\n",
        "      <td>5394541</td>\n",
        "      <td>116756119</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>31Dec2020</td>\n",
        "      <td>19573</td>\n",
        "      <td>4519689</td>\n",
        "      <td>5612206</td>\n",
        "      <td>116377632</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>20131</td>\n",
        "      <td>4642612</td>\n",
        "      <td>5780413</td>\n",
        "      <td>116085945</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date  Fatal  Infected  Recovered  Susceptible\n",
        "255  28Dec2020  17482   4052927    4982207    117476485\n",
        "256  29Dec2020  18154   4204016    5184615    117122315\n",
        "257  30Dec2020  18850   4359590    5394541    116756119\n",
        "258  31Dec2020  19573   4519689    5612206    116377632\n",
        "259  01Jan2021  20131   4642612    5780413    116085945"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.024515901161443848"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.049031802322887695"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>tau</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>Rt</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Main</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>288</td>\n",
        "      <td>0.008355</td>\n",
        "      <td>0.004422</td>\n",
        "      <td>0.019560</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>1.74</td>\n",
        "      <td>0.020</td>\n",
        "      <td>669</td>\n",
        "      <td>23</td>\n",
        "      <td>45</td>\n",
        "      <td>0.134783</td>\n",
        "      <td>1618</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.003898</td>\n",
        "      <td>0.021068</td>\n",
        "      <td>0.074037</td>\n",
        "      <td>0.000528</td>\n",
        "      <td>0.17</td>\n",
        "      <td>0.074</td>\n",
        "      <td>631</td>\n",
        "      <td>85</td>\n",
        "      <td>15</td>\n",
        "      <td>0.167263</td>\n",
        "      <td>1628</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>160</td>\n",
        "      <td>0.002364</td>\n",
        "      <td>0.009122</td>\n",
        "      <td>0.078942</td>\n",
        "      <td>0.000256</td>\n",
        "      <td>0.23</td>\n",
        "      <td>0.079</td>\n",
        "      <td>433</td>\n",
        "      <td>46</td>\n",
        "      <td>12</td>\n",
        "      <td>0.121802</td>\n",
        "      <td>1500</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.023724</td>\n",
        "      <td>0.025983</td>\n",
        "      <td>0.017267</td>\n",
        "      <td>0.000715</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.017</td>\n",
        "      <td>466</td>\n",
        "      <td>14</td>\n",
        "      <td>12</td>\n",
        "      <td>0.14209</td>\n",
        "      <td>1527</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.149348</td>\n",
        "      <td>0.067909</td>\n",
        "      <td>0.000817</td>\n",
        "      <td>0.000798</td>\n",
        "      <td>2.17</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1253</td>\n",
        "      <td>6</td>\n",
        "      <td>14</td>\n",
        "      <td>0.026264</td>\n",
        "      <td>822</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.067118</td>\n",
        "      <td>0.035728</td>\n",
        "      <td>0.000660</td>\n",
        "      <td>0.000141</td>\n",
        "      <td>1.87</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3535</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0247149</td>\n",
        "      <td>519</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000</td>\n",
        "      <td>4249</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0335894</td>\n",
        "      <td>912</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000</td>\n",
        "      <td>6373</td>\n",
        "      <td>10</td>\n",
        "      <td>20</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"9\" valign=\"top\">Medicine</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>288</td>\n",
        "      <td>0.008355</td>\n",
        "      <td>0.004422</td>\n",
        "      <td>0.019560</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>1.74</td>\n",
        "      <td>0.020</td>\n",
        "      <td>669</td>\n",
        "      <td>23</td>\n",
        "      <td>45</td>\n",
        "      <td>0.134783</td>\n",
        "      <td>1618</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.003898</td>\n",
        "      <td>0.021068</td>\n",
        "      <td>0.074037</td>\n",
        "      <td>0.000528</td>\n",
        "      <td>0.17</td>\n",
        "      <td>0.074</td>\n",
        "      <td>631</td>\n",
        "      <td>85</td>\n",
        "      <td>15</td>\n",
        "      <td>0.167263</td>\n",
        "      <td>1628</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>160</td>\n",
        "      <td>0.002364</td>\n",
        "      <td>0.009122</td>\n",
        "      <td>0.078942</td>\n",
        "      <td>0.000256</td>\n",
        "      <td>0.23</td>\n",
        "      <td>0.079</td>\n",
        "      <td>433</td>\n",
        "      <td>46</td>\n",
        "      <td>12</td>\n",
        "      <td>0.121802</td>\n",
        "      <td>1500</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.023724</td>\n",
        "      <td>0.025983</td>\n",
        "      <td>0.017267</td>\n",
        "      <td>0.000715</td>\n",
        "      <td>0.87</td>\n",
        "      <td>0.017</td>\n",
        "      <td>466</td>\n",
        "      <td>14</td>\n",
        "      <td>12</td>\n",
        "      <td>0.14209</td>\n",
        "      <td>1527</td>\n",
        "      <td>1 min 0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.149348</td>\n",
        "      <td>0.067909</td>\n",
        "      <td>0.000817</td>\n",
        "      <td>0.000798</td>\n",
        "      <td>2.17</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1253</td>\n",
        "      <td>6</td>\n",
        "      <td>14</td>\n",
        "      <td>0.026264</td>\n",
        "      <td>822</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.067118</td>\n",
        "      <td>0.035728</td>\n",
        "      <td>0.000660</td>\n",
        "      <td>0.000141</td>\n",
        "      <td>1.87</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3535</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0247149</td>\n",
        "      <td>519</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>480</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000</td>\n",
        "      <td>4249</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0335894</td>\n",
        "      <td>912</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>31Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.024516</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>1.88</td>\n",
        "      <td>0.000</td>\n",
        "      <td>6373</td>\n",
        "      <td>10</td>\n",
        "      <td>20</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>720</td>\n",
        "      <td>0.046273</td>\n",
        "      <td>0.049032</td>\n",
        "      <td>0.000068</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.94</td>\n",
        "      <td>0.000</td>\n",
        "      <td>6373</td>\n",
        "      <td>10</td>\n",
        "      <td>10</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE   tau  \\\n",
        "Scenario Phase                                                          \n",
        "Main     0th      Past  17Apr2020  01May2020   126529100  SIR-F   288   \n",
        "         1st      Past  02May2020  14May2020   126529100  SIR-F   480   \n",
        "         2nd      Past  15May2020  09Jun2020   126529100  SIR-F   160   \n",
        "         3rd      Past  10Jun2020  01Jul2020   126529100  SIR-F   480   \n",
        "         4th      Past  02Jul2020  11Jul2020   126529100  SIR-F  1440   \n",
        "         5th      Past  12Jul2020  22Jul2020   126529100  SIR-F   720   \n",
        "         6th      Past  23Jul2020  31Jul2020   126529100  SIR-F   480   \n",
        "         7th    Future  01Aug2020  01Jan2021   126529100  SIR-F   720   \n",
        "Medicine 0th      Past  17Apr2020  01May2020   126529100  SIR-F   288   \n",
        "         1st      Past  02May2020  14May2020   126529100  SIR-F   480   \n",
        "         2nd      Past  15May2020  09Jun2020   126529100  SIR-F   160   \n",
        "         3rd      Past  10Jun2020  01Jul2020   126529100  SIR-F   480   \n",
        "         4th      Past  02Jul2020  11Jul2020   126529100  SIR-F  1440   \n",
        "         5th      Past  12Jul2020  22Jul2020   126529100  SIR-F   720   \n",
        "         6th      Past  23Jul2020  31Jul2020   126529100  SIR-F   480   \n",
        "         7th    Future  01Aug2020  31Aug2020   126529100  SIR-F   720   \n",
        "         8th    Future  01Sep2020  01Jan2021   126529100  SIR-F   720   \n",
        "\n",
        "                     rho     sigma     theta     kappa    Rt  alpha1 [-]  \\\n",
        "Scenario Phase                                                             \n",
        "Main     0th    0.008355  0.004422  0.019560  0.000299  1.74       0.020   \n",
        "         1st    0.003898  0.021068  0.074037  0.000528  0.17       0.074   \n",
        "         2nd    0.002364  0.009122  0.078942  0.000256  0.23       0.079   \n",
        "         3rd    0.023724  0.025983  0.017267  0.000715  0.87       0.017   \n",
        "         4th    0.149348  0.067909  0.000817  0.000798  2.17       0.001   \n",
        "         5th    0.067118  0.035728  0.000660  0.000141  1.87       0.001   \n",
        "         6th    0.046273  0.024516  0.000068  0.000078  1.88       0.000   \n",
        "         7th    0.046273  0.024516  0.000068  0.000078  1.88       0.000   \n",
        "Medicine 0th    0.008355  0.004422  0.019560  0.000299  1.74       0.020   \n",
        "         1st    0.003898  0.021068  0.074037  0.000528  0.17       0.074   \n",
        "         2nd    0.002364  0.009122  0.078942  0.000256  0.23       0.079   \n",
        "         3rd    0.023724  0.025983  0.017267  0.000715  0.87       0.017   \n",
        "         4th    0.149348  0.067909  0.000817  0.000798  2.17       0.001   \n",
        "         5th    0.067118  0.035728  0.000660  0.000141  1.87       0.001   \n",
        "         6th    0.046273  0.024516  0.000068  0.000078  1.88       0.000   \n",
        "         7th    0.046273  0.024516  0.000068  0.000078  1.88       0.000   \n",
        "         8th    0.046273  0.049032  0.000068  0.000078  0.94       0.000   \n",
        "\n",
        "                1/alpha2 [day]  1/beta [day]  1/gamma [day]      RMSLE Trials  \\\n",
        "Scenario Phase                                                                  \n",
        "Main     0th               669            23             45   0.134783   1618   \n",
        "         1st               631            85             15   0.167263   1628   \n",
        "         2nd               433            46             12   0.121802   1500   \n",
        "         3rd               466            14             12    0.14209   1527   \n",
        "         4th              1253             6             14   0.026264    822   \n",
        "         5th              3535             7             13  0.0247149    519   \n",
        "         6th              4249             7             13  0.0335894    912   \n",
        "         7th              6373            10             20          -      -   \n",
        "Medicine 0th               669            23             45   0.134783   1618   \n",
        "         1st               631            85             15   0.167263   1628   \n",
        "         2nd               433            46             12   0.121802   1500   \n",
        "         3rd               466            14             12    0.14209   1527   \n",
        "         4th              1253             6             14   0.026264    822   \n",
        "         5th              3535             7             13  0.0247149    519   \n",
        "         6th              4249             7             13  0.0335894    912   \n",
        "         7th              6373            10             20          -      -   \n",
        "         8th              6373            10             10          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     0th     1 min 0 sec  \n",
        "         1st     1 min 0 sec  \n",
        "         2nd     1 min 0 sec  \n",
        "         3rd     1 min 0 sec  \n",
        "         4th    0 min 25 sec  \n",
        "         5th    0 min 15 sec  \n",
        "         6th    0 min 25 sec  \n",
        "         7th               -  \n",
        "Medicine 0th     1 min 0 sec  \n",
        "         1st     1 min 0 sec  \n",
        "         2nd     1 min 0 sec  \n",
        "         3rd     1 min 0 sec  \n",
        "         4th    0 min 25 sec  \n",
        "         5th    0 min 15 sec  \n",
        "         6th    0 min 25 sec  \n",
        "         7th               -  \n",
        "         8th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Susceptible</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>28Dec2020</td>\n",
        "      <td>1473</td>\n",
        "      <td>14209</td>\n",
        "      <td>284964</td>\n",
        "      <td>126228454</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>29Dec2020</td>\n",
        "      <td>1475</td>\n",
        "      <td>14125</td>\n",
        "      <td>286353</td>\n",
        "      <td>126227146</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>30Dec2020</td>\n",
        "      <td>1478</td>\n",
        "      <td>14042</td>\n",
        "      <td>287734</td>\n",
        "      <td>126225846</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>31Dec2020</td>\n",
        "      <td>1480</td>\n",
        "      <td>13959</td>\n",
        "      <td>289107</td>\n",
        "      <td>126224553</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>1482</td>\n",
        "      <td>13898</td>\n",
        "      <td>290132</td>\n",
        "      <td>126223589</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Fatal  Infected  Recovered  Susceptible\n",
        "255  28Dec2020   1473     14209     284964    126228454\n",
        "256  29Dec2020   1475     14125     286353    126227146\n",
        "257  30Dec2020   1478     14042     287734    126225846\n",
        "258  31Dec2020   1480     13959     289107    126224553\n",
        "259  01Jan2021   1482     13898     290132    126223589"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 01Jan2021</th>\n",
        "      <th>Fatal on 01Jan2021</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>4642612</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>4642612</td>\n",
        "      <td>20131</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>28264</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>13898</td>\n",
        "      <td>1482</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 01Jan2021  \\\n",
        "Main            4642612        01Jan2021                4642612   \n",
        "Medicine          28264        01Sep2020                  13898   \n",
        "\n",
        "          Fatal on 01Jan2021  \n",
        "Main                   20131  \n",
        "Medicine                1482  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
