{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1597313350107"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-theta.new.72.167.fix.120.155.157.163.164.165.174.188'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184229</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>5</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184230</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184231</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184232</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184233</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "184229      2020-08-09          5          2       0    107808.0  COL   \n",
        "184230      2020-08-10          6          2       0    107808.0  COL   \n",
        "184231      2020-08-11          6          2       0    107808.0  COL   \n",
        "184232      2020-08-12          6          2       0    107808.0  COL   \n",
        "184233      2020-08-13          6          2       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "184229        Vichada       Colombia               3                  3   \n",
        "184230        Vichada       Colombia               3                  3   \n",
        "184231        Vichada       Colombia               3                  3   \n",
        "184232        Vichada       Colombia               3                  3   \n",
        "184233        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "184229              2                        4                  1   \n",
        "184230              2                        4                  1   \n",
        "184231              2                        4                  1   \n",
        "184232              2                        4                  1   \n",
        "184233              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "184229                       2                               2   \n",
        "184230                       2                               2   \n",
        "184231                       2                               2   \n",
        "184232                       2                               2   \n",
        "184233                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "184229                                    4                      2   \n",
        "184230                                    4                      2   \n",
        "184231                                    4                      2   \n",
        "184232                                    4                      2   \n",
        "184233                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "184229               2                2             87.04  \n",
        "184230               2                2             87.04  \n",
        "184231               2                2             87.04  \n",
        "184232               2                2             87.04  \n",
        "184233               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184229</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>5</td>\n",
        "      <td>3</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184230</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184231</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184232</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184233</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "184229 2020-08-09  Colombia  Vichada          5         3      0          2\n",
        "184230 2020-08-10  Colombia  Vichada          6         4      0          2\n",
        "184231 2020-08-11  Colombia  Vichada          6         4      0          2\n",
        "184232 2020-08-12  Colombia  Vichada          6         4      0          2\n",
        "184233 2020-08-13  Colombia  Vichada          6         4      0          2"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>217</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>15867</td>\n",
        "      <td>3925</td>\n",
        "      <td>333</td>\n",
        "      <td>11609</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>218</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>16064</td>\n",
        "      <td>3952</td>\n",
        "      <td>334</td>\n",
        "      <td>11778</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>219</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>16252</td>\n",
        "      <td>3946</td>\n",
        "      <td>336</td>\n",
        "      <td>11970</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>16474</td>\n",
        "      <td>3918</td>\n",
        "      <td>336</td>\n",
        "      <td>12220</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>16680</td>\n",
        "      <td>3816</td>\n",
        "      <td>338</td>\n",
        "      <td>12526</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "217 2020-08-09      15867      3925    333      11609\n",
        "218 2020-08-10      16064      3952    334      11778\n",
        "219 2020-08-11      16252      3946    336      11970\n",
        "220 2020-08-12      16474      3918    336      12220\n",
        "221 2020-08-13      16680      3816    338      12526"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-09</th>\n",
        "      <td>19855487</td>\n",
        "      <td>7088412</td>\n",
        "      <td>732670</td>\n",
        "      <td>12034405</td>\n",
        "      <td>0.018450</td>\n",
        "      <td>0.303050</td>\n",
        "      <td>0.057387</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-10</th>\n",
        "      <td>20074835</td>\n",
        "      <td>7122487</td>\n",
        "      <td>737648</td>\n",
        "      <td>12214700</td>\n",
        "      <td>0.018372</td>\n",
        "      <td>0.304229</td>\n",
        "      <td>0.056951</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>20332393</td>\n",
        "      <td>7068280</td>\n",
        "      <td>744013</td>\n",
        "      <td>12520100</td>\n",
        "      <td>0.018296</td>\n",
        "      <td>0.307886</td>\n",
        "      <td>0.056092</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>20603858</td>\n",
        "      <td>7098284</td>\n",
        "      <td>750504</td>\n",
        "      <td>12755070</td>\n",
        "      <td>0.018213</td>\n",
        "      <td>0.309531</td>\n",
        "      <td>0.055570</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>20605871</td>\n",
        "      <td>7098494</td>\n",
        "      <td>750535</td>\n",
        "      <td>12756842</td>\n",
        "      <td>0.018212</td>\n",
        "      <td>0.309544</td>\n",
        "      <td>0.055565</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-08-09   19855487   7088412  732670   12034405             0.018450   \n",
        "2020-08-10   20074835   7122487  737648   12214700             0.018372   \n",
        "2020-08-11   20332393   7068280  744013   12520100             0.018296   \n",
        "2020-08-12   20603858   7098284  750504   12755070             0.018213   \n",
        "2020-08-13   20605871   7098494  750535   12756842             0.018212   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-08-09                 0.303050                        0.057387  \n",
        "2020-08-10                 0.304229                        0.056951  \n",
        "2020-08-11                 0.307886                        0.056092  \n",
        "2020-08-12                 0.309531                        0.055570  \n",
        "2020-08-13                 0.309544                        0.055565  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>218</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>48844</td>\n",
        "      <td>15489</td>\n",
        "      <td>1048</td>\n",
        "      <td>32307</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>219</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>49683</td>\n",
        "      <td>15581</td>\n",
        "      <td>1053</td>\n",
        "      <td>33049</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>50382</td>\n",
        "      <td>15352</td>\n",
        "      <td>1060</td>\n",
        "      <td>33970</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>51360</td>\n",
        "      <td>15412</td>\n",
        "      <td>1065</td>\n",
        "      <td>34883</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>52534</td>\n",
        "      <td>15329</td>\n",
        "      <td>1076</td>\n",
        "      <td>36129</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "218 2020-08-09      48844     15489   1048      32307\n",
        "219 2020-08-10      49683     15581   1053      33049\n",
        "220 2020-08-11      50382     15352   1060      33970\n",
        "221 2020-08-12      51360     15412   1065      34883\n",
        "222 2020-08-13      52534     15329   1076      36129"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184229</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>5</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184230</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184231</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184232</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184233</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "184229      2020-08-09          5          2       0    107808.0  COL   \n",
        "184230      2020-08-10          6          2       0    107808.0  COL   \n",
        "184231      2020-08-11          6          2       0    107808.0  COL   \n",
        "184232      2020-08-12          6          2       0    107808.0  COL   \n",
        "184233      2020-08-13          6          2       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "184229        Vichada       Colombia               3                  3   \n",
        "184230        Vichada       Colombia               3                  3   \n",
        "184231        Vichada       Colombia               3                  3   \n",
        "184232        Vichada       Colombia               3                  3   \n",
        "184233        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "184229              2                        4                  1   \n",
        "184230              2                        4                  1   \n",
        "184231              2                        4                  1   \n",
        "184232              2                        4                  1   \n",
        "184233              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "184229                       2                               2   \n",
        "184230                       2                               2   \n",
        "184231                       2                               2   \n",
        "184232                       2                               2   \n",
        "184233                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "184229                                    4                      2   \n",
        "184230                                    4                      2   \n",
        "184231                                    4                      2   \n",
        "184232                                    4                      2   \n",
        "184233                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "184229               2                2             87.04  \n",
        "184230               2                2             87.04  \n",
        "184231               2                2             87.04  \n",
        "184232               2                2             87.04  \n",
        "184233               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>180677</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>180678</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>180679</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>180680</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>180681</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "180677  COL  Colombia  Vichada 2020-08-09      107808\n",
        "180678  COL  Colombia  Vichada 2020-08-10      107808\n",
        "180679  COL  Colombia  Vichada 2020-08-11      107808\n",
        "180680  COL  Colombia  Vichada 2020-08-12      107808\n",
        "180681  COL  Colombia  Vichada 2020-08-13      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184229</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>5</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184230</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184231</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184232</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184233</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "184229      2020-08-09          5          2       0    107808.0  COL   \n",
        "184230      2020-08-10          6          2       0    107808.0  COL   \n",
        "184231      2020-08-11          6          2       0    107808.0  COL   \n",
        "184232      2020-08-12          6          2       0    107808.0  COL   \n",
        "184233      2020-08-13          6          2       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "184229        Vichada       Colombia               3                  3   \n",
        "184230        Vichada       Colombia               3                  3   \n",
        "184231        Vichada       Colombia               3                  3   \n",
        "184232        Vichada       Colombia               3                  3   \n",
        "184233        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "184229              2                        4                  1   \n",
        "184230              2                        4                  1   \n",
        "184231              2                        4                  1   \n",
        "184232              2                        4                  1   \n",
        "184233              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "184229                       2                               2   \n",
        "184230                       2                               2   \n",
        "184231                       2                               2   \n",
        "184232                       2                               2   \n",
        "184233                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "184229                                    4                      2   \n",
        "184230                                    4                      2   \n",
        "184231                                    4                      2   \n",
        "184232                                    4                      2   \n",
        "184233                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "184229               2                2             87.04  \n",
        "184230               2                2             87.04  \n",
        "184231               2                2             87.04  \n",
        "184232               2                2             87.04  \n",
        "184233               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184229</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184230</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184231</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184232</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184233</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "184229 2020-08-09  Colombia  COL               3                  3   \n",
        "184230 2020-08-10  Colombia  COL               3                  3   \n",
        "184231 2020-08-11  Colombia  COL               3                  3   \n",
        "184232 2020-08-12  Colombia  COL               3                  3   \n",
        "184233 2020-08-13  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "184229              2                        4                  1   \n",
        "184230              2                        4                  1   \n",
        "184231              2                        4                  1   \n",
        "184232              2                        4                  1   \n",
        "184233              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "184229                       2                               2   \n",
        "184230                       2                               2   \n",
        "184231                       2                               2   \n",
        "184232                       2                               2   \n",
        "184233                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "184229                                    4                      2   \n",
        "184230                                    4                      2   \n",
        "184231                                    4                      2   \n",
        "184232                                    4                      2   \n",
        "184233                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "184229               2                2             87.04  \n",
        "184230               2                2             87.04  \n",
        "184231               2                2             87.04  \n",
        "184232               2                2             87.04  \n",
        "184233               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(country=\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>218</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>219</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "218 2020-08-09               1                  1              1   \n",
        "219 2020-08-10               1                  1              1   \n",
        "220 2020-08-11               1                  1              1   \n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "218                        0                  0                       1   \n",
        "219                        0                  0                       1   \n",
        "220                        0                  0                       1   \n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "218                               1                                    3   \n",
        "219                               1                                    3   \n",
        "220                               1                                    3   \n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "218                      2               2                1             30.56  \n",
        "219                      2               2                1             30.56  \n",
        "220                      2               2                1             30.56  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(iso3=\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>218</th>\n",
        "      <td>2020-08-09</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>219</th>\n",
        "      <td>2020-08-10</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "218 2020-08-09               1                  1              1   \n",
        "219 2020-08-10               1                  1              1   \n",
        "220 2020-08-11               1                  1              1   \n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "218                        0                  0                       1   \n",
        "219                        0                  0                       1   \n",
        "220                        0                  0                       1   \n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "218                               1                                    3   \n",
        "219                               1                                    3   \n",
        "220                               1                                    3   \n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "218                      2               2                1             30.56  \n",
        "219                      2               2                1             30.56  \n",
        "220                      2               2                1             30.56  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  17Apr2020  01May2020   126529100\n",
        "2nd  Past  02May2020  14May2020   126529100\n",
        "3rd  Past  15May2020  09Jun2020   126529100\n",
        "4th  Past  10Jun2020  01Jul2020   126529100\n",
        "5th  Past  02Jul2020  11Jul2020   126529100\n",
        "6th  Past  12Jul2020  22Jul2020   126529100\n",
        "7th  Past  23Jul2020  31Jul2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase (23Jul2020 - 31Jul2020): finished  868 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase (10Jun2020 - 01Jul2020): finished  371 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase (02Jul2020 - 11Jul2020): finished  424 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase (15May2020 - 09Jun2020): finished  954 trials in 0 min 40 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase (17Apr2020 - 01May2020): finished 1444 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase (02May2020 - 14May2020): finished 1448 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase (12Jul2020 - 22Jul2020): finished 1582 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 56 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>23</td>\n",
        "      <td>442</td>\n",
        "      <td>0.000</td>\n",
        "      <td>51</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1444</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>72</td>\n",
        "      <td>586</td>\n",
        "      <td>0.052</td>\n",
        "      <td>16</td>\n",
        "      <td>0.154920</td>\n",
        "      <td>1448</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>56</td>\n",
        "      <td>522</td>\n",
        "      <td>0.101</td>\n",
        "      <td>12</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>954</td>\n",
        "      <td>0 min 40 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.020479</td>\n",
        "      <td>0.000802</td>\n",
        "      <td>0.021909</td>\n",
        "      <td>0.025236</td>\n",
        "      <td>480</td>\n",
        "      <td>15</td>\n",
        "      <td>415</td>\n",
        "      <td>0.020</td>\n",
        "      <td>13</td>\n",
        "      <td>0.126125</td>\n",
        "      <td>371</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>6</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.000</td>\n",
        "      <td>14</td>\n",
        "      <td>0.028599</td>\n",
        "      <td>424</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>0.023234</td>\n",
        "      <td>1582</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.003</td>\n",
        "      <td>13</td>\n",
        "      <td>0.033070</td>\n",
        "      <td>868</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE    Rt     theta     kappa  \\\n",
        "0th  Past  17Apr2020  01May2020   126529100  SIR-F  2.00  0.000299  0.000753   \n",
        "1st  Past  02May2020  14May2020   126529100  SIR-F  0.21  0.051825  0.000568   \n",
        "2nd  Past  15May2020  09Jun2020   126529100  SIR-F  0.20  0.100924  0.000638   \n",
        "3rd  Past  10Jun2020  01Jul2020   126529100  SIR-F  0.82  0.020479  0.000802   \n",
        "4th  Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10  0.000078  0.000231   \n",
        "5th  Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00  0.000676  0.000021   \n",
        "6th  Past  23Jul2020  31Jul2020   126529100  SIR-F  1.90  0.002509  0.000081   \n",
        "\n",
        "          rho     sigma  tau  1/beta [day]  1/alpha2 [day]  alpha1 [-]  \\\n",
        "0th  0.014476  0.006498  480            23             442       0.000   \n",
        "1st  0.004625  0.020161  480            72             586       0.052   \n",
        "2nd  0.005899  0.026441  480            56             522       0.101   \n",
        "3rd  0.021909  0.025236  480            15             415       0.020   \n",
        "4th  0.049821  0.023470  480             6            1441       0.000   \n",
        "5th  0.044626  0.022286  480             7           15662       0.001   \n",
        "6th  0.046411  0.024264  480             7            4117       0.003   \n",
        "\n",
        "     1/gamma [day]     RMSLE  Trials       Runtime  \n",
        "0th             51  0.136012    1444  1 min  0 sec  \n",
        "1st             16  0.154920    1448  1 min  0 sec  \n",
        "2nd             12  0.111488     954  0 min 40 sec  \n",
        "3rd             13  0.126125     371  0 min 15 sec  \n",
        "4th             14  0.028599     424  0 min 15 sec  \n",
        "5th             14  0.023234    1582  1 min  0 sec  \n",
        "6th             13  0.033070     868  0 min 25 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "2.1"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0th</th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.319470</td>\n",
        "      <td>0.407499</td>\n",
        "      <td>1.513474</td>\n",
        "      <td>3.441583</td>\n",
        "      <td>3.082732</td>\n",
        "      <td>3.206059</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>3.102454</td>\n",
        "      <td>4.068999</td>\n",
        "      <td>3.883509</td>\n",
        "      <td>3.611699</td>\n",
        "      <td>3.429456</td>\n",
        "      <td>3.733942</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       0th       1st       2nd       3rd       4th       5th       6th\n",
        "rho    1.0  0.319470  0.407499  1.513474  3.441583  3.082732  3.206059\n",
        "sigma  1.0  3.102454  4.068999  3.883509  3.611699  3.429456  3.733942"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0th</th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>2.0</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.2</td>\n",
        "      <td>0.82</td>\n",
        "      <td>2.1</td>\n",
        "      <td>2.0</td>\n",
        "      <td>1.9</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "    0th   1st  2nd   3rd  4th  5th  6th\n",
        "Rt  2.0  0.21  0.2  0.82  2.1  2.0  1.9"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>65499091</td>\n",
        "      <td>325845</td>\n",
        "      <td>17040946</td>\n",
        "      <td>48132300</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>66635386</td>\n",
        "      <td>332823</td>\n",
        "      <td>16932832</td>\n",
        "      <td>49369731</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>67741043</td>\n",
        "      <td>339696</td>\n",
        "      <td>16802897</td>\n",
        "      <td>50598450</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>68814817</td>\n",
        "      <td>346454</td>\n",
        "      <td>16651837</td>\n",
        "      <td>51816526</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>260</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>69857521</td>\n",
        "      <td>353093</td>\n",
        "      <td>16481854</td>\n",
        "      <td>53022574</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date  Confirmed   Fatal  Infected  Recovered\n",
        "256 2020-12-29   65499091  325845  17040946   48132300\n",
        "257 2020-12-30   66635386  332823  16932832   49369731\n",
        "258 2020-12-31   67741043  339696  16802897   50598450\n",
        "259 2021-01-01   68814817  346454  16651837   51816526\n",
        "260 2021-01-02   69857521  353093  16481854   53022574"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.02426419689496668"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.04852839378993336"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Main</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>23</td>\n",
        "      <td>442</td>\n",
        "      <td>0.000</td>\n",
        "      <td>51</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1444</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>72</td>\n",
        "      <td>586</td>\n",
        "      <td>0.052</td>\n",
        "      <td>16</td>\n",
        "      <td>0.15492</td>\n",
        "      <td>1448</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>56</td>\n",
        "      <td>522</td>\n",
        "      <td>0.101</td>\n",
        "      <td>12</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>954</td>\n",
        "      <td>0 min 40 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.020479</td>\n",
        "      <td>0.000802</td>\n",
        "      <td>0.021909</td>\n",
        "      <td>0.025236</td>\n",
        "      <td>480</td>\n",
        "      <td>15</td>\n",
        "      <td>415</td>\n",
        "      <td>0.020</td>\n",
        "      <td>13</td>\n",
        "      <td>0.126125</td>\n",
        "      <td>371</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>6</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.000</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0285986</td>\n",
        "      <td>424</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0232342</td>\n",
        "      <td>1582</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.003</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0330704</td>\n",
        "      <td>868</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.003</td>\n",
        "      <td>13</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"9\" valign=\"top\">Medicine</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>23</td>\n",
        "      <td>442</td>\n",
        "      <td>0.000</td>\n",
        "      <td>51</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1444</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>72</td>\n",
        "      <td>586</td>\n",
        "      <td>0.052</td>\n",
        "      <td>16</td>\n",
        "      <td>0.15492</td>\n",
        "      <td>1448</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>56</td>\n",
        "      <td>522</td>\n",
        "      <td>0.101</td>\n",
        "      <td>12</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>954</td>\n",
        "      <td>0 min 40 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.020479</td>\n",
        "      <td>0.000802</td>\n",
        "      <td>0.021909</td>\n",
        "      <td>0.025236</td>\n",
        "      <td>480</td>\n",
        "      <td>15</td>\n",
        "      <td>415</td>\n",
        "      <td>0.020</td>\n",
        "      <td>13</td>\n",
        "      <td>0.126125</td>\n",
        "      <td>371</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>6</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.000</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0285986</td>\n",
        "      <td>424</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0232342</td>\n",
        "      <td>1582</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.003</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0330704</td>\n",
        "      <td>868</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>31Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.003</td>\n",
        "      <td>13</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.95</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.048528</td>\n",
        "      <td>480</td>\n",
        "      <td>7</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.003</td>\n",
        "      <td>6</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE    Rt  \\\n",
        "Scenario Phase                                                          \n",
        "Main     0th      Past  17Apr2020  01May2020   126529100  SIR-F  2.00   \n",
        "         1st      Past  02May2020  14May2020   126529100  SIR-F  0.21   \n",
        "         2nd      Past  15May2020  09Jun2020   126529100  SIR-F  0.20   \n",
        "         3rd      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.82   \n",
        "         4th      Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10   \n",
        "         5th      Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00   \n",
        "         6th      Past  23Jul2020  31Jul2020   126529100  SIR-F  1.90   \n",
        "         7th    Future  01Aug2020  01Jan2021   126529100  SIR-F  1.90   \n",
        "Medicine 0th      Past  17Apr2020  01May2020   126529100  SIR-F  2.00   \n",
        "         1st      Past  02May2020  14May2020   126529100  SIR-F  0.21   \n",
        "         2nd      Past  15May2020  09Jun2020   126529100  SIR-F  0.20   \n",
        "         3rd      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.82   \n",
        "         4th      Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10   \n",
        "         5th      Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00   \n",
        "         6th      Past  23Jul2020  31Jul2020   126529100  SIR-F  1.90   \n",
        "         7th    Future  01Aug2020  31Aug2020   126529100  SIR-F  1.90   \n",
        "         8th    Future  01Sep2020  01Jan2021   126529100  SIR-F  0.95   \n",
        "\n",
        "                   theta     kappa       rho     sigma  tau  1/beta [day]  \\\n",
        "Scenario Phase                                                              \n",
        "Main     0th    0.000299  0.000753  0.014476  0.006498  480            23   \n",
        "         1st    0.051825  0.000568  0.004625  0.020161  480            72   \n",
        "         2nd    0.100924  0.000638  0.005899  0.026441  480            56   \n",
        "         3rd    0.020479  0.000802  0.021909  0.025236  480            15   \n",
        "         4th    0.000078  0.000231  0.049821  0.023470  480             6   \n",
        "         5th    0.000676  0.000021  0.044626  0.022286  480             7   \n",
        "         6th    0.002509  0.000081  0.046411  0.024264  480             7   \n",
        "         7th    0.002509  0.000081  0.046411  0.024264  480             7   \n",
        "Medicine 0th    0.000299  0.000753  0.014476  0.006498  480            23   \n",
        "         1st    0.051825  0.000568  0.004625  0.020161  480            72   \n",
        "         2nd    0.100924  0.000638  0.005899  0.026441  480            56   \n",
        "         3rd    0.020479  0.000802  0.021909  0.025236  480            15   \n",
        "         4th    0.000078  0.000231  0.049821  0.023470  480             6   \n",
        "         5th    0.000676  0.000021  0.044626  0.022286  480             7   \n",
        "         6th    0.002509  0.000081  0.046411  0.024264  480             7   \n",
        "         7th    0.002509  0.000081  0.046411  0.024264  480             7   \n",
        "         8th    0.002509  0.000081  0.046411  0.048528  480             7   \n",
        "\n",
        "                1/alpha2 [day]  alpha1 [-]  1/gamma [day]      RMSLE Trials  \\\n",
        "Scenario Phase                                                                \n",
        "Main     0th               442       0.000             51   0.136012   1444   \n",
        "         1st               586       0.052             16    0.15492   1448   \n",
        "         2nd               522       0.101             12   0.111488    954   \n",
        "         3rd               415       0.020             13   0.126125    371   \n",
        "         4th              1441       0.000             14  0.0285986    424   \n",
        "         5th             15662       0.001             14  0.0232342   1582   \n",
        "         6th              4117       0.003             13  0.0330704    868   \n",
        "         7th              4117       0.003             13          -      -   \n",
        "Medicine 0th               442       0.000             51   0.136012   1444   \n",
        "         1st               586       0.052             16    0.15492   1448   \n",
        "         2nd               522       0.101             12   0.111488    954   \n",
        "         3rd               415       0.020             13   0.126125    371   \n",
        "         4th              1441       0.000             14  0.0285986    424   \n",
        "         5th             15662       0.001             14  0.0232342   1582   \n",
        "         6th              4117       0.003             13  0.0330704    868   \n",
        "         7th              4117       0.003             13          -      -   \n",
        "         8th              4117       0.003              6          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     0th    1 min  0 sec  \n",
        "         1st    1 min  0 sec  \n",
        "         2nd    0 min 40 sec  \n",
        "         3rd    0 min 15 sec  \n",
        "         4th    0 min 15 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    0 min 25 sec  \n",
        "         7th               -  \n",
        "Medicine 0th    1 min  0 sec  \n",
        "         1st    1 min  0 sec  \n",
        "         2nd    0 min 40 sec  \n",
        "         3rd    0 min 15 sec  \n",
        "         4th    0 min 15 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    0 min 25 sec  \n",
        "         7th               -  \n",
        "         8th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>678814</td>\n",
        "      <td>3870</td>\n",
        "      <td>20787</td>\n",
        "      <td>654157</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>681681</td>\n",
        "      <td>3883</td>\n",
        "      <td>20627</td>\n",
        "      <td>657171</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>684527</td>\n",
        "      <td>3895</td>\n",
        "      <td>20469</td>\n",
        "      <td>660163</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>687350</td>\n",
        "      <td>3907</td>\n",
        "      <td>20312</td>\n",
        "      <td>663131</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>260</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>690152</td>\n",
        "      <td>3919</td>\n",
        "      <td>20156</td>\n",
        "      <td>666077</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "256 2020-12-29     678814   3870     20787     654157\n",
        "257 2020-12-30     681681   3883     20627     657171\n",
        "258 2020-12-31     684527   3895     20469     660163\n",
        "259 2021-01-01     687350   3907     20312     663131\n",
        "260 2021-01-02     690152   3919     20156     666077"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 02Jan2021</th>\n",
        "      <th>Fatal on 02Jan2021</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>17244628</td>\n",
        "      <td>25Dec2020</td>\n",
        "      <td>16481854</td>\n",
        "      <td>353093</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>50316</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>20156</td>\n",
        "      <td>3919</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 02Jan2021  \\\n",
        "Main           17244628        25Dec2020               16481854   \n",
        "Medicine          50316        01Sep2020                  20156   \n",
        "\n",
        "          Fatal on 02Jan2021  \n",
        "Main                  353093  \n",
        "Medicine                3919  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
