{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1597313350107"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-lambda.new.57.72.167.176.191.fix.120.155.157.163.164.165.174.188'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "176775      2020-08-11          6          2       0    107808.0  COL   \n",
        "176776      2020-08-12          6          2       0    107808.0  COL   \n",
        "176777      2020-08-13          6          2       0    107808.0  COL   \n",
        "176778      2020-08-14          6          5       0    107808.0  COL   \n",
        "176779      2020-08-15          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "176775        Vichada       Colombia               3                  3   \n",
        "176776        Vichada       Colombia               3                  3   \n",
        "176777        Vichada       Colombia               3                  3   \n",
        "176778        Vichada       Colombia               3                  3   \n",
        "176779        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "176775 2020-08-11  Colombia  Vichada          6         4      0          2\n",
        "176776 2020-08-12  Colombia  Vichada          6         4      0          2\n",
        "176777 2020-08-13  Colombia  Vichada          6         4      0          2\n",
        "176778 2020-08-14  Colombia  Vichada          6         1      0          5\n",
        "176779 2020-08-15  Colombia  Vichada          6         1      0          5"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>209</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>16252</td>\n",
        "      <td>3946</td>\n",
        "      <td>336</td>\n",
        "      <td>11970</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>210</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>16474</td>\n",
        "      <td>3918</td>\n",
        "      <td>336</td>\n",
        "      <td>12220</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>16680</td>\n",
        "      <td>3816</td>\n",
        "      <td>338</td>\n",
        "      <td>12526</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>17069</td>\n",
        "      <td>3883</td>\n",
        "      <td>338</td>\n",
        "      <td>12848</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>17454</td>\n",
        "      <td>3842</td>\n",
        "      <td>338</td>\n",
        "      <td>13274</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "209 2020-08-11      16252      3946    336      11970\n",
        "210 2020-08-12      16474      3918    336      12220\n",
        "211 2020-08-13      16680      3816    338      12526\n",
        "212 2020-08-14      17069      3883    338      12848\n",
        "213 2020-08-15      17454      3842    338      13274"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-11</th>\n",
        "      <td>20337539</td>\n",
        "      <td>7071677</td>\n",
        "      <td>744404</td>\n",
        "      <td>12521458</td>\n",
        "      <td>0.018301</td>\n",
        "      <td>0.307841</td>\n",
        "      <td>0.056114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>20617055</td>\n",
        "      <td>7109156</td>\n",
        "      <td>751074</td>\n",
        "      <td>12756825</td>\n",
        "      <td>0.018215</td>\n",
        "      <td>0.309376</td>\n",
        "      <td>0.055603</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>20926850</td>\n",
        "      <td>7251237</td>\n",
        "      <td>760749</td>\n",
        "      <td>12914864</td>\n",
        "      <td>0.018176</td>\n",
        "      <td>0.308572</td>\n",
        "      <td>0.055628</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>21137358</td>\n",
        "      <td>7166571</td>\n",
        "      <td>765704</td>\n",
        "      <td>13205083</td>\n",
        "      <td>0.018113</td>\n",
        "      <td>0.312364</td>\n",
        "      <td>0.054808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>21138664</td>\n",
        "      <td>7166312</td>\n",
        "      <td>765711</td>\n",
        "      <td>13206641</td>\n",
        "      <td>0.018112</td>\n",
        "      <td>0.312381</td>\n",
        "      <td>0.054802</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-08-11   20337539   7071677  744404   12521458             0.018301   \n",
        "2020-08-12   20617055   7109156  751074   12756825             0.018215   \n",
        "2020-08-13   20926850   7251237  760749   12914864             0.018176   \n",
        "2020-08-14   21137358   7166571  765704   13205083             0.018113   \n",
        "2020-08-15   21138664   7166312  765711   13206641             0.018112   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-08-11                 0.307841                        0.056114  \n",
        "2020-08-12                 0.309376                        0.055603  \n",
        "2020-08-13                 0.308572                        0.055628  \n",
        "2020-08-14                 0.312364                        0.054808  \n",
        "2020-08-15                 0.312381                        0.054802  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>50382</td>\n",
        "      <td>15366</td>\n",
        "      <td>1060</td>\n",
        "      <td>33956</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>51360</td>\n",
        "      <td>15420</td>\n",
        "      <td>1065</td>\n",
        "      <td>34875</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>52534</td>\n",
        "      <td>15344</td>\n",
        "      <td>1076</td>\n",
        "      <td>36114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>53894</td>\n",
        "      <td>15337</td>\n",
        "      <td>1086</td>\n",
        "      <td>37471</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>55123</td>\n",
        "      <td>15130</td>\n",
        "      <td>1092</td>\n",
        "      <td>38901</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "220 2020-08-11      50382     15366   1060      33956\n",
        "221 2020-08-12      51360     15420   1065      34875\n",
        "222 2020-08-13      52534     15344   1076      36114\n",
        "223 2020-08-14      53894     15337   1086      37471\n",
        "224 2020-08-15      55123     15130   1092      38901"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "176775      2020-08-11          6          2       0    107808.0  COL   \n",
        "176776      2020-08-12          6          2       0    107808.0  COL   \n",
        "176777      2020-08-13          6          2       0    107808.0  COL   \n",
        "176778      2020-08-14          6          5       0    107808.0  COL   \n",
        "176779      2020-08-15          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "176775        Vichada       Colombia               3                  3   \n",
        "176776        Vichada       Colombia               3                  3   \n",
        "176777        Vichada       Colombia               3                  3   \n",
        "176778        Vichada       Colombia               3                  3   \n",
        "176779        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>173351</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173352</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173353</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173354</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>173355</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "173351  COL  Colombia  Vichada 2020-08-11      107808\n",
        "173352  COL  Colombia  Vichada 2020-08-12      107808\n",
        "173353  COL  Colombia  Vichada 2020-08-13      107808\n",
        "173354  COL  Colombia  Vichada 2020-08-14      107808\n",
        "173355  COL  Colombia  Vichada 2020-08-15      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "176775      2020-08-11          6          2       0    107808.0  COL   \n",
        "176776      2020-08-12          6          2       0    107808.0  COL   \n",
        "176777      2020-08-13          6          2       0    107808.0  COL   \n",
        "176778      2020-08-14          6          5       0    107808.0  COL   \n",
        "176779      2020-08-15          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "176775        Vichada       Colombia               3                  3   \n",
        "176776        Vichada       Colombia               3                  3   \n",
        "176777        Vichada       Colombia               3                  3   \n",
        "176778        Vichada       Colombia               3                  3   \n",
        "176779        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>176775</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176776</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176777</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176778</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>176779</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "176775 2020-08-11  Colombia  COL               3                  3   \n",
        "176776 2020-08-12  Colombia  COL               3                  3   \n",
        "176777 2020-08-13  Colombia  COL               3                  3   \n",
        "176778 2020-08-14  Colombia  COL               3                  3   \n",
        "176779 2020-08-15  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "176775              2                        4                  1   \n",
        "176776              2                        4                  1   \n",
        "176777              2                        4                  1   \n",
        "176778              2                        4                  1   \n",
        "176779              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "176775                       2                               2   \n",
        "176776                       2                               2   \n",
        "176777                       2                               2   \n",
        "176778                       2                               2   \n",
        "176779                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "176775                                    4                      2   \n",
        "176776                                    4                      2   \n",
        "176777                                    4                      2   \n",
        "176778                                    4                      2   \n",
        "176779                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "176775               2                2             87.04  \n",
        "176776               2                2             87.04  \n",
        "176777               2                2             87.04  \n",
        "176778               2                2             87.04  \n",
        "176779               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "220 2020-08-11               1                  1              1   \n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "220                        0                  0                       1   \n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "220                               1                                    3   \n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "220                      2               2                1             30.56  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>220</th>\n",
        "      <td>2020-08-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "220 2020-08-11               1                  1              1   \n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "220                        0                  0                       1   \n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "220                               1                                    3   \n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "220                      2               2                1             30.56  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  17Apr2020  01May2020   126529100\n",
        "2nd  Past  02May2020  14May2020   126529100\n",
        "3rd  Past  15May2020  09Jun2020   126529100\n",
        "4th  Past  10Jun2020  01Jul2020   126529100\n",
        "5th  Past  02Jul2020  11Jul2020   126529100\n",
        "6th  Past  12Jul2020  22Jul2020   126529100\n",
        "7th  Past  23Jul2020  31Jul2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase (23Jul2020 - 31Jul2020): finished  870 trials in 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase (10Jun2020 - 01Jul2020): finished  359 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase (02Jul2020 - 11Jul2020): finished  361 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase (15May2020 - 09Jun2020): finished  917 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase (02May2020 - 14May2020): finished 1597 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase (17Apr2020 - 01May2020): finished 1596 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase (12Jul2020 - 22Jul2020): finished 1675 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 46 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>51</td>\n",
        "      <td>23</td>\n",
        "      <td>0.000</td>\n",
        "      <td>442</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1596</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>16</td>\n",
        "      <td>72</td>\n",
        "      <td>0.052</td>\n",
        "      <td>586</td>\n",
        "      <td>0.154920</td>\n",
        "      <td>1597</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>12</td>\n",
        "      <td>56</td>\n",
        "      <td>0.101</td>\n",
        "      <td>522</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>917</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.020479</td>\n",
        "      <td>0.000802</td>\n",
        "      <td>0.021909</td>\n",
        "      <td>0.025236</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>15</td>\n",
        "      <td>0.020</td>\n",
        "      <td>415</td>\n",
        "      <td>0.126125</td>\n",
        "      <td>359</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.028599</td>\n",
        "      <td>361</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.023234</td>\n",
        "      <td>1675</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>7</td>\n",
        "      <td>0.003</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.033070</td>\n",
        "      <td>870</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE    Rt     theta     kappa  \\\n",
        "1st  Past  17Apr2020  01May2020   126529100  SIR-F  2.00  0.000299  0.000753   \n",
        "2nd  Past  02May2020  14May2020   126529100  SIR-F  0.21  0.051825  0.000568   \n",
        "3rd  Past  15May2020  09Jun2020   126529100  SIR-F  0.20  0.100924  0.000638   \n",
        "4th  Past  10Jun2020  01Jul2020   126529100  SIR-F  0.82  0.020479  0.000802   \n",
        "5th  Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10  0.000078  0.000231   \n",
        "6th  Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00  0.000676  0.000021   \n",
        "7th  Past  23Jul2020  31Jul2020   126529100  SIR-F  1.90  0.002509  0.000081   \n",
        "\n",
        "          rho     sigma  tau  1/gamma [day]  1/beta [day]  alpha1 [-]  \\\n",
        "1st  0.014476  0.006498  480             51            23       0.000   \n",
        "2nd  0.004625  0.020161  480             16            72       0.052   \n",
        "3rd  0.005899  0.026441  480             12            56       0.101   \n",
        "4th  0.021909  0.025236  480             13            15       0.020   \n",
        "5th  0.049821  0.023470  480             14             6       0.000   \n",
        "6th  0.044626  0.022286  480             14             7       0.001   \n",
        "7th  0.046411  0.024264  480             13             7       0.003   \n",
        "\n",
        "     1/alpha2 [day]     RMSLE  Trials       Runtime  \n",
        "1st             442  0.136012    1596  1 min  0 sec  \n",
        "2nd             586  0.154920    1597  1 min  0 sec  \n",
        "3rd             522  0.111488     917  0 min 30 sec  \n",
        "4th             415  0.126125     359  0 min 10 sec  \n",
        "5th            1441  0.028599     361  0 min 10 sec  \n",
        "6th           15662  0.023234    1675  1 min  0 sec  \n",
        "7th            4117  0.033070     870  0 min 25 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "0.82"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.319470</td>\n",
        "      <td>0.407499</td>\n",
        "      <td>1.513474</td>\n",
        "      <td>3.441583</td>\n",
        "      <td>3.082732</td>\n",
        "      <td>3.206059</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>3.102454</td>\n",
        "      <td>4.068999</td>\n",
        "      <td>3.883509</td>\n",
        "      <td>3.611699</td>\n",
        "      <td>3.429456</td>\n",
        "      <td>3.733942</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       1st       2nd       3rd       4th       5th       6th       7th\n",
        "rho    1.0  0.319470  0.407499  1.513474  3.441583  3.082732  3.206059\n",
        "sigma  1.0  3.102454  4.068999  3.883509  3.611699  3.429456  3.733942"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>2.0</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.2</td>\n",
        "      <td>0.82</td>\n",
        "      <td>2.1</td>\n",
        "      <td>2.0</td>\n",
        "      <td>1.9</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "    1st   2nd  3rd   4th  5th  6th  7th\n",
        "Rt  2.0  0.21  0.2  0.82  2.1  2.0  1.9"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>70906958</td>\n",
        "      <td>359358</td>\n",
        "      <td>16404736</td>\n",
        "      <td>54142864</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>71897529</td>\n",
        "      <td>365802</td>\n",
        "      <td>16202126</td>\n",
        "      <td>55329601</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>72856528</td>\n",
        "      <td>372116</td>\n",
        "      <td>15983296</td>\n",
        "      <td>56501116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>73785600</td>\n",
        "      <td>378301</td>\n",
        "      <td>15751092</td>\n",
        "      <td>57656207</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>260</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>74684990</td>\n",
        "      <td>384353</td>\n",
        "      <td>15506692</td>\n",
        "      <td>58793945</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date  Confirmed   Fatal  Infected  Recovered\n",
        "256 2020-12-29   70906958  359358  16404736   54142864\n",
        "257 2020-12-30   71897529  365802  16202126   55329601\n",
        "258 2020-12-31   72856528  372116  15983296   56501116\n",
        "259 2021-01-01   73785600  378301  15751092   57656207\n",
        "260 2021-01-02   74684990  384353  15506692   58793945"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.02426419689496668"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.04852839378993336"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Main</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>51</td>\n",
        "      <td>23</td>\n",
        "      <td>0.000</td>\n",
        "      <td>442</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1596</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>16</td>\n",
        "      <td>72</td>\n",
        "      <td>0.052</td>\n",
        "      <td>586</td>\n",
        "      <td>0.15492</td>\n",
        "      <td>1597</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>12</td>\n",
        "      <td>56</td>\n",
        "      <td>0.101</td>\n",
        "      <td>522</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>917</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.020479</td>\n",
        "      <td>0.000802</td>\n",
        "      <td>0.021909</td>\n",
        "      <td>0.025236</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>15</td>\n",
        "      <td>0.020</td>\n",
        "      <td>415</td>\n",
        "      <td>0.126125</td>\n",
        "      <td>359</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.0285986</td>\n",
        "      <td>361</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.0232342</td>\n",
        "      <td>1675</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>7</td>\n",
        "      <td>0.003</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.0330704</td>\n",
        "      <td>870</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>7</td>\n",
        "      <td>0.003</td>\n",
        "      <td>4117</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"9\" valign=\"top\">Medicine</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000299</td>\n",
        "      <td>0.000753</td>\n",
        "      <td>0.014476</td>\n",
        "      <td>0.006498</td>\n",
        "      <td>480</td>\n",
        "      <td>51</td>\n",
        "      <td>23</td>\n",
        "      <td>0.000</td>\n",
        "      <td>442</td>\n",
        "      <td>0.136012</td>\n",
        "      <td>1596</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.21</td>\n",
        "      <td>0.051825</td>\n",
        "      <td>0.000568</td>\n",
        "      <td>0.004625</td>\n",
        "      <td>0.020161</td>\n",
        "      <td>480</td>\n",
        "      <td>16</td>\n",
        "      <td>72</td>\n",
        "      <td>0.052</td>\n",
        "      <td>586</td>\n",
        "      <td>0.15492</td>\n",
        "      <td>1597</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.20</td>\n",
        "      <td>0.100924</td>\n",
        "      <td>0.000638</td>\n",
        "      <td>0.005899</td>\n",
        "      <td>0.026441</td>\n",
        "      <td>480</td>\n",
        "      <td>12</td>\n",
        "      <td>56</td>\n",
        "      <td>0.101</td>\n",
        "      <td>522</td>\n",
        "      <td>0.111488</td>\n",
        "      <td>917</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.82</td>\n",
        "      <td>0.020479</td>\n",
        "      <td>0.000802</td>\n",
        "      <td>0.021909</td>\n",
        "      <td>0.025236</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>15</td>\n",
        "      <td>0.020</td>\n",
        "      <td>415</td>\n",
        "      <td>0.126125</td>\n",
        "      <td>359</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.10</td>\n",
        "      <td>0.000078</td>\n",
        "      <td>0.000231</td>\n",
        "      <td>0.049821</td>\n",
        "      <td>0.023470</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.000</td>\n",
        "      <td>1441</td>\n",
        "      <td>0.0285986</td>\n",
        "      <td>361</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.00</td>\n",
        "      <td>0.000676</td>\n",
        "      <td>0.000021</td>\n",
        "      <td>0.044626</td>\n",
        "      <td>0.022286</td>\n",
        "      <td>480</td>\n",
        "      <td>14</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>15662</td>\n",
        "      <td>0.0232342</td>\n",
        "      <td>1675</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>7</td>\n",
        "      <td>0.003</td>\n",
        "      <td>4117</td>\n",
        "      <td>0.0330704</td>\n",
        "      <td>870</td>\n",
        "      <td>0 min 25 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>31Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.90</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.024264</td>\n",
        "      <td>480</td>\n",
        "      <td>13</td>\n",
        "      <td>7</td>\n",
        "      <td>0.003</td>\n",
        "      <td>4117</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.95</td>\n",
        "      <td>0.002509</td>\n",
        "      <td>0.000081</td>\n",
        "      <td>0.046411</td>\n",
        "      <td>0.048528</td>\n",
        "      <td>480</td>\n",
        "      <td>6</td>\n",
        "      <td>7</td>\n",
        "      <td>0.003</td>\n",
        "      <td>4117</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE    Rt  \\\n",
        "Scenario Phase                                                          \n",
        "Main     1st      Past  17Apr2020  01May2020   126529100  SIR-F  2.00   \n",
        "         2nd      Past  02May2020  14May2020   126529100  SIR-F  0.21   \n",
        "         3rd      Past  15May2020  09Jun2020   126529100  SIR-F  0.20   \n",
        "         4th      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.82   \n",
        "         5th      Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10   \n",
        "         6th      Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00   \n",
        "         7th      Past  23Jul2020  31Jul2020   126529100  SIR-F  1.90   \n",
        "         8th    Future  01Aug2020  01Jan2021   126529100  SIR-F  1.90   \n",
        "Medicine 1st      Past  17Apr2020  01May2020   126529100  SIR-F  2.00   \n",
        "         2nd      Past  02May2020  14May2020   126529100  SIR-F  0.21   \n",
        "         3rd      Past  15May2020  09Jun2020   126529100  SIR-F  0.20   \n",
        "         4th      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.82   \n",
        "         5th      Past  02Jul2020  11Jul2020   126529100  SIR-F  2.10   \n",
        "         6th      Past  12Jul2020  22Jul2020   126529100  SIR-F  2.00   \n",
        "         7th      Past  23Jul2020  31Jul2020   126529100  SIR-F  1.90   \n",
        "         8th    Future  01Aug2020  31Aug2020   126529100  SIR-F  1.90   \n",
        "         9th    Future  01Sep2020  01Jan2021   126529100  SIR-F  0.95   \n",
        "\n",
        "                   theta     kappa       rho     sigma  tau  1/gamma [day]  \\\n",
        "Scenario Phase                                                               \n",
        "Main     1st    0.000299  0.000753  0.014476  0.006498  480             51   \n",
        "         2nd    0.051825  0.000568  0.004625  0.020161  480             16   \n",
        "         3rd    0.100924  0.000638  0.005899  0.026441  480             12   \n",
        "         4th    0.020479  0.000802  0.021909  0.025236  480             13   \n",
        "         5th    0.000078  0.000231  0.049821  0.023470  480             14   \n",
        "         6th    0.000676  0.000021  0.044626  0.022286  480             14   \n",
        "         7th    0.002509  0.000081  0.046411  0.024264  480             13   \n",
        "         8th    0.002509  0.000081  0.046411  0.024264  480             13   \n",
        "Medicine 1st    0.000299  0.000753  0.014476  0.006498  480             51   \n",
        "         2nd    0.051825  0.000568  0.004625  0.020161  480             16   \n",
        "         3rd    0.100924  0.000638  0.005899  0.026441  480             12   \n",
        "         4th    0.020479  0.000802  0.021909  0.025236  480             13   \n",
        "         5th    0.000078  0.000231  0.049821  0.023470  480             14   \n",
        "         6th    0.000676  0.000021  0.044626  0.022286  480             14   \n",
        "         7th    0.002509  0.000081  0.046411  0.024264  480             13   \n",
        "         8th    0.002509  0.000081  0.046411  0.024264  480             13   \n",
        "         9th    0.002509  0.000081  0.046411  0.048528  480              6   \n",
        "\n",
        "                1/beta [day]  alpha1 [-]  1/alpha2 [day]      RMSLE Trials  \\\n",
        "Scenario Phase                                                               \n",
        "Main     1st              23       0.000             442   0.136012   1596   \n",
        "         2nd              72       0.052             586    0.15492   1597   \n",
        "         3rd              56       0.101             522   0.111488    917   \n",
        "         4th              15       0.020             415   0.126125    359   \n",
        "         5th               6       0.000            1441  0.0285986    361   \n",
        "         6th               7       0.001           15662  0.0232342   1675   \n",
        "         7th               7       0.003            4117  0.0330704    870   \n",
        "         8th               7       0.003            4117          -      -   \n",
        "Medicine 1st              23       0.000             442   0.136012   1596   \n",
        "         2nd              72       0.052             586    0.15492   1597   \n",
        "         3rd              56       0.101             522   0.111488    917   \n",
        "         4th              15       0.020             415   0.126125    359   \n",
        "         5th               6       0.000            1441  0.0285986    361   \n",
        "         6th               7       0.001           15662  0.0232342   1675   \n",
        "         7th               7       0.003            4117  0.0330704    870   \n",
        "         8th               7       0.003            4117          -      -   \n",
        "         9th               7       0.003            4117          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    0 min 30 sec  \n",
        "         4th    0 min 10 sec  \n",
        "         5th    0 min 10 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th    0 min 25 sec  \n",
        "         8th               -  \n",
        "Medicine 1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    0 min 30 sec  \n",
        "         4th    0 min 10 sec  \n",
        "         5th    0 min 10 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th    0 min 25 sec  \n",
        "         8th               -  \n",
        "         9th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAn0AAAGmCAYAAAAJYjK8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAAB0UUlEQVR4nO3dd3hUZfbA8e9JIwRCFwHBAioqqKBY14KKa0cXddUVFSzYlVV05WdfXWUVXbFgV1BcxVVWxYKFFVxFXRDpUkMTaaEE0su8vz/uDVxCAgn33rkl5/M8eZKZO3PuOe9MMifvfeeOGGNQSimllFLxlhJ0AkoppZRSyn/a9CmllFJK1QPa9CmllFJK1QPa9CmllFJK1QPa9CmllFJK1QPa9CmllFJK1QPa9Kl6RUSMiPS0fz5eRPIDyGGJiPRL9n53xjk2QRORy0VkmYjki8hVQefjhoh0FpHFItIoSfvb234s97YvXyois2t530B+J8JORGaLyKW1vG1DEckRkf39zkuputKmL4ZEZISIjAg6j7qwX6SK7Bf5dSIyUUSO83Ofxpj/GmMa1zK/bV5IlX9EJA14HrjVGNPYGPNq0Dm5NBR4whhTACAiD9jPpVFVbygi39rb+nm1c2PMW8aYLrW8ba1/J+oTY0wXY8xbtbxtEfAE8Li/WSlVd9r0qTA5w37B6QDMBD4RkSZVbyQiaSIiSc9O1YmLx6kNkAX87HFKSScinYGTgTerbJoPnCsiLR23PRg4AFiVvAzVjohIxi7edRTQS0Q6eZmPUm5p0xdzIvKQiCy0Z9CW2pdTHNsniMjTIvKBiGwWkQXOwxgi0lZEPhGRNSKySUQmi8jJju2VM2B9RWSGHWOSiBywqzkbYwqBF4AmwH4i0tPex8UishAoBBqJyB4i8k8RWWHn97aI7ObIrbWIjBGRjfbhlkuqjE1PETFVrusvItNFJE9EVorIw/amysNjs+2xfMK+fTMRed4e23Ui8qmIdHTEaywir9rbVojIwJ3Vbx/+vVtEPnM8Juc6tj8gIhOq3Geb2V07xn0iMl5ECkRkloh0F5GL7Hh5IvK6iKRX2X03EfnJ3u+PInJYlf1c7hif2SJycdXxrPo4VVNfqoj8n/283Gg/X46tjAHMqzLWrWsYp952jhtEZK2IvObY9rJsPTy8QERucmwTEfmriPxq1/mriDzi2L6z59VNIrLIvu9q2fGs+nnA/4wxeVWuXwl8DvR3XHcdMBIoqVLnASLysb2vFSIyXByHikWkk/04bxKRX7CaTOf9+4nIEsflNBG5Q0R+sWtYKiI32tu2+Z2ofK6JyP3278N6+/meWtvxqkpEThKRKfZzaJ2IfCcizXeWm739KDufdbL171maY7sRkRvs51S+WH+TjnVs7yki39t1rBORsSKyT9WxEpGBIrIMWGZfv82SDBE5zt7HRvt5fJdzTOzHezLW469UeBhj9CtmX8AIYIT9c1+gPSDAEUAucI3jthOwXpzPAtLs7yXAUfb29sAfsF68M4B7gDyglb19b8BgvYDtDmQCY4Dxjn38Cdi4k5wN0NP+uTHwHLAByAZ62tvfA1rY+2gAzAX+bufWGGs25UtHzC+AT4Dm9teHVfbT0/oV2HL7a4HVWC+aqUBT4Lgqde7tuL0AX9v7bWHnNASYA6Tbt3kJ64//HnaerwBlQL8djMUS+6s71j9md9hj3tje/gAwoabH3BFjEXAQkI4185Bj778RsJf9XLiiymMwHzjQruUBezyy7e397LiH23kdZ+d1nHM8qzxOUk19d9pxDrZzuxHIBzrUNNbVxDgN63nbB+t5mQWc5Nh+FbCbnefpWM/pU+1tpwK/Anval1sAx9g/7/B5Bexn77er47l6wg7yHA08U+W6B7B+704BFmA9jxoDG+34SyqfH0ArYC1wi51bK+BL4GV7eyrW863ycd0D+N45fpWPm2P/j9qP8+H2vncDjqzhd+IBrOfrQPux6oz1e3lZbcarhjFZgdXsiv3YHQM0qkVunYHNwIVYf6v2AqYBd1d5Dk8FOtm3eQZY5Nj+O+Bou5YWwAfAd47t/YByYLhdT5bj96nyMdnLfg5cZ8c5BKs5vK1Knc8A7wT1OqBf+lXdV+AJ6JcPD2qVBqDKtmHAaMflCc7L9nWjgRd3EH8j1qFY2PoCfaxj+9nA5jrmbLBe+DdgzYJ8wdYX4p729k6O2/ex/9CK47rd7du1x3rxM8CBju0HsuOmbzYwsIb8Kuvc23HdYUBx5QuDfV2qXcdxWA1HceVY2duz7ReVfjsYiyXA/zkuN7b3fbh9+QFq1/QNdlw+047R1nHdGBwNib39esflFPuxuMS+PAO4qsp+nwdeqelxqqG+ecANVa6bAtxV01hXE+MT4Kk6PL8+BP5u/3wiVsN7BtCwyu129rzaBygCLgKa1GK/XwAPV7nuAazfO7HH4lRgAPCV47HrZ/98G/DfKvc/CquJTcVqYsqxG3N7+xnU0PTZ+9wMnFdDvj3ZvumbX+U271U+b3Y2XjXsYzHwMLBHlet3ltvTwJtVrrsIWFjlOfwnx+Wu9nUta4jZHUiwtbnrB5QCmdX8TlY+JoOxZm+d228C5la57m/AF7V9juqXfiXja8u0uIonEbkeawZrL6w/qplYMwFOi6u5fIh9/xZYC9FPxvrPOIF12LXqIbffHD/nYzUqdXW2MWbCDrY789wPaAdskG2XjZUAewIV1dynap1V7c3WQ4u1sR/WTMVvVXJIxVqXuBvWTMiW/RpjNotIbi1ibxlPY0y+HT+7DrmB1bBVKrRjVb2uakxnrgkRWYpVC1j1DhP70LYtDfimphg16IA16+i0EOtxq629gY+r2yDWYN2DNcPcDutFPwtYD2CMmSgidwJ3Ae+IyM/AQ8aY8ezkeWWMmSTWIe3rgRdFZB7WmzTerSHP9VgzxtsxxhgRecGOtTfwSDU32w84SkQ2Oku0a2qD1YjmGmM2O7bvaPxbYf1u1uV5/luVy/lsfd7s7Pfw12ri9cZqnH4Skc1Ys9APY/192VFu+wEnicg5jutS2H6ZUtW/Rdj5rhORbljj3I2tf6MqZxSX2pdXGWOKa8gBav/8bYL9nFMqLHRNX4zZa1mewjo0tJsxphnwItYfOae9q7lc+cd6CNbsxu+wXryaA5uqieE7Y0zCcXEVkGOMaVblK9MYM4mt+e/tuI/z5+osAWo6zUKimutWYc36tKqSQ0NjzNtYh+VKnPsVkcZYL7xubGb7tXLtXMastHflD2Kt/XS+cK8CBlSptbEx5kxngCqPU3WWYz2nnDphr5+qpSXU/FhdgjXzcjHQ3H7ef4bjOWuMec0YcyLWPy8fAWNFJIudP68wxnxojDkd63F8Anhbal6w/xOwo3fOjsA6VN0G61BjVauwZnWduTS181mB9di0sp9Xlfbewf5ysRohr04nstPxqsoYM9MY8ydjTBusQ7U3AJfXIrdVwBtV9tPE1O3dxu9iHQ4/yBjTBGvWF7b9e+bV87cr1gy2UqGhTV+8NcWa8VoLVIjI8UB155o6R0TOEGuB/RlYa/hed8Qowjrsmon1H3kYTukwBsi0F5o3hS1v3LgIwH5BHA88LiLN7YXij+4k5jBgsIicaI9FU9l62pi1WC8GnR23/xb4BRgu9psN7H2dLyJZdvMzCnhQRNrZTYVzlmxXTcF6w8Uxdp4XAid4EBdgoFjnlatcv5nG1hm1p4D7RaSHiKSISAMROUJEDq/jPl4D7hSRLiKSbs9GHwT8sw4xhgEDROQ8O0aWiJxkb2uKdcgzF2vi7w9Yh1DBuuJIETlBRBpiHcqrnCVLsJPnlT02Z4pIY2NMOdaaRmHrzHJVHwBHSjXvQgcwxmzAajxOs+NV9TrQQ0Sus2sUEekgIufZ23/EmmV6wt7eDri3pkEzxhistWZ/F+uNPSIiu4nIETXdZyd2OF5ViUiGWG+WqnyjRx7W2FXUIrfhwB/t368M+7m/r4icXod8m2L907pJRHYH/lr3knkbOFhEBtjPva5Y61RfcdTZBDgSa1mBUqGhTV98Gaw3V7wKfId1mOEWoLpzTb2KdQh4I9Yf3WuMMZWHgO/F+kO5Fuuwy2qqP2RTI7FODuvpCV/tw1nHYP3HPVNENgGT2Lb56Yv1grIEa3F3TYfgKmO+hNXoPIs1FnOxZmEw1rm3/g8YKdY79h4zxlRgNRPFwI/2oarpWE2zscP+GWtmYRbWov1fqOP4VZPnRKwG9kOsx6Un8L6bmA4vYDVf67HWZp5pjNlk73cY1ovki/b2FVjnIqvrSYefwHrOfYTVmF0OnG6MqfVMnzHmC6x/YO6xYyzFerzBmj37BmvcV2GtcXO++DYGngTWYD3OA4A/GGOKa/G8ygDuBlbY257AelPDkhryXAD8x66xplqmGGNm1rBtGXAs1vNwkZ3v51hvgsFuFM/BOvS5Cusfndeqi+VwH9YYvYPV8E4BeuzkPjXlXpvfw6ouwHpndgEw0c6l8pyFNeZmjJmMNQ7XYj331mGtL9yrDilfhfU82Qx8hdW01on9WJ+O9WaUXKzn1kvAPxw36wv8x378lQoNsf65UnEiIv8GFhhj7qzFbSdgHT56wO+8lKqPxDpX3zisd/wWBJ2P8pc9gzwb6w1cdVk7qZTv9I0cMSPWOeJOAN4IOhelFNgv/FXXgKmYso8KdNzpDZUKgB7ejREReRHrUO7rVL8oXCmllFL1lB7eVUoppZSqB3SmTymllFKqHtCmTymllFKqHtA3cjikp6ebQw891Nd9zJtnvZmrc+fOO7lluGL7Kax5e5WXl/W5jRXWsXYrrnUpFRY//fRTrjFmt53fUoWZNn0OnTp1YsoUf0+gPmmSdZL6Y489NlKx/RTWvL3Ky8v63MYK61i7Fde6lAoLsT6SUUWcvpHDoUePHsbvpk8ppZSKGhH5yRizSyfxVuGha/ocioqKfN/HrFmzmDVrVuRi+ymseXuVl5f1uY0V1rF2K651KaWUl3SmzyE7O9ts3rx55zd0oWfPngBMmDAhUrH9FNa8vcrLy/rcxgrrWLsV17qUCgud6YsHXdPn0L59e9/38fjjj0cytp/CmrdXeXlZn9tYYR1rt+Jal1JKeUln+hx0TZ9SSim1PZ3piwdd0+dQWFjo+z6mTZvGtGnTIhfbT2HN26u8vKzPbaywjrVbca1LKaW8pDN9DrqmLxhhzVvX9EVHXOtSKix0pi8etOlzOOigg8ycOXN83UflbES3bt0iFdtPYc3bq7y8rM9trLCOtVtxrUupsNCmLx606XPQNX1KKaXU9rTpiwdd0+dQUFDg+z4mT57M5MmTIxfbT2HN26u8vKzPbaywjrVbca1LKaW8pDN9DrqmLxhhzVvX9EVHXOtSKix0pi8etOlz6NKli5k9e7av+6j81ICuXbtGKrafwpq3V3l5WZ/bWGEda7fiWpdSYaFNXzxo0+ega/qUUkqp7WnTFw+6ps8hPz/f931MmjSJSZMmRS62n8Kat1d5eVmf21hhHWu34lqXUkp5SWf6HHRNXzDCmreu6YuOuNalVBhMWjGJ37X/nc70xYA2fQ5du3Y1lWuD/DJv3jwAOnfuHKnYfgpr3l7l5WV9bmOFdazdimtdSgVt3OJxDP52MNMun6ZNXwxo0+ega/qUUkopy+i5o/nbj3+je+vuvHHmG9r0xYCu6XPw+9AuwMSJE5k4cWLkYvsprHl7lZeX9bmNFdaxdiuudSkVBGMML0x/gYd/fJgT25/Ii6e+GHRKyiM60+ega/qCEda8dU1fdMS1LqWSLWES/P1/f+efc/9J7069eeDYB0hPSdd378aENn0OBx98sJk5c6av+8jJyQGgY8eOkYrtp7Dm7VVeXtbnNlZYx9qtuNalVDKVJcq459t7+HTxp1x20GUM6jGIFLEOCGrTFw/a9Dnomj6llFL1UVF5EbdNuI1vV3zLrYfdylVdr0JEtmzXpi8e0oJOIEw2bdrk+z6++uorAHr16hWp2H4Ka95e5eVlfW5jhXWs3YprXUolQ15JHjeNv4kZuTO4/5j7uWD/C4JOSflEZ/ocdE1fMMKat67pi4641qWU39YUruHaL69l6aal/P2Ev3PqXqdWezud6YsHbfocDjnkEDNjxgxf97F8+XIAOnToEKnYfgpr3l7l5WV9bmOFdazdimtdSvlp2aZlDPhyABuKNzDs5GEc3fboGm+rTV88aNPnoGv6lFJK1Qdz18/lui+vo8JU8Hyv5+naqusOb69NXzzoefockrGmb9y4cYwbNy5ysf0U1ry9ysvL+tzGCutYuxXXupTyw5RVU+g/rj9pKWmMPGPkThs+FR860+ega/qCEda8dU1fdMS1LqW8NmH5BAZNHES7xu146dSXaNOoTa3upzN98aBNn8Ohhx5qpk+f7us+Vq1aBUCbNrX7RQtLbD+FNW+v8vKyPrexwjrWbsW1LqW89OHCD7l/0v0c2OJAhvcaTvPM5rW+rzZ98aBNn4Ou6VNKKRVHI2ePZOiUoRzV9iiGnTSMRumN6nR/bfriQc/T55CXl+f7PsaOHQvAOeecE6nYfgpr3l7l5WV9bmOFdazdimtdSrlljOHpn5/mlZmvcOpepzLk+CFkpGYEnZYKiM70OeiavmCENW9d0xcdca1LKTcqEhU89MNDvL/gfS7Y/wLuOeoeUlNSdymWzvTFgzZ9Dt26dTPTpk3zdR+5ubkAtGrVKlKx/RTWvL3Ky8v63MYK61i7Fde6lNpVpRWl3PXfu/hy6Zdcc/A13Nz95m0+Vq2utOmLB236HHRNn1JKqagrKCvg1q9v5ceVPzKoxyCu6HKF65ja9MWDrulz2Lhxo+/7GDNmDAB9+vSJVGw/hTVvr/Lysj63scI61m7FtS6l6mpD8Qau/+p65q6fy9+O+xu9O/UOOiUVIjrT56Br+oIR1rx1TV90xLUupepiZf5KBnw5gJUFKxl64lB6dujpWWyd6YsHbfocunfvbn7++Wdf91H5DuGmTZtGKrafwpq3V3l5WZ/bWGEda7fiWpdStZWzMYcBXw6goKyAZ095lsN3P9zT+Nr0xYMe3nVITd21dzXVhZ8vSlF9wQtr3l7l5WV9bmOFdazdimtdStXGzLUzuWH8DaRKKq+f/joHtDgg6JRUSOln7zps2LDB932MHj2a0aNHRy62n8Kat1d5eVmf21hhHWu34lqXUjszbc00rv7iahqlN+LNM97Uhk/tkB7eddA1fcEIa966pi864lqXUjsyK3cW13xxDS0yW/D66a/TOqu1b/vSw7vxoE2fw2GHHWamTp3q6z4KCwsByMrKilRsP4U1b6/y8rI+t7HCOtZuxbUupWoyd/1crvz8SppkNGHE6SNo08jfz53Wpi8edE2fQ0qK/0e7/XxRiuoLXljz9iovL+tzGyusY+1WXOtSqjoLNizgmi+uoVF6I1497VXfGz4VH7qmz2H9+vW+72PUqFGMGjUqcrH9FNa8vcrLy/rcxgrrWLsV17qUqionL4erv7iajJQMXv39q+zReI+gU1IRood3HXRNXzDCmreu6YuOuNallNOyTcvoN64fCZPgtdNfo2PTjknbtx7ejQdt+hwOP/xw89NPP/m6j7KyMgDS09MjFdtPYc3bq7y8rM9trLCOtVtxrUupSivyV9BvXD+Ky4t57bTX2K/5fkndvzZ98aBr+hzcfBh1bfn5ohTVF7yw5u1VXl7W5zZWWMfarbjWpRTAqoJVXPX5VRSWFfLqaa8mveFT8aFNn8O6det838eIESMA6NevX6Ri+ymseXuVl5f1uY0V1rF2K651KbWmcA1XfX4VeSV5vPL7V/Q8fMoVPbzroGv6ghHWvHVNX3TEtS5Vv+UW5XLl51eyumA1L576It1adwssFz28Gw/a9Dn06NHDTJkyJeg0lFJK1XMbijdw5edXsiJ/BcNPGU6PNsH2W9r0xYMe3lVKKaVCJK8kjwFfDmDZpmU81+u5wBs+FR/a9Dnk5ub6vo+XX34ZgGuuuSZSsf0U1ry9ysvL+tzGCutYuxXXulT9s7l0M9d9eR2LNi5i2EnDOLrt0UGnpGJED+86NGnSxGzatMnXffTq1QuAr776KlKx/RTWvL3Ky8v63MYK61i7Fde6VP1SUFbAdV9ex6zcWTzZ80lO2vOkoFPaQg/vxoM2fQ66pk8ppVQQisqLuOGrG/h5zc88dsJj/H7v3wed0ja06YsHPbyrlFJKBaikooRb/nMLP63+iUePfzR0DZ+KD18/e1dEzhaRn0VkmohMF5E+9vX7i8j3IjLf/r6f4z5J3ea0du1afwbCYfjw4QwfPjxysf0U1ry9ysvL+tzGCutYuxXXulT8lVaUMvDrgfyw8gf++ru/clbHs4JOScWYb02fWB9v8SZwmTGmG3AZMFJEUoAXgOeMMfsDzwEvOu6a7G1bbNy4cdeKrYOxY8cyduzYyMX2U1jz9iovL+tzGyusY+1WXOtS8VaWKGPQxEF8u+Jb7jvmPs7b97ygU1Ix59uaPrvpywV6G2O+E5ETgFeA44D5QEtjTIWIpALrgP0ASeY2Y8w2U3u6pk8ppVQylCfKufObO/ly6ZcMPnIwfzrwT0GntEO6pi8efFvTZ4wxIvJH4EMRKQCygTOBDsAKY0yFfbsKEfnNvl6SvG2bpm/t2rX06LH1OT1gwAAGDBjgx/AopZSqpyoSFdz97d18ufRLBvUYFPqGT8WHb02fiKQBg4Fz7Zm+3wHvYh3mDSVjDH7P9A0bNgyAW2+9NVKx/RTWvL3Ky8v63MYK61i7Fde6VPwkTIL7J93Pp4s/5Zbut3BFlyuCTknVI36+kaMb0M4Y8x2A/b0AKAb2sA+zYn9vByy3v5K5bRt+n6MPYPz48YwfPz5ysf0U1ry9ysvL+tzGCutYuxXXulS8GGN4+IeH+XDRh1x36HVcc4ieTFwll59r+tpgraU7whgzT0QOBL4D9gXGAK8YY0aJSF/gKmPMSfb9JiRzm5Ou6VNKKeUHYwxD/jeEf879J1d2vZKBhw3EWvoeDbqmLx58PTmziFwK3AUk7KvuN8Z8ICIHACOB5sAG4HJjzDz7Pknd5qRNn1JKKa8ZY3jypycZMXsEfQ/sy51H3Bmphg+06YsL/UQOhw4dOpjly7c76uupoUOHAjBo0KBIxfZTWPP2Ki8v63MbK6xj7VZc61Lx8PTUp3l55stc1Pki7j7q7sg1fKBNX1zoJ3I45Ofn+76P77//PpKx/RTWvL3Ky8v63MYK61i7Fde6VPS9MvMVXp75Mufvdz7/d9T/RbLhU/GhM30OenhXKaWUVz7O+ZjB/x3MGfucwaPHPUpqSmrQKe0ynemLB18/hk0ppZSqjyavmsy9393LEW2O4OHfPRzphk/FhzZ9DqtWrfJ9H0OGDGHIkCGRi+2nsObtVV5e1uc2VljH2q241qWiKWdjDrd+fSt7Zu/JP3r+g4zUjKBTUgrQNX3bKCws9H0f06ZNi2RsP4U1b6/y8rI+t7HCOtZuxbUuFT25Rblc/9X1ZKRkMLzXcJo2aBp0SkptoWv6HHRNn1JKqV1VWFZI/8/7szhvMa+f9jpdWnUJOiXP6Jq+eNCZPqWUUsqlikQFf/nmL8xdP5dhJw2LVcOn4kPX9DmsXLnS93089NBDPPTQQ5GL7aew5u1VXl7W5zZWWMfarbjWpaKh8tM2Jvw6gbuOvIueHXoGnZJS1dKZPofi4mLf9zFv3nYfBBKJ2H4Ka95e5eVlfW5jhXWs3YprXSoa3pjzBu/Me4crDrqCSw64JOh0lKqRrulz0DV9Siml6uKLJV9w+8TbOXWvUxl64lBSJJ4H0HRNXzzE89mplFJK+WzammkM/u9guu3WjUeOeyS2DZ+KD32GOvz222++7+O+++7jvvvui1xsP4U1b6/y8rI+t7HCOtZuxbUuFV5LNy3l5v/cTNvGbXn65KfJTMsMOiWldkrX9DmUlpb6vo/ly5dHMrafwpq3V3l5WZ/bWGEda7fiWpcKpw3FG7jhqxsQhOGnDKd5ZvOgU1KqVnRNn4Ou6VNKKbUjxeXFXP3F1cxdP5dXfv8K3Vp3CzqlpNA1ffGgM31KKaVULSRMgv/79v+YsXYGT/R8ot40fCo+dE2fw4oVK3zfx+DBgxk8eHDkYvsprHl7lZeX9bmNFdaxdiuudalweXLKk3y59Etu72G9W1epqNGZPofy8nLf97Fu3bpIxvZTWPP2Ki8v63MbK6xj7VZc61Lh8fbctxk5ZySXHHAJlx90edDpKLVLdE2fg67pU0opVdWE5RO49etbOaH9CTzV8ylSU1KDTinpdE1fPOjhXaWUUqoGs3Nnc+c3d3JgiwP5+/F/r5cNn4oPbfocfv31V9/3MWjQIAYNGhS52H4Ka95e5eVlfW5jhXWs3YprXSpYK/JXcOP4G2mR2YJnT3mWrPSsoFNSyhVd0+eQSCR830dRUVEkY/sprHl7lZeX9bmNFdaxdiuudang5JXkccNXN1CaKOW1U16jVcNWQaeklGu6ps9B1/QppZQqrSjl2i+vZfra6bx46osc0eaIoFMKnK7piwed6VNKKaVsxhjum3QfU1ZPYcjxQ7ThU7Gia/ockvFRTgMHDmTgwIGRi+2nsObtVV5e1uc2VljH2q241qWS75mfn+GTnE+4pfstnNXxrKDTUcpT2vQppZRSwPvz3+flmS9z/n7nc/XBVwedjlKe0zV9DrqmTyml6qfvVnzHjeNv5Oh2R/Psyc+SlqKrn5x0TV886EyfUkqpem3e+nncNuE29mu+H0+c+IQ2fCq2tOlzWLZsme/7uPHGG7nxxhsjF9tPYc3bq7y8rM9trLCOtVtxrUv5b1XBKm4YfwPZGdk8d8pzNEpvFHRKSvlG/51xSEnxvwdu2LBhJGP7Kax5e5WXl/W5jRXWsXYrrnUpfxWUFXDj+BspLCtk5BkjaZ3VOuiUlPKVrulz0DV9SilVPxhjuH3i7fxn2X8Y3ms4x7Y7NuiUQk3X9MWDHt5VSilV74ycPZIvl37Jnw//szZ8qt7Qps9h6dKlvu9jwIABDBgwIHKx/RTWvL3Ky8v63MYK61i7Fde6lD/+t/J//GPqPzh1r1O5/KDLg05HqaTRNX0OaWn+D0fLli0jGdtPYc3bq7y8rM9trLCOtVtxrUt5b1XBKu745g72arIXD/3uIUQk6JSUShpd0+ega/qUUiq+yirK6Pd5PxZuWMjbZ71Nx2Ydg04pMnRNXzzoTJ9SSql64bHJjzFj7QyeOPEJbfhUvaRr+hyWLFni+z769+9P//79IxfbT2HN26u8vKzPbaywjrVbca1LeWfsorG8M+8d+nXpx+/3/n3Q6SgVCJ3pc8jIyPB9Hx06dIhkbD+FNW+v8vKyPrexwjrWbsW1LuWNeevn8dfv/8oRbY7g1sNuDTodpQKja/ocdE2fUkrFS15JHhd/fDGliVJGnz2aVg1bBZ1SJOmavnjQmT6llFKxlDAJ/u/b/2NV4SpeP+11bfhUvadr+hwWL17s+z769u1L3759IxfbT2HN26u8vKzPbaywjrVbca1LufPSjJf45tdv+MsRf6Fb625Bp6NU4HSmzyEzM9P3fXTu3DmSsf0U1ry9ysvL+tzGCutYuxXXutSu+3bFtwyfNpxzOp7DRZ0vCjodpUJB1/Q56Jo+pZSKvl83/8pFH19Em0ZtGHXmKBqmNQw6pcjTNX3xoId3lVJKxUZxeTG3TbgNYwxP9XxKGz6lHPTwrkNOTo7v+7j44osBeOeddyIV209hzdurvLysz22ssI61W3GtS9WNMYa//fg3fln/C8+e/CwdmuipfJRy0qbPISsry/d9dOvWLZKx/RTWvL3Ky8v63MYK61i7Fde6VN28t+A9Plj4Adceci0ndjgx6HSUCh1d0+ega/qUUiqaZq6dyRXjruDINkfy3CnPkZqSGnRKsaJr+uJB1/QppZSKtPXF67lt4m3s1nA3hhw/RBs+pWqgh3cdFi1a5Ps+zj//fADef//9SMX2U1jz9iovL+tzGyusY+1WXOtSO1eRqODOb+5kfdF63jjzDZplNgs6JaVCS5s+h8aNG/u+j2OOOSaSsf0U1ry9ysvL+tzGCutYuxXXutTOPTvtWX5c+SN/PfavdGnZJeh0lAo1XdPnoGv6lFIqOsYvG8/Arwdywf4XcP8x9wedTqzpmr540DV9SimlImdJ3hLu+fYeurbsyuAjBwedjlKRoE2fw8KFC33fR+/evendu3fkYvsprHl7lZeX9bmNFdaxdiuudanqFZYV8ucJfyYtJY0nez5JRmpG0CkpFQm6ps+hSZMmvu/jlFNOiWRsP4U1b6/y8rI+t7HCOtZuxbUutT1jDA9MeoCcvBxe6PUCbRu3DTolpSJD1/Q56Jo+pZQKt1FzRvH3yX/n1sNu5eqDrw46nXpD1/TFgx7eVUopFQk/rf6JJ6Y8wUkdTuLKrlcGnY5SkaMzfQ5NmzY1eXl5vu7jjDPOAOCzzz6LVGw/hTVvr/Lysj63scI61m7FtS611drCtfzx4z+SlZbFO2e/Q3ZGdtAp1Ss60xcPuqbPoVmzZr7v45xzzolkbD+FNW+v8vKyPrexwjrWbsW1LmUpS5QxaOIgCsoKePHUF7XhU2oX6Uyfg67pU0qp8Pn7//7OqF9G8ffj/86ZHc8MOp16SWf64kHX9CmllAqtzxZ/xqhfRnHpgZdqw6eUS9r0OcyfP9/3ffTq1YtevXpFLrafwpq3V3l5WZ/bWGEda7fiWld9t2DDAu6fdD/dW3fn9sNvDzodpSJP1/Q5tGjRwvd9XHTRRZGM7aew5u1VXl7W5zZWWMfarbjWVZ8VlRdx+8TbaZTeiCdOfIL01PSgU1Iq8nRNn4Ou6VNKqXB4+IeHGT1vNC///mWObnt00OnUe7qmLx708K5SSqlQ+ebXbxg9bzSXH3S5NnxKeUhn+hyys7PN5s2bfd1Hz549AZgwYUKkYvsprHl7lZeX9bmNFdaxdiuuddVH64vX0+fDPrRo2IK3z3qbBqkNgk5JoTN9caFr+hxatWrl+z769esXydh+CmveXuXlZX1uY4V1rN2Ka131TeXn6m4q3cSLp76oDZ9SHtOZPgdd06eUUsF5f/77PPD9AwzqMYgrulwRdDrKQWf64kHX9DkkowEuKyujrKwscrH9FNa8vcrLy/rcxgrrWLsV17rqk2WblvH3yX/nqDZHcdlBlwWdjlKxpDN9DrqmLxhhzVvX9EVHXOuqL8oT5Vzx2RUs3rSYMb3H0KZRm6BTUlXoTF88+LqmT0QygX8AvYBi4HtjzAAR2R8YCbQE1gGXG2MW2PdJ6jan3XbbzY9h2MbVV18dydh+CmveXuXlZX1uY4V1rN2Ka131xcszXmZG7gweP+FxbfiU8pGvM30i8jRQAdxmjDEisrsxZrWI/Ad4zRgzSkT6AlcaY06275PUbU66pk8ppZJrxtoZXP7Z5Zy+z+kMOX5I0OmoGuhMXzz41vSJSGPgV6C9MSbfcX1rYD7Q0hhTISKpWLNv+wGSzG3GmLXOnA877DAzdepUX8ajUmFhIQBZWVmRiu2nsObtVV5e1uc2VljH2q241hV3hWWFXDj2QsoSZbzX+z2aZDQJOiVVA2364sHPw7udsJqr+0XkJCAfuAcoAlYYYyoA7EbsN6ADVoOWzG3bNH1z5syhR4+tz+kBAwYwYMAATwflzDOtDwz3Y+2Rn7H9FNa8vcrLy/rcxgrrWLsV17ri7rHJj7F883JePe1VbfiUSgI/m75UoCPwszHmDhE5ChgLXOjjPl3ZY4898Pvw7vXXXx/J2H4Ka95e5eVlfW5jhXWs3YprXXH29bKveX/B+/Tv2p8j2hwRdDpK1Qt+Ht5tBawEMoy9ExGZA/QDviCEh3d1TZ9SSvkvtyiXPh/2YfdGu/PWmW+RkZoRdEpqJ/Twbjz4dp4+Y0wu8DVwKmx5B23ler5pwCX2TS/Bmg1ca4xZk8xtVXOuqKhwXffO5OXlkZeXF7nYfgpr3l7l5WV9bmOFdazdimtdcWSM4b7v7qOwvJAhxw/Rhk+pJPL73bsdgdewTpVSBtxtjPlMRA7AOoVKc2AD1ilU5tn3Seo2Jz1PXzDCmreepy864lpXHL07710e+uEh7jryLi498NKg01G1pDN98eDrefqMMTlAz2qunwscVcN9krrNaffdd9/ZTVy75ZZbIhnbT2HN26u8vKzPbaywjrVbca0rbhbnLebxyY9zbLtjueSAS3Z+B6WUp/QTORx0TZ9SSvmjLFHGZZ9exq/5vzKm9xhaZ7UOOiVVBzrTFw++zvRFTXl5ue/7yM3NBaBVq1aRiu2nsObtVV5e1uc2VljH2q241hUnL0x/gdnrZvNkzye14VMqIDrT56Br+oIR1rx1TV90xLWuuPh5zc/0G9ePczqew8PHPRx0OmoX6ExfPOhMn0ObNv5/5uPtt98eydh+CmveXuXlZX1uY4V1rN2Ka11xkF+az+D/DqZto7bcdeRdQaejVL2mM30OuqZPKaW8de939/LRoo8YcfoIurfuHnQ6ahfpTF88+HaevigqKyvzfR+rVq1i1apVkYvtp7Dm7VVeXtbnNlZYx9qtuNYVdV8u/ZIPFn7AVV2v0oZPqRDQmT4HXdMXjLDmrWv6oiOudUXZmsI19PmoD+0bt+fNM98kPSU96JSUCzrTFw+6ps+hbdu2vu/jrrv8W9PiZ2w/hTVvr/Lysj63scI61m7Fta6oSpgE9353LyXlJTx6/KPa8CkVEjrT56Br+pRSyr23fnmLIf8bwj1H3cNFB1wUdDrKAzrTFw+6ps+htLTU930sX76c5cuXRy62n8Kat1d5eVmf21hhHWu34lpXFC3auIh//PQPjt/jeP7Y+Y9Bp6OUctCZPgdd0xeMsOata/qiI651RU1ZRRl/+vRPrC5YzZhzx9CqoZ4sOy50pi8edE2fQzLW9N1zzz2RjO2nsObtVV5e1uc2VljH2q241hU1z057lrnr5zLspGHa8CkVQjrT56Br+pRSatdMXjWZqz6/ij779eGBYx8IOh3lMZ3piwdd0+dQUlLi+z5ycnLIycmJXGw/hTVvr/Lysj63scI61m7Fta6o2Fy6mbu/vZsO2R2484g7g05HKVUDnelz0DV9wQhr3rqmLzriWldUDP7vYD5b/BkjzxjJobsdGnQ6ygc60xcPuqbPoV27dr7v48EHH4xkbD+FNW+v8vKyPrexwjrWbsW1rigYt3gcH+d8zA2H3qANn1IhpzN9DrqmTymlam9VwSr6fNSHfZrsw8gzRpKWovMIcaUzffGga/ociouLfd/HvHnzmDdvXuRi+ymseXuVl5f1uY0V1rF2K651hVnCJLjn23soT5Tz6PGPasOnVAToTJ+DrukLRljz1jV90RHXusKs8lM3HjjmAc7f//yg01E+05m+eNB/zRz22GMP3/fxyCOPRDK2n8Kat1d5eVmf21hhHWu34lpXWK0qWMXTU5/md+1+R5/9+gSdjlKqlnSmz0HX9Cml1I4ZY7jl61v44bcf+Pe5/6Z9dvugU1JJoDN98aBr+hyKiop838esWbOYNWtW5GL7Kax5e5WXl/W5jRXWsXYrrnWF0fhl45mwfAI3dLtBGz6lIkZn+hx0TV8wwpq3rumLjrjWFTabSzdz3gfn0TyzOW+f/TbpKelBp6SSRGf64kHX9Dm0b+//f62PP/54JGP7Kax5e5WXl/W5jRXWsXYrrnWFzbCpw1hbtJZhJw/Thk+pCNKZPgdd06eUUtWbtmYal392OZceeCl/OfIvQaejkkxn+uJB1/Q5FBYW+r6PadOmMW3atMjF9lNY8/YqLy/rcxsrrGPtVlzrCouyijIe/P5BWme15qbuNwWdjlJqF+lMn4Ou6QtGWPPWNX3REde6wuLlGS/z9M9P88zJz9CzQ8+g01EB0Jm+eNA1fQ4dOnTwfR9PPfVUJGP7Kax5e5WXl/W5jRXWsXYrrnWFwdJNS3lh+gucutep2vApFXF1nukTkQyghTFmlT8pBUfX9Cml1FbGGK754hpmr5vNh+d9SOus1kGnpAKiM33xUKs1fSLyjog0FZGGwCxgjogM8je15CsoKPB9H5MnT2by5MmRi+2nsObtVV5e1uc2VljH2q241hW0sTlj+XHVj/z58D9rw6dUDNRqpk9EfjbGdBeRC4BewG3AD8aYQ/xOMJl0TV8wwpq3rumLjrjWFaT1xes594Nz2bvJ3ow8YyQpou/7q890pi8earumr/KETCcCnxpjCkUk4VNOgdlzzz1938ezzz4bydh+CmveXuXlZX1uY4V1rN2Ka11BGjp5KPll+dx/zP3a8CkVE7Wd6XsXyAYOBLoACeB7Y0w3X7NLMl3Tp5RS8P1v3zPgywFcc/A13HLYLUGno0JAZ/riobYzfVcApwHTjTEFIrIHcJd/aQUjPz/f931MmjQJgGOPPTZSsf0U1ry9ysvL+tzGCutYuxXXuoJQXF7MQz88xF5N9uLaQ68NOh2llIdq/e5dEdkfONAY86GIZAPpxpj1vmaXZLqmLxhhzVvX9EVHXOsKwrCpw3hl5iu8+vtXObLtkUGno0JCZ/riobaHd68ABgMZxpiOItIZeM4Y08vvBJOpa9euZtasWb7uY968eQB07tw5UrH9FNa8vcrLy/rcxgrrWLsV17qSbf6G+Vw09iLO6ngWDx/3cNDpqBDRpi8eav3uXeB44L/GmO72dbOMMV19zi+pdE2fUqq+qkhUcPlnl7N883I+Ou8jmmU2CzolFSLa9MVDbd+SVWqMqbrgrdzrZILm96FdgIkTJzJx4sTIxfZTWPP2Ki8v63MbK6xj7VZc60qmd+e/y4zcGdxxxB3a8CkVU7Wd6fsUGAi8Y4w5TET6AhcbY872Ob+k0jV9wQhr3rqmLzriWleyrC5YzbkfnsshrQ7hxVNfRESCTkmFjM70xUNtm779gX9inbJlLVAInGOMWeRvesl18MEHm5kzZ/q6j5ycHAA6duwYqdh+CmveXuXlZX1uY4V1rN2Ka13JMvDrgXy34jvGnDuGDtn+fwa5ih5t+uKhLu/eTQX2BwSYZ4yp8DOxIOiaPqVUfTN+2XgGfj2QgYcN5KqDrwo6HRVS2vTFQ20/e3d/rFO0/AJ0AO4Qkea+ZhaATZs2+b6Pr776iq+++ipysf0U1ry9ysvL+tzGCutYuxXXuvyWX5rPIz8+wv7N9+fyLpcHnY5Syme1Pbw7DTgCaA98DXwBtDHG9PY1uyTTNX3BCGveuqYvOuJal98e+fER3pn7Dm+d+RYH73Zw0OmoENOZvniobdM31X4Dx01AljHmMRGZFrePYTvkkEPMjBkzfN3H8uXLAejQwft1M37G9lNY8/YqLy/rcxsrrGPtVlzr8tOMtTPo+2lfLjngEgYfNTjodFTIadMXD7Vt+uYAJwFvAHcbY6aIyHRjzKF+J5hMuqZPKVUflCXKuOjji8gryePDcz+kcUbjoFNSIadNXzzU9jx9TwHzgHy74esI5PmWVUCSsaZv3LhxjBs3LnKx/RTWvL3Ky8v63MYK61i7Fde6/DJy9kgWbFjA3UfdrQ2fUvVIrd+9u82dRFKANGNMqfcpBUfX9AUjrHnrmr7oiGtdfli+aTl/+OgPHL/H8fzjpH8EnY6KCJ3pi4e6nLKlM3AokFl5nTHmDZ/yCsShhx5qpk+f7us+Vq1aBUCbNm0iFdtPYc3bq7y8rM9trLCOtVtxrctrxhgGfDmAmbkz+fDcD9m90e5Bp6QiQpu+eEirzY1E5BbgWqAtMBnrc3gnYq3xi4309HTf9+Hni1JUX/DCmrdXeXlZn9tYYR1rt+Jal9c+zvmYH1b+wN1H3a0Nn1L1UG3X9A0AjgSWGWNOs3/2/4Nqkywvz/9limPHjmXs2LGRi+2nsObtVV5e1uc2VljH2q241uWlDcUbeHzy4xyy2yH8sfMfg05HKRWA2r57d4oxpoeIzAAONcaYOJ6yRdf0BSOseeuavuiIa11euufbe/gk5xNGnzOa/ZvvH3Q6KmL08G481Lbp+wY4BXgNWAksBwYYY2J1Ns9u3bqZadOm+bqP3NxcAFq1ahWp2H4Ka95e5eVlfW5jhXWs3YprXV75ceWPXP3F1Vxz8DXcctgtQaejIkibvnjYYdNnf95uA6AjsBhoBDwCNAWGGGN+SkaSyaLn6VNKxU1xeTHnf3Q+AO/3fp/MtMyd3EOp7WnTFw87W9M3BPiTMWaWMabAGLPGGHM1MA64yP/0kmvjxo2+72PMmDGMGTMmcrH9FNa8vcrLy/rcxgrrWLsV17q88NKMl1i2eRn3HnOvNnxK1XM7m+n7CTjCGJOocn0KMMMY09Xn/JJK1/QFI6x565q+6IhrXW4t2LCAP479I2d2PJO/Hfe3oNNREaYzffGws6avxjdriMgMY8whfiUWhO7du5uff/7Z131UvkO4adOmkYrtp7Dm7VVeXtbnNlZYx9qtuNblRsIkuPyzy1m6aSkfnfcRzTObB52SijBt+uJhZ+fpaygiWcaYQueVItIYa61frKSmpvq+Dz9flKL6ghfWvL3Ky8v63MYK61i7Fde63PjXvH8xfe10HjnuEW34lFLAztf0jQZGikiTyitEpCnwCvAvPxMLwoYNG3zfx+jRoxk9enTkYvsprHl7lZeX9bmNFdaxdiuude2qdUXreGrqUxzV9ijO7nh20OkopUJiZ4d304ARwLnAAvvq/YCPgCuMMeV+J5hMuqYvGGHNW9f0RUdc69pVf/3+r/x7wb95/9z36di0Y9DpqBjQw7vxUNvz9O0LdLcv/myMWehrVgE57LDDzNSpU33dR2GhdaQ8KysrUrH9FNa8vcrLy/rcxgrrWLsV17p2xbz18/jjx3/kTwf8ib8c+Zeg01ExoU1fPNTqs3ftJi+WjZ5TSkptP5Vu1/n5ohTVF7yw5u1VXl7W5zZWWMfarbjWVVfGGB6f8jjZGdlcd+h1QaejlAoZ/7ucCFm/fr3v+xg1ahSjRo2KXGw/hTVvr/Lysj63scI61m7Fta66mrB8Aj+u/JEbDr2Bpg30zS1KqW3V6vBufaFr+oIR1rx1TV90xLWuuiirKOO8D88jLSWN93q/R3pKetApqRjRw7vxoE2fw+GHH25++snfT5YrKysDID3d+z/Ifsb2U1jz9iovL+tzGyusY+1WXOuqi5GzRzJ0ylCe7/U8x+1xXNDpqJjRpi8earWmr74QEd/34eeLUlRf8MKat1d5eVmf21hhHWu34lpXba0vXs+L01/kuD2O04ZPKVUjXdPnsG7dOt/3MWLECEaMGBG52H4Ka95e5eVlfW5jhXWs3YprXbU1fNpwCssLuaPHHUGnopQKMT2866Br+oIR1rx1TV90xLWu2liwYQEXjL2AiztfzOCjBgedjoopPbwbD9r0OfTo0cNMmTIl6DSUUqpWjDEM+HIAc9bN4ZM/fEKzzGZBp6RiSpu+eEjK4V0RuV9EjIh0tS8fLSLTRWS+iHwhIq0dt03qNqWUiqpvfv2GH1b+wA3dbtCGTym1U743fSJyGHA0sNS+nAKMAm40xuwPfAMMCWJbVbm5uV6Xv52XX36Zl19+OXKx/RTWvL3Ky8v63MYK61i7Fde6dqSsooyhU4ayd5O9+WPnPwadjlIqAnw9vCsiDYAJwCX297OBhsDrxpjKWb9WwBJjTGMROSKZ26rm26RJE7Np0ybfxgOgV69eAHz11VeRiu2nsObtVV5e1uc2VljH2q241rUjb855k8cmP8ZzpzzHCe1PCDodFXN6eDce/G76/g4sM8Y8JyJLsJq+zsCVxpizHLcrBNoDJyVzmzFmm4/g0DV9Sqko2FC8gbP+fRaHtDqE53s9n5TTTan6TZu+ePDt8K6IHAP0AIb7tQ+vrV27lh49emz5eumll4JOSSmltjN82nAKywoZ1GOQNnxKqVrz8+TMJwIHAovtP0rtgc+Bp4G9Km9kH25NGGPWi8iyZG6rLmm/Z/qGD7d64BtuuCFSsf0U1ry9ysvL+tzGCutYuxXXuqqzcMNC/jX/X1y4/4Xs23zfoNNRSkWIbzN9xpghxph2xpi9jTF7A78CpwGPAw1FpPK08dcB/7J//inJ27axcePGXSm1TsaOHcvYsWMjF9tPYc3bq7y8rM9trLCOtVtxrasqYwyPT3mcrPQsbux2Y9DpKKUiJmnn6atc02eMmSUixwIvApnAEqCvMWa1fbukbnPSNX1KqTD75tdvuHH8jfzliL/Q96C+Qaej6hFd0xcPenJmB236lFJhVZYoo8+HfQAYc+4Y0lPq9+cNq+TSpi8e/FzTFzlr1qzxfR/Dhg0D4NZbb41UbD+FNW+v8vKyPrexwjrWbsW1Lqd3573Lkk1LeO6U57ThU0rtkqR8IkdU+H2OPoDx48czfvz4yMX2U1jz9iovL+tzGyusY+1WXOuqtLF4I8OnDefYdsdy/B7HB52OUiqi9PCugx7eVUqF0aM/Pso7897h/XPe13fsqkDo4d140Jk+pZQKsZyNOYyeN1pP0aKUck2bPofVq7d7Q6/nhg4dytChQyMX209hzdurvLysz22ssI61W3GtC7BO0ZKmp2hRSrmnb+RwyM/P930f33//fSRj+ymseXuVl5f1uY0V1rF2K651/ffX//Ltim+5o8cdNM9sHnQ6SqmI0zV9DrqmTykVFmWJMi746AIqTAX/7v1v0lP1HbsqOLqmLx708K5SSoXQv+b9i5y8HAb1GKQNn1LKE9r0Oaxatcr3fQwZMoQhQ4ZELrafwpq3V3l5WZ/bWGEda7fiVldeSR7Dpw/n6LZHc2L7E4NORykVE7qmz6GwsND3fUybNi2Ssf0U1ry9ysvL+tzGCutYuxW3ul6Y/gKbSzdzxxF3ICJBp6OUigld0+ega/qUUkHLycvh/A/Pp89+fbj3mHuDTkcpQNf0xYUe3lVKqRB5YsoTZKZlcmN3PUWLUspb2vQ5rFy50vd9PPTQQzz00EORi+2nsObtVV5e1uc2VljH2q241PXdiu/45tdvuO7Q62iR2SLodJRSMaNr+hyKi4t938e8efMiGdtPYc3bq7y8rM9trLCOtVtxqKs8Uc7jkx9nz+w9+dMBfwo6HaVUDOmaPgdd06eUCsrbc9/mkR8fYdhJwzh5z5ODTkepbeiavnjQw7tKKRWwvJI8npv2HEe1OYqTOpwUdDpKqZjSps/ht99+830f9913H/fdd1/kYvsprHl7lZeX9bmNFdaxdivqdekpWpRSyaBr+hxKS0t938fy5csjGdtPYc3bq7y8rM9trLCOtVtRrmtx3mLemfsOffbrQ+cWnYNORykVY7qmz0HX9Cmlku2m8TcxZfUUPvnDJ7Rs2DLodJSqlq7piwc9vKuUUgGZtGISE3+dyLWHXKsNn1LKd9r0OaxYscL3fQwePJjBgwdHLrafwpq3V3l5WZ/bWGEda7eiWFfCJBj601DaN27PpQdeGnQ6Sql6QNf0OZSXl/u+j3Xr1kUytp/CmrdXeXlZn9tYYR1rt6JY17jF41iwYQGPnfAYGakZQaejlKoHdE2fg67pU0olQ3minPM+PI+M1AzeO+c9UkQPuqhw0zV98aB/aZRSKsnGLhrL0k1LuanbTdrwKaWSRv/aOPz666++72PQoEEMGjQocrH9FNa8vcrLy/rcxgrrWLsVpbpKK0p5fvrzHNzqYD0Rs1IqqXRNn0MikfB9H0VFRZGM7aew5u1VXl7W5zZWWMfarSjV9f6C91lZsJIHjn1AT8SslEoqXdPnoGv6lFJ+Kiov4swxZ7JXk714/bTXtelTkaFr+uJBD+8qpVSSvDP3HXKLcrml+y3a8Cmlkk6bPodkfJTTwIEDGThwYORi+ymseXuVl5f1uY0V1rF2Kwp15Zfm89qs1/jdHr/jsN0PCzodpVQ9pE2fUkolwZu/vMnGko3c3O3moFNRStVTuqbPQdf0KaX8kFeSx+nvn85RbY/iqZOeCjodpepM1/TFg870KaWUz16b9RoFZQXc1O2moFNRStVj2vQ5LFu2zPd93Hjjjdx4442Ri+2nsObtVV5e1uc2VljH2q0w15VblMs/f/knZ3Y8k32b7xt0OkqpekzP0+eQkuJ/D9ywYcNIxvZTWPP2Ki8v63MbK6xj7VaY63pl5iuUJcq44dAbgk5FKVXP6Zo+B13Tp5Ty0sr8lZz177Po3ak3Dxz7QNDpKLXLdE1fPOjhXaWU8smLM14E4NpDrg04E6WU0qZvG0uXLvV9HwMGDGDAgAGRi+2nsObtVV5e1uc2VljH2q0w1rVs0zI+WPgBF+5/IW0btw06HaWU0jV9Tmlp/g9Hy5YtIxnbT2HN26u8vKzPbaywjrVbYaxr+PThpKekc80h1wSdilJKAbqmbxu6pk8p5YWFGxbS56M+9O/anz8f/ueg01HKNV3TFw96eFcppTz23LTnaJTeiP5d+gedilJKbaFNn8OSJUt830f//v3p39+fFwI/Y/sprHl7lZeX9bmNFdaxditMdc1eN5uvln3F5QddTrPMZkGno5RSW+iaPoeMjAzf99GhQ4dIxvZTWPP2Ki8v63MbK6xj7VaY6nrm52do2qAplx10WdCpKKXUNnRNn4Ou6VNKuTF19VSuGHcFfz78z1zZ9cqg01HKM7qmLx708K5SSnnAGMMzPz9Dq4atuOSAS4JORymltqNNn8PixYt930ffvn3p27dv5GL7Kax5e5WXl/W5jRXWsXYrDHV9v/J7pqyewjUHX0PDtPB+LJxSqv7SNX0OmZmZvu+jc+fOkYztp7Dm7VVeXtbnNlZYx9qtoOsyxvDsz8/StlFbLtj/gkBzUUqpmuiaPgdd06eU2hVfL/uaW76+hQePfZA++/UJOh2lPKdr+uJBD+8qpZQLCZPg2WnPsmf2nvTu1DvodJRSqkba9Dnk5OT4vo+LL76Yiy++OHKx/RTWvL3Ky8v63MYK61i7FWRdXyz5gvkb5nNDtxtIS9EVM0qp8NK/UA5ZWVm+76Nbt26RjO2nsObtVV5e1uc2VljH2q2g6ipPlPPctOfYt9m+nLHPGYHkoJRStaVr+hx0TZ9Sqi7+veDf3DfpPp466SlO2fOUoNNRyje6pi8e9PCuUkrtgtKKUl6Y/gJdWnbh5A4nB52OUkrtlDZ9DosWLfJ9H+effz7nn39+5GL7Kax5e5WXl/W5jRXWsXYriLrGLBjDbwW/cXP3mxGRpO5bKaV2ha7pc2jcuLHv+zjmmGMiGdtPYc3bq7y8rM9trLCOtVvJrquovIiXZrzEYa0P49h2xyZ130optat0TZ+DrulTStXGiFkjeOKnJ3j9tNfp0UaXOan40zV98aCHd5VSqg4Kygp4ddarHNvuWG34lFKRok2fw8KFC33fR+/evend258TuPoZ209hzdurvLysz22ssI61W8ms6805b7KxZCM3d785KftTSimv6Jo+hyZNmvi+j1NO8e+0Dn7G9lNY8/YqLy/rcxsrrGPtVrLqyivJY+TskZzc4WS6tuqalH0qpZRXdE2fg67pU0rtyLCpw3h15qu81/s99m++f9DpKJU0uqYvHvTwrlJK1UJuUS5v/fIWp+9zujZ8SqlI0qbPYcGCBb7v44wzzuCMM/z5uCY/Y/sprHl7lZeX9bmNFdaxdisZdb0681VKK0q54dAbfN2PUkr5Rdf0OTRr1sz3fZxzzjmRjO2nsObtVV5e1uc2VljH2i2/61pVsIrR80bTu1Nv9m66t6/7Ukopv+iaPgdd06eUqs6D3z/IBws/4JM/fEK7xu2CTkeppNM1ffGgh3eVUmoHlm9azgcLPuDC/S/Uhk8pFWna9DnMnz/f93306tWLXr16RS62n8Kat1d5eVmf21hhHWu3/KzrhRkvkJaSxjUHX+NLfKWUShZd0+fQokUL3/dx0UUXRTK2n8Kat1d5eVmf21hhHWu3/Krrt/zf+DTnUy4+4GJ2y9rNl30opVSy6Jo+B13Tp5RyevTHR3l3/rt81ucz2jRqE3Q6SgVG1/TFgx7eVUqpaqwvXs+YBWM4u+PZ2vAppWLBt6ZPRFqKyKciMk9EZorIGBHZzd52tIhMF5H5IvKFiLR23C+p25zmzZvnz2A49OzZk549e0Yutp/CmrdXeXlZn9tYYR1rt/yoa9ScUZRUlNC/a39P4yqlVFD8XNNngMeMMRMARORxYIiIXAOMAvoZY74VkXuAIcCVIpKSzG1VE27VqpWPw2Hp169fJGP7Kax5e5WXl/W5jRXWsXbL67ryS/N5Z+47nLLnKXRs2tHT2EopFZSkrekTkfOB64HBwOvGmK729a2AJcaYxiJyRDK3Vc1R1/QppQBen/U6T/70JO+c9Q5dWnUJOh2lAqdr+uIhKWv67Nm264GPgD2BpZXbjDG5QIqItAhg2zaS0QCXlZVRVlYWudh+CmveXuXlZX1uY4V1rN3ysq6SihLemPMGR7c9Whs+pVSsJOuNHM8A+cCzSdrfLpk9ezY9evTY8vXSSy95vo9TTz2VU0891fO4fsf2U1jz9iovL+tzGyusY+2Wl3V9uPBDcotyuergqzyJp5RSYeH7efpEZCiwH3COMSYhIsuAvRzbWwEJY8z6ZG+rmmu7du3w+/Du1VdfHcnYfgpr3l7l5WV9bmOFdazd8qqu8kQ5r896na4tu3JUm6M8iamUUmHh65o+EXkEOAY4yxhTaF+XAiwArnC8saKTMaZ/srdVzVfX9ClVv322+DPu/OZOnur5FKfsdUrQ6SgVGrqmLx58m+kTkS5Yb9qYD0wSEYDFxpg/iMhlwIsikgksAfoC2DOBSdtWVSKR8HgUtldYWAhAVlZWpGL7Kax5e5WXl/W5jRXWsXbLi7qMMbw681U6Nu3ISXue5FVqSikVGvqJHA7Z2dlm8+bNvu6j8lxiEyZMiFRsP4U1b6/y8rI+t7HCOtZueVHXN79+w43jb+Th3z3Mufue601iSsWEzvTFg372rkPr1tWes9lT119/fSRj+ymseXuVl5f1uY0V1rF2y4u6Xp35Km0ateHMfc70ICOllAofnelz0DV9StVPU1dP5YpxV3DXkXdx6YGXBp2OUqGjM33xoJ+961BRUeH7PvLy8sjLy4tcbD+FNW+v8vKyPrexwjrWbrmt69VZr9K8QXP67NfHw6yUUipc9PCuw8KFC33fx7nnWmuF/FhT5WdsP4U1b6/y8rI+t7HCOtZuualr3vp5fPPrN9zU7SYapjX0ODOllAoPbfocdt99d9/3ccstt0Qytp/CmrdXeXlZn9tYYR1rt9zU9eqsV8lKy+LiAy72MCOllAofXdPnoGv6lKpflm9aztkfnM3lB13O7T1uDzodpUJL1/TFg67pcygvL/d9H7m5ueTm5kYutp/CmrdXeXlZn9tYYR1rt3a1rhGzR5AqqVx20GU+ZKWUUuGiM30Oep6+YIQ1bz1PX3TsSl25Rbmc9t5p9N63N/cfc78/iSkVEzrTFw+6ps+hTZs2vu/j9tv9O4TkZ2w/hTVvr/Lysj63scI61m7tSl1vzHmDclNO/y7bfSKjUkrFks70OeiaPqXqh02lm/j9e7/n+D2O5/ETHw86HaVCT2f64kHX9DmUlZX5vo9Vq1axatWqyMX2U1jz9iovL+tzGyusY+1WXesaPXc0BWUFXHXwVT5mpZRS4aIzfQ66pi8YYc1b1/RFR13qKiov4vT3T+eglgfxfK/n/U1MqZjQmb540DV9Dm3btvV9H3fddVckY/sprHl7lZeX9bmNFdaxdqsudf17wb9ZX7yeq7rqLJ9Sqn7RmT4HXdOnVLyVJco4a8xZ7J61O2+c8QYiEnRKSkWCzvTFg67pcygtLfV9H8uXL2f58uWRi+2nsObtVV5e1uc2VljH2q3a1jVu8ThWFqzk6oOv1oZPKVXv6Eyfg67pC0ZY89Y1fdFRm7oSJkGfD/uQkpLC++e8r02fUnWgM33xoGv6HJKxpu+ee+6JZGw/hTVvr/Lysj63scI61m7Vpq4JyyewKG8RQ44fog2fUqpe0pk+B13Tp1Q8GWPo+2lf1hWv4+M/fExaiv6/q1Rd6ExfPOiaPoeSkhLf95GTk0NOTk7kYvsprHl7lZeX9bmNFdaxdmtndU1ZPYUZuTPo36W/NnxKqXpLZ/ocdE1fMMKat67pi46d1XXtl9cyb/08Pr/gcxqkNkheYkrFhM70xYP+y+vQrl073/fx4IMPRjK2n8Kat1d5eVmf21hhHWu3dlTX7HWzmfTbJAYeNlAbPqVUvaYzfQ66pk+p+Lltwm18/9v3fHHBF2RnZAedjlKRpDN98aBr+hyKi4t938e8efOYN29e5GL7Kax5e5WXl/W5jRXWsXarprqW5C3hq6VfcfEBF2vDp5Sq93Smz0HX9AUjrHnrmr7oqKmu+yfdzyc5n/D5+Z/TsmHL5CemVEzoTF886Jo+hz322MP3fTzyyCORjO2nsObtVV5e1uc2VljH2q3q6lpVsIqPFn3EBftdoA2fUkqhM33b0DV9SsXHY5Mf45+//JNP+nzCHo39/4dOqTjTmb540DV9DkVFRb7vY9asWcyaNStysf0U1ry9ysvL+tzGCutYu1W1ro3FG3lv/nucsc8Z2vAppZRNZ/ocdE1fMMKat67pi46qdT0/7XmGTx/Ov3v/m32b7xtcYkrFRFRn+kRkCXC2MabG/3ZFZD/gXfviUGPMW7uwn37AJGPM/F247wNAY2PMoLret650TZ9D+/btfd/H448/HsnYfgpr3l7l5WV9bmOFdazdctZVWFbIW3PfomeHntrwKaVqow9Ww3ajixj9gFygzk1fMulMn4Ou6VMq+t6Y/QaPT3mcN894k26tuwWdjlKxsCszfXvf9clTQDdfEoJpS4acNXBnN6qc6QOeBSYDxwDtgHeNMXeJyKXAE1jL3X4DzgcKgWeAPYGGwNvGmEfseAcCw4A2gABD7fs+A6wBNgGDjDFfichf7HhpwArgGmPMKhFpCrwKdAVWAcuB1TrTl2SFhYW+72PatGkAdOvWLVKx/RTWvL3Ky8v63MYK61i7VVnXQQcfxMg5I+mxew9t+JRSVe0JnABkA4tE5FVjzFv24d0th1dF5EvgIWPMNyKSAYwXkcnA18CHwN3GmH/Zt21pjFknIldgHRr+2L6+L9AJONoYkxCR67Gay0uB+4BNxpgDRKQVMJWth5d9pU2fw/Lly33fx8CBAwF/1lT5GdtPYc3bq7y8rM9trLCOtVuVdd368q2sKVzDX4/9a7AJKaWozUxckv3LGJMA8kTkF6ymbIHzBiLSCOgJ7CYilVdnAwdizQSmVTZ8AMaYdTXsqzfQA5hqx0kD8uxtJwE32/fPFZExriurJW36HDp06OD7Pp566qlIxvZTWPP2Ki8v63MbK6xj7dZTTz1FRaKCB2Y9wIEtDuTYdscGnZJSKnycH7tVQfU9UApggCOMMWXODSLSpQ77EuBhY8xrdc7SR9r0OWRlZfm+Dz8Pq0X1kF1Y8/YqLy/rcxsrrGPtVrdu3fhiyRcsmbmEoScOxfEfulJK1ZoxZrOI/Be4C3gIQEQ6AGXAPKBcRC6sengXay1fU0eoj4BbReTfxpgNItIAOMAYMx34D9Af+E5EWgJ/AP5FEuh5+hwKCgp838fkyZOZPHly5GL7Kax5e5WXl/W5jRXWsXbrf//7H4+NeYy9muxFrz17BZ2OUiraLgUOEpGZIjITGA00M8aUA+cC19nbpgNn2vd5CbhPRKaJSC9jzJvAW8BEEZkB/AT8zr7tQ0BzEZkLvA98k6zC9N27DnqevmCENW89T190dDumGws2LOCNj97g/P3PDzodpWInqufpU9vSw7sOe+65p+/7ePbZZyMZ209hzdurvLysz22ssI61GzPWzqDi3AqOangU53Q6J+h0lFIqtHSmz0HP06dUtPyy7heu+uIqmjVoxojTR9A6q3XQKSkVSzrTFw+6ps8hPz/f931MmjSJSZMmRS62n8Kat1d5eVmf21hhHetdsXDDQq798loapTfi2ibXsnDawqBTUkqpUNOZPgdd0xeMsOata/rCa/ra6dzyn1tIlVRGnD6Cy3tfDkS/LqXCSmf64kGbPoeuXbuaWbNq/ExmT8ybNw+Azp07Ryq2n8Kat1d5eVmf21hhHeu6GLtoLA9MeoDdG+3Os6c8S8emHWNRl1Jhpk1fPGjT56Br+pQKr4RJMGzqMF6b9RpHtDmCJ098kmaZzYJOS6l6QZu+eNA1fQ5+H9oFmDhxIhMnToxcbD+FNW+v8vKyPrexwjrWO1NQVsCtX9/Ka7Ne48L9L+TFU1/cpuGLal1KKX+JyBIRmWufP2+aiPxjB7cdKCK1ejeYiEwQkbO9yzQ5dKbPQdf0BSOseeuavnBYkb+Cm/9zMzkbc7jziDu55IBLtvvEjSjWpVSURHWmT0SWAGcbY3a6dquOt50ADDXGfOw2x2TSps/h4IMPNjNnzvR1Hzk5OQB07NgxUrH9FNa8vcrLy/rcxgrrWNdk6uqp/HnCnylLlDH0xKE1fqbu8I++Y8zUFbTtsBetszPZLbsBrbMbsJv9Vflz4wZp+hFtSu2CuDR9IvIn4FYgw77JIGPMeBG5G7gfyMH6jN4/AW2Bh4FMrPMa/80Y844dZwLa9EWbrulTKjw+WPgBD37/IO0bt+eZk59h76Z7V3u7175dzF8/nkPn3bPJzEgld3MJazeXUFqR2O62DdNTt2kCt37P3KZBbNm4Aakp2hwqVWmXmr4Hmj4FdPMjH2AaD+QN3NmN7Kav2P4CeBR41xhjRKQzMN4Y095xW2eD2BzYZIypEJHdsT5K7WD7s3QnEMGmTz+Rw2HTpk2+7+Orr74CoFcv7z8f1M/Yfgpr3l7l5WV9bmOFdayd8kryeObnZxg9bzRHtz2aoScOpWmDptvdzhjD0+MX8o+v5tPVLOWGgzpx5mmnbdmWV1TGGrsBXLO52Pq+qYS1+db3BWvy+W5hLpuKy7eLnSLQolF1zWEDdqsyk9iogf4ZVSrkLnA0ckcCn4vIHkAZ0EZE2hhjVlVzv92A10RkP6AcaAF0Bn5IUt6e05k+B13TF4yw5q1r+pKrIlHB+wve55mfnyGvJI++B/XltsNvIy1l+6aqvCLB3z79hde/W8IFh7dn8rO3IrJrdRWXVZCbX+JoEK3vaysbxS2XSyhPbP/3slFG6nazhdXNIrZolKGzhyqyYnR4dxFwuzHmAxFJAQqBA4wxS6q57XjgI+Bpe2ZwPjDAGDNBZ/piYJ999vF9H2+++WYkY/sprHl7lZeX9bmNFdaxnrxqMkP+N4T5G+Zz+O6Hc9eRd3FAiwOqve3qTcXc/PbP/G/xevr/bm/uPesgVhy963VlpqfSvnkW7Ztn7fB2iYRhY1FZtbOGa/OtJvGXVZv4ZkEJm6uZPUxNEVo2yqB1kwbs1nhrM1h52dkgNsxI3eV6lFI71AxYbP98JdDAsW0T0LTKbZfYDd+pwL7JSNBP2vQ5ZGRk7PxGLnXo0CGSsf0U1ry9ysvL+tzGCttYr8hfwRNTnuDLpV/SrlE7njjxCU7d69Qa32zxzfy1/Hn0NIrKKvjHRYfyh+7tgeTUlZIitGiUQYtGGRzQZse3LSqtnD3cdrZwS6O4uZg5KzeRm19KRTWzh9kN0qrMGm57SLmyUWyelUGKzh4qVRcDgQ9EZAMwDljn2PY08LqIFGK9keMuYLiIPAhMBmYkOVfP6eFdh/3339/Mnz/f132MGzcOgNNPPz1Ssf0U1ry9ysvL+tzGCstYF5YV8tqs1xgxewSCcNXBV9GvSz8y0zKrvX15RYKnvlrAcxMWsn/rbJ679DD2bd14y/aw1FVXFQnDhsJSx6xhsT1ruO1h5bWbS8gv2X72MC1FaNV4axPonDWsuvYwM11nD9Wui+rhXbUtbfocdE1fMMKat67p854xhk8Xf8qTPz3JmsI1nLnPmfz58D/TplHNU2er8oq55e2f+d+S9Vx8RAfuP6fLdoc/g64rGQpLy6vMGhZvc3i58vu6/BKqmTykSWZatbOGzbMyaJqVTvOsDJplpdOsYTpNs9JpkKZNotpKm7540KbP4dBDDzXTp0/3dR+rVllvEGrTZifHh0IW209hzdurvLysz22soMa6rKKMib9OZOTskUxbO40DWxzI4KMG07119x3eb6J9OLe4rIK//aHrlsO5VYX1ORSEioRhXUH1s4XOw81rNpVQVFZRY5yG6ak0z0qnaVYGzRqmWw1hVjpNG2bQ3PFz5fXN7J91RjGetOmLB236HPQ8fUp5a+76uXyw8AM+yfmEjSUbaZ3Vmpu63cS5+55LitT8KZDlFQn+8dV8nvt6EZ133/5wrvJGQUk5GwpL2VhYRl5RGRsLy9hYZF3eaF+/saiMPPv6Dfb1ZRU1v25kpqdsaQCb2s1i5Wxi5fWVs4lbZxczyExP0RNnh5g2ffGgb+RwyMvL830fY8eOBeCcc86JVGw/hTVvr/Lysj63sZIx1huKN/Dp4k/5YOEHzF0/l/SUdE7qcBLn7Xsex7Y7ltSUmmeCjDF8uzCXx8bNY+aKvBoP51YV1udQ2DVqkEajBmm0b177+xhjKCqrsBtDuzl0NIx59vUb7OuX5BYyrWgjGwrLKC3f/oTZlTLSUrbOKDpnELMytjSPzexZxqb29c0appOVkarNolK1pDN9DrqmLxhhzVvX9NVeeaKc71Z8xwcLP2DCrxMoT5RzUMuDOG/f8zhznzOrPblyVT8tXc/jn8/jh5z17NGsIXedcQDnHNquVvsP63NIbau4rGLLzKI1u7h1NnFD4daGsXK2Mc++vris5mYxPVWqP+TccGvT6GwkKxtI/Ui+utGZvnjQps+hW7duZtq0ab7uIzc3F4BWrVpFKrafwpq3V3l5WZ/bWF6Pdc7GHD5Y+AFjc8aSW5RLi8wWnNXxLM7b9zz2b75/rWLM+W0TT3wxj/Fz19CqcQNuPnlfLj6yQ53eSBDW55DyRnFZxdbDz1tmFrc2jJUN5IaCysPR1m0KS2tes5iWIo4mMGPbQ852Y+hcz1h5iDq7njaL2vTFgzZ9DrqmT6nqbSrdRM7GHHLycli0cZH1lbeIVQWrSJM0jm9/POfuey4n7HEC6anptYqZszafJ7+cz8czVtIkM43renai37F7k5Whq06UN0rKnc3i1obRuUYxb5t1jNbsYnWnx6mUmiJWo1ilSaxcs9ikoXXIPLtBGo0zt/25cYM0GmWkRfLcitr0xYP+dXXYuHGj7/sYM2YMAH369IlUbD+FNW+v8vKyPrexdnb/jcUbWZRnNXWVDV7OxhzWFK3ZcpsGqQ3o2LQjh+9+OF1bduX0fU6nVcPaz7Ct2FjE018t4L2pv9IgLYWbT96Xq4/vSNOGtWsWd6UuVT81SEuldXYqrbOrP/9jTUrLE+QVOQ4/b5lRLN3u8PPazSXMX72ZvMIyNu+gWXRqlJFafUNYY7OYTqMGqWQ3SLe3WT/rm192zv5otWKgBMgAnjDGvBJoUh4QkQeAxsaYQXW6n870baVr+oIR1rzjvKbv/c/e32bWrvLndcVbT07fMK0hnZp2omOzjnRq1mnLz+0atdvhmzFqMn/1Zv754zL++eMyAPoevRc3nNSJVo0b7OSeta8rbM8hVb+UVSQoKClnc3E5+SXl1s8l5eQXWz/n13Jbfkl5tZ/UUlVqitC4QdrWL2ezWMNMY+OqP9uX01Nrfjc9RHemz/l5uiLSFZgK7G2M+S3YzLYlImnGmNr914A2fZ7o3r27+fnnn33dR+U7hJs23fnC9jDF9lNY8/YqLy/rq0ssYwy5RblbZ+425jBnxRyWbFpCfmr+lts1Tm9sNXZNO9GpWSc6NrWavDaN2uzwtCq12f+81Zv5dMZKPp21ioVr8klNES48vD03n7IfezRruMuxqwrrc0ipXWGMoaQ8weY6NItbfi4pJ7+4jIKSii0NZG00SEvZpiGs2iw+0ueQOjd9B488+CmgW91HoFamzbxi5sCd3cjZ9NmXVwNnY33O7lNAK6wZwKeMMa/btzkGeBzItsPcYYz5QkSOwPqotkZAAXCLMWayiLwCzDTGDLPv3xX4COhkx3gSOATIBL4GbjPGVIjIBGAacDSw3hhzpoj8BTgf60jsCuAaY8wqEWkKvAp0BVYBy4HVdW369PCuQ2qq/ycV9fNFKaoveGHN26u8vKyvuljGGFYXrt5u1m5R3iI2l26duc7OyGbfZvtyWrvTrJk7e/audVZrzw4RGWOYu2ozn85cySczV5KztoAUgSP3acEVx3ThtK5t6nyorTbC+hxSaleICJnpqWSmp7JbtruZ8ETCUFhWQX5xOfklZXaDWOH42dksbttIrt5czKK1tW8cw05EfgfkAtOB74FLjTFzRSQbmCIi3wNrgH8DfYwxk0QkFWgiIhnA+0B/Y8x4EekFvC8i+wIjsJrBYfau+gMjjDFGRJ4EJhpjrhaRFOAt4ErgZfu2HYHjjDHlItIXq1E82hiTEJHrgSeAS4H7gE3GmANEpBXWjOW7dR0DbfocNmzY4Ps+Ro8eDcBFF10Uqdh+CmveXuXlVZyESfDiGy+yumA1e5+wN4vyrNm7RXmLKCgr2HK75g2a06lZJ87c58wts3admnWiZWZL3n33XdgEFx3r3VgbY/hlpdXofTpzJTm5VqN31D4t6f+7fTi9SxvXL1w7E9bnkFJBS3EcArYmmnaN3Fv3+9RmJi5J3hPrP9t9gQvt7wcC7zj+4W1gX9cJmGOMmQRgjKkANojIwUCpMWa8ff1XIlIKdDbGfCsi2fZtfgEuAY6x4/YGjhSR2+3LWcCvjtz+6Tis2xvoAUy180oDKk8gfBJws73vXBEZsysDoU2fw5o1a3Z+I5eef/55wJ8XJz9j+ymsedcmL2MMpYlSSipKKCkvobiimJLyEutyhXX50aceJWESNDi8AaUVpRSXF2/ZVvW2zsvO64oritlcupnZj84GoGOjjrRq2IpOTTvRu1Pvbdbetchs4aqm2jDGMGflJrvRW8Viu9E7umNLrjxuH07v2saTtXq1FdbnkFIqFC6w1/RdCLyO1VzlGmO6Vb2hiJy1i/sYCfQDJgC/GGOWVoYEzjPG5NRwv3zHzwI8bIx5bRdz2Cld0+dw2GGHmalTp/q6j8LCQgCysrIiFdtPO8vbGEN5opyyRBnlppyKRAXliXLry5Rv+bnCOK53bKu8fZkp2/a+iXKrqapssiqbNvvnzQWbKa0opSK9YtttjtuXVJRg2PHvUKLEOrFsSoPt18dlpmbSIK0BDVK3flVel5maSUZqxpbLjdMbs0eDPejYtCNd2nap1QmP6zrWNVlfUMovKzfxy8pNzFm5iZ+WbmDpukJSBI7p1JIzD27LaV2S2+g5RfW5r1RUxOGNHPblfwGrgV7A34wxb9rXHwD8hjUZNgf4gzHm+8rDu1hr+BYCVxhjvhaRk7EayP2MMaUisifwAzAZ+JcxZpQd91WgArjeXsfXCsg2xiy21/QNNcZ8bN/2MuBW4FRjzAYRaQAcYIyZLiJDgWb2YeKWWId3/6Vr+lxISdn1Reu15eeLktvYxhg2l21mY/FGNpRs2PK9sKxw24bK2WglKra5XLnd2VxVbbYqY5UlyraJWxmrLOG4vSknYWo+G79XBCEzLXOb5quy8WpAA5pmNqV1Suut16U2IDPN0ZTZl6u9f9XLdpOXkZKR9NMt7Ow5UpEwLFlXYDV3v22yG73NrNpUvOU2uzdpQJd2Tbn2hE6c1mV3WgbU6Dlps6eUqqXBwE9Yb+a4S0TuAFKxGsE/2odO+wBPikgjIAEMsg/nng88bV9fgDWDWApgjFkmInOAnliHdysNBB4DpouIwTp1zEBgcdXEjDFv2k3hRPu1IQUYjrUG8SHgNRGZi/VGjm92pXid6XPo2LGjycmpaQbWG6NGjQKgb9++vscuKi9iQ/GGbRq47b6XbLRuU7yBvJI8ymv5jnFBSEtJs77E+p6akrrNZef2LduqbE+VVOZ9NY9USaXbGd2qjZWekr7N5dSUVNJT0rfcv9q4KanV5lG5rfL+lTNraSnbn2Xfq8fKy8fcbSzn/fNLypm3ymru5qzczC8rNzFv1WaKyqxPMUhLEfZt3ZgD2zbhoLZNOLBtEw5smx2KJq8qP3+vlFLRnelT29Kmz6Fx42zz86LfqDCGioQhkWDrz1uuM5QnDBXG+nnrNra5rsK+jfO+FQnD47dcgjFw6z/eorzCYDA0bpC2zYeKV57tvUnDdDLTrXcUl1WUWQ2ao2Gr2tCNunkU5YlyDr3/UDYWb6S4orjaOlMkhWYNmm35ap7ZfLvvzRs0p3lmc5o2aEqj9EakyraN1q6cp60mYT3HWlTP02eMoaC0gg0FpawvKGVDofW1vqCMR264iKKyCva/cihL1hVuuU/Thukc2Dabg9o25cC22RzYtgn77d64Th+FFqSwPoeUigtt+uKh3jR9IrI/1kLLlsA64HJjzALnbRq02de07Tesurt7xGASRUhqESnp5UhqEaQWIylFSGoxklKMpBYiqQVIWgGSWkhKagGSVggp1TdwAJkpjcjOaEbjlCa0yGzKbtm70TqrBS0aNt+uoWuR2YLsjGxX51/zWllZGQDp6bv+iQx+8CovN3GcDdyGwlLWbCxgQ2Epm0uxGzm7qSso2+ZyWUX1v9eSKKdDiyy6dmjBgW2s2buD2jWhbdPMSJ/ZP6zPIaXiQpu+eKhPa/peAJ4zxoyyz4XzInCy8wbN0it45pLupKYIKSKkpgipKWz5OUWgPFFMcaKA4kQ+xRUFFFfkU1ReQFFFPsUV+RSWF1BYnk9B+Wbre1k++WWbKSjbzKaSzRjZ8fq09JQGNEptSoOUbNKlJalmL6SiMRUVDSkvzaKktCFFRQ0oKMqksCgTU5HFZlJZW02s7AZpNNkye1hCs6z1NG242bqu4bYzi1u+dvEDxV966SUGDBhQp/tsqTmEL9R1rcd6s4mhvMJQlkhQXmEor0hUua6Ysi3XJbaZjdtYWMp6u3lzzs5tKCijtKL650yKQLOsDJpnpdOiUQZ7tsji0PbNaN4ogxaNrM8EbZ6VYV/OoEVWBtmZabzyyssMuPRUr4bKG8ZYXzi/J6q5rvrv6cYw8o2RXHHZ5bW6/Y6/4+7+rvbt/A6fffYpZ5x+epJqqWm8XY6HXYvz8k9TpnD44Yd5UEvtnyNVc/B6PJctW8aeHdrX7v4m4ck4Juv+xcXFYJ3EWEVcvZjpE5HWwHygpf3umVSs2b79jDFb+qXMJhnmr5/+hc2l+WwuK2BzWT6/bViFyUxhc1kB+WWFJNhx05ZBGs0aZJOdlmV9pdvf0xoy4bPx7NlgPxqmZHDOuSfQJK0h2WkNWTBjDice8TuyUzPJSEnb6S/gDz/8wNFHHUVZRQWFJeUUlJRSWFLO2x+Np7S8gpNOOIaCkjKKSsspLCln5dp1ZDRstOVyUWk5FYkEgkHA/m7/LNbPaWI1FSkCqSmQKtaK0srLKVjXpQqkpMD63LXsvlurrffZcn+z9Tq2/lyweTNNmzQmVWD8j7MR4PRjDtpyH7Hji32fjRvW06pFc2RLHmZLPmL/DAaTSJAw1iH1DevX07RpU4wxGJMgkTDb/IwxJEwCY79QFxYW0iCzAca+7w+L8jDAad2tP+TG/mNdGcMkEtYb7O37i51D1XH9fPpqwHDmoa2t5+N2t7FqSE8R0lMhPUVIs38uLy0hOyuTtBQhLQXe+d9qUkTof+zupKaAVPljvmlTHk2ys2t8cRzxYy7r16/nttM7bak5q2HDHT7fqn4vLSkhIyO91i8kFRUVpKZIzXE9MGJaKQD9umV4Ek8lk4BIrb6XV1SQlpbuuN5xf0mp9j5FJSU0zGxYTczq951fUEDjxtm1yMm6/8ZNm2jWtBmzf/mFLgd1qVUtuevW0arVbrWue9WaNbTZvU2V66nx9it++4099mhf6xoQYemy5ey1117V3m70u+9y8RvLC40xjTx/+FVS1Zem73DgDWNMF8d1c4C+xpgt52hJzUw1PZ4/gOxEguxEgiaJBNkJY12uSNDYJGhSkdiy3bqN2fJz40SCnc1Z9RxhnUR3Qj/vf3f8jO2nmvJOGMFqCyrbJDCkVHPd1p+p8Tq7xRLH5co/bPbl8oryLS8oJSWlXPyWdd7Gf1+9N9X9ISwotF8c7OvEsV1k6wvRuc9Z59Z79aI27L57my3bUlJSSEu1v1JSEEnZ7o/5nLlzOejAg7Zc7vnIf62xuqdntTn9PG0a3bt3r/GPfM8HxrF+/XpmPHsZIPzw448cffQxjtul1PhiWPn964kTOannSTt5Qdlaw7jPv+D000+v9Qvchx99xLnnnrfTPNgyXsJBF/4fJSUlLPr4qWpzqPp95JtvcsXlV9QyJ3jp5Vesmd9a1vDMs89y8823bPviWkNTUvn9saFDufOOO7e5vl///owYMXJrDMftH3r4b9x77721zumee+/l4YcfrvXtkRRuv+MOnhj6RI2PbdXvN91yC88+8+xOY/c48gimTPmJAQMG8NJLL1Fbdb39rtxnV2/fo0cPpkyZEqqc6mJH9+nRowc//fSTNn0xoE2fo+kTkWKs8+lUWguUsfWM2LXRdAe3b4X1ETB1uU9d9xHE7aHm2rzax67k5GYftakn7DXUxFlbWHJyc/vK+6RT++dgWGuoep8dPQ+j+vyDrXVFuYaqt6/L38CoPP8qtcI6UpZdw3YVEfVlTd9yYA8RSXUc3m1nX7+FMcb7DwVVSimllAqB8LyF00fGmDXANLaeMPES4Gfnej6llFJKqTirF4d3AeyPWBkJNAc2YJ2yZV6wWSmllFJKJUe9mOkDMMbMNcYcZYzZ3/7uWcMnIktEZKV92Ljyun4iYkTkJq/2EzS7zq5B5+G12tQVldpFpLmIFInIsKBz8ZqIXCgiP4vINBGZKyL/DDont0SkgYg8ISKL7Jp+FpHzdnKfvUVk186PlAT278oska0nA43K70917Nznish0EVkoIh+KyLFB5+W1KD9GqvbqTdOXBL8Bpzku98P6QGSlkulPWB/6fYmIxOb8JSLSFuszKHsbY7oBBwKPB5qUN4YD7YEuxpgDgMuAZ0XkhB3cZ28gtE2frTFWLXFxgTHmUGPMvlhHjD4VkaOCTkqputKmzzsjsBo9RKQj0AiYaV8+RUS+t/+LnykiF9vXHyEis5xB7P8mQ/1fZNX/CJ2X7Z//ate7JEoznTuqK0KuBB4GZgDnAojICOfj4LwsInuIyHgRmS0iH4nI2JA+Zm2w3km/DsBYfgYQkaNE5GsR+cn+Osu+fm8RybVn0mbYv3vHB1fCtkRkL+Ai4HpjTDGAMWYW8Dfgfvs2g+28p4vIJHv27DngIHvG872g8t+JB4D7q/7jISL72s+3GSIyVUROt6+/R0T+4bhdS/uxC90pQowxY7BO9j9IRDJE5HER+Z/9GL0pIo0BRKSpiLzmePyeDTbz2hGR20Vksv169b2IdHNsMyLyf/b2HBE5P8BU1S7Qps87E4CDRaQ5cAXwhmPbVOA4Y0x3oBcwVESaG2MmA/kiciKA/YKUMMZMSm7qnssyxhwD9ASGVP4RVP4SkUOwPmbwP8DrWA3gzjwNfG2fzuhm4ET/MnRlOvA/YJmIvCciA+3GoBnWC/CfjDGHA2cDL9rXgzUe040xh2DV97aINEh++tU6GFhojFlf5fofgENF5AqgN3CsMeZQ4BxjTAK4EZhjjOlmjLkguSnX2hTgJ+D6Kte/BfzTfjz6AqNEZDesv5cXi0jlGSX+BHxkjClIVsJ19CPQBbgTyDPGHGk/Rr8Bg+3bPAUUAIfa2x4IIM9d8YYx5gj79eperN8vp03GmCOwZnKfTnp2yhVt+rxjgHeBi+0v53qj3YD37Fm9z4EWQGd729PADfbPN2L9Fx917wAYY5ZgvWmmfaDZ1B9XYf3BNsAY4CgR2WMn9zkJq0HEGLMUGO9virvGGJMwxpyH9Y/E18BZWLOZZwL7AJ+JyDTgM6zfxX3tu5YCo+wYE4Aitv7uBU12sv1s4HljzGYAY8w6/1Py1D3AXxz/9AnQja3PtzlYZ1U42hizDJiN9XiCddRkRPJSrbPKx6430NeedZ1mX+5kbzsbeNxu1DHG1OU8pkE6XES+sV+vnsR6zJzesb//ALQTET3VWYTUl/P0JctIrP8AvzHGrJOtn1/7PPAR0McYY0RkPlD5i/Iv4FER6Y71Alyb2ZmglbPtPwxVf+mLHT9XEJ3n2c7qCi37MNqfgBIRudy+Oh3rxTOydVVlH/6cBTwn1gnWBZhhjNluDZyI7J3k9OpqJrCviLSoMtt3NFZDG2nGmHki8ilwWy3vMgK4QkQWY50o+L9+5eaBI7Ceh/sANxhj/hNwPl5JAd4DTjDGTBWRdsCKKrepXIpQYb/GReXvu0Jn+jxljMkB7gYeqrKpGbDEbvhOZessBMaYMuA1rKbwLWNMYZLSdWMh1h89ROQUYPdg0/FMlOs6F5hnjGlvjNnbGLM38Husps9ZV1usfy4qTcBajoCIdABOTl7KtWevPTzGcbk91gz6HGA/ETnJse0I2fofV2UzXLl8oiEwN2mJ74A9E/4v4PnK2RJ7DendwIPAx8D1IpJtb2tp33UTVlMUBQ9gHcHIxpqBncbW59uBwKFYM0ZgzU6fANwOjDAhPZ+YiJyLddj6Cay/27eJSEN7W7ZdF1iP3x2Vz0URaRVEvrsgja0fXHDDjm6ookc7dI8ZY6r78MK7gOEi8iAwme3/i38Fa+H28z6n51Ya1n959wIjReRmrPVjywLNyr041HUl1nqpLYwx39sL/78HTrNnxuZjzUZXuhV4Q0QuBRZjrZur68c3JUMa8KD95ocirH9Y7zHG/CwivYHHReQprCYvBzjHvt86oJuI3Ik1K3iJMaY06dnX7AbgEWCOiJRiPQ9vNcZMFJFvgD2AH0SkDGv97wlYfz/m2Yff5oZ4XR/GmF9F5E2sRg7gUqw1l3/GmoG+rPIk+caYQhH5EOiPNYMWJu+JSAnWG/TmAGcaY34UkalYje1kEUlgNbYPAr8Af8Za1zdLRMqBicAtAeReW2lAIXAfVj3rsGb9VIzUm5Mzh5mI9MV6MTor6FxqYs8QzQXaGGOKgs7HK3Gtq7bsGYoyY0y5PRaTgVPicOJy+/DuFGNMVGZYlApEff87WJ/oTF/ARORzrIW/vYPOpSYicgvWjMSgOP1BiGtddbQf1kyfYK0BfDAODZ9Sqnb072D9ojN9SimllFL1gL6RQymllKoH7HNbfioi8+yTRo+xz5OIiBxtn0R6voh8ISKt7ev3F+vk53PF+ni91x1vXGkgIuPEOpF2VE5JU69p06eUUkrVDwZ4zBjT2RhzMLAI6wT6KVjns7zRGLM/8A0wxL5PKXCb/TGBhwBZwCB7WwUwFOtDB1QEaNOnlFJK1QPGmPX2Scor/QDsBRwOFBtjvrWvfwH4o32fJZUfeWifaPp/9n0wxpQbY74CNialAOWaNn1KKaVUPWPP7l2Pda7BPYGlldvsTw9JEZEWVe7TEOv0UB8lMVXlIW36lFJKqfrnGSAfeLY2N7Y/F/kd4D/GGG36IkpP2aKUUkrVIyIyFOt0TecYYxIisgz7kK29vRWQqPx4QBFJxTr5+wbCfYJptRM606eUUkrVEyLyCNYavvOMMSX21T8BDUXkOPvydVgfEVh5GHgE1ps2rgrrx+Op2tHz9CmllFL1gIh0AWZhfRxj5YmYFxtj/iAixwIvApnAEqCvMWa1iJyF9TnCs7AaP4DvjDE32jEnA+2B1sBKYJwx5uoklaTqSJs+pZRSSql6QA/vKqWUUkrVA9r0KaWUUkrVA9r0KaWUUkrVA9r0KaWUUkrVA9r0KaWUUkrVA9r0KaWUUkrVA9r0KaWUUkrVA9r0KaWUUkrVA/8PTRHyi1znxTIAAAAASUVORK5CYII=\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>924052</td>\n",
        "      <td>4810</td>\n",
        "      <td>28118</td>\n",
        "      <td>891124</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>927923</td>\n",
        "      <td>4827</td>\n",
        "      <td>27895</td>\n",
        "      <td>895201</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>931763</td>\n",
        "      <td>4843</td>\n",
        "      <td>27674</td>\n",
        "      <td>899246</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>935572</td>\n",
        "      <td>4859</td>\n",
        "      <td>27454</td>\n",
        "      <td>903259</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>260</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>939352</td>\n",
        "      <td>4876</td>\n",
        "      <td>27236</td>\n",
        "      <td>907240</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "256 2020-12-29     924052   4810     28118     891124\n",
        "257 2020-12-30     927923   4827     27895     895201\n",
        "258 2020-12-31     931763   4843     27674     899246\n",
        "259 2021-01-01     935572   4859     27454     903259\n",
        "260 2021-01-02     939352   4876     27236     907240"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 02Jan2021</th>\n",
        "      <th>Fatal on 02Jan2021</th>\n",
        "      <th>9th_Rt</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>17260080</td>\n",
        "      <td>20Dec2020</td>\n",
        "      <td>15506692</td>\n",
        "      <td>384353</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>69489</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>27236</td>\n",
        "      <td>4876</td>\n",
        "      <td>0.95</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 02Jan2021  \\\n",
        "Main           17260080        20Dec2020               15506692   \n",
        "Medicine          69489        01Sep2020                  27236   \n",
        "\n",
        "          Fatal on 02Jan2021 9th_Rt  \n",
        "Main                  384353      -  \n",
        "Medicine                4876   0.95  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
