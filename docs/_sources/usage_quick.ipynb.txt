{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1597313350107"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.7.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>177591</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177592</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177593</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177594</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177595</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "177591      2020-08-12          6          2       0    107808.0  COL   \n",
        "177592      2020-08-13          6          2       0    107808.0  COL   \n",
        "177593      2020-08-14          6          5       0    107808.0  COL   \n",
        "177594      2020-08-15          6          5       0    107808.0  COL   \n",
        "177595      2020-08-16          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "177591        Vichada       Colombia               3                  3   \n",
        "177592        Vichada       Colombia               3                  3   \n",
        "177593        Vichada       Colombia               3                  3   \n",
        "177594        Vichada       Colombia               3                  3   \n",
        "177595        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "177591              2                        4                  1   \n",
        "177592              2                        4                  1   \n",
        "177593              2                        4                  1   \n",
        "177594              2                        4                  1   \n",
        "177595              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "177591                       2                               2   \n",
        "177592                       2                               2   \n",
        "177593                       2                               2   \n",
        "177594                       2                               2   \n",
        "177595                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "177591                                    4                      2   \n",
        "177592                                    4                      2   \n",
        "177593                                    4                      2   \n",
        "177594                                    4                      2   \n",
        "177595                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "177591               2                2             87.04  \n",
        "177592               2                2             87.04  \n",
        "177593               2                2             87.04  \n",
        "177594               2                2             87.04  \n",
        "177595               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>177591</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177592</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177593</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177594</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177595</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "177591 2020-08-12  Colombia  Vichada          6         4      0          2\n",
        "177592 2020-08-13  Colombia  Vichada          6         4      0          2\n",
        "177593 2020-08-14  Colombia  Vichada          6         1      0          5\n",
        "177594 2020-08-15  Colombia  Vichada          6         1      0          5\n",
        "177595 2020-08-16  Colombia  Vichada          6         1      0          5"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>210</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>16474</td>\n",
        "      <td>3918</td>\n",
        "      <td>336</td>\n",
        "      <td>12220</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>16680</td>\n",
        "      <td>3816</td>\n",
        "      <td>338</td>\n",
        "      <td>12526</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>17069</td>\n",
        "      <td>3883</td>\n",
        "      <td>338</td>\n",
        "      <td>12848</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>17454</td>\n",
        "      <td>3842</td>\n",
        "      <td>338</td>\n",
        "      <td>13274</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>214</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>17714</td>\n",
        "      <td>3778</td>\n",
        "      <td>340</td>\n",
        "      <td>13596</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "210 2020-08-12      16474      3918    336      12220\n",
        "211 2020-08-13      16680      3816    338      12526\n",
        "212 2020-08-14      17069      3883    338      12848\n",
        "213 2020-08-15      17454      3842    338      13274\n",
        "214 2020-08-16      17714      3778    340      13596"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-12</th>\n",
        "      <td>20620110</td>\n",
        "      <td>7111608</td>\n",
        "      <td>751217</td>\n",
        "      <td>12757285</td>\n",
        "      <td>0.018216</td>\n",
        "      <td>0.309341</td>\n",
        "      <td>0.055611</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>20931110</td>\n",
        "      <td>7254855</td>\n",
        "      <td>760927</td>\n",
        "      <td>12915328</td>\n",
        "      <td>0.018177</td>\n",
        "      <td>0.308520</td>\n",
        "      <td>0.055639</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>21145784</td>\n",
        "      <td>7174008</td>\n",
        "      <td>766032</td>\n",
        "      <td>13205744</td>\n",
        "      <td>0.018113</td>\n",
        "      <td>0.312255</td>\n",
        "      <td>0.054827</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>21435025</td>\n",
        "      <td>7303332</td>\n",
        "      <td>771966</td>\n",
        "      <td>13359727</td>\n",
        "      <td>0.018007</td>\n",
        "      <td>0.311633</td>\n",
        "      <td>0.054627</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>21436117</td>\n",
        "      <td>7303214</td>\n",
        "      <td>771979</td>\n",
        "      <td>13360924</td>\n",
        "      <td>0.018007</td>\n",
        "      <td>0.311645</td>\n",
        "      <td>0.054623</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-08-12   20620110   7111608  751217   12757285             0.018216   \n",
        "2020-08-13   20931110   7254855  760927   12915328             0.018177   \n",
        "2020-08-14   21145784   7174008  766032   13205744             0.018113   \n",
        "2020-08-15   21435025   7303332  771966   13359727             0.018007   \n",
        "2020-08-16   21436117   7303214  771979   13360924             0.018007   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-08-12                 0.309341                        0.055611  \n",
        "2020-08-13                 0.308520                        0.055639  \n",
        "2020-08-14                 0.312255                        0.054827  \n",
        "2020-08-15                 0.311633                        0.054627  \n",
        "2020-08-16                 0.311645                        0.054623  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>51360</td>\n",
        "      <td>15420</td>\n",
        "      <td>1065</td>\n",
        "      <td>34875</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>52534</td>\n",
        "      <td>15344</td>\n",
        "      <td>1076</td>\n",
        "      <td>36114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>53894</td>\n",
        "      <td>15338</td>\n",
        "      <td>1085</td>\n",
        "      <td>37471</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>55121</td>\n",
        "      <td>15097</td>\n",
        "      <td>1092</td>\n",
        "      <td>38932</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>56140</td>\n",
        "      <td>14962</td>\n",
        "      <td>1103</td>\n",
        "      <td>40075</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "221 2020-08-12      51360     15420   1065      34875\n",
        "222 2020-08-13      52534     15344   1076      36114\n",
        "223 2020-08-14      53894     15338   1085      37471\n",
        "224 2020-08-15      55121     15097   1092      38932\n",
        "225 2020-08-16      56140     14962   1103      40075"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>183</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>50210</td>\n",
        "      <td>14263</td>\n",
        "      <td>1059</td>\n",
        "      <td>34888</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>51147</td>\n",
        "      <td>13950</td>\n",
        "      <td>1063</td>\n",
        "      <td>36134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>185</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>52217</td>\n",
        "      <td>13665</td>\n",
        "      <td>1073</td>\n",
        "      <td>37479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>186</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>53577</td>\n",
        "      <td>13547</td>\n",
        "      <td>1085</td>\n",
        "      <td>38945</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>187</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>54714</td>\n",
        "      <td>13546</td>\n",
        "      <td>1088</td>\n",
        "      <td>40080</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "183 2020-08-12      50210     14263   1059      34888\n",
        "184 2020-08-13      51147     13950   1063      36134\n",
        "185 2020-08-14      52217     13665   1073      37479\n",
        "186 2020-08-15      53577     13547   1085      38945\n",
        "187 2020-08-16      54714     13546   1088      40080"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>177591</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177592</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177593</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177594</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177595</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "177591      2020-08-12          6          2       0    107808.0  COL   \n",
        "177592      2020-08-13          6          2       0    107808.0  COL   \n",
        "177593      2020-08-14          6          5       0    107808.0  COL   \n",
        "177594      2020-08-15          6          5       0    107808.0  COL   \n",
        "177595      2020-08-16          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "177591        Vichada       Colombia               3                  3   \n",
        "177592        Vichada       Colombia               3                  3   \n",
        "177593        Vichada       Colombia               3                  3   \n",
        "177594        Vichada       Colombia               3                  3   \n",
        "177595        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "177591              2                        4                  1   \n",
        "177592              2                        4                  1   \n",
        "177593              2                        4                  1   \n",
        "177594              2                        4                  1   \n",
        "177595              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "177591                       2                               2   \n",
        "177592                       2                               2   \n",
        "177593                       2                               2   \n",
        "177594                       2                               2   \n",
        "177595                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "177591                                    4                      2   \n",
        "177592                                    4                      2   \n",
        "177593                                    4                      2   \n",
        "177594                                    4                      2   \n",
        "177595                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "177591               2                2             87.04  \n",
        "177592               2                2             87.04  \n",
        "177593               2                2             87.04  \n",
        "177594               2                2             87.04  \n",
        "177595               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>174151</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174152</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174153</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174154</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174155</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "174151  COL  Colombia  Vichada 2020-08-12      107808\n",
        "174152  COL  Colombia  Vichada 2020-08-13      107808\n",
        "174153  COL  Colombia  Vichada 2020-08-14      107808\n",
        "174154  COL  Colombia  Vichada 2020-08-15      107808\n",
        "174155  COL  Colombia  Vichada 2020-08-16      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>177591</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177592</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177593</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177594</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177595</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "177591      2020-08-12          6          2       0    107808.0  COL   \n",
        "177592      2020-08-13          6          2       0    107808.0  COL   \n",
        "177593      2020-08-14          6          5       0    107808.0  COL   \n",
        "177594      2020-08-15          6          5       0    107808.0  COL   \n",
        "177595      2020-08-16          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "177591        Vichada       Colombia               3                  3   \n",
        "177592        Vichada       Colombia               3                  3   \n",
        "177593        Vichada       Colombia               3                  3   \n",
        "177594        Vichada       Colombia               3                  3   \n",
        "177595        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "177591              2                        4                  1   \n",
        "177592              2                        4                  1   \n",
        "177593              2                        4                  1   \n",
        "177594              2                        4                  1   \n",
        "177595              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "177591                       2                               2   \n",
        "177592                       2                               2   \n",
        "177593                       2                               2   \n",
        "177594                       2                               2   \n",
        "177595                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "177591                                    4                      2   \n",
        "177592                                    4                      2   \n",
        "177593                                    4                      2   \n",
        "177594                                    4                      2   \n",
        "177595                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "177591               2                2             87.04  \n",
        "177592               2                2             87.04  \n",
        "177593               2                2             87.04  \n",
        "177594               2                2             87.04  \n",
        "177595               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>177591</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177592</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177593</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177594</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>177595</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "177591 2020-08-12  Colombia  COL               3                  3   \n",
        "177592 2020-08-13  Colombia  COL               3                  3   \n",
        "177593 2020-08-14  Colombia  COL               3                  3   \n",
        "177594 2020-08-15  Colombia  COL               3                  3   \n",
        "177595 2020-08-16  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "177591              2                        4                  1   \n",
        "177592              2                        4                  1   \n",
        "177593              2                        4                  1   \n",
        "177594              2                        4                  1   \n",
        "177595              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "177591                       2                               2   \n",
        "177592                       2                               2   \n",
        "177593                       2                               2   \n",
        "177594                       2                               2   \n",
        "177595                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "177591                                    4                      2   \n",
        "177592                                    4                      2   \n",
        "177593                                    4                      2   \n",
        "177594                                    4                      2   \n",
        "177595                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "177591               2                2             87.04  \n",
        "177592               2                2             87.04  \n",
        "177593               2                2             87.04  \n",
        "177594               2                2             87.04  \n",
        "177595               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "225 2020-08-16               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "225                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "225                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  \n",
        "225                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>221</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "221 2020-08-12               1                  1              1   \n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "225 2020-08-16               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "221                        0                  0                       1   \n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "225                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "221                               1                                    3   \n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "225                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "221                      2               2                1             30.56  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  \n",
        "225                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>183</th>\n",
        "      <td>2020-08-12</td>\n",
        "      <td>50210</td>\n",
        "      <td>14263</td>\n",
        "      <td>1059</td>\n",
        "      <td>34888</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>184</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>51147</td>\n",
        "      <td>13950</td>\n",
        "      <td>1063</td>\n",
        "      <td>36134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>185</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>52217</td>\n",
        "      <td>13665</td>\n",
        "      <td>1073</td>\n",
        "      <td>37479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>186</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>53577</td>\n",
        "      <td>13547</td>\n",
        "      <td>1085</td>\n",
        "      <td>38945</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>187</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>54714</td>\n",
        "      <td>13546</td>\n",
        "      <td>1088</td>\n",
        "      <td>40080</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "183 2020-08-12      50210     14263   1059      34888\n",
        "184 2020-08-13      51147     13950   1063      36134\n",
        "185 2020-08-14      52217     13665   1073      37479\n",
        "186 2020-08-15      53577     13547   1085      38945\n",
        "187 2020-08-16      54714     13546   1088      40080"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  21Apr2020  30Apr2020   126529100\n",
        "2nd  Past  01May2020  27Jun2020   126529100\n",
        "3rd  Past  28Jun2020  16Jul2020   126529100\n",
        "4th  Past  17Jul2020  24Jul2020   126529100\n",
        "5th  Past  25Jul2020  04Aug2020   126529100\n",
        "6th  Past  05Aug2020  16Aug2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase (05Aug2020 - 16Aug2020): finished  524 trials in 0 min 15 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase (17Jul2020 - 24Jul2020): finished  979 trials in 0 min 30 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase (21Apr2020 - 30Apr2020): finished 1674 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase (01May2020 - 27Jun2020): finished 1441 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase (28Jun2020 - 16Jul2020): finished 1629 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase (25Jul2020 - 04Aug2020): finished 1823 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 1 min 46 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.041553</td>\n",
        "      <td>0.000050</td>\n",
        "      <td>0.001131</td>\n",
        "      <td>0.000744</td>\n",
        "      <td>45</td>\n",
        "      <td>0.042</td>\n",
        "      <td>27</td>\n",
        "      <td>42</td>\n",
        "      <td>622</td>\n",
        "      <td>0.134275</td>\n",
        "      <td>1674</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.26</td>\n",
        "      <td>0.029092</td>\n",
        "      <td>0.000108</td>\n",
        "      <td>0.000658</td>\n",
        "      <td>0.002338</td>\n",
        "      <td>45</td>\n",
        "      <td>0.029</td>\n",
        "      <td>47</td>\n",
        "      <td>13</td>\n",
        "      <td>290</td>\n",
        "      <td>0.538287</td>\n",
        "      <td>1441</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.05</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.004401</td>\n",
        "      <td>0.002144</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>14</td>\n",
        "      <td>21738</td>\n",
        "      <td>0.046505</td>\n",
        "      <td>1629</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.18</td>\n",
        "      <td>0.000994</td>\n",
        "      <td>0.000004</td>\n",
        "      <td>0.004213</td>\n",
        "      <td>0.001930</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>8539</td>\n",
        "      <td>0.020737</td>\n",
        "      <td>979</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.02</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>16</td>\n",
        "      <td>21742</td>\n",
        "      <td>0.032928</td>\n",
        "      <td>1823</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.16</td>\n",
        "      <td>0.000107</td>\n",
        "      <td>0.000009</td>\n",
        "      <td>0.003109</td>\n",
        "      <td>0.002670</td>\n",
        "      <td>45</td>\n",
        "      <td>0.000</td>\n",
        "      <td>10</td>\n",
        "      <td>11</td>\n",
        "      <td>3319</td>\n",
        "      <td>0.033273</td>\n",
        "      <td>524</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE    Rt     theta     kappa  \\\n",
        "1st  Past  21Apr2020  30Apr2020   126529100  SIR-F  1.36  0.041553  0.000050   \n",
        "2nd  Past  01May2020  27Jun2020   126529100  SIR-F  0.26  0.029092  0.000108   \n",
        "3rd  Past  28Jun2020  16Jul2020   126529100  SIR-F  2.05  0.001267  0.000001   \n",
        "4th  Past  17Jul2020  24Jul2020   126529100  SIR-F  2.18  0.000994  0.000004   \n",
        "5th  Past  25Jul2020  04Aug2020   126529100  SIR-F  2.02  0.001267  0.000001   \n",
        "6th  Past  05Aug2020  16Aug2020   126529100  SIR-F  1.16  0.000107  0.000009   \n",
        "\n",
        "          rho     sigma  tau  alpha1 [-]  1/beta [day]  1/gamma [day]  \\\n",
        "1st  0.001131  0.000744   45       0.042            27             42   \n",
        "2nd  0.000658  0.002338   45       0.029            47             13   \n",
        "3rd  0.004401  0.002144   45       0.001             7             14   \n",
        "4th  0.004213  0.001930   45       0.001             7             16   \n",
        "5th  0.003737  0.001843   45       0.001             8             16   \n",
        "6th  0.003109  0.002670   45       0.000            10             11   \n",
        "\n",
        "     1/alpha2 [day]     RMSLE  Trials       Runtime  \n",
        "1st             622  0.134275    1674  1 min  0 sec  \n",
        "2nd             290  0.538287    1441  1 min  0 sec  \n",
        "3rd           21738  0.046505    1629  1 min  0 sec  \n",
        "4th            8539  0.020737     979  0 min 30 sec  \n",
        "5th           21742  0.032928    1823  1 min  0 sec  \n",
        "6th            3319  0.033273     524  0 min 15 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "2.18"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.581951</td>\n",
        "      <td>3.893161</td>\n",
        "      <td>3.726253</td>\n",
        "      <td>3.305692</td>\n",
        "      <td>2.749896</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>3.142937</td>\n",
        "      <td>2.882672</td>\n",
        "      <td>2.594845</td>\n",
        "      <td>2.477975</td>\n",
        "      <td>3.590464</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       1st       2nd       3rd       4th       5th       6th\n",
        "rho    1.0  0.581951  3.893161  3.726253  3.305692  2.749896\n",
        "sigma  1.0  3.142937  2.882672  2.594845  2.477975  3.590464"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>1.36</td>\n",
        "      <td>0.26</td>\n",
        "      <td>2.05</td>\n",
        "      <td>2.18</td>\n",
        "      <td>2.02</td>\n",
        "      <td>1.16</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "     1st   2nd   3rd   4th   5th   6th\n",
        "Rt  1.36  0.26  2.05  2.18  2.02  1.16"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>252</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>594428</td>\n",
        "      <td>2761</td>\n",
        "      <td>87187</td>\n",
        "      <td>504480</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>253</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>603118</td>\n",
        "      <td>2788</td>\n",
        "      <td>88350</td>\n",
        "      <td>511980</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>254</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>611924</td>\n",
        "      <td>2816</td>\n",
        "      <td>89528</td>\n",
        "      <td>519580</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>620847</td>\n",
        "      <td>2844</td>\n",
        "      <td>90721</td>\n",
        "      <td>527282</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>629888</td>\n",
        "      <td>2873</td>\n",
        "      <td>91929</td>\n",
        "      <td>535086</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "252 2020-12-29     594428   2761     87187     504480\n",
        "253 2020-12-30     603118   2788     88350     511980\n",
        "254 2020-12-31     611924   2816     89528     519580\n",
        "255 2021-01-01     620847   2844     90721     527282\n",
        "256 2021-01-02     629888   2873     91929     535086"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.002670418944475979"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.005340837888951958"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"7\" valign=\"top\">Main</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.041553</td>\n",
        "      <td>0.000050</td>\n",
        "      <td>0.001131</td>\n",
        "      <td>0.000744</td>\n",
        "      <td>45</td>\n",
        "      <td>0.042</td>\n",
        "      <td>27</td>\n",
        "      <td>42</td>\n",
        "      <td>622</td>\n",
        "      <td>0.134275</td>\n",
        "      <td>1674</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.26</td>\n",
        "      <td>0.029092</td>\n",
        "      <td>0.000108</td>\n",
        "      <td>0.000658</td>\n",
        "      <td>0.002338</td>\n",
        "      <td>45</td>\n",
        "      <td>0.029</td>\n",
        "      <td>47</td>\n",
        "      <td>13</td>\n",
        "      <td>290</td>\n",
        "      <td>0.538287</td>\n",
        "      <td>1441</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.05</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.004401</td>\n",
        "      <td>0.002144</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>14</td>\n",
        "      <td>21738</td>\n",
        "      <td>0.0465049</td>\n",
        "      <td>1629</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.18</td>\n",
        "      <td>0.000994</td>\n",
        "      <td>0.000004</td>\n",
        "      <td>0.004213</td>\n",
        "      <td>0.001930</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>8539</td>\n",
        "      <td>0.0207373</td>\n",
        "      <td>979</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.02</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>16</td>\n",
        "      <td>21742</td>\n",
        "      <td>0.0329281</td>\n",
        "      <td>1823</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.16</td>\n",
        "      <td>0.000107</td>\n",
        "      <td>0.000009</td>\n",
        "      <td>0.003109</td>\n",
        "      <td>0.002670</td>\n",
        "      <td>45</td>\n",
        "      <td>0.000</td>\n",
        "      <td>10</td>\n",
        "      <td>11</td>\n",
        "      <td>3319</td>\n",
        "      <td>0.0332726</td>\n",
        "      <td>524</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.16</td>\n",
        "      <td>0.000107</td>\n",
        "      <td>0.000009</td>\n",
        "      <td>0.003109</td>\n",
        "      <td>0.002670</td>\n",
        "      <td>45</td>\n",
        "      <td>0.000</td>\n",
        "      <td>10</td>\n",
        "      <td>11</td>\n",
        "      <td>3319</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Medicine</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>30Apr2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.36</td>\n",
        "      <td>0.041553</td>\n",
        "      <td>0.000050</td>\n",
        "      <td>0.001131</td>\n",
        "      <td>0.000744</td>\n",
        "      <td>45</td>\n",
        "      <td>0.042</td>\n",
        "      <td>27</td>\n",
        "      <td>42</td>\n",
        "      <td>622</td>\n",
        "      <td>0.134275</td>\n",
        "      <td>1674</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>27Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.26</td>\n",
        "      <td>0.029092</td>\n",
        "      <td>0.000108</td>\n",
        "      <td>0.000658</td>\n",
        "      <td>0.002338</td>\n",
        "      <td>45</td>\n",
        "      <td>0.029</td>\n",
        "      <td>47</td>\n",
        "      <td>13</td>\n",
        "      <td>290</td>\n",
        "      <td>0.538287</td>\n",
        "      <td>1441</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>28Jun2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.05</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.004401</td>\n",
        "      <td>0.002144</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>14</td>\n",
        "      <td>21738</td>\n",
        "      <td>0.0465049</td>\n",
        "      <td>1629</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>24Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.18</td>\n",
        "      <td>0.000994</td>\n",
        "      <td>0.000004</td>\n",
        "      <td>0.004213</td>\n",
        "      <td>0.001930</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>8539</td>\n",
        "      <td>0.0207373</td>\n",
        "      <td>979</td>\n",
        "      <td>0 min 30 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.02</td>\n",
        "      <td>0.001267</td>\n",
        "      <td>0.000001</td>\n",
        "      <td>0.003737</td>\n",
        "      <td>0.001843</td>\n",
        "      <td>45</td>\n",
        "      <td>0.001</td>\n",
        "      <td>8</td>\n",
        "      <td>16</td>\n",
        "      <td>21742</td>\n",
        "      <td>0.0329281</td>\n",
        "      <td>1823</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>16Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.16</td>\n",
        "      <td>0.000107</td>\n",
        "      <td>0.000009</td>\n",
        "      <td>0.003109</td>\n",
        "      <td>0.002670</td>\n",
        "      <td>45</td>\n",
        "      <td>0.000</td>\n",
        "      <td>10</td>\n",
        "      <td>11</td>\n",
        "      <td>3319</td>\n",
        "      <td>0.0332726</td>\n",
        "      <td>524</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>16Sep2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.16</td>\n",
        "      <td>0.000107</td>\n",
        "      <td>0.000009</td>\n",
        "      <td>0.003109</td>\n",
        "      <td>0.002670</td>\n",
        "      <td>45</td>\n",
        "      <td>0.000</td>\n",
        "      <td>10</td>\n",
        "      <td>11</td>\n",
        "      <td>3319</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.58</td>\n",
        "      <td>0.000107</td>\n",
        "      <td>0.000009</td>\n",
        "      <td>0.003109</td>\n",
        "      <td>0.005341</td>\n",
        "      <td>45</td>\n",
        "      <td>0.000</td>\n",
        "      <td>10</td>\n",
        "      <td>5</td>\n",
        "      <td>3319</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE    Rt  \\\n",
        "Scenario Phase                                                          \n",
        "Main     1st      Past  21Apr2020  30Apr2020   126529100  SIR-F  1.36   \n",
        "         2nd      Past  01May2020  27Jun2020   126529100  SIR-F  0.26   \n",
        "         3rd      Past  28Jun2020  16Jul2020   126529100  SIR-F  2.05   \n",
        "         4th      Past  17Jul2020  24Jul2020   126529100  SIR-F  2.18   \n",
        "         5th      Past  25Jul2020  04Aug2020   126529100  SIR-F  2.02   \n",
        "         6th      Past  05Aug2020  16Aug2020   126529100  SIR-F  1.16   \n",
        "         7th    Future  17Aug2020  01Jan2021   126529100  SIR-F  1.16   \n",
        "Medicine 1st      Past  21Apr2020  30Apr2020   126529100  SIR-F  1.36   \n",
        "         2nd      Past  01May2020  27Jun2020   126529100  SIR-F  0.26   \n",
        "         3rd      Past  28Jun2020  16Jul2020   126529100  SIR-F  2.05   \n",
        "         4th      Past  17Jul2020  24Jul2020   126529100  SIR-F  2.18   \n",
        "         5th      Past  25Jul2020  04Aug2020   126529100  SIR-F  2.02   \n",
        "         6th      Past  05Aug2020  16Aug2020   126529100  SIR-F  1.16   \n",
        "         7th    Future  17Aug2020  16Sep2020   126529100  SIR-F  1.16   \n",
        "         8th    Future  17Sep2020  01Jan2021   126529100  SIR-F  0.58   \n",
        "\n",
        "                   theta     kappa       rho     sigma  tau  alpha1 [-]  \\\n",
        "Scenario Phase                                                            \n",
        "Main     1st    0.041553  0.000050  0.001131  0.000744   45       0.042   \n",
        "         2nd    0.029092  0.000108  0.000658  0.002338   45       0.029   \n",
        "         3rd    0.001267  0.000001  0.004401  0.002144   45       0.001   \n",
        "         4th    0.000994  0.000004  0.004213  0.001930   45       0.001   \n",
        "         5th    0.001267  0.000001  0.003737  0.001843   45       0.001   \n",
        "         6th    0.000107  0.000009  0.003109  0.002670   45       0.000   \n",
        "         7th    0.000107  0.000009  0.003109  0.002670   45       0.000   \n",
        "Medicine 1st    0.041553  0.000050  0.001131  0.000744   45       0.042   \n",
        "         2nd    0.029092  0.000108  0.000658  0.002338   45       0.029   \n",
        "         3rd    0.001267  0.000001  0.004401  0.002144   45       0.001   \n",
        "         4th    0.000994  0.000004  0.004213  0.001930   45       0.001   \n",
        "         5th    0.001267  0.000001  0.003737  0.001843   45       0.001   \n",
        "         6th    0.000107  0.000009  0.003109  0.002670   45       0.000   \n",
        "         7th    0.000107  0.000009  0.003109  0.002670   45       0.000   \n",
        "         8th    0.000107  0.000009  0.003109  0.005341   45       0.000   \n",
        "\n",
        "                1/beta [day]  1/gamma [day]  1/alpha2 [day]      RMSLE Trials  \\\n",
        "Scenario Phase                                                                  \n",
        "Main     1st              27             42             622   0.134275   1674   \n",
        "         2nd              47             13             290   0.538287   1441   \n",
        "         3rd               7             14           21738  0.0465049   1629   \n",
        "         4th               7             16            8539  0.0207373    979   \n",
        "         5th               8             16           21742  0.0329281   1823   \n",
        "         6th              10             11            3319  0.0332726    524   \n",
        "         7th              10             11            3319          -      -   \n",
        "Medicine 1st              27             42             622   0.134275   1674   \n",
        "         2nd              47             13             290   0.538287   1441   \n",
        "         3rd               7             14           21738  0.0465049   1629   \n",
        "         4th               7             16            8539  0.0207373    979   \n",
        "         5th               8             16           21742  0.0329281   1823   \n",
        "         6th              10             11            3319  0.0332726    524   \n",
        "         7th              10             11            3319          -      -   \n",
        "         8th              10              5            3319          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    1 min  0 sec  \n",
        "         4th    0 min 30 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    0 min 15 sec  \n",
        "         7th               -  \n",
        "Medicine 1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    1 min  0 sec  \n",
        "         4th    0 min 30 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    0 min 15 sec  \n",
        "         7th               -  \n",
        "         8th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>252</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>141472</td>\n",
        "      <td>1336</td>\n",
        "      <td>13</td>\n",
        "      <td>140123</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>253</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>141473</td>\n",
        "      <td>1336</td>\n",
        "      <td>12</td>\n",
        "      <td>140125</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>254</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>141475</td>\n",
        "      <td>1336</td>\n",
        "      <td>12</td>\n",
        "      <td>140127</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>141476</td>\n",
        "      <td>1336</td>\n",
        "      <td>11</td>\n",
        "      <td>140129</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>141477</td>\n",
        "      <td>1336</td>\n",
        "      <td>10</td>\n",
        "      <td>140131</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "252 2020-12-29     141472   1336        13     140123\n",
        "253 2020-12-30     141473   1336        12     140125\n",
        "254 2020-12-31     141475   1336        12     140127\n",
        "255 2021-01-01     141476   1336        11     140129\n",
        "256 2021-01-02     141477   1336        10     140131"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 02Jan2021</th>\n",
        "      <th>Fatal on 02Jan2021</th>\n",
        "      <th>8th_Rt</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>91929</td>\n",
        "      <td>02Jan2021</td>\n",
        "      <td>91929</td>\n",
        "      <td>2873</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>21736</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>10</td>\n",
        "      <td>1336</td>\n",
        "      <td>0.58</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 02Jan2021  \\\n",
        "Main              91929        02Jan2021                  91929   \n",
        "Medicine          21736        17Sep2020                     10   \n",
        "\n",
        "          Fatal on 02Jan2021 8th_Rt  \n",
        "Main                    2873      -  \n",
        "Medicine                1336   0.58  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
