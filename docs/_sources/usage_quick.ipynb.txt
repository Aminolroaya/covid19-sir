{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1595608274501"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.6.0-delta.new.72.fix.120.155.157'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>168780</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168781</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168782</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168783</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168784</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "168780      2020-07-29          2          1       0    107808.0  COL   \n",
        "168781      2020-07-30          2          1       0    107808.0  COL   \n",
        "168782      2020-07-31          2          1       0    107808.0  COL   \n",
        "168783      2020-08-01          2          1       0    107808.0  COL   \n",
        "168784      2020-08-02          2          1       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "168780        Vichada       Colombia               3                  3   \n",
        "168781        Vichada       Colombia               3                  3   \n",
        "168782        Vichada       Colombia               3                  3   \n",
        "168783        Vichada       Colombia               3                  3   \n",
        "168784        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "168780              2                        4                  1   \n",
        "168781              2                        4                  1   \n",
        "168782              2                        4                  1   \n",
        "168783              2                        4                  1   \n",
        "168784              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "168780                       2                               2   \n",
        "168781                       2                               2   \n",
        "168782                       2                               2   \n",
        "168783                       2                               2   \n",
        "168784                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "168780                                    4                      2   \n",
        "168781                                    4                      2   \n",
        "168782                                    4                      2   \n",
        "168783                                    4                      2   \n",
        "168784                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "168780               2                2             87.04  \n",
        "168781               2                2             87.04  \n",
        "168782               2                2             87.04  \n",
        "168783               2                2             87.04  \n",
        "168784               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>168780</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168781</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168782</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168783</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168784</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "168780 2020-07-29  Colombia  Vichada          2         1      0          1\n",
        "168781 2020-07-30  Colombia  Vichada          2         1      0          1\n",
        "168782 2020-07-31  Colombia  Vichada          2         1      0          1\n",
        "168783 2020-08-01  Colombia  Vichada          2         1      0          1\n",
        "168784 2020-08-02  Colombia  Vichada          2         1      0          1"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>196</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>11861</td>\n",
        "      <td>2774</td>\n",
        "      <td>329</td>\n",
        "      <td>8758</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>197</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>12228</td>\n",
        "      <td>2789</td>\n",
        "      <td>330</td>\n",
        "      <td>9109</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>198</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>12691</td>\n",
        "      <td>2921</td>\n",
        "      <td>332</td>\n",
        "      <td>9438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>199</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>13163</td>\n",
        "      <td>3216</td>\n",
        "      <td>332</td>\n",
        "      <td>9615</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>200</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>13455</td>\n",
        "      <td>3508</td>\n",
        "      <td>332</td>\n",
        "      <td>9615</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "196 2020-07-29      11861      2774    329       8758\n",
        "197 2020-07-30      12228      2789    330       9109\n",
        "198 2020-07-31      12691      2921    332       9438\n",
        "199 2020-08-01      13163      3216    332       9615\n",
        "200 2020-08-02      13455      3508    332       9615"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-07-29</th>\n",
        "      <td>17019871</td>\n",
        "      <td>6467889</td>\n",
        "      <td>668343</td>\n",
        "      <td>9883639</td>\n",
        "      <td>0.019634</td>\n",
        "      <td>0.290356</td>\n",
        "      <td>0.063338</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-30</th>\n",
        "      <td>17327289</td>\n",
        "      <td>6583253</td>\n",
        "      <td>674311</td>\n",
        "      <td>10069725</td>\n",
        "      <td>0.019458</td>\n",
        "      <td>0.290574</td>\n",
        "      <td>0.062761</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-07-31</th>\n",
        "      <td>17578904</td>\n",
        "      <td>6640181</td>\n",
        "      <td>680456</td>\n",
        "      <td>10258267</td>\n",
        "      <td>0.019354</td>\n",
        "      <td>0.291778</td>\n",
        "      <td>0.062206</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-01</th>\n",
        "      <td>17849542</td>\n",
        "      <td>6687393</td>\n",
        "      <td>685538</td>\n",
        "      <td>10476611</td>\n",
        "      <td>0.019203</td>\n",
        "      <td>0.293470</td>\n",
        "      <td>0.061416</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-02</th>\n",
        "      <td>17850400</td>\n",
        "      <td>6713675</td>\n",
        "      <td>685538</td>\n",
        "      <td>10451187</td>\n",
        "      <td>0.019202</td>\n",
        "      <td>0.292744</td>\n",
        "      <td>0.061557</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-07-29   17019871   6467889  668343    9883639             0.019634   \n",
        "2020-07-30   17327289   6583253  674311   10069725             0.019458   \n",
        "2020-07-31   17578904   6640181  680456   10258267             0.019354   \n",
        "2020-08-01   17849542   6687393  685538   10476611             0.019203   \n",
        "2020-08-02   17850400   6713675  685538   10451187             0.019202   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-07-29                 0.290356                        0.063338  \n",
        "2020-07-30                 0.290574                        0.062761  \n",
        "2020-07-31                 0.291778                        0.062206  \n",
        "2020-08-01                 0.293470                        0.061416  \n",
        "2020-08-02                 0.292744                        0.061557  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>207</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>33448</td>\n",
        "      <td>8942</td>\n",
        "      <td>1005</td>\n",
        "      <td>23501</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>208</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>34749</td>\n",
        "      <td>9569</td>\n",
        "      <td>1006</td>\n",
        "      <td>24174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>209</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>36330</td>\n",
        "      <td>10395</td>\n",
        "      <td>1012</td>\n",
        "      <td>24923</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>210</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>37866</td>\n",
        "      <td>11357</td>\n",
        "      <td>1012</td>\n",
        "      <td>25497</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>38719</td>\n",
        "      <td>37707</td>\n",
        "      <td>1012</td>\n",
        "      <td>25095</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "207 2020-07-29      33448      8942   1005      23501\n",
        "208 2020-07-30      34749      9569   1006      24174\n",
        "209 2020-07-31      36330     10395   1012      24923\n",
        "210 2020-08-01      37866     11357   1012      25497\n",
        "211 2020-08-02      38719     37707   1012      25095"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>168780</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168781</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168782</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168783</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168784</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "168780      2020-07-29          2          1       0    107808.0  COL   \n",
        "168781      2020-07-30          2          1       0    107808.0  COL   \n",
        "168782      2020-07-31          2          1       0    107808.0  COL   \n",
        "168783      2020-08-01          2          1       0    107808.0  COL   \n",
        "168784      2020-08-02          2          1       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "168780        Vichada       Colombia               3                  3   \n",
        "168781        Vichada       Colombia               3                  3   \n",
        "168782        Vichada       Colombia               3                  3   \n",
        "168783        Vichada       Colombia               3                  3   \n",
        "168784        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "168780              2                        4                  1   \n",
        "168781              2                        4                  1   \n",
        "168782              2                        4                  1   \n",
        "168783              2                        4                  1   \n",
        "168784              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "168780                       2                               2   \n",
        "168781                       2                               2   \n",
        "168782                       2                               2   \n",
        "168783                       2                               2   \n",
        "168784                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "168780                                    4                      2   \n",
        "168781                                    4                      2   \n",
        "168782                                    4                      2   \n",
        "168783                                    4                      2   \n",
        "168784                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "168780               2                2             87.04  \n",
        "168781               2                2             87.04  \n",
        "168782               2                2             87.04  \n",
        "168783               2                2             87.04  \n",
        "168784               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>165564</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>165565</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>165566</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>165567</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>165568</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "165564  COL  Colombia  Vichada 2020-07-29      107808\n",
        "165565  COL  Colombia  Vichada 2020-07-30      107808\n",
        "165566  COL  Colombia  Vichada 2020-07-31      107808\n",
        "165567  COL  Colombia  Vichada 2020-08-01      107808\n",
        "165568  COL  Colombia  Vichada 2020-08-02      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>168780</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168781</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168782</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168783</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168784</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "168780      2020-07-29          2          1       0    107808.0  COL   \n",
        "168781      2020-07-30          2          1       0    107808.0  COL   \n",
        "168782      2020-07-31          2          1       0    107808.0  COL   \n",
        "168783      2020-08-01          2          1       0    107808.0  COL   \n",
        "168784      2020-08-02          2          1       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "168780        Vichada       Colombia               3                  3   \n",
        "168781        Vichada       Colombia               3                  3   \n",
        "168782        Vichada       Colombia               3                  3   \n",
        "168783        Vichada       Colombia               3                  3   \n",
        "168784        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "168780              2                        4                  1   \n",
        "168781              2                        4                  1   \n",
        "168782              2                        4                  1   \n",
        "168783              2                        4                  1   \n",
        "168784              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "168780                       2                               2   \n",
        "168781                       2                               2   \n",
        "168782                       2                               2   \n",
        "168783                       2                               2   \n",
        "168784                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "168780                                    4                      2   \n",
        "168781                                    4                      2   \n",
        "168782                                    4                      2   \n",
        "168783                                    4                      2   \n",
        "168784                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "168780               2                2             87.04  \n",
        "168781               2                2             87.04  \n",
        "168782               2                2             87.04  \n",
        "168783               2                2             87.04  \n",
        "168784               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>168780</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168781</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168782</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168783</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168784</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "168780 2020-07-29  Colombia  COL               3                  3   \n",
        "168781 2020-07-30  Colombia  COL               3                  3   \n",
        "168782 2020-07-31  Colombia  COL               3                  3   \n",
        "168783 2020-08-01  Colombia  COL               3                  3   \n",
        "168784 2020-08-02  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "168780              2                        4                  1   \n",
        "168781              2                        4                  1   \n",
        "168782              2                        4                  1   \n",
        "168783              2                        4                  1   \n",
        "168784              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "168780                       2                               2   \n",
        "168781                       2                               2   \n",
        "168782                       2                               2   \n",
        "168783                       2                               2   \n",
        "168784                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "168780                                    4                      2   \n",
        "168781                                    4                      2   \n",
        "168782                                    4                      2   \n",
        "168783                                    4                      2   \n",
        "168784                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "168780               2                2             87.04  \n",
        "168781               2                2             87.04  \n",
        "168782               2                2             87.04  \n",
        "168783               2                2             87.04  \n",
        "168784               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(country=\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>207</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>208</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>209</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>210</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "207 2020-07-29               1                  1              1   \n",
        "208 2020-07-30               1                  1              1   \n",
        "209 2020-07-31               1                  1              1   \n",
        "210 2020-08-01               1                  1              1   \n",
        "211 2020-08-02               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "207                        0                  0                       1   \n",
        "208                        0                  0                       1   \n",
        "209                        0                  0                       1   \n",
        "210                        0                  0                       1   \n",
        "211                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "207                               1                                    3   \n",
        "208                               1                                    3   \n",
        "209                               1                                    3   \n",
        "210                               1                                    3   \n",
        "211                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "207                      2               2                1             32.41  \n",
        "208                      2               2                1             32.41  \n",
        "209                      2               2                1             32.41  \n",
        "210                      2               2                1             32.41  \n",
        "211                      2               2                1             32.41  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(iso3=\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>207</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>208</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>209</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>210</th>\n",
        "      <td>2020-08-01</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-02</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>32.41</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "207 2020-07-29               1                  1              1   \n",
        "208 2020-07-30               1                  1              1   \n",
        "209 2020-07-31               1                  1              1   \n",
        "210 2020-08-01               1                  1              1   \n",
        "211 2020-08-02               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "207                        0                  0                       1   \n",
        "208                        0                  0                       1   \n",
        "209                        0                  0                       1   \n",
        "210                        0                  0                       1   \n",
        "211                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "207                               1                                    3   \n",
        "208                               1                                    3   \n",
        "209                               1                                    3   \n",
        "210                               1                                    3   \n",
        "211                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "207                      2               2                1             32.41  \n",
        "208                      2               2                1             32.41  \n",
        "209                      2               2                1             32.41  \n",
        "210                      2               2                1             32.41  \n",
        "211                      2               2                1             32.41  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>167</th>\n",
        "      <td>2020-07-27</td>\n",
        "      <td>29969</td>\n",
        "      <td>6857</td>\n",
        "      <td>996</td>\n",
        "      <td>22116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>168</th>\n",
        "      <td>2020-07-28</td>\n",
        "      <td>30961</td>\n",
        "      <td>7152</td>\n",
        "      <td>998</td>\n",
        "      <td>22811</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>169</th>\n",
        "      <td>2020-07-29</td>\n",
        "      <td>31901</td>\n",
        "      <td>7393</td>\n",
        "      <td>1001</td>\n",
        "      <td>23507</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>170</th>\n",
        "      <td>2020-07-30</td>\n",
        "      <td>33049</td>\n",
        "      <td>7866</td>\n",
        "      <td>1004</td>\n",
        "      <td>24179</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>171</th>\n",
        "      <td>2020-07-31</td>\n",
        "      <td>34372</td>\n",
        "      <td>8437</td>\n",
        "      <td>1006</td>\n",
        "      <td>24929</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "167 2020-07-27      29969      6857    996      22116\n",
        "168 2020-07-28      30961      7152    998      22811\n",
        "169 2020-07-29      31901      7393   1001      23507\n",
        "170 2020-07-30      33049      7866   1004      24179\n",
        "171 2020-07-31      34372      8437   1006      24929"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  17Apr2020  01May2020   126529100\n",
        "2nd  Past  02May2020  14May2020   126529100\n",
        "3rd  Past  15May2020  09Jun2020   126529100\n",
        "4th  Past  10Jun2020  01Jul2020   126529100\n",
        "5th  Past  02Jul2020  11Jul2020   126529100\n",
        "6th  Past  12Jul2020  22Jul2020   126529100\n",
        "7th  Past  23Jul2020  31Jul2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<Main scenario: perform parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t7th phase with SIR-F model finished 552 trials in 0 min 15 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase with SIR-F model finished 163 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase with SIR-F model finished 217 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase with SIR-F model finished 194 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase with SIR-F model finished 222 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase with SIR-F model finished 375 trials in 0 min 10 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase with SIR-F model finished 221 trials in 0 min 5 sec."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 0 min 25 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>tau</th>\n",
        "      <th>Rt</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.010953</td>\n",
        "      <td>0.004857</td>\n",
        "      <td>0.047160</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>360</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.047</td>\n",
        "      <td>3148</td>\n",
        "      <td>22</td>\n",
        "      <td>51</td>\n",
        "      <td>0.137476</td>\n",
        "      <td>163</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.003969</td>\n",
        "      <td>0.014883</td>\n",
        "      <td>0.056732</td>\n",
        "      <td>0.000540</td>\n",
        "      <td>360</td>\n",
        "      <td>0.24</td>\n",
        "      <td>0.057</td>\n",
        "      <td>462</td>\n",
        "      <td>62</td>\n",
        "      <td>16</td>\n",
        "      <td>0.159309</td>\n",
        "      <td>217</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.004105</td>\n",
        "      <td>0.020125</td>\n",
        "      <td>0.189291</td>\n",
        "      <td>0.000070</td>\n",
        "      <td>360</td>\n",
        "      <td>0.16</td>\n",
        "      <td>0.189</td>\n",
        "      <td>3586</td>\n",
        "      <td>60</td>\n",
        "      <td>12</td>\n",
        "      <td>0.108743</td>\n",
        "      <td>375</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.016393</td>\n",
        "      <td>0.018820</td>\n",
        "      <td>0.039140</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>360</td>\n",
        "      <td>0.84</td>\n",
        "      <td>0.039</td>\n",
        "      <td>17542</td>\n",
        "      <td>15</td>\n",
        "      <td>13</td>\n",
        "      <td>0.123622</td>\n",
        "      <td>194</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.039220</td>\n",
        "      <td>0.017591</td>\n",
        "      <td>0.037520</td>\n",
        "      <td>0.000533</td>\n",
        "      <td>360</td>\n",
        "      <td>2.08</td>\n",
        "      <td>0.038</td>\n",
        "      <td>469</td>\n",
        "      <td>6</td>\n",
        "      <td>14</td>\n",
        "      <td>0.049572</td>\n",
        "      <td>222</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.032723</td>\n",
        "      <td>0.018251</td>\n",
        "      <td>0.001114</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>360</td>\n",
        "      <td>1.78</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3514</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.039045</td>\n",
        "      <td>221</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.033329</td>\n",
        "      <td>0.015231</td>\n",
        "      <td>0.000824</td>\n",
        "      <td>0.000859</td>\n",
        "      <td>360</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.001</td>\n",
        "      <td>291</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>0.066827</td>\n",
        "      <td>552</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE       rho     sigma  \\\n",
        "1st  Past  17Apr2020  01May2020   126529100  SIR-F  0.010953  0.004857   \n",
        "2nd  Past  02May2020  14May2020   126529100  SIR-F  0.003969  0.014883   \n",
        "3rd  Past  15May2020  09Jun2020   126529100  SIR-F  0.004105  0.020125   \n",
        "4th  Past  10Jun2020  01Jul2020   126529100  SIR-F  0.016393  0.018820   \n",
        "5th  Past  02Jul2020  11Jul2020   126529100  SIR-F  0.039220  0.017591   \n",
        "6th  Past  12Jul2020  22Jul2020   126529100  SIR-F  0.032723  0.018251   \n",
        "7th  Past  23Jul2020  31Jul2020   126529100  SIR-F  0.033329  0.015231   \n",
        "\n",
        "        theta     kappa  tau    Rt  alpha1 [-]  1/alpha2 [day]  1/beta [day]  \\\n",
        "1st  0.047160  0.000079  360  2.11       0.047            3148            22   \n",
        "2nd  0.056732  0.000540  360  0.24       0.057             462            62   \n",
        "3rd  0.189291  0.000070  360  0.16       0.189            3586            60   \n",
        "4th  0.039140  0.000014  360  0.84       0.039           17542            15   \n",
        "5th  0.037520  0.000533  360  2.08       0.038             469             6   \n",
        "6th  0.001114  0.000071  360  1.78       0.001            3514             7   \n",
        "7th  0.000824  0.000859  360  2.07       0.001             291             7   \n",
        "\n",
        "     1/gamma [day]     RMSLE  Trials       Runtime  \n",
        "1st             51  0.137476     163   0 min 5 sec  \n",
        "2nd             16  0.159309     217   0 min 5 sec  \n",
        "3rd             12  0.108743     375  0 min 10 sec  \n",
        "4th             13  0.123622     194   0 min 5 sec  \n",
        "5th             14  0.049572     222   0 min 5 sec  \n",
        "6th             13  0.039045     221   0 min 5 sec  \n",
        "7th             16  0.066827     552  0 min 15 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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nHMAWLPlE8pDVSQkpfFg+jGsqJlORVEFD17/IAmW0GQ4/6vnc8IpJ7B5zWZu/N6NzaZfd911nHDCCSxcuJBrrrmm2fpvvvlmZs6cydtvv821117bbPqtt97KlClTePnll7npppuaTb/rrrsYO3YsTz31FL/97W+bTb///vsZPHgw//rXv/jzn//cbPpjjz1Gbm4u9957L/fee2+z6c8++yzp6enccccdPPLII82mz507F4BbbrmFp59+usm0Hj168NxzzwFw44038sorrzSZnpOTw+OPPw7Aj370I955550m0wcNGsQDDzwAwDXXXMPChQubTB8zZgx33303AFdccQUrVqxoMn3KlCnceuutAFxwwQVs2LChyfQjjjiCX/ziFwCc/vnTWb91PWWVOykr20ZZYiJpH19F38/1JSM5g42/30hqXSoZKRlkJmdSm1DLgNMG8NXvfRWg2ecO2v7sJZDA1XOuZs6cOWzetpkvfuGL1Lk6nHPUuTrqqOPsi87muNOPY936ddz4zRupw09PsAQM48tXfJljTzqWTWs28csf/BLDGqaZGd/5wXc44YQTWLZoGT/83g+btYzt0Wfv5vY/e4aRQmNIuf/++xk4aCAP//Nh7rrzLhwO51zD45/v/zPZvbN55IFHePzhx/005xq286a/30RCagL/+cd/ePPZNxv2j8Pvo0vuuoSaUA2v3v8qy95c1jDeOUdCSgLH/+x4SqpL+Oihj9j60VY/LSiTmJnI4K8Pps7VseXRLZSvanoRRXKfZAZ/dTApCSlsfXgrFesqGlomEy2RvkP7ct5PziMzOZN//fxfFK4tJDEhkURLJDEhkYMPPpjf//73pCenc9GFF7X52Tv77LPZvn17w7S0ihrmpY3gwkTjwctm8OWzzqCioum5fqeddhrf+9739uqzBy1/74W76qqr+NKXvsT69eu58MILm03/7ne/y+mnn87y5cv56le/2my6vvda/94T6UqiEvrMrC8wFai/YeLDwJ/MLM85V7in5erV1NQwf/78htcDBgzYq/qFXC0uoZaaulIWb3qXtUtWsnt7FRtKNjQre/vC27nf7qdqcxUbizY2m/61V75Gv6J+1KyvYWXRymah8I6Fd/AiL7JtyTY2lG4gAT8+0RJJsATe3fQuJbklLN+xnLKasibzJlriAW0l6i7qXB3lNeUsKlzE9177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\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "0.84"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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rroKgAsuuICRkRGWLFkCwHnnncfIyAjLljXDde655zIyMsLy5csBOOussxgZGWHlypUAnHHGGYyMjLBq1SoATj31VEZGRrjjjjsA+OxnP8vIyAj33HMPAIsWLWJkZGRiLE888UT23nvvifZxxx3HPvvsM9E+5phjeNnLXjbRPvroo3nVq1410V64cCH777//RPvII4/kwAMPnGgffvjhvOlNb5poH3bYYYyededE+5Cv3cXBZ9/Xfte5d/Guc++aaB989p0c8rX72qNn3clh593XftOb3sThhx8+0T7wwAM58sgjJ9r7778/CxcunGi/6lWv4uijj55ov+xlL+OYY46ZaO+zzz4cd9xxE+29996bE088caI9MjKy8ba9X93LyKLbuWDpbwC4auUaRhbdzkXLmvYVNzbti69fA8Di5U178fKmffH1TXtT3fZuW3wuN/zre+9rX3I2N3zhiIn2rWNf4sYvvn+iver7Z7Di3466r/2901jxpQ9OtI+84G4OPOO+benw/7iLN33pvvZh5901/bb3rndNtA8++GAOOeSQifbo6CiHHXbYRHtjb3vLP3coqy9vto1a85umfeV/AHDvPXex/HOHcvuPv9W0776d5Z87lDuual6n1tyxiuWfO5Szrmoei+Wrm23r3GuabWnZqqZ93pKmPe22twm+7i3/3KHce0/z2rD6yv9g+ecOpdY09a6+/DyWf+7QibGcbts75nt387LP3zHRPvqiu3nVF+5rL/z23ex/+n3tabe9ww5jdHR0on3IIYdw8MEHT7Tf9a53bdRt78Yvvp9bx7400b7hC0dw2yVn39f+1/dy2+JzJ9pr2/buuKcYWXQ7p17RbFur7mraZ/y4aa+8o9mWpt32hvSeq41nyyGtZ2d+e2bwOmCnyTrec889LFiwgI997GNUFatXr17vG33235/HiiU3cdBJ/8mDz1/Db25dwcolN3HAJ77Pg8+7m3tuWc5NS27iNcd/l62+spp7bvoFNy25iT897iK2+vKv+PWKpdy85CY44YVw9hxYvgaW3gUf/wN4zBy4vm0f91x41BxY9htYejd8dE945BxY2raPeQY8fAtY8hvg2et9fyRJkja0VNVgHZOlwEur6opJLrsc+POqurht/y2wY1W9s7/v/Pnza2xsbEZFj5t36NnTdxrA0q1eN5T1ALBg1fDWtSlasO2Q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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.362318</td>\n",
        "      <td>0.374781</td>\n",
        "      <td>1.496634</td>\n",
        "      <td>3.580733</td>\n",
        "      <td>2.98751</td>\n",
        "      <td>3.042891</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>3.064062</td>\n",
        "      <td>4.143285</td>\n",
        "      <td>3.874583</td>\n",
        "      <td>3.621482</td>\n",
        "      <td>3.75737</td>\n",
        "      <td>3.135634</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       1st       2nd       3rd       4th       5th      6th       7th\n",
        "rho    1.0  0.362318  0.374781  1.496634  3.580733  2.98751  3.042891\n",
        "sigma  1.0  3.064062  4.143285  3.874583  3.621482  3.75737  3.135634"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "      <th>7th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>2.11</td>\n",
        "      <td>0.24</td>\n",
        "      <td>0.16</td>\n",
        "      <td>0.84</td>\n",
        "      <td>2.08</td>\n",
        "      <td>1.78</td>\n",
        "      <td>2.07</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "     1st   2nd   3rd   4th   5th   6th   7th\n",
        "Rt  2.11  0.24  0.16  0.84  2.08  1.78  2.07"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAn0AAAGmCAYAAAAJYjK8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy86wFpkAAAACXBIWXMAAAsTAAALEwEAmpwYAABoqklEQVR4nO3dd5xU1f3/8ddnl6X3roAiCoiIoGJDVFSMHXtsGDExJEpijDH5aUzRmKiJmtiiscSYr0TFGCzEDgpK0VCkrAgWpAiCu5Slw5bz++PehWFpu8y5M/fOvp+PB7o7985n3ufswJy99zN3zDmHiIiIiOS2vGwHEBEREZHoadEnIiIiUgto0SciIiJSC2jRJyIiIlILaNEnIiIiUgto0SciIiJSC2jRJ5ImM3NmNiD8+jgzW5uFDPPNbEimH3d3Uucm28zsO2a20MzWmtn3sp0nHWbW3cy+NLNGEdVfa2bHRVE7rszsYzO7vJr7NjCzeWbWLepcIj5p0SfVYmZPmdlT2c5RE+GCY0P4ArbczMaZWf8oH9M5975zrnE183UOM3aOMpOAmdUBHgF+4pxr7Jz7e7Yzpeke4F7n3DoAM7s1fC4Nr7qjmY0Ptw2pbvFwjt73Fzf+nHM9nXP/qua+G4B7gbujTSXilxZ9kutODxdhnYBZwKtm1rTqTmZWx8ws4+mkRtL4ObUHGgIfeY6UcWbWHTgJeLrKpk+Bc8ysVcq+vYADgaWZS5gsZlZ3D+86HBhoZvv7zCMSJS36pMbM7HYz+zw8grYg/D4vZftYM3vAzF4yszVm9lnqaRMz28vMXjWzb8xstZlNNrOTUrZXHgEbbGYzwxoTzezAPc3snFsP/A1oCnQ1swHhY1xiZp8D64FGZtbBzJ4xs8VhvmfNrE1KtrZmNtLMVoWndy6tMjcDzMxVue0qM5thZiVm9rWZ/T7c9HHl/8O5vDfcv7mZPRLO7XIze83MuqTUa2xmfw+3LTaz63c3/vD07y1m9nrKz+SclO23mtnYKvfZ5uhuWOM3ZjbGzNaZWaGZHWpmF4f1SszsH2ZWUOXh+5jZ1PBxPzSzw6o8zndS5udjM7uk6nxW/TntYHz5ZvbL8Hm5Kny+9KusAcytMtdtdzJPg8KMK82syMyeTNn2uG09PfyZmf0oZZuZ2e/M7KtwnF+Z2R0p23f3vPqRmX0R3neZ7fqo+rnA/5xzJVVu/xp4E7gq5bYfAv8ENqU8Vn0ze8HMloSPV2hm364yD6ktC5U/g/PM7FML/s6+aWZ77SygmZ1oZlPCn+lyM5tgZi3CbXXM7Odm9kn4+AvMbFjKfY+y4N+Q5bb135c6VbJdG/6M11rwb0S/lO0DzGySma0Ia4wys/1Stg8Jn8vXm9lCYGF4+zYtEmbWP3yMVeHz6iYzy6/cHs7/5PDnIZIMzjn90Z/d/gGeAp4Kvx4MdAQMOAIoBr6fsu9YghfnM4E64f83AUeF2zsC5xG8eNcFfgWUAK3D7Z0BR/AC1g6oD4wExqQ8xmXAqt1kdsCA8OvGwF+BlUATYEC4/QWgZfgY9YA5wB/DbI0Jjqa8nVLzLeBVoEX45+UqjzMg+Gu1Zf8fAMsIjszkA82A/lXG2TllfwPeDR+3ZZjpLmA2UBDu8xjBi02HMOcTQCkwZBdzMT/8cyjBL3s/D+e8cbj9VmDszn7mKTW+AA4CCgiOdMwLH78RsG/4XLiyys/gU6BHOJZbw/loEm4fEtY9PMzVP8zVP3U+q/ycbAfj+0VYp1eYbRiwFui0s7neQY1TCZ635xM8LxsCJ6Zs/x7QJsx5GsFz+pRw2ynAV8A+4fctgWPCr3f5vAK6ho97cMpz9fhd5BwBPFjltlsJ/t6dDHxG8DxqDKwK68+vfH4ADYArCZ6LdcKvS4EeO/m7U/kz+L/wPs2BScDfd5FxMcHi08K5PAZoFG67M3xOHB5ubwMcGW7rDqwBLgqz7QtMB26pkm0asH+4z4PAFynbjwWODp8HLYGXgAkp24cAZcDD4c+jYcrzu3KO9g1/Jj8M6xxCsDi8oco4HwSey/a/z/qjP9X9k/UA+pOMP1RZAFTZdj8wIuX7sanfh7eNAB7dRf1VBKdiYesLdL+U7WcBa2qY2RG88K8kOAryFltfiCtfyPZP2f/88B92S7mtXbhfR4JFlqvy4thjRy+QKds/Bq7fSb7KcXZOue0wYGPlC1F4W344jv4EC46NlXMVbm8SvogN2cVczAd+mfJ94/CxDw+/v5XqLfpuTvn+jLDGXim3jSRlQRJuvybl+7zwZ3Fp+P1M4HtVHvcR4Imd/Zx2Mr65wLVVbpsC3LSzud5BjVeB+2rw/HoZ+GP49QkEC97TgQZV9tvd82o/YANwMdC0Go/7FvD7KrfdSvD3zsK5OAUYCoxO+dnt6vkxo8rPaUeLvr1Ttv8ImLWLel8Cvwc6VLndCBZ15+7kfg8AT1e57WLg8yrZLkv5/uDwtlY7qXkoUMHWxd0QYDNQfwd/R4aEX99McDQ1dfuPgDlVbvsD8FZ1nzP6oz/Z/qPTu1JjZnaNmU0PT4GtIjiaVfV02Zc7+L5TeP+WZvZkeDpldVij6Q5qLEn5ei3BQqWmznLOtXDO7eWc+5ZzbtIucnYF9gZWhqd0VhG8gG4C9iF4ga56n6rjrKozW08tVkdXgiMjS1IyLCdY+HUiOCpSL/VxnXNrCBYcu7NlPp1zle8wblKDbBAs2CqtD2tVva1qzdSsFcACwucCwXjvrxxrON4rCH4OO6yxE50Ijjqm+pzg51ZdndnJzyo8ffvr8JRkSZjzdMLnrHNuHMHRxpuApeHpyZPDu+/yeeWc+xK4hODI2MLw9PI2p1urWEFwxG07zjlH0MZwDcFRqr/tYCz1zOwv4SnLyr9/Pdn+71/V2lX/Pu7quTMI6AJMDU+F/zY8Ndqa4O/xzv5OdAUuqvJ8eJygJzNV1SxU5jGzPha0RCwxs9XAOLYeUay01Dm3cRf5q/t8akrw8xBJBC36pEbC3pn7gOuANs655sCjBP+opuq8g++/Cr++i+DoxrEEL14tgNU7qBG5cBFSaSkwzznXvMqf+s65iWzN3znlPqlf78h8YGeXdajYwW1LCY76tK6SoYFz7lmgiGCxsOVxzawxwYtpOtawfa9c1YXXnupc+YUFvZ/7sHUulwJDq4y1sXPujNQCVX5OO7KI4DmVan/Cfq1qms/Of1aXEhzpuQRoET7vXyflOeuce9I5dwLB4ukVYJSZNWT3zyuccy87504j+DneCzxrO3+DwFSCRdrOPEVwqro9wanNqn4Wbj8NaBaO5WM8/v1zzs1yzl3mnGtPcKr2WuA7BL+crGXn87wU+L8q89TUVfMd8aHnCdohDnLONSU4Cgvbjs/X8+lggiPKIomgRZ/UVDOgnGDxUW7Btbx2dG2rs83sdAsa7E8n6OH7R0qNDQSnXesTnAbak6N4vo0E6lvwpoZmsOWNGxcDOOcWA2OAu82sRdiYfuduat4P3GxmJ4Rz0cy2XjamiODFp3vK/uOBT4CHLXyzQfhYF5hZw3DxMxy4zcz2DhcV93oY+xSCN1wcE+a8CDjeQ12A6y24rlxl/2Yd4L/htvuA35pZXzPLC49CHWFmh9fwMZ4EfmFmPc2swMyuIeg9fKYGNe4HhprZuWGNhmZ2YritGcEp9GKCA3/nEZxCheCGI83seDNrQHDqcE24qYLdPK/CuTnDzBo758oIehqN4O/ZjrwEHGk7eBc6gHNuJcFC59SwXlXNCH5xKAbqhHO1q0VkjZhZXQvevFR5ZK2EYCzl4ZHIB4E/WvAmIDOzNmZ2RLjvw8C3w+d73fC5eICZnVaDCM0IfolcbWbtgN/twTCeBXqZ2dDwuXAwwZHcJ1LG2RQ4kuA0v0giaNEnNeEI3lzxd2ACwWmN64AdXdvq7wSnfVcR/CP//ZRTq78m+Ie5iOA0zzK2HvmpFjO73DxfBDk8TXoMwW/4s8JTQxPZdvEzmOAFbD5BM/nzu6n5GMFC5yGCuZhDcJQFF1zr65fAP8NTWX9yzpUTLCY2Ah+a2RqCfqvzCOYf4KcERzIKCZr2P6GG87eDnOMIFrAvE/xcBgD/Sadmir8RLL5WEPRmnuGcWx0+7v0EL8qPhtsXE1z7rKYXHb6X4Dn3CsFi5jvAac65ah/pc869RfALzK/CGgsIft4QHD17j2DelxKc2k19sW8M/Bn4huDnPBQ4zzm3sRrPq7rALcDicNu9wBXOufk7yfkZ8E44xp2NZYpzbtZONt/L1r9zCwnaFibsrNYeupDgndLrCE6vPkXwywrAb8LvnyNYHE8B+oa5JxP8/fgBwXNhOcGbePatwWN/j+DntgYYTbDorpFw7k8jOOVeTPCzfgz4S8pug4F3wp+HSCJY8IuXyK6Z2YvAZ865X1Rj37EEbwq4NepcIrWRBdfqe4PgHb/rsp2ntgmP6H5M8IaqmvTsimRVnd3vIrWdBdeIO57gkg0ikmXhQqNqz5lkSHiUvstudxSJGZ3elV0ys0cJTv38gx03hYuIiEgC6PSuiIiISC2gI30iIiIitYAWfSIiIiK1gN7I4UHr1q1d586dI6s/d27w5rDu3bvvZs941Y5CXPP6yOVrbOnWiesci0j2TJ06tdg512b3e0qcadHnQefOnZkyJbqLsk+cOBGAfv36Jap2FOKa10cuX2NLt05c51hEssfMFmQ7g6RPb+TwoG/fvi7KRZ+IiEg2mdlU51zfbOeQ9KinLwEKCwspLCxMXO0oxDWvj1y+xpZunbjOsYiIpEdH+jyI+kjfgAEDABg7dmyiakchrnl95PI1tnTrxHWORSR7dKQvN6inLwHuvvvuRNaOQlzz+sjla2zp1onrHIuISHp0pM8D9fSJiEgu05G+3KCevgSYPn0606dPT1ztKMQ1r49cvsaWbp24zrGIiKRHR/o8UE9f5sQ1r3r6RCSX6UhfblBPXwLcd999iawdhbjm9ZHL19jSrRPXORYRkfToSJ8H6ukTEZFcpiN9uUE9fQkwefJkJk+enLjaUYhrXh+5fI0t3TpxnWMREUmPjvR5oJ6+zIlrXvX0iUgu05G+3KCevgR46KGHElk7CnHN6yOXr7GlWyeucywiIunRkT4P1NMnIiK5TEf6coN6+hJg4sSJTJw4MXG1oxDXvD5y+RpbunXiOsciIpIeHenzQD19mRPXvOrpE5Fc9c7Cdzh535N1pC8HqKcvAR599NFE1o5CXPP6yOVrbOnWiesci0h2TFoyKdsRxBMd6fNAPX0iIpKrLv7vxTx/9vM60pcD1NOXAOPGjWPcuHGJqx2FuOb1kcvX2NKtE9c5FpHM21C2gU9XfJrtGOKJjvR5oJ6+zIlrXvX0iUgumrZsGle+cSWFQwp1pC8HqKcvAZ588slE1o5CXPP6yOVrbOnWiesci0jmzSiake0I4pEWfQnQpUuXRNaOQlzz+sjla2zp1onrHItI5s0smknHxh0ppDDbUcQD9fQlwOjRoxk9enTiakchrnl95PI1tnTrxHWORSSznHPMKJrBIW0OyXYU8UQ9fR6opy9z4ppXPX0ikmuWrlvKKS+cwk1H3sTggwarpy8H6PRuAjz99NOJrB2FuOb1kcvX2NKtE9c5FpHMml40HYA+bfpkNYf4o0VfAnTq1CmRtaMQ17w+cvkaW7p14jrHIpJZM4tmUi+/Ht1adMt2FPFEPX0J8MYbb/DGG28krnYU4prXRy5fY0u3TlznWEQya2bRTA5qdRAF+QXZjiKeqKfPA/X0ZU5c86qnT0RyyebyzRzzzDFceuCl3HjEjZiZevpygE7vJsBzzz2XyNpRiGteH7l8jS3dOnGdYxHJnLkr5rK5YjO92/bOdhTxSIu+BGjfvn0ia0chrnl95PI1tnTrxHWORSRzKi/KfEhrXa4ll6inLwFGjRrFqFGjElc7CnHN6yOXr7GlWyeucywimTOzaCbtGrajXaN22Y4iHqmnzwP19GVOXPOqp09Ecslp/zmNg1odxJ8H/BlAPX05Qos+D6Je9BUXFwPQunXrRNWOQlzz+sjla2zp1onrHItIZhRvKObE50/kxr43cmXPKwEt+nKFevoSIMoX36S9sMc1r49cvsaWbp24zrGIZEZlP1/vNnoTR65RT18CjBw5kpEjRyaudhTimtdHLl9jS7dOXOdYRDJjZtFM6uTV4cCWB2Y7inim07seqKcvc+KaVz19IpIrrnrjKjaWbeTZs57dcptO7+YGLfo8iHrRV1JSAkCzZs0SVTsKcc3rI5evsaVbJ65zLCLRK6soo9+z/Ti/6/ncdORNW27Xoi83RHp618zmm9kcM5se/jk1vP1oM5thZp+a2Vtm1jblPonYlknNmjWL7AU4ytpRiGteH7l8jS3dOnGdYxGJ3mcrP2ND2QZdny9HZaKn70LnXJ/wz5tmlgcMB4Y557oB7wF3ASRlW6aNGDGCESNGJK52FOKa10cuX2NLt05c51hEojezaCYAh7TRoi8XRXp618zmA2c55wpTbjsC+Idz7uDw+9bAfOdc46RsqzpO9fRlTlzzqqdPRHLBLeNvYfzi8Yz99ljMbMvtOr2bGzJxyZZ/WfDMGQ/8EtgHWFC50TlXbGZ5ZtYyKduccytSB1hUVETfvlv/LgwdOpShQ4fu4XRt77XXXvNWK5O1oxDXvD5y+RpbunXiOsciEr2ZRTPp3ab3Ngs+yR1RL/qOc84tMrN6wH3AQ8CLET9mxrVp04Yoj/Q1bNgwkbWjENe8PnL5Glu6deI6xyISrVUbVzF/9XzOOeCcbEeRiETa0+ecWxT+fxPwMHAssBDYt3Kf8LRpRXj0LCnbMmr48OEMHz48cbWjENe8PnL5Glu6deI6xyISrZnFQT+fLsqcuyJb9JlZIzNrFn5twCXAdGAq0MDM+oe7/hD4d/h1UrZl1BNPPMETTzyRuNpRiGteH7l8jS3dOnGdYxGJ1syimeRZHj1b9cx2FIlIZG/kMLMuwH+A/PDPbOA659zXZtYPeBSoD8wHBjvnloX3S8S2VFG/kaO0tBSAgoKCRNWOQlzz+sjla2zp1onrHItItIa+NZSVm1by77O3P76hN3LkBl2c2YOoF30iIiJRqnAVHPvssZyx3xn8+phfb7ddi77coM/eTYCnnnqKp556KnG1oxDXvD5y+RpbunXiOsciEp15q+axtnStrs+X43SkzwNdpy9z4ppX1+kTkSQb+dlIfjvxt7xy7ivs12y/7bbrSF9u0KLPA53eFRGRJLt14q28veBtxl8yfofX6NOiLzfo9K6IiEgtN6NoBoe0OUQXZc5xWvQlwOOPP87jjz+euNpRiGteH7l8jS3dOnGdYxGJxprNa/hi1Rfq56sFtOhLgBEjRjBixIjE1Y5CXPP6yOVrbOnWiesci0g0CosLcTh6t9ZFmXOdevo8UE+fiIgk1aMzHuWv0//KhEsn0KRukx3uo56+3KAjfSIiIrXYzOKZdGnWZacLPskdWvQlwMMPP8zDDz+cuNpRiGteH7l8jS3dOnGdYxHxzznHzKKZ6uerJbToS4BRo0YxatSoxNWOQlzz+sjla2zp1onrHIuIfwvXLGTVplVa9NUS6unzQD19IiKSRKO+GMUvx/+SkYNG0rVF153up56+3KAjfSIiIrXUjKIZNCpoRJdmXbIdRTJAi74EuP/++7n//vsTVzsKcc3rI5evsaVbJ65zLCL+zSyaycGtDyY/Lz/bUSQDtOhLgDFjxjBmzJjE1Y5CXPP6yOVrbOnWiesci4hf60vX8+nKTzmktfr5agv19Hmgnj4REUmaKUuncNWbV/HXk//K8R2P3+W+6unLDTrSJyIiUgvNLJ4JQK/WvbKcRDJFi74EuOeee7jnnnsSVzsKcc3rI5evsaVbJ65zLCJ+zSyayT5N9qFF/RbZjiIZUifbAWT3Jk2alMjaUYhrXh+5fI0t3TpxnWMR8cc5x4yiGRy919HZjiIZpJ4+D9TTJyIiSbJk7RJO/c+p3HLULVxy4CW73V89fblBp3dFRERqmZlFQT+fPomjdtGiLwHuuusu7rrrrsTVjkJc8/rI5Wts6daJ6xyLiD8zimZQP7/+Lj+FQ3KPevoSYPr06YmsHYW45vWRy9fY0q0T1zkWEX9mFs3koFYHUZBXkO0okkHq6fNAPX0iIpIUm8s3c/QzRzP4oMHccPgN1bqPevpyg07vioiI1CKfrPiE0opSerfune0okmFa9CXA7bffzu2335642lGIa14fuXyNLd06cZ1jEfGj8k0cvdroosy1jXr6EmDu3LmJrB2FuOb1kcvX2NKtE9c5FhE/ZhTNYK9Ge9G2YdtsR5EMU0+fB+rpExGRpPjWC9+id5ve3H3C3dW+j3r6coNO74qIiNQS36z/hq/Xfa3r89VSWvQlwG9+8xt+85vfJK52FOKa10cuX2NLt05c51hE0jeraBagizLXVurpS4BFixYlsnYU4prXRy5fY0u3TlznWETSN6NoBgV5BfRo2SPbUSQL1NPngXr6REQkCa58/UrKXBn/OuNfNbqfevpyg07vioiI1AKlFaXMXj6bQ1rr1G5tpUVfAtx8883cfPPNiasdhbjm9ZHL19jSrRPXORaR9Hy28jM2lm+kdxtdlLm2Uk9fAixfvjyRtaMQ17w+cvkaW7p14jrHIpKeyosy600ctZd6+jxQT5+IiMTdze/fzIdff8iYi8ZgZjW6r3r6coNO74qIiNQCM4tmckibQ2q84JPcoUVfAtx4443ceOONiasdhbjm9ZHL19jSrRPXORaRPbdy40oWrlmoU7u1nHr6EmDDhg2JrB2FuOb1kcvX2NKtE9c5FpE9N6s4vCiz3rlbq6mnzwP19ImISJw9MO0Bnix8kkmXTaJBnQY1vr96+nKDTu+KiIjkuJnFM+nWotseLfgkd2jRlwDXX389119/feJqRyGueX3k8jW2dOvEdY5FZM9UuAoKiwvVzyda9ImIiOSy+SXzWVe6jl6te2U7imSZevo8UE+fiIjE1cufv8yvJvyKl895mS7Nu+xRDfX05QYd6RMREclhs4pn0aigEZ2bdc52FMkyLfoSYNiwYQwbNixxtaMQ17w+cvkaW7p14jrHIrJnCosL6dmqJ3mml/zaTtfpS4AGDaJ7t1WUtaMQ17w+cvkaW7p14jrHIlJzm8o3MXflXL5z0HeyHUViQD19HqinT0RE4mhm0Uwuf+1y/jLgLwzcd+Ae11FPX27QsV4REZEcVflJHAe3PjjLSSQOtOhLgKFDhzJ06NDE1Y5CXPP6yOVrbOnWiesci0jNFRYX0qZBG9o1bJftKBID6ulLgFatWiWydhTimtdHLl9jS7dOXOdYRGqusLiQg1sfjJllO4rEgHr6PFBPn4iIxE3JphL6P9ef6w69ju8f8v20aqmnLzfo9K6IiEgO+nj5x4D6+WQrLfoS4KqrruKqq65KXO0oxDWvj1y+xpZunbjOsYjUTGFxIQA9W/fMchKJC/X0JUCnTp0SWTsKcc3rI5evsaVbJ65zLCI1M6t4Fp2bdqZp3abZjiIxoZ4+D9TTJyIiceKc48TnT6Tf3v2447g70q6nnr7coNO7IiIiOWbZ+mUs37hc/XyyjYws+szst2bmzOzg8PujzWyGmX1qZm+ZWduUfROxLZMGDx7M4MGDE1c7CnHN6yOXr7GlWyeucywi1Vd5UeZerXtlOYnESeSLPjM7DDgaWBB+nwcMB4Y557oB7wF3JWlbpnXv3p3u3bsnrnYU4prXRy5fY0u3TlznWESqb1bxLOrk1aF7S/1dlq0i7ekzs3rAWODS8P9nAQ2AfzjnKo/6tQbmO+cam9kRSdhWdZzq6RMRkTj57pvfZUPpBp4961kv9dTTlxuiPtL3O2C4c25+ym37EB71A3DOFQN5ZtYyQdu2UVRURN++fbf8eeyxx2owRSIiIv6UV5TzcfHH6ueT7UR2yRYzOwboC9wU1WPERZs2bYjySN8ll1wCwHPPPZeo2lGIa14fuXyNLd06cZ1jEameL0u+ZH3Zenq1UT+fbCvK6/SdAPQAvgw/868j8CbwALBv5U7hadMK59wKM1uYhG0+Jqcm+vTpk8jaUYhrXh+5fI0t3TpxnWMRqZ7KN3HoSJ9UlbHr9JnZfIKevtnAZ8CVzrnxZvYrYH/n3FXhmydiv63q2NTTJyIicXH7pNt57cvXmHDpBPLMTxeXevpyQ8Y/kcM5V2FmVwCPmll9YD4wOEnbRERE4mpW8Sx6tu7pbcEnuSNjiz7nXOeUrycCO2w2SMq2TLrgggsA+M9//pOo2lGIa14fuXyNLd06cZ1jEdm9jWUb+WzlZww5eEi2o0gM6bN3E+CYY45JZO0oxDWvj1y+xpZunbjOsYjs3pwVcyhzZernkx3SZ+96oJ4+ERGJg+Gzh/PHyX9kzEVjaNvQ34dIqacvN+iEv4iISI6YVTyLtg3bel3wSe7Qoi8BBg0axKBBgxJXOwpxzesjl6+xpVsnrnMsIrtXWFyoz9uVnVJPXwKcfPLJiawdhbjm9ZHL19jSrRPXORaRXSvZVMLCNQs5r+t52Y4iMaWePg/U0yciItk2YfEEfjj6hzzxrSc4aq+jvNZWT19u0OldERGRHDCreBaGcVCrg7IdRWJKi74EOP300zn99NMTVzsKcc3rI5evsaVbJ65zLCK7VlhcyH7N9qNJ3SbZjiIxpZ6+BDj77LMTWTsKcc3rI5evsaVbJ65zLCI755xjVvEs+nfon+0oEmPq6fNAPX0iIpJNS9Yu4dT/nMotR93CJQde4r2+evpyg07vioiIJNys4lkAulyL7JIWfQkwcOBABg4cmLjaUYhrXh+5fI0t3TpxnWMR2bnC4kIK8gro1qJbtqNIjKmnLwEuvvjiRNaOQlzz+sjla2zp1onrHIvIzs0qnkWPlj0oyC/IdhSJMfX0eaCePhERyZayijL6PduP8w44j5uPujmSx1BPX27Q6V0REZEEm1cyjw1lGzi49cHZjiIxp0VfAgwYMIABAwYkrnYU4prXRy5fY0u3TlznWER2rLC4ENCbOGT31NOXAEOGDElk7SjENa+PXL7Glm6duM6xiOzYrOJZNKnbhH2a7pPtKBJz6unzQD19IiKSLReNuogW9Vrw2Lcei+wx1NOXG3R6NwFKS0spLS1NXO0oxDWvj1y+xpZunbjOsYhsb0PZBj5b+Zn6+aRadHo3AU455RQAxo4dm6jaUYhrXh+5fI0t3TpxnWMR2d6cFXMod+Xq55Nq0aIvAa6++upE1o5CXPP6yOVrbOnWiesci8j2ZhUFn8ShI31SHerp80A9fSIikg2/GPcLPir6iLcvfDvSx1FPX25QT18CrF+/nvXr1yeudhTimtdHLl9jS7dOXOdYRLY3q3iWTu1Kten0bgKcccYZQDQ9VlHWjkJc8/rI5Wts6daJ6xyLyLZWblzJV2u/4qLuF2U7iiSEFn0JcM011ySydhTimtdHLl9jS7dOXOdYRLalizJLTamnzwP19ImISKY9Mv0RHpnxCJMum0SjgkaRPpZ6+nKDevoSoKSkhJKSksTVjkJc8/rI5Wts6daJ6xyLyLZmFc9i/+b7R77gk9yh07sJcM455wDR9FhFWTsKcc3rI5evsaVbJ65zLCJbOecoLC7khE4nZDuKJIgWfQlw3XXXJbJ2FOKa10cuX2NLt05c51hEtlq8djErN61UP5/UiHr6PFBPn4iIZNIbX77Bz9/7OSPOGsFBrQ6K/PHU05cb1NOXAMXFxRQXFyeudhTimtdHLl9jS7dOXOdYRLaaVTyLunl16dqia7ajSILo9G4CXHjhhUA0PVZR1o5CXPP6yOVrbOnWiesci8hWhcWF9GjVg4K8gmxHkQTRoi8BfvaznyWydhTimtdHLl9jS7dOXOdYRAJlFWXMXj6bC7tdmO0okjDq6fNAPX0iIpIpc1fM5cJRF3LXcXdxZpczM/KY6unLDerpS4ClS5eydOnSxNWOQlzz+sjla2zp1onrHItIYFbxLECfxCE1p9O7CXDJJZcA0fRYRVk7CnHN6yOXr7GlWyeucywigcLiQprWbUqnJp2yHUUSRou+BLjpppsSWTsKcc3rI5evsaVbJ65zLCKBWcWz6NW6F2aW7SiSMOrp80A9fSIikgnrS9dzzLPH8P1e3+dHh/4oY4+rnr7coJ6+BFi0aBGLFi1KXO0oxDWvj1y+xpZunbjOsYjAJys+ocJVqJ9P9ohO7ybAFVdcAUTTYxVl7SjENa+PXL7Glm6duM6xiAT9fAA9W/fMchJJIi36EuBXv/pVImtHIa55feTyNbZ068R1jkUk6Ofbu9HetG7QOttRJIHU0+eBevpERCQTTvvPafRs1ZN7B9yb0cdVT19uUE9fAsybN4958+YlrnYU4prXRy5fY0u3TlznWKS2W75hOYvXLlY/n+wxnd5NgO9+97tAND1WUdaOQlzz+sjla2zp1onrHIvUdh8v/xiAg1sfnOUkklRa9CXAbbfdlsjaUYhrXh+5fI0t3TpxnWOR2m5W8SzyLI+DWh2U7SiSUOrp80A9fSIiErUfjv4h36z/hpGDRmb8sdXTlxvU05cAc+fOZe7cuYmrHYW45vWRy9fY0q0T1zkWqc2ccxQWF6qfT9Ki07sJ8IMf/ACIpscqytpRiGteH7l8jS3dOnGdY5Ha7Ks1X1GyqUT9fJIWLfoS4I477khk7SjENa+PXL7Glm6duM6xSG02q3gWgI70SVrU0+eBevpERCRKf/zfH3nh0xeYeNlECvIKMv746unLDerpS4DCwkIKCwsTVzsKcc3rI5evsaVbJ65zLFKbFRYX0qNVj6ws+CR36EifB1Ef6RswYAAQTY9VlLWjENe8PnL5Glu6deI6xyK1VWlFKcc8cwzf7v5tfnHEL7KSQUf6coN6+hLg7rvvTmTtKMQ1r49cvsaWbp24zrFIbfX5ys/ZVL5J/XySNh3p80A9fSIiEpXn5z7P7R/czmvnv0anJp2ykkFH+nKDevoSYPr06UyfPj1xtaMQ17w+cvkaW7p14jrHIrVVYXEhzes1p2PjjtmOIgmnI30eqKcvc+KaVz19IhKV814+j/aN2vPIwEeylkFH+nJDpD19ZvYSsB9QAawFfuycm25m3YB/Aq2A5cB3nHOfhfdJxLZMuu+++xJZOwpxzesjl6+xpVsnrnMsUhutK13HF6u+4JR9T8l2FMkBNT7SZ2Z1gZbOuaXV2LeZc64k/Poc4LfOucPM7B3gSefccDMbDHzXOXdSuF8itqVST5+IiERh8tLJfPfN7/LXk//K8R2Pz1oOHenLDdXq6TOz58ysmZk1AAqB2WZ24+7uV7ngCzUDKsysLXAY8Gx4+7PAYWbWJinbdjdu3yZPnszkyZMTVzsKcc3rI5evsaVbJ65zLFIbFRYH18zUx6+JD9U9vdvdOVdiZhcC7wA3AB8A9+zujmb2BPAtwIDTgE7AYudcOYBzrtzMloS3W0K2FVVz3rz4+c9/DkTTYxVl7SjENa+PXL7Glm6duM6xSG00q3gWHRp3oGX9ltmOIjmguou+ykuAnwC85pxbb2YV1bmjc+5qADO7Argb+HWNU8ZcUVERfftuPeo9dOhQhg4d6q3+Qw895K1WJmtHIa55feTyNbZ068R1jkVqo8LiQnq36Z3tGJIjqtXTZ2bPA02AHkBPgjdmTHLO9anRg5ltADoDc4FW4dGzfII3SXQlOLr2ady3Oee2OdKnnj4REfGteEMxJz5/Ijf2vZEre16Z1Szq6csN1b1O35XAo8CJzrl1QEvgpl3dwcwam1mnlO/PBlYA3wDTgUvDTZcCHznnipxzidi2y5mKwMSJE5k4cWLiakchrnl95PI1tnTrxHWORWqbyn4+fRKH+FLtd++Gly/p4Zx72cyaAAXOuRW72L8d8DLQCCgnWPDd6JybZmYHElwKpQWwkuBSKHPD+yViWypdpy9z4ppX1+kTEd8e/OhB/j7r70y8dCINCxpmNYuO9OWG6p7evRK4GajrnOtiZt2BvzrnBkYdMAmiXvTNnRusM7t3756o2lGIa14fuXyNLd06cZ1jkdrm6reuZtXGVbww6IVsR9GiL0dU940c1wN9gfcBnHNzzax9VKFkW1G++CbthT2ueX3k8jW2dOvEdY5FapPSilJmFs3kvAPOy3YUySHV7enb7JxbW+W2Mt9hZMfGjRvHuHHjElc7CnHN6yOXr7GlWyeucyxSm3yy/BM2lG3gsHaHZTuK5JDqHulbHvb0OYDw0ym+iiyVbOO3v/0tEE2PVZS1oxDXvD5y+RpbunXiOscitcm0ZdMAOLzd4VlOIrmkJqd3nwG6m9l8YD1wdkSZpIonn3wykbWjENe8PnL5Glu6deI6xyK1ydRlU9mnyT60btA621Ekh1Rr0eec+9TMjgK6EVy/bm7lJ1VI9Lp06ZLI2lGIa14fuXyNLd06cZ1jkdqiwlUw7ZtpnLzPydmOIjmmup+9243gEi2fEHwM2c/NrEWkyWSL0aNHM3r06MTVjkJc8/rI5Wts6daJ6xyL1BZfrPqC1ZtXq59PvKvuJVumA0cAHYF3gbeA9s65QZGmSwhdpy9z4ppX1+kTEV9GzBnB7z/8Pa+d9xqdmnba/R0yQJdsyQ3V7emrcM6VmtmZwMPOuT+FC0HJgKeffjqRtaMQ17w+cvkaW7p14jrHIrXF1GVTadugLR2bdMx2FMkx1V301Q8/YeNs4JbwNosmklTVqVN0v+lFWTsKcc3rI5evsaVbJ65zLFIbOOeY+s1UDmt3GGZ6mRW/qnudvvuAucBa59wUM+sClESWSrbxxhtv8MYbbySudhTimtdHLl9jS7dOXOdYpDZYvHYx36z/Rv18Eolqf/buNncyywPqOOc2+4+UPOrpy5y45lVPn4j48MoXr3DL+Ft44ewX6N4yPp+Oo56+3FDd07uEn7fbG6ifcvP/eU8k23nuuecSWTsKcc3rI5evsaVbJ65zLFIbTF02lSZ1m9C1RddsR5EcVK1Fn5ldB/wA2AuYDBwHjEOLvoxo3z66jzmOsnYU4prXRy5fY0u3TlznWKQ2mLZsGoe1PYw8q273lUj1VfdZNRQ4EljonDs1/HpNZKlkG6NGjWLUqFGJqx2FuOb1kcvX2NKtE9c5Fsl1xRuKmb96vvr5JDLVvU7fFOdcXzObCfR2zjkzm+6c6xN5wgRQT1/mxDWvevpEJF1vzX+Ln437GU+f/jR92vbJdpxtqKcvN1S3p2+9mRUAM4A/mtkiID+6WJLqhRdeSGTtKMQ1r49cvsaWbp24zrFIrpv2zTTq59enZ6ue2Y4iOWqXiz4zywfqAdcCdYGfAXcA+wFDog4ngdato/vA7ShrRyGueX3k8jW2dOvEdY5Fct20ZdM4pM0hFOQXZDuK5Kjd9fTdBVzmnCt0zq1zzn3jnLsaeAO4OPp4AjBy5EhGjhyZuNpRiGteH7l8jS3dOnGdY5FctmbzGuaunKt+PonULnv6zGwqcIRzrqLK7XnATOfcwRHnSwT19GVOXPOqp09E0vH+V+9z7ZhreeyUxzhm72OyHWc76unLDbvr6cuvuuADcM5VmNl2t0s0Xn755UTWjkJc8/rI5Wts6daJ6xyL5LJp30yjjtWhd5ve2Y4iOWx3i74GZtbQObc+9UYza0zQ6ycZ0KxZs0TWjkJc8/rI5Wts6daJ6xyL5LJpy6bRo1UPGhY0zHYUyWG76+kbAfzTzJpW3mBmzYAngH9HGUy2GjFiBCNGjEhc7SjENa+PXL7Glm6duM6xSK7aVL6JWcWzOKyt+vkkWrvr6asDPAWcA3wW3twVeAW40jlXFnXAJFBPX+bENa96+kRkT01ZOoWr3ryKB058gBP3OTHbcXZIPX25oboXZz4AODT89iPn3OeRpkqYqBd969cHZ9cbNvR/2D/K2lGIa14fuXyNLd06cZ1jkVz12MzHePCjB3n/4vdpXr95tuPskBZ9uaFaF2cOF3la6GVJlC++SXthj2teH7l8jS3dOnGdY5FcNW3ZNA5ofkBsF3ySO/SJzgkwfPhwhg8fnrjaUYhrXh+5fI0t3TpxnWORXFRWUcb0ounq55OMqNbpXdk19fRlTlzzqqdPRPbEx8s/5pL/XsIfj/sjZ3Q5I9txdkqnd3ODFn0eRL3oKy0tBaCgwP9H80RZOwpxzesjl6+xpVsnrnMskouenv00f5r8J96+8G3aN2qf7Tg7pUVfbqhWT59kV5Qvvkl7YY9rXh+5fI0t3TpxnWORXDRt2TQ6NO4Q6wWf5A719CXAU089xVNPPZW42lGIa14fuXyNLd06cZ1jkVzjnGPaN9PUzycZo9O7HqinL3Pimlc9fSJSU/NK5nHOS+dw6zG3ckG3C7IdZ5d0ejc3aNHnQdSLPhERyT0vfPoCt026jVfOfYX9mu2X7Ti7pEVfbtDpXRERkSyYtmwaLeu3pHPTztmOIrWEFn0J8Pjjj/P4448nrnYU4prXRy5fY0u3TlznWCTXTF02lcPaHoaZZTuK1BJa9CXAiBEjGDFiROJqRyGueX3k8jW2dOvEdY5FcsnSdUtZsm4Jh7c7PNtRpBZRT58H6ukTEZGaeHXeq9z0/k2MOGsEB7U6KNtxdks9fblBR/pEREQybNqyaTQqaET3Ft2zHUVqES36EuDhhx/m4YcfTlztKMQ1r49cvsaWbp24zrFILpm6bCp92vYhPy8/21GkFtGiLwFGjRrFqFGjElc7CnHN6yOXr7GlWyeucyySK1ZtXMUXJV9weFv180lmqafPA/X0iYhIdb2z8B1+8u5PeOq0pxLzRg719OUGHekTERHJoGnLplGQV8DBrQ/OdhSpZbToS4D777+f+++/P3G1oxDXvD5y+RpbunXiOsciuWLqsqn0at2Levn1sh1Fahkt+hJgzJgxjBkzJnG1oxDXvD5y+RpbunXiOsciuWB96Xo+WfFJYk7rSm5RT58H6ukTEZHqmLRkEkPfHsojAx+hf4f+2Y5Tberpyw060iciIpIhU5dNJc/y6NOmT7ajSC2kRV8C3HPPPdxzzz2Jqx2FuOb1kcvX2NKtE9c5FskF076ZRvcW3Wlct3G2o0gtVCfbAWT3Jk2alMjaUYhrXh+5fI0t3TpxnWORpCstL2Vm0Uwu6nZRtqNILaWePg/U0yciIrsz/ZvpXPH6Ffx5wJ85Zd9Tsh2nRtTTlxt0eldERCQDpi6bCsChbQ/NchKprbToS4C77rqLu+66K3G1oxDXvD5y+RpbunXiOsciSffh1x/SpVkXWjdone0oUkuppy8Bpk+fnsjaUYhrXh+5fI0t3TpxnWORJFtfup4py6ZwyYGXZDuK1GLq6fNAPX0iIrIr4xaN40fv/IhHT3mUfnv3y3acGlNPX27Q6V0REZGIvb/4fRrUaUDfdlo3Sfbo9G4C3H777QD8+te/TlTtKMQ1r49cvsaWbp24zrFIUjnnGL94PEe2P5K6+XUjfazNZRW8/1kR/535NeM/L8Y5R0F+HnXyjYL8POrXyefoLq0Y1GdvendshplFmkfiRYu+BJg7d24ia0chrnl95PI1tnTrxHWORZJqweoFLF67mCE9h0RSv6LCMeGLYkbNWMKbHy+jZEMpTevX4aQD29KwXh3KyisoLXdsLq9g9YZShn+wgCcnfMm+rRpy9iF7c3bvvenevkkk2SRe1NPngXr6RERkZ4bPHs4fJ/+R185/jU5NOnmtvXztJm54fgbjPi2icb06nHJQO87uvRf9D2hD3To77uAq2VDKm4VLGTVzCRM+L6bCwcAebbn93IPZq1mDHd5HPX25IbIjfWbWCnga2B/YDHwG/MA5V2RmRwOPAg2A+cBg59w34f0SsU1ERKQ6xi8eT+emnb0v+D6ct5zrnvuIletLufXsg7jkyH2oX5C/2/s1a1DAt4/oxLeP6ETRmk08P2URD77zGd/683vcdMaBXHrEPuTl6bRvLoryjRwO+JNzrrtzrhfwBXCXmeUBw4FhzrluwHvAXQBJ2ZZpv/nNb/jNb36TuNpRiGteH7l8jS3dOnGdY5Ek2lC2gclLJ9O/Q39vNcsrHA+O+YxLH/+AhnXr8OK1/Rhy7H7VWvBV1aZJPYadeABvXn88vTo245YXC7n08Q/4snidt7wSH5Ed6XPOrQDGptz0AXANcDiw0Tk3Prz9bwRH0b6boG0ZtWjRokTWjkJc8/rI5Wts6daJ6xyLJNGUpVPYXLHZ26KvaM0mfjpiOuM/L+acPnvzh/N60bhe+i/l+7ZqxL+uPornpyzi969+wmn3vcdPT+nG1f33o06+LvSRKzLS0xceNXsLeAVYDHzXOXdmyvb1QEfgxCRsCxe0W6inT0REduTOD+9k5GcjGX/peOrl10ur1sTPi/nJiOms3lDKbYN6cvERnSJ59+2y1Rv59UuFvDV7GQd3aMqfLuhNzw7N1NOXAzK1fH8QWAs8lKHHy6iioiL69u275c9jjz2W7UgiIhID4xeP54j2R6S94Hvz46UM/vuHNK1fh5d/dCyXHLlPZJdbade0Po9ecTgPX34YS0s2Meih8bu/kyRC5JdsMbN7gK7A2c65CjNbCOybsr01UOGcW5GUbVXH2KZNG6I80nfzzTcDcOeddyaqdhTimtdHLl9jS7dOXOdYJGkWrl7IwjULubzH5WnVmb1kNT8dMZ1eHZvzzNVH0cjD6dzdMTPO6LUX/fZvxe9f/YR7I39EyYRIj/SZ2R0EvXHnOuc2hTdPBRqYWWWDww+BfydsW0YtX76c5cuXJ652FOKa10cuX2NLt05c51gkad5f/D5AWv18RWs2cfU/J9OsQQGPX3F4RhZ8qZo3rMs9F/XO6GNKdCLr6TOznkAh8CmwIbz5S+fceWbWj+BSKPXZeimUZeH9ErEtlXr6RESkqmtHX8uC1Qt49fxX9+j+G0vLuezxD5j99Wpe+GE/Du7QzHPC6tN1+nJDlO/e/RjYYcOBc24i0CvJ20RERHZmU/kmJi+dzPldz9+j+zvn+OXIWUxbuIpHLj8sqws+yR16H3YC3Hjjjdx4442Jqx2FuOb1kcvX2NKtE9c5FkmSKUunsLF84x6f2n1k3BeM/GgxN5zSjdN77eU5ndRW+uzdBNiwYcPud4ph7SjENa+PXL7Glm6duM6xSJKMXxxcouWI9kfU+L5vfbyUu9+cy9m99+bHJx0QQTqprfTZux6op09ERFKd/eLZdGjSgb8N/FuN7jd7yWou/NtEurZtzIgfHLNHn7IRBfX05Qad3hUREfFo0ZpFzF89n/571+zUbtGaTXz//6bQtH4Bj32nb2wWfJI7dHo3Aa6//noA7rvvvkTVjkJc8/rI5Wts6daJ6xyLJMWExROAml2qZWNpOT8cPpXl6zbxwg/70a5p/ajiSS2mRZ+IiIhH4xePp2PjjuzbdN/d7xy6bdRspi5YycN6p65ESD19HqinT0REILhUy3HPHcc5+5/DLUffUq37zPqqhLMfGs/V/ffjV2cdFHHCPaOevtygnj4RERFPpi6byoayDRzX8bhq7e+c4/evzqZlo7pcN7BrxOmkttOiLwGGDRvGsGHDElc7CnHN6yOXr7GlWyeucyySBOMXj6duXt1qX6rl7dnL+PDLFfx0YFea1i+IOJ3UdurpS4AGDRoksnYU4prXRy5fY0u3TlznWCQJJiyeQN/2fWlQZ/d/j0rLK7jr9Tns36YRlx65TwbSSW2nnj4P1NMnIiJL1i7h1P+cys/7/pzv9PzObvd/asKX3DpqNn+/si8n92iXgYR7Tj19uUGnd0VERDwYv3g8AP077v5SLSUbSrl/zGf0278VJx3YNupoIoAWfYkwdOhQhg4dmrjaUYhrXh+5fI0t3TpxnWORuHt/8ft0aNyB/Zrut9t9//ru56zaUMotZ/bAzDKQTkQ9fYnQqlWrRNaOQlzz+sjla2zp1onrHIvE2ebyzXz49YcM2n/Qbhdxi1as56kJ87ngsI703FvX5JPMUU+fB+rpExGp3T78+kOufutqHjzpQQZ0GrDLfYc9M40xnyxj7I0n0r5ZMj55Qz19uUGnd0VERNI0fvF4CvIKOLL9kbvcb+qClbw682uGHtclMQs+yR1a9CXAVVddxVVXXZW42lGIa14fuXyNLd06cZ1jkTgbv3g8h7U7jIYFDXe6T+WFmNs0qccPTtg/g+lEAurpS4BOnTolsnYU4prXRy5fY0u3TlznWCSulq5byuerPufcA87d5X6vzvqajxau4q7ze9Gonl5+JfPU0+eBevpERGqvf3/6b3436Xe8dM5L7N98x0fwNpWVM/DP42hUtw6vXncc+XnJeseuevpyg07vioiIpGHC4gns1WgvujTrstN9/jlxPotWbOCXZ/RI3IJPcocWfQkwePBgBg8enLjaUYhrXh+5fI0t3TpxnWOROFpfup6JSyZyfMfjd3qplhXrNvPgO59zQrc2HN+tTYYTimylpoIE6N69eyJrRyGueX3k8jW2dOvEdY5F4mjcV+PYULaB0zqfttN9HhjzGes2lXHLmT0ymExke+rp80A9fSIitdOP3/kxs5fP5u0L3ybPtj95Nq9oLd/6y3tc1LcTd57fKwsJ/VBPX27Q6V0REZE9ULKphPGLx3Na59N2uOADuPP1OdSrk8cNp3TLcDqR7WnRlwCXXHIJl1xySeJqRyGueX3k8jW2dOvEdY5F4uadhe9QVlHGGfudscPtH8xbztuzl3HNgP1p06RehtOJbE89fQnQp0+fRNaOQlzz+sjla2zp1onrHIvEzWtfvkanJp04qNVB222rqAguxLxXs/p8r//O39Urkknq6fNAPX0iIrVL8YZiTv73yVzd62p+fOiPt9s+ctpX3PD8DP787d6cf1jHLCT0Sz19uUGnd0VERGrorflvUeEqdnhqd8Pmcu5+cy69OjTj3D4dspBOZMe06EuACy64gAsuuCBxtaMQ17w+cvkaW7p14jrHInHy+pev07VF1x1+AseTE77k65KN3HJmD/J0IWaJEfX0JcAxxxyTyNpRiGteH7l8jS3dOnGdY5G4WLJ2CdOLpvOTw36y3baiNZt4+N3POeWgdhzdpVUW0onsnHr6PFBPn4hI7fFk4ZP8ZepfeO384I0cqX754iyen7yIt356PF3aNM5SQv/U05cbdHpXRESkBl7/8nUOaX3Idgu+T5et4bn/LWTw0fvm1IJPcocWfQkwaNAgBg0alLjaUYhrXh+5fI0t3TpxnWOROJhXMo85K+Zw+n6nb7ftjtc+oVG9Olx3ctcsJBPZPfX0JcDJJ5+cyNpRiGteH7l8jS3dOnGdY5E4eOPLNzCMb3X+1ja3v/9ZEWPnFvHLMw6kZaO6WUonsmvq6fNAPX0iIrnPOceglwbRtmFb/n7q37fcXl7hOPOB91m3uYzRN5xAvTr5WUwZDfX05Qad3hUREamGOSvmMH/1/O1O7b4wdRFzlq7h/512YE4u+CR3aNGXAKeffjqnn759/0jca0chrnl95PI1tnTrxHWORbLt9S9fp47VYeA+A7fctm5TGfe89SmH7dOcM3vtlcV0Irunnr4EOPvssxNZOwpxzesjl6+xpVsnrnMskk0VroLX579Ovw79aF6/+ZbbH31vHkVrNvG3wYdjpgsxS7ypp88D9fSJiOS2j775iO+8/h3uPO5OzupyFgBLSzYy4J53OblHO/562WFZThgt9fTlBp3eFRER2Y3X5r1Gvfx6nNjpxC233fPWXCoq4KbTDsxiMpHq06IvAQYOHMjAgQN3v2PMakchrnl95PI1tnTrxHWORbKlrKKMtxa8xQkdT6BRQSMAPl5Swn+mfcWQYzvTqWXDLCcUqR719CXAxRdfnMjaUYhrXh+5fI0t3TpxnWORbPnf0v+xYuOKLe/adc7xh1c/oXmDAoadeECW04lUn3r6PFBPn4hI7vr1hF8zesFoxl48lnr59RjzyTK+988p3Hr2QQw5dr9sx8sI9fTlBp3eFRER2YnN5ZsZs2AMJ+1zEvXy61FaXsEdr31Cl9aNuPzofbMdT6RGtOhLgAEDBjBgwIDE1Y5CXPP6yOVrbOnWiesci2TD+1+9z5rSNVtO7T73v4V8UbSOm04/kIJ8vYRKsqinLwGGDBmSyNpRiGteH7l8jS3dOnGdY5FseG7uc7Rr2I6j9zqa1RtL+cvozzhqv5acclC7bEcTqTH19Hmgnj4RkdzzxaovOPflc/nJYT/h6l5Xc9frc/jbuC8Y9aP+9OrYLNvxMko9fblBx6YToLS0lNLS0sTVjkJc8/rI5Wts6daJ6xyLZNoznzxD3by6XND1AhatWM+TE77k/EM71LoFn+QOnd5NgFNOOQWAsWPHJqp2FOKa10cuX2NLt05c51gkk0o2lTBq3ijO7HImLeq34LcvfoQBN57aPdvRRPaYFn0JcPXVVyeydhTimtdHLl9jS7dOXOdYJJNe+vwlNpRt4LIelzF90SpembGEH514AHs3b5DtaCJ7TD19HqinT0Qkd5RXlHPmi2fSvlF7/nHqP7job5OYv3w9Y38+gMb1auexEvX05Qb19CXA+vXrWb9+feJqRyGueX3k8jW2dOvEdY5FMmXcV+NYvHYxg3sM5o3CpUxZsJIbTulWaxd8kjv0DE6AM844A4imxyrK2lGIa14fuXyNLd06cZ1jkUx55pNn2KvRXvTb63hOf34C3do15tt9O2Y7lkjatOhLgGuuuSaRtaMQ17w+cvkaW7p14jrHIpnw6cpP+XDph/z08J/yzIdfsWD5ep666gjq6ELMkgPU0+eBevpERHLDrRNv5dV5r/LCma8x6IGPOKRjM57+3lHZjpV16unLDfrVJQFKSkooKSlJXO0oxDWvj1y+xpZunbjOsUjUVm1cxavzXuXMLmfy2NilrN1Uxq/OPCjbsUS8iWzRZ2b3mNmXZubM7OCU27uZ2SQz+zT8f9ekbcu0c845h3POOSdxtaMQ17w+cvkaW7p14jrHIlEb+flINpZv5MhWg3jmfwv5zjH70r19k2zHEvEmyp6+l4D7gfer3P434K/OueFmNhh4FDgpYdsy6rrrrktk7SjENa+PXL7Glm6duM6xSJTKKsp4bs5zHNHuCJ4Ys4FWjepy/cBu2Y4l4lXkPX1mNh84yzlXaGZtgU+BVs65cjPLB5YDXQFLwjbnXFHVMaqnT0Qk2UYvGM1Px/6Ui/f5NU+82Yg/XXgI3+7bKduxYkM9fbkh0+/e7QQsds6VA4QLqiXh7ZaQbdst+qJWXFwMQOvWrRNVOwpxzesjl6+xpVsnrnMsEqV/ffIv2jfcixcnNKdPp0ZceJgu0SK5R5ds8aCoqIi+fbf+AjR06FCGDh3qrf6FF14IRHPdtChrRyGueX3k8jW2dOvEdY5FojJ3xVymLJvCIQ0H8/m6Uv4xpCd5eZbtWCLeZXrRtwjoYGb5KadN9w5vt4Rs206bNm2I8vTuz372s0TWjkJc8/rI5Wts6daJ6xyLROWZOc9QL78+H8zYn0uO2IdDOjbPdiSRSGR00eec+8bMpgOXAsPD/39U2SeXlG2ZdvbZZyeydhTimtdHLl9jS7dOXOdYJAorN67k1Xmv0mjzUZQWNOXnp3bPdiSRyET2Rg4zewA4H2gPFAPLnXM9zexA4J9AC2Al8B3n3NzwPonYVlXUb+RYunQpAO3bt09U7SjENa+PXL7Glm6duM6xSBSemPUE90+7n3Vf/JTbTj+JK47pnO1IsaQ3cuQGfSKHB1Ev+gYMGABE02MVZe0oxDWvj1y+xpZunbjOsYhvG8s2csbIM1mxqjl7b7ieUT/uT756+XZIi77coDdyJMBNN92UyNpRiGteH7l8jS3dOnGdYxHfnpnzDEUbvmH90nP43Xd6asEnOU9H+jzQdfpERJJl1cZVnPaf01m9qiOntr6Fv1zcJ9uRYk1H+nKDPns3ARYtWsSiRTt843Csa0chrnl95PI1tnTrxHWORXx6dOajrCtdh604i5tPPzDbcUQyQqd3E+CKK64AoumxirJ2FOKa10cuX2NLt05c51jEl0WrF/HsnOfYvOoIbjzhONo2rZ/tSCIZoUVfAvzqV79KZO0oxDWvj1y+xpZunbjOsYgvf576F8rL89jbncOQYztnO45IxqinzwP19ImIJMPMoplc/trlbCo6mSfP+RX9u+rjBqtDPX25QT19CTBv3jzmzZuXuNpRiGteH7l8jS3dOnGdY5F0Oee444M/4coaM6DdRVrwSa2jI30e6Dp9mRPXvLpOn0j8jVk4huvfvZ7yb87nrav/Hx1bNMx2pMTQkb7coJ6+BLjtttsSWTsKcc3rI5evsaVbJ65zLJKO0opS7px0L+Wb2vKDQy/Vgk9qJR3p80A9fSIi8TZ89jP8cfKdNFr5fcYOG0b9gvxsR0oUHenLDerpS4C5c+cyd+4OP/Y31rWjENe8PnL5Glu6deI6xyJ7al3pOu6b8lfK1u3HHaderAWf1Fo60ueBevoyJ6551dMnEl83vHUXb3/9L05q8gfuP39QtuMkko705Qb19CXAHXfckcjaUYhrXh+5fI0t3TpxnWORPTFr6QLeXvw8Dcv68qdBZ2Y7jkhW6UifB+rpExGJn7LyCgY8dS2r8j/g8ROf55h9u2U7UmLpSF9uUE9fAhQWFlJYWJi42lGIa14fuXyNLd06cZ1jkZq67c0xrMqfSL8252jBJ4KO9Hmhnr7MiWte9fSJxMv4z5cydPQQ6jco4d1L3qBZvWbZjpRoSTzSZ2bzgbOcczv9LdbMugLPh9/e45z71x48zhBgonPu0z24761AY+fcjTW9755QT18C3H333YmsHYW45vWRy9fY0q0T1zkWqa4V6zZz3Rt3kt9kMb/v/2ct+GRXzidYsA1Lo8YQoBio8aIv03SkzwP19ImIxINzjov++U/m2r0M7HAufxl4e7Yj5YQ9OdLX+aZX7wP6RBIIps+/68zrd7VD5ZE+4CFgMnAMsDfwvHPuJjO7HLiXoNVtCXABsB54ENgHaAA865y7I6zXA7gfaA8YcE943weBb4DVwI3OudFm9v/CenWAxcD3nXNLzawZ8HfgYGApsAhYpiN9ssX06dMB6NOnT6JqRyGueX3k8jW2dOvEdY5FquOv783gk7LHaN2wE3cM+GW240h87AMcDzQBvjCzvzvn/hWe3t1yetXM3gZud869Z2Z1gTFmNhl4F3gZuMU59+9w31bOueVmdiXBqeH/hrcPBvYHjnbOVZjZNQSLy8uB3wCrnXMHmllrYBpbTy9HTou+BLj++uuBaHqsoqwdhbjm9ZHL19jSrRPXORbZnZmLVvFw4R3UabyBR099kgZ1GmQ7Uq22uyNxGfZv51wFUGJmnxAsyj5L3cHMGgEDgDZmVnlzE6AHwZHAOpULPgDn3PKdPNYgoC8wLaxTBygJt50I/Di8f7GZjUx7ZDWgRV8C3HfffYmsHYW45vWRy9fY0q0T1zkW2ZW1m8oY+vID5Df5hB/1/hkHtjow25EkXjamfF3Ojtc/eYADjnDOlaZuMLOeNXgsA37vnHuyxikjpkVfAkR5mi1pp/DimtdHLl9jS7dOXOdYZGecc1z/n9dZ2+hFerU4iu/3vjLbkSSBnHNrzOx94CbgdgAz6wSUAnOBMjO7qOrpXYJevtR3C70C/MTMXnTOrTSzesCBzrkZwDvAVcAEM2sFnAf8mwzRdfoSYPLkyUyePDlxtaMQ17w+cvkaW7p14jrHIjvz3JR5TFxzPw3rNOahU/5Iyqk5kZq6HDjIzGaZ2SxgBNDcOVcGnAP8MNw2AzgjvM9jwG/MbLqZDXTOPQ38CxhnZjOBqcCx4b63Ay3MbA7wH+C9zA1N7971Qtfpy5y45tV1+kSyY87S1Vww4hfkNZ/AX096mOM7HZftSDkpidfpk+3p9G4CPPTQQ4msHYW45vWRy9fY0q0T1zkWqeqLorVcOvwf5LWZwAX7X6YFn8hu6EifB7pOn4hIZi1asZ4LHnuDDW3/ROfme/Ofc56jbn7dbMfKWTrSlxvU05cAEydOZOLEiYmrHYW45vWRy9fY0q0T1zkWqfR1yQYueXwCG5oPp25BGfefdI8WfCLVoCN9HqinL3Pimlc9fSKZ8c2ajVz86ESK6z8FTT7id/1+x3ldz8t2rJynI325QYs+D6Je9M2dOxeA7t27J6p2FOKa10cuX2NLt05c51hk5brNXPzYRBbnP01es/9x/WHX871e38t2rFpBi77coEWfB+rpExGJVsmGUi57YhJfVvyL/OYT+WHvHzKsz7Bsx6o1tOjLDerpS4Bx48Yxbty4xNWOQlzz+sjla2zp1onrHEvttW5TGUP+8SHzyp4nv/lEhvQcwrW9r812LIk5M5tvZnPC6+dNN7O/7GLf682sbTXrjjWzs/wlzRwd6fNAPX2ZE9e86ukTicbG0nKG/ON/fLTmeeq2Hs3F3S/mlqNu0QWYMyyJR/rMbD5wlnOu0PO+Y4F7nHP/TTdjpuk6fQnw5JPRfXxflLWjENe8PnL5Glu6deI6x1L7bCor5wdPT2VayYvUazuacw84l18e9Ust+GSPmNllwE+Ayrd63+icG2NmtwB7Ay+Y2UbgMmAv4PdAfYK10h+cc89lIbZXOtLngXr6RET8Ki2vYNi/pvHu1y9Sv/0rnN75dO487k7y8/KzHa1W2qMjfbc2uw/oE0UeYDq3lly/qx3Co3cbwz8AdwLPO+ecmXUHxjjnOqbsu+VIn5m1AFY758rNrB3BR6n1Cj9Ldyw60idRGT16NAADBw5MVO0oxDWvj1y+xpZunbjOsdQeK9Zt5voR05m07DXq7/0KJ3U6iT8c9wct+GRPXJiykDsSeNPMOgClQHsza++cW7qD+7UBnjSzrkAZ0BLoDnyQodyR0JE+D9TTlzlxzauePhE/psxfwbBnplFS8B4FbV/i2A79eODEB3Tx5SzLhZ4+M/sC+Jlz7iUzywPWAwc65+bvYN8xwCvAA+GRwU+Boc65sTrSJ5F6+umnE1k7CnHN6yOXr7GlWyeucyy5raLC8fj78/jTWzNpvs/LFNSfyrEdjuW+AfdpwSe+NAe+DL/+LlAvZdtqoFmVfeeHC75TgAMyETBqWvQlQKdOnRJZOwpxzesjl6+xpVsnrnMsuWvV+s387PkZvPvldFp3G8EmK+LHfX7M1b2uJs90ZTHx5nrgJTNbCbwBLE/Z9gDwDzNbT/BGjpuAh83sNmAyMDPDWSOh07seRH1694033gDgtNNOS1TtKMQ1r49cvsaWbp24zrHkpo8WrmTYM9NYkTeW+u1fpVX9Fvzx+D/St32iziTmttKNWN0GiTu9K9vTos8D9fRlTlzzqqdPpGacczw5YT53vTmNxh1foqz+dPp36M8f+v+BlvVbZjte7VZRActmwbyxwZ8Fk7BfL9OiLwdo0edB1Iu+pUuDNxa1b98+UbWjENe8PnL5Glu6deI6x5I7SjaU8osXZvD2F1Noud/zlNkKfnLYT7iy55U6nZstqxYGC7wv3oUvx8H68Mxnmx7QZQB2xh+16MsBWvR5oOv0iYhUz/RFq/jRs1MpstHUb/sG7Rq14U/H/4k+bftkO1rtsmElfPn+1qN5K74Ibm/cHvY/EboMgP1OgKZ7Acl8965sT2/kSIBRo0YBcPbZZyeqdhTimtdHLl9jS7dOXOdYkm3RivXc+9ZcXpr5OS32GUndBoUc32kAvz/29zSr12z3BSQ9ZZtg0f9g3rvBIm/JR+AqoG5j6NwfjhwaLPTadAd94knO0pE+D9TTlzlxzauePpEdW752Ew+9+znDP/ycguYf0Kjd+5SxjhsOv4HBPQbrI9WiUlEB33y89ZTtgolQtgEsHzoeESzwugyAjn0hv2C35XSkLzdo0edB1Iu+4uJiAFq3bp2o2lGIa14fuXyNLd06cZ1jSZb1m8v4+/tf8uh7n7K54SSa7jWOTW4VR+11FDccfgMHtToo2xFzT8lXwQJv3tigL29dUXB76+5bT9nueyzUb1rj0lr05Qad3k2AKF98k/bCHte8PnL5Glu6deI6x5IMpeUVjJi8iPvGzKEkfwJNu4zDWEHPNofxo0N/xBHtj8h2xNyxYRXMHx/25b0Lyz8Pbm/cDvY/aevRvKZ7Zy+jxIoWfQkwcuRIAM4///xE1Y5CXPP6yOVrbOnWiescS7w553ht1lLufms2X5WOp+neY6mfV8yBrQ9h2KF3csxex+hUbrrWr4CFk4JTtQsmwtfTg768gkbQ+Vjo+71gkde2h/ry2PIxbBuBTUBd4F7n3BNZDeWBmd0KNHbO3Vjj++r0bvrU05c5cc2rnj6prZav3cRrs77muSkLmLtmPI3bv0N5/jcc1OoghvUZxnEdjtNib0+tWrR1kbdwEhTNCW7PrwcdDg/egLH/idChL9SJ9qPqknh6N/XzdM3sYGAa0Nk5tyS7ybZlZnWcc2U12P9WtOjLnqgXfSUlJQA0a+b/HW5R1o5CXPP6yOVrbOnWiescS3ys3VTG27OX8tL0xUxY8DF5jWfRsOUsyvOX0a1FN67tcy0ndTpJi72acA6K5sLCibBgUrDIK1kUbKvXFDodBfseA/v0gw6HQZ16u67n2Z4s+nr9s9d9QJ9IAsH0WVfOun5XO6Qu+sLvlwFnEXzO7n1Aa4IjgPc55/4R7nMMcDfQJCzzc+fcW2Z2BMFHtTUC1gHXOecmm9kTwCzn3P3h/Q8GXgH2D2v8GTgEqA+8C9zgnCs3s7HAdOBoYIVz7gwz+3/ABQRnYRcD33fOLTWzZsDfgYOBpcAiYNmeLPp0ejcBonzxTdoLe1zz+sjla2zp1onrHEt2bS6r4L1Pi3hp+mJGfzGNioYzadD8Yxrs9w2G0bvtoVza40a+te+3dIHl6igvg6UzwlO14SJvw4pgW+N2sM8x0O/Hwf/b9YS8/OzmTTgzOxYoBmYAk4DLnXNzzKwJMMXMJgHfAC8C5zvnJppZPtDUzOoC/wGucs6NMbOBwH/M7ADgKYLF4P3hQ10FPOWcc2b2Z2Ccc+5qM8sD/gV8F3g83LcL0N85V2ZmgwkWikc75yrM7BrgXuBy4DfAaufcgWbWmuCI5fN7Mg9a9CXAiBEjALj44osTVTsKcc3rI5evsaVbJ65zLJlXUeH43/wVvPTRV7z22f/YVHc6dZsVUrDPCvLI54j2fTll36GcvO/JtG6gNwDt0ub1sHhKuMCbCIsmQ+m6YFuL/aD76cECb99+0LJLTvTk7e5IXIa8YMEh5wOAi8L/9wCeSzkSXS+8bX9gtnNuIoBzrhxYaWa9gM3OuTHh7aPNbDPQ3Tk33syahPt8AlwKHBPWHQQcaWY/C79vCHyVku2ZlNO6g4C+wLQwVx2gJNx2IvDj8LGLzWzknk6GFn0J8MgjjwDRvAhHWTsKcc3rI5evsaVbJ65zLJnhnGP216t58aOveGXOBEryplLQ9GNsrxIaWB2O3utovtX5FE7sdCIt6rfIdtz4Wr8CFn24tR9vyXSoKAUM2h0Mh16+dZHXRB95GKELw56+i4B/ECyuip1zfaruaGZn7uFj/BMYAowFPnHOLagsCZzrnJu3k/utTX144PfOuSf3MEO1qKfPg6h7+tavXw9Aw4YNE1U7CnHN6yOXr7GlWyeucyzR+GbNRj5evJqZX61kyuIvmLNiLqvtYwqafIzVWUsdK6Df3sdy2n7f4oROJ9C0bs2v8ZbTNq8LLpWy/HMo/hyWfwbLPoZvZgfb8+vC3odt7cfrdCQ0aJ7VyHsi6W/kCL//N7AMGAj8wTn3dHj7gcASggNhs4HznHOTKk/vEvTwfQ5c6Zx718xOIlhAdnXObTazfYAPgMnAv51zw8O6fwfKgWvCPr7WQBPn3JdhT989zrn/hvteAfwEOMU5t9LM6gEHOudmmNk9QPPwNHErgtO7/1ZPX46K8sU3aS/scc3rI5evsaVbJ65zLOlxzvHNmk3M+qqEqYuWMG3pbD5b9Rnr3Ffk1/uavHpLsfzN0BIaWX36d+jPGfufyvEdjqdhQS1/TlSUw6qF4cLus3CR9xks/wJWL07Z0aBZJ2jTDXqeHyz0OhwOBQ2yFl22cTMwleDNHDeZ2c+BfIKF4LfDU6fnA382s0ZABXBjeDr3AuCB8PZ1BEcQNwM45xaa2WxgAMHp3UrXA38CZpiZI7h0zPXAl1WDOeeeDheF48LTu3nAwwQ9iLcDT5rZHII3cry3pxOgI30eRH2kb/jw4QAMHjw4UbWjENe8PnL5Glu6deI6x1J9zjm+LtnI9K9W8MHCucxY9gkL1nzBpryvyKv3NXl1V23Zt15eY/Ztsj+92/agZ+sD6daiG11bdKV+nfrZG0C2rFu+dUG3ZXH3OayYB+Wbt+5Xvxm06gqtu0Kr/bd+3bJLzi7wknikT7anRZ8Huk5f5sQ1r67TJ5m0YXM5xWs3UbR2I1+VLGdxyXK+XrecorUr+XL1Ar5eP4/S/MXk1VuG5QV94kYeLet25IDmXTm8/UH0bBMs8No1bFd7Lq1Sthk2rgo+nqzqKdnln8OGlVv3zSsIFnGtDoDWBwT/r1zcNWyVE2+0qAkt+nKDFn27YWbdCJo0WwHLge845z5L3SfqRV9paSkABQW7/1DsONWOQlzz+sjla2zp1onrHOeysvIKlq1dx4KVRSxatZyv1xazbO0KitavYOXGVawuLWFd6Wo2VKyhtGINFXnrsfzwj23/b3hdmrFXw/3o0bI7R3U8mIPbHEiXZl2omx/tBXwzoqICNpUEH0G2YWWwiNuwMvg+9esNK2FjybbfV75bNlWTvcIF3QHhkbvw6F3zfSFfHVCVtOjLDVr07YaZvQM86ZwbHl5H57vOuZNS99l3333dggULdlzAg8cee4yhQ4dGVj8bcmlMuTSWSpkck3MO58BVfg3h98HtpHxf4bbdh5T9HFBRUUE5FVRUVOAcVOCoqHA4Knj2uRFc9O1v41wFFc4F9SocFc5Rgdtye4VzKfsQ/r+C8vLwPuEDb9238v7h/ysqttTcWLae1ZtL+GbdCr5Zv5IVG1ayatMq1pauZn3Zaja5NZSxFmfrgn66nTBXQB0aUy+vCQ3zm1K6towue3WhVYMWtGnUkvaNWtKhWSvaNWrF3o33zszlU1J/OLit32/5ekfbU3+gFbBpzZaF21svj+Bbxx1ZvYVcZZ0dqVMfGrSA+s2D/zdovv33DVtCy/2DxV29JjuvtYdy8d8EM1vgnOuc7RySHi36dsHM2gKfAq3Cd97kExzt6+qcK6rcr3HTJm7Kx9OCF4qKChyOiRMncvRRR1LhKsIXjgpwjgpXHr4IOSoqKoDgBWLqtGn07n0IhC8wFc5tqfXTa6/n1NNOZ+BZJ+NcBbgKPp49mwMPPDB8caqsX7HlxcvhcOHjOFfB5198zn5d9gszVED4gvj+mxMAR79Tjkx5oa1g4cKFdOjUMcwT/INd+YLmwn9wK18YoYKvly6lbbu24b/7FeEL89b7OldBRXAnHI6p06Zy2KGHbrOfI8wVvji48IXUASUlK2natBmz3puDw3Hwcd222QfCfMEqgLVr19KoccNtaoTLim2+dzg2rN9A/Qb1t80bbt3mvy64z6bNGymoW3dLhVWrVlH08RrAsX+/jtvcDxylpaXUKagT3j31sSszBd99OXEJDuh0VBvy8vNT9tom/Tb3BiivKCcvL68yPYsmfoPD0alf2x08SrBoMtv6sukszGXBHksmFuMqHHv3b53ymJWnssL9ttyUmjDle6v8btu02/zfdnz71vu6XWyr8v8EnWlrVO5oWgHNKhzNKqCZg+YV0Nw5mjto4aC5g5YOWgD1162nRf0GpC6ciouLad2q1Ta3AeAcmzdvpm5B5RGqrc/byu1VF2jlZWXk5+ftYPsuFnVRs/wqi7XmO13ITfhoNseefObW7QW77kUcNWoUZ599drWj7Mn+t912G9U9+xNlHp+1zWy9c65RtYtJLOnY9a51AhaHF2gkXPgtCW/fsugrb1XGRe9s/+H0D46v4aNN3/HN80sW8eiIx3i7y+itN+YRLEerq4Dgg1uqmPff4PJBk3tVefD6pIywGhoQfLBNdfWALza+Wf39GwHlMO+9IO+iY5fvev/GKV9XWRAYDgtvtrB2nku53bbebcufcJFjOKz+tttoCR9PXIDhqN+/dPv71t0awcxtXzf8et6khQB0PNZREW7b8hjs4OvK+9q2+06eGHysZJ9j6my5PfX+zkGe2Q7r5jn4eMI34ODEo4N3bLqKCvLz8lL23dF9bcvX5WXl1KmTH2a0cD6tyjxa5ZqR0tJS6oWL6DzHlv4y21J528fYtHEj9es3SJlHC2tW1rWUbbBu3ToaN27CqpWraNG8RVDLjNSxmG19tNWrgv227pOSxfJSxh7cWlxcTNs2bbY8qpmRF9as7/JpZvm0yiugTUFdWtWpx0dTpnLUkUeGTzRL6Q2zHd42fsIE+vfvv/WHjfHexy9y/rFnbHufcPuEsWM58cSTtrltx48TGP3225z6rVN3nGO7+xv/ffW/nHXW2TvPXvlDC28b+eKLnH/e+dvXtLzgKFu4kLv86mH8a+RrXPf/fssDf3tym4y78s8/v8Sxl1b/yhWZWPTVRFIWfZIbdKRvF8zscOD/nHM9U26bDQx2zk1LuW0jwbV4KhUBpWy9mnZ1NNvF/q0JPj6muvvXtH429t/RmLKVJ93auxtL3Oa+OvunjikOeXzsX93nXFzzp9rVWJKQf0cqxxSXPOnsX0D1/32L879tqbo75/yfC5eM0pG+XVsEdDCz/JTTu3tT5ZiZc64WXttAREREkkSfir0LzrlvCE66Vl5s8VLgo9R+PhEREZEk0Ond3Qg/nuWfBD3VKwku2TI3u6lEREREakZH+nbDOTfHOXeUc65b+H8vCz4zm29mX4enjCtvG2Jmzsx+5OMxsi0c48HZzuFTdcYU93GbWQsz22Bm92c7iy9mdpGZfWRm081sjpk9k+1M6TCzemZ2r5l9EY7nIzM7dzf36WxmsbtOSPj3odDM8qrcFtu/I7sSZp9jZjPM7HMze9nM+mU7lw9J/rlI9WjRl11LgFNTvh9C8EHKIlG6jODDwS81s8RfrdfM9iL4jMpBzrk+QA/g7qyGSt/DQEegp3PuQOAK4CEzO34X9+kMxG7RF2pMMIZccaFzrrdz7gCCM0GvmdlR2Q4lsjta9GXXUwQLPcysC8GFSWaF359sZpPC3/Bnmdkl4e1HmFlhapHwN87Y/qZZ9bfH1O/Dr38XjnV+Uo5y7mpMCfBd4PfATOAcADN7KnXuU783sw5mNsbMPjazV8xsVMx+Tu0J3i2/HMAFPgIws6PM7F0zmxr+OTO8vbOZFYdH02aGf8eOy94QtjKzfYGLgWuccxsBnHOFwB+A34b73BxmnmFmE8OjaH8FDgqPdr6Qrfw7cSvw26q/ZJjZAeFza6aZTTOz08Lbf2Vmf0nZr1X484rddeKccyOBvwE3mlldM7vbzP4X/myeNrPGAGbWzMyeTPm5PZTd5DtnZj8zs8nh688kM+uTss2Z2S/D7fPM7IIsRpUa0qIvu8YCvcysBXAl8H8p26YB/Z1zhwIDgXvMrIVzbjKw1sxOAAhfqCqccxMzG92rhs65Y4ABwF2V/0iKf2Z2CMFHCr4D/INgAbg7DwDvhpcu+jFwQnQJ98gM4H/AQjN7wcyuDxcJzQlejC9zzh0OnAU8Gt4OwTzMcM4dQjCuZ82sXubjb6cX8LlzbkWV2z8AepvZlcAgoJ9zrjdwtnOuAhgGzHbO9XHOXZjZyLs1BZgKXFPl9n8Bz4Q/g8HAcDNrQ/Bv4SVmVnmFicuAV5xzO/gctVj4EOgJ/AIocc4dGf5slgA3h/vcB6wDeofbbs1Czur6P+fcEeHrz68J/h6lWu2cO4Lg6O0DGU8ne0yLvuxywPPAJeGf1D6kNsAL4VG9N4GWQPdw2wPAteHXwwh+w0+y5wCcc/MJ3izTMatpctv3CP5Bd8BI4Cgz67Cb+5xIsEDEObcAGBNtxJpxzlU4584l+KXhXeBMgqOYZwD7Aa+b2XTgdYK/cweEd90MDA9rjAU2sPXvWDbt7qrEZwGPOOfWADjndnOl8tj4FfD/Un6pM6APW59bswmulnC0c24h8DHBzxCCMyJPZS5qjVX+zAYBg8OjrdPD7/cPt50F3B0u0HHO1eQ6pZl2uJm9F77+/Jng55TqufD/HwB7m5kuW5YQuk5f9v2T4LfE95xzy23rVegfAV4BznfOOTP7lOBzMgD+DdxpZocSvCBX52hNNpWx7S8YVf+B2JjydTnJeF7ubkyxE55auwzYZGbfCW8uIHhBTdx4qgpPgRYCf7XgIuoGzHTObdcHZ2adMxyvJmYBB5hZyypH+44mWMwmknNurpm9BtxQzbs8BVxpZl8SXDT4/aiyeXAEwXNvP+Ba59w7Wc6TjjzgBeB459w0M9sbWFxln8q2g/LwNSsJ/2YLOtKXdc65ecAtwO1VNjUH5ocLvlPYenQC51wp8CTBovBfzrn1GYq7pz4n+EcRMzsZaJfdOF4kcUznAHOdcx2dc53DD0//FsGiL3U8exH8MlFpLEH7AWbWCTgpc5F3L+w5PCbl+44ER8pnA13N7MSUbUfY1t+sKhfBlW0SDYA5GQu+E+ER738Dj1QeQQn7RW8BbgP+C1xjZk3Cba3Cu64mWBzF2a0EZyeaEBx1nc7W51YPoDfB0SMIjkQfD/wMeMrF9PpiZnYOwWnrewn+Tb7BzBqE25qE44Lg5/bzyuefmbXORt5qqsPWDyG4dlc7SrJodR4DzrnHdnDzTcDDZnYbMJntf8N/gqCp+5GI46WjDsFvhL8G/mlmPyboJVuY1VTpSfKYvkvQQ7WFc25S+CaAScCp4RGyTwmOPlf6CfB/ZnY58CVB/1xNPtopanWA28I3QGwg+GX2V865j8xsEHC3md1HsMibB1R+uOhyoI+Z/YLgqOClzrnNGU+/Y9cCdwCzzWwzwXPuJ865cWb2HtAB+MDMSgl6fI8n+DdibnhKbk4M+/pwzn1lZk8TLOQALifos/wpwdHmKyovfu+cW29mLwNXERxBi5MXzGwTwZvvZgNnOOc+NLNpBAvbyWZWQbCwvQ34BPgpQV9foZmVAeOA67KQfVfqAOuB3xCMYTnBUT/JEbo4c0KZ2WCCF6kzs51lR8KjRXOA9s65DdnO40Mujqk6wqMWpc65snAOJgMnJ/ki5eHp3SnOuTgfbRHJmNr671ttoyN9CWRmbxI0Bw/KdpYdMbPrCI5U3Jgr/3jk4phqoCvBkT4j6AG8LckLPhHZVi3/961W0ZE+ERERkVpAb+QQERGpRcLrWL5mZnPDi0WPDK+PiJkdHV48+lMze8vM2oa3d7PgQudzLPhYvX+kvGGlnpm9YcEFtON8KZpaT4s+ERGR2sUBf3LOdXfO9QK+ILgwfh7BtSuHOee6Ae8Bd4X32QzcEH4s4CFAQ+DGcFs5cA/BBwlIjGnRJyIiUos451aEFySv9AGwL3A4sNE5Nz68/W/At8P7zK/8eMPwAtP/C++Dc67MOTcaWJWRAcge06JPRESklgqP7l1DcI3BfYAFldvCTw3JM7OWVe7TgOASUK9kMKp4oEWfiIhI7fUgsBZ4qDo7h5+H/BzwjnNOi76E0SVbREREaiEzu4fgkkxnO+cqzGwh4SnbcHtroKLy4wDNLJ/gAu8rid+FpaUadKRPRESkljGzOwh6+M51zm0Kb54KNDCz/uH3PyT4SMDK08BPEbxp43tx/Vg82TVdp09ERKQWMbOeQCHBRy5WXoz5S+fceWbWD3gUqA/MBwY755aZ2ZkEnx9cSLDwA5jgnBsW1pwMdATaAl8Dbzjnrs7QkKSatOgTERERqQV0eldERESkFtCiT0RERKQW0KJPREREpBbQok9ERESkFtCiT0RERKQW0KJPREREpBbQok9ERESkFtCiT0RERKQW+P+A/hyAxbYkWQAAAABJRU5ErkJggg==\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Susceptible</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>28Dec2020</td>\n",
        "      <td>2839588</td>\n",
        "      <td>20453286</td>\n",
        "      <td>49304154</td>\n",
        "      <td>53932072</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>29Dec2020</td>\n",
        "      <td>2910503</td>\n",
        "      <td>20286586</td>\n",
        "      <td>50545259</td>\n",
        "      <td>52786750</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>30Dec2020</td>\n",
        "      <td>2980780</td>\n",
        "      <td>20097318</td>\n",
        "      <td>51775527</td>\n",
        "      <td>51675475</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>31Dec2020</td>\n",
        "      <td>3050342</td>\n",
        "      <td>19886871</td>\n",
        "      <td>52993621</td>\n",
        "      <td>50598265</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>3093457</td>\n",
        "      <td>19745970</td>\n",
        "      <td>53748741</td>\n",
        "      <td>49940934</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date    Fatal  Infected  Recovered  Susceptible\n",
        "255  28Dec2020  2839588  20453286   49304154     53932072\n",
        "256  29Dec2020  2910503  20286586   50545259     52786750\n",
        "257  30Dec2020  2980780  20097318   51775527     51675475\n",
        "258  31Dec2020  3050342  19886871   52993621     50598265\n",
        "259  01Jan2021  3093457  19745970   53748741     49940934"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.01523085028398187"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.03046170056796374"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>tau</th>\n",
        "      <th>Rt</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Main</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.010953</td>\n",
        "      <td>0.004857</td>\n",
        "      <td>0.047160</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>360</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.047</td>\n",
        "      <td>3148</td>\n",
        "      <td>22</td>\n",
        "      <td>51</td>\n",
        "      <td>0.137476</td>\n",
        "      <td>163</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.003969</td>\n",
        "      <td>0.014883</td>\n",
        "      <td>0.056732</td>\n",
        "      <td>0.000540</td>\n",
        "      <td>360</td>\n",
        "      <td>0.24</td>\n",
        "      <td>0.057</td>\n",
        "      <td>462</td>\n",
        "      <td>62</td>\n",
        "      <td>16</td>\n",
        "      <td>0.159309</td>\n",
        "      <td>217</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.004105</td>\n",
        "      <td>0.020125</td>\n",
        "      <td>0.189291</td>\n",
        "      <td>0.000070</td>\n",
        "      <td>360</td>\n",
        "      <td>0.16</td>\n",
        "      <td>0.189</td>\n",
        "      <td>3586</td>\n",
        "      <td>60</td>\n",
        "      <td>12</td>\n",
        "      <td>0.108743</td>\n",
        "      <td>375</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.016393</td>\n",
        "      <td>0.018820</td>\n",
        "      <td>0.039140</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>360</td>\n",
        "      <td>0.84</td>\n",
        "      <td>0.039</td>\n",
        "      <td>17542</td>\n",
        "      <td>15</td>\n",
        "      <td>13</td>\n",
        "      <td>0.123622</td>\n",
        "      <td>194</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.039220</td>\n",
        "      <td>0.017591</td>\n",
        "      <td>0.037520</td>\n",
        "      <td>0.000533</td>\n",
        "      <td>360</td>\n",
        "      <td>2.08</td>\n",
        "      <td>0.038</td>\n",
        "      <td>469</td>\n",
        "      <td>6</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0495724</td>\n",
        "      <td>222</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.032723</td>\n",
        "      <td>0.018251</td>\n",
        "      <td>0.001114</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>360</td>\n",
        "      <td>1.78</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3514</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0390454</td>\n",
        "      <td>221</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.033329</td>\n",
        "      <td>0.015231</td>\n",
        "      <td>0.000824</td>\n",
        "      <td>0.000859</td>\n",
        "      <td>360</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.001</td>\n",
        "      <td>291</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>0.0668274</td>\n",
        "      <td>552</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.033329</td>\n",
        "      <td>0.015231</td>\n",
        "      <td>0.000824</td>\n",
        "      <td>0.000859</td>\n",
        "      <td>360</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.001</td>\n",
        "      <td>291</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"9\" valign=\"top\">Medicine</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.010953</td>\n",
        "      <td>0.004857</td>\n",
        "      <td>0.047160</td>\n",
        "      <td>0.000079</td>\n",
        "      <td>360</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.047</td>\n",
        "      <td>3148</td>\n",
        "      <td>22</td>\n",
        "      <td>51</td>\n",
        "      <td>0.137476</td>\n",
        "      <td>163</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>14May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.003969</td>\n",
        "      <td>0.014883</td>\n",
        "      <td>0.056732</td>\n",
        "      <td>0.000540</td>\n",
        "      <td>360</td>\n",
        "      <td>0.24</td>\n",
        "      <td>0.057</td>\n",
        "      <td>462</td>\n",
        "      <td>62</td>\n",
        "      <td>16</td>\n",
        "      <td>0.159309</td>\n",
        "      <td>217</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>15May2020</td>\n",
        "      <td>09Jun2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.004105</td>\n",
        "      <td>0.020125</td>\n",
        "      <td>0.189291</td>\n",
        "      <td>0.000070</td>\n",
        "      <td>360</td>\n",
        "      <td>0.16</td>\n",
        "      <td>0.189</td>\n",
        "      <td>3586</td>\n",
        "      <td>60</td>\n",
        "      <td>12</td>\n",
        "      <td>0.108743</td>\n",
        "      <td>375</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>10Jun2020</td>\n",
        "      <td>01Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.016393</td>\n",
        "      <td>0.018820</td>\n",
        "      <td>0.039140</td>\n",
        "      <td>0.000014</td>\n",
        "      <td>360</td>\n",
        "      <td>0.84</td>\n",
        "      <td>0.039</td>\n",
        "      <td>17542</td>\n",
        "      <td>15</td>\n",
        "      <td>13</td>\n",
        "      <td>0.123622</td>\n",
        "      <td>194</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>11Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.039220</td>\n",
        "      <td>0.017591</td>\n",
        "      <td>0.037520</td>\n",
        "      <td>0.000533</td>\n",
        "      <td>360</td>\n",
        "      <td>2.08</td>\n",
        "      <td>0.038</td>\n",
        "      <td>469</td>\n",
        "      <td>6</td>\n",
        "      <td>14</td>\n",
        "      <td>0.0495724</td>\n",
        "      <td>222</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jul2020</td>\n",
        "      <td>22Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.032723</td>\n",
        "      <td>0.018251</td>\n",
        "      <td>0.001114</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>360</td>\n",
        "      <td>1.78</td>\n",
        "      <td>0.001</td>\n",
        "      <td>3514</td>\n",
        "      <td>7</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0390454</td>\n",
        "      <td>221</td>\n",
        "      <td>0 min 5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>23Jul2020</td>\n",
        "      <td>31Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.033329</td>\n",
        "      <td>0.015231</td>\n",
        "      <td>0.000824</td>\n",
        "      <td>0.000859</td>\n",
        "      <td>360</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.001</td>\n",
        "      <td>291</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>0.0668274</td>\n",
        "      <td>552</td>\n",
        "      <td>0 min 15 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Aug2020</td>\n",
        "      <td>31Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.033329</td>\n",
        "      <td>0.015231</td>\n",
        "      <td>0.000824</td>\n",
        "      <td>0.000859</td>\n",
        "      <td>360</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.001</td>\n",
        "      <td>291</td>\n",
        "      <td>7</td>\n",
        "      <td>16</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>01Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.033329</td>\n",
        "      <td>0.030462</td>\n",
        "      <td>0.000824</td>\n",
        "      <td>0.000859</td>\n",
        "      <td>360</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.001</td>\n",
        "      <td>291</td>\n",
        "      <td>7</td>\n",
        "      <td>8</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE       rho  \\\n",
        "Scenario Phase                                                              \n",
        "Main     0th      Past  17Apr2020  01May2020   126529100  SIR-F  0.010953   \n",
        "         1st      Past  02May2020  14May2020   126529100  SIR-F  0.003969   \n",
        "         2nd      Past  15May2020  09Jun2020   126529100  SIR-F  0.004105   \n",
        "         3rd      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.016393   \n",
        "         4th      Past  02Jul2020  11Jul2020   126529100  SIR-F  0.039220   \n",
        "         5th      Past  12Jul2020  22Jul2020   126529100  SIR-F  0.032723   \n",
        "         6th      Past  23Jul2020  31Jul2020   126529100  SIR-F  0.033329   \n",
        "         7th    Future  01Aug2020  01Jan2021   126529100  SIR-F  0.033329   \n",
        "Medicine 0th      Past  17Apr2020  01May2020   126529100  SIR-F  0.010953   \n",
        "         1st      Past  02May2020  14May2020   126529100  SIR-F  0.003969   \n",
        "         2nd      Past  15May2020  09Jun2020   126529100  SIR-F  0.004105   \n",
        "         3rd      Past  10Jun2020  01Jul2020   126529100  SIR-F  0.016393   \n",
        "         4th      Past  02Jul2020  11Jul2020   126529100  SIR-F  0.039220   \n",
        "         5th      Past  12Jul2020  22Jul2020   126529100  SIR-F  0.032723   \n",
        "         6th      Past  23Jul2020  31Jul2020   126529100  SIR-F  0.033329   \n",
        "         7th    Future  01Aug2020  31Aug2020   126529100  SIR-F  0.033329   \n",
        "         8th    Future  01Sep2020  01Jan2021   126529100  SIR-F  0.033329   \n",
        "\n",
        "                   sigma     theta     kappa  tau    Rt  alpha1 [-]  \\\n",
        "Scenario Phase                                                        \n",
        "Main     0th    0.004857  0.047160  0.000079  360  2.11       0.047   \n",
        "         1st    0.014883  0.056732  0.000540  360  0.24       0.057   \n",
        "         2nd    0.020125  0.189291  0.000070  360  0.16       0.189   \n",
        "         3rd    0.018820  0.039140  0.000014  360  0.84       0.039   \n",
        "         4th    0.017591  0.037520  0.000533  360  2.08       0.038   \n",
        "         5th    0.018251  0.001114  0.000071  360  1.78       0.001   \n",
        "         6th    0.015231  0.000824  0.000859  360  2.07       0.001   \n",
        "         7th    0.015231  0.000824  0.000859  360  2.07       0.001   \n",
        "Medicine 0th    0.004857  0.047160  0.000079  360  2.11       0.047   \n",
        "         1st    0.014883  0.056732  0.000540  360  0.24       0.057   \n",
        "         2nd    0.020125  0.189291  0.000070  360  0.16       0.189   \n",
        "         3rd    0.018820  0.039140  0.000014  360  0.84       0.039   \n",
        "         4th    0.017591  0.037520  0.000533  360  2.08       0.038   \n",
        "         5th    0.018251  0.001114  0.000071  360  1.78       0.001   \n",
        "         6th    0.015231  0.000824  0.000859  360  2.07       0.001   \n",
        "         7th    0.015231  0.000824  0.000859  360  2.07       0.001   \n",
        "         8th    0.030462  0.000824  0.000859  360  1.06       0.001   \n",
        "\n",
        "                1/alpha2 [day]  1/beta [day]  1/gamma [day]      RMSLE Trials  \\\n",
        "Scenario Phase                                                                  \n",
        "Main     0th              3148            22             51   0.137476    163   \n",
        "         1st               462            62             16   0.159309    217   \n",
        "         2nd              3586            60             12   0.108743    375   \n",
        "         3rd             17542            15             13   0.123622    194   \n",
        "         4th               469             6             14  0.0495724    222   \n",
        "         5th              3514             7             13  0.0390454    221   \n",
        "         6th               291             7             16  0.0668274    552   \n",
        "         7th               291             7             16          -      -   \n",
        "Medicine 0th              3148            22             51   0.137476    163   \n",
        "         1st               462            62             16   0.159309    217   \n",
        "         2nd              3586            60             12   0.108743    375   \n",
        "         3rd             17542            15             13   0.123622    194   \n",
        "         4th               469             6             14  0.0495724    222   \n",
        "         5th              3514             7             13  0.0390454    221   \n",
        "         6th               291             7             16  0.0668274    552   \n",
        "         7th               291             7             16          -      -   \n",
        "         8th               291             7              8          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     0th     0 min 5 sec  \n",
        "         1st     0 min 5 sec  \n",
        "         2nd    0 min 10 sec  \n",
        "         3rd     0 min 5 sec  \n",
        "         4th     0 min 5 sec  \n",
        "         5th     0 min 5 sec  \n",
        "         6th    0 min 15 sec  \n",
        "         7th               -  \n",
        "Medicine 0th     0 min 5 sec  \n",
        "         1st     0 min 5 sec  \n",
        "         2nd    0 min 10 sec  \n",
        "         3rd     0 min 5 sec  \n",
        "         4th     0 min 5 sec  \n",
        "         5th     0 min 5 sec  \n",
        "         6th    0 min 15 sec  \n",
        "         7th               -  \n",
        "         8th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Susceptible</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>28Dec2020</td>\n",
        "      <td>38483</td>\n",
        "      <td>121525</td>\n",
        "      <td>1258323</td>\n",
        "      <td>125110768</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>29Dec2020</td>\n",
        "      <td>38915</td>\n",
        "      <td>122309</td>\n",
        "      <td>1273177</td>\n",
        "      <td>125094697</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>257</th>\n",
        "      <td>30Dec2020</td>\n",
        "      <td>39350</td>\n",
        "      <td>123094</td>\n",
        "      <td>1288128</td>\n",
        "      <td>125078526</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>258</th>\n",
        "      <td>31Dec2020</td>\n",
        "      <td>39788</td>\n",
        "      <td>123884</td>\n",
        "      <td>1303175</td>\n",
        "      <td>125062253</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>259</th>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>40063</td>\n",
        "      <td>124379</td>\n",
        "      <td>1312625</td>\n",
        "      <td>125052034</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Fatal  Infected  Recovered  Susceptible\n",
        "255  28Dec2020  38483    121525    1258323    125110768\n",
        "256  29Dec2020  38915    122309    1273177    125094697\n",
        "257  30Dec2020  39350    123094    1288128    125078526\n",
        "258  31Dec2020  39788    123884    1303175    125062253\n",
        "259  01Jan2021  40063    124379    1312625    125052034"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 01Jan2021</th>\n",
        "      <th>Fatal on 01Jan2021</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>20912134</td>\n",
        "      <td>22Dec2020</td>\n",
        "      <td>19745970</td>\n",
        "      <td>3093457</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>124379</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>124379</td>\n",
        "      <td>40063</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 01Jan2021  \\\n",
        "Main           20912134        22Dec2020               19745970   \n",
        "Medicine         124379        01Jan2021                 124379   \n",
        "\n",
        "          Fatal on 01Jan2021  \n",
        "Main                 3093457  \n",
        "Medicine               40063  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
