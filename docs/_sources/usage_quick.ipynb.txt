{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1597313350107"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.7.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "178407      2020-08-13          6          2       0    107808.0  COL   \n",
        "178408      2020-08-14          6          5       0    107808.0  COL   \n",
        "178409      2020-08-15          6          5       0    107808.0  COL   \n",
        "178410      2020-08-16          6          5       0    107808.0  COL   \n",
        "178411      2020-08-17          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "178407        Vichada       Colombia               3                  3   \n",
        "178408        Vichada       Colombia               3                  3   \n",
        "178409        Vichada       Colombia               3                  3   \n",
        "178410        Vichada       Colombia               3                  3   \n",
        "178411        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "178407 2020-08-13  Colombia  Vichada          6         4      0          2\n",
        "178408 2020-08-14  Colombia  Vichada          6         1      0          5\n",
        "178409 2020-08-15  Colombia  Vichada          6         1      0          5\n",
        "178410 2020-08-16  Colombia  Vichada          6         1      0          5\n",
        "178411 2020-08-17  Colombia  Vichada          6         1      0          5"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>16680</td>\n",
        "      <td>3816</td>\n",
        "      <td>338</td>\n",
        "      <td>12526</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>17069</td>\n",
        "      <td>3883</td>\n",
        "      <td>338</td>\n",
        "      <td>12848</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>17454</td>\n",
        "      <td>3842</td>\n",
        "      <td>338</td>\n",
        "      <td>13274</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>214</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>17714</td>\n",
        "      <td>3778</td>\n",
        "      <td>340</td>\n",
        "      <td>13596</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>215</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>17875</td>\n",
        "      <td>3939</td>\n",
        "      <td>340</td>\n",
        "      <td>13596</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "211 2020-08-13      16680      3816    338      12526\n",
        "212 2020-08-14      17069      3883    338      12848\n",
        "213 2020-08-15      17454      3842    338      13274\n",
        "214 2020-08-16      17714      3778    340      13596\n",
        "215 2020-08-17      17875      3939    340      13596"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>20933705</td>\n",
        "      <td>7257248</td>\n",
        "      <td>761051</td>\n",
        "      <td>12915406</td>\n",
        "      <td>0.018178</td>\n",
        "      <td>0.308484</td>\n",
        "      <td>0.055647</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>21149830</td>\n",
        "      <td>7177822</td>\n",
        "      <td>766182</td>\n",
        "      <td>13205826</td>\n",
        "      <td>0.018113</td>\n",
        "      <td>0.312197</td>\n",
        "      <td>0.054837</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>21451686</td>\n",
        "      <td>7319097</td>\n",
        "      <td>772478</td>\n",
        "      <td>13360111</td>\n",
        "      <td>0.018005</td>\n",
        "      <td>0.311400</td>\n",
        "      <td>0.054659</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>21651999</td>\n",
        "      <td>7285819</td>\n",
        "      <td>776182</td>\n",
        "      <td>13589998</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.313828</td>\n",
        "      <td>0.054028</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>21652276</td>\n",
        "      <td>7326171</td>\n",
        "      <td>776182</td>\n",
        "      <td>13549923</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.312898</td>\n",
        "      <td>0.054180</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-08-13   20933705   7257248  761051   12915406             0.018178   \n",
        "2020-08-14   21149830   7177822  766182   13205826             0.018113   \n",
        "2020-08-15   21451686   7319097  772478   13360111             0.018005   \n",
        "2020-08-16   21651999   7285819  776182   13589998             0.017924   \n",
        "2020-08-17   21652276   7326171  776182   13549923             0.017924   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-08-13                 0.308484                        0.055647  \n",
        "2020-08-14                 0.312197                        0.054837  \n",
        "2020-08-15                 0.311400                        0.054659  \n",
        "2020-08-16                 0.313828                        0.054028  \n",
        "2020-08-17                 0.312898                        0.054180  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>52534</td>\n",
        "      <td>15344</td>\n",
        "      <td>1076</td>\n",
        "      <td>36114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>53894</td>\n",
        "      <td>15338</td>\n",
        "      <td>1085</td>\n",
        "      <td>37471</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>55121</td>\n",
        "      <td>15097</td>\n",
        "      <td>1092</td>\n",
        "      <td>38932</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>56140</td>\n",
        "      <td>14962</td>\n",
        "      <td>1103</td>\n",
        "      <td>40075</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>226</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>56416</td>\n",
        "      <td>55313</td>\n",
        "      <td>1103</td>\n",
        "      <td>39561</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "222 2020-08-13      52534     15344   1076      36114\n",
        "223 2020-08-14      53894     15338   1085      37471\n",
        "224 2020-08-15      55121     15097   1092      38932\n",
        "225 2020-08-16      56140     14962   1103      40075\n",
        "226 2020-08-17      56416     55313   1103      39561"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>51147</td>\n",
        "      <td>13950</td>\n",
        "      <td>1063</td>\n",
        "      <td>36134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>185</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>52217</td>\n",
        "      <td>13665</td>\n",
        "      <td>1073</td>\n",
        "      <td>37479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>186</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>53577</td>\n",
        "      <td>13547</td>\n",
        "      <td>1085</td>\n",
        "      <td>38945</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>187</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>54714</td>\n",
        "      <td>13546</td>\n",
        "      <td>1088</td>\n",
        "      <td>40080</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>188</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>55667</td>\n",
        "      <td>13372</td>\n",
        "      <td>1099</td>\n",
        "      <td>41196</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "184 2020-08-13      51147     13950   1063      36134\n",
        "185 2020-08-14      52217     13665   1073      37479\n",
        "186 2020-08-15      53577     13547   1085      38945\n",
        "187 2020-08-16      54714     13546   1088      40080\n",
        "188 2020-08-17      55667     13372   1099      41196"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "178407      2020-08-13          6          2       0    107808.0  COL   \n",
        "178408      2020-08-14          6          5       0    107808.0  COL   \n",
        "178409      2020-08-15          6          5       0    107808.0  COL   \n",
        "178410      2020-08-16          6          5       0    107808.0  COL   \n",
        "178411      2020-08-17          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "178407        Vichada       Colombia               3                  3   \n",
        "178408        Vichada       Colombia               3                  3   \n",
        "178409        Vichada       Colombia               3                  3   \n",
        "178410        Vichada       Colombia               3                  3   \n",
        "178411        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>174951</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174952</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174953</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174954</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174955</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "174951  COL  Colombia  Vichada 2020-08-13      107808\n",
        "174952  COL  Colombia  Vichada 2020-08-14      107808\n",
        "174953  COL  Colombia  Vichada 2020-08-15      107808\n",
        "174954  COL  Colombia  Vichada 2020-08-16      107808\n",
        "174955  COL  Colombia  Vichada 2020-08-17      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "178407      2020-08-13          6          2       0    107808.0  COL   \n",
        "178408      2020-08-14          6          5       0    107808.0  COL   \n",
        "178409      2020-08-15          6          5       0    107808.0  COL   \n",
        "178410      2020-08-16          6          5       0    107808.0  COL   \n",
        "178411      2020-08-17          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "178407        Vichada       Colombia               3                  3   \n",
        "178408        Vichada       Colombia               3                  3   \n",
        "178409        Vichada       Colombia               3                  3   \n",
        "178410        Vichada       Colombia               3                  3   \n",
        "178411        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "178407 2020-08-13  Colombia  COL               3                  3   \n",
        "178408 2020-08-14  Colombia  COL               3                  3   \n",
        "178409 2020-08-15  Colombia  COL               3                  3   \n",
        "178410 2020-08-16  Colombia  COL               3                  3   \n",
        "178411 2020-08-17  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>226</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "225 2020-08-16               1                  1              1   \n",
        "226 2020-08-17               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "225                        0                  0                       1   \n",
        "226                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "225                               1                                    3   \n",
        "226                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  \n",
        "225                      2               2                1             30.56  \n",
        "226                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>226</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "225 2020-08-16               1                  1              1   \n",
        "226 2020-08-17               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "225                        0                  0                       1   \n",
        "226                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "225                               1                                    3   \n",
        "226                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  \n",
        "225                      2               2                1             30.56  \n",
        "226                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>51147</td>\n",
        "      <td>13950</td>\n",
        "      <td>1063</td>\n",
        "      <td>36134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>185</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>52217</td>\n",
        "      <td>13665</td>\n",
        "      <td>1073</td>\n",
        "      <td>37479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>186</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>53577</td>\n",
        "      <td>13547</td>\n",
        "      <td>1085</td>\n",
        "      <td>38945</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>187</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>54714</td>\n",
        "      <td>13546</td>\n",
        "      <td>1088</td>\n",
        "      <td>40080</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>188</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>55667</td>\n",
        "      <td>13372</td>\n",
        "      <td>1099</td>\n",
        "      <td>41196</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "184 2020-08-13      51147     13950   1063      36134\n",
        "185 2020-08-14      52217     13665   1073      37479\n",
        "186 2020-08-15      53577     13547   1085      38945\n",
        "187 2020-08-16      54714     13546   1088      40080\n",
        "188 2020-08-17      55667     13372   1099      41196"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  21Apr2020  01May2020   126529100\n",
        "2nd  Past  02May2020  02Jul2020   126529100\n",
        "3rd  Past  03Jul2020  16Jul2020   126529100\n",
        "4th  Past  17Jul2020  25Jul2020   126529100\n",
        "5th  Past  26Jul2020  04Aug2020   126529100\n",
        "6th  Past  05Aug2020  17Aug2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase (05Aug2020 - 17Aug2020): finished 1695 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase (17Jul2020 - 25Jul2020): finished  233 trials in 0 min  5 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase (03Jul2020 - 16Jul2020): finished 1614 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase (02May2020 - 02Jul2020): finished 1566 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase (21Apr2020 - 01May2020): finished 1604 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase (26Jul2020 - 04Aug2020): finished 1570 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 2 min  6 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.059879</td>\n",
        "      <td>0.000473</td>\n",
        "      <td>0.035801</td>\n",
        "      <td>0.026611</td>\n",
        "      <td>1440</td>\n",
        "      <td>2114</td>\n",
        "      <td>37</td>\n",
        "      <td>27</td>\n",
        "      <td>0.060</td>\n",
        "      <td>0.130628</td>\n",
        "      <td>1604</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.23</td>\n",
        "      <td>0.149533</td>\n",
        "      <td>0.000132</td>\n",
        "      <td>0.019111</td>\n",
        "      <td>0.071759</td>\n",
        "      <td>1440</td>\n",
        "      <td>7583</td>\n",
        "      <td>13</td>\n",
        "      <td>52</td>\n",
        "      <td>0.150</td>\n",
        "      <td>0.640597</td>\n",
        "      <td>1566</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.000826</td>\n",
        "      <td>0.000225</td>\n",
        "      <td>0.146909</td>\n",
        "      <td>0.069205</td>\n",
        "      <td>1440</td>\n",
        "      <td>4442</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.036141</td>\n",
        "      <td>1614</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.000884</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.143342</td>\n",
        "      <td>0.069143</td>\n",
        "      <td>1440</td>\n",
        "      <td>14040</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.021291</td>\n",
        "      <td>233</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.82</td>\n",
        "      <td>0.000902</td>\n",
        "      <td>0.000108</td>\n",
        "      <td>0.129400</td>\n",
        "      <td>0.070824</td>\n",
        "      <td>1440</td>\n",
        "      <td>9281</td>\n",
        "      <td>14</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.029787</td>\n",
        "      <td>1570</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.001228</td>\n",
        "      <td>0.000218</td>\n",
        "      <td>0.091922</td>\n",
        "      <td>0.080687</td>\n",
        "      <td>1440</td>\n",
        "      <td>4578</td>\n",
        "      <td>12</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.040859</td>\n",
        "      <td>1695</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE    Rt     theta     kappa  \\\n",
        "1st  Past  21Apr2020  01May2020   126529100  SIR-F  1.24  0.059879  0.000473   \n",
        "2nd  Past  02May2020  02Jul2020   126529100  SIR-F  0.23  0.149533  0.000132   \n",
        "3rd  Past  03Jul2020  16Jul2020   126529100  SIR-F  2.11  0.000826  0.000225   \n",
        "4th  Past  17Jul2020  25Jul2020   126529100  SIR-F  2.07  0.000884  0.000071   \n",
        "5th  Past  26Jul2020  04Aug2020   126529100  SIR-F  1.82  0.000902  0.000108   \n",
        "6th  Past  05Aug2020  17Aug2020   126529100  SIR-F  1.13  0.001228  0.000218   \n",
        "\n",
        "          rho     sigma   tau  1/alpha2 [day]  1/gamma [day]  1/beta [day]  \\\n",
        "1st  0.035801  0.026611  1440            2114             37            27   \n",
        "2nd  0.019111  0.071759  1440            7583             13            52   \n",
        "3rd  0.146909  0.069205  1440            4442             14             6   \n",
        "4th  0.143342  0.069143  1440           14040             14             6   \n",
        "5th  0.129400  0.070824  1440            9281             14             7   \n",
        "6th  0.091922  0.080687  1440            4578             12            10   \n",
        "\n",
        "     alpha1 [-]     RMSLE  Trials       Runtime  \n",
        "1st       0.060  0.130628    1604  1 min  0 sec  \n",
        "2nd       0.150  0.640597    1566  1 min  0 sec  \n",
        "3rd       0.001  0.036141    1614  1 min  0 sec  \n",
        "4th       0.001  0.021291     233  0 min  5 sec  \n",
        "5th       0.001  0.029787    1570  1 min  0 sec  \n",
        "6th       0.001  0.040859    1695  1 min  0 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "2.07"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.533822</td>\n",
        "      <td>4.103506</td>\n",
        "      <td>4.003872</td>\n",
        "      <td>3.614436</td>\n",
        "      <td>2.567599</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>2.696619</td>\n",
        "      <td>2.600618</td>\n",
        "      <td>2.598318</td>\n",
        "      <td>2.661478</td>\n",
        "      <td>3.032100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       1st       2nd       3rd       4th       5th       6th\n",
        "rho    1.0  0.533822  4.103506  4.003872  3.614436  2.567599\n",
        "sigma  1.0  2.696619  2.600618  2.598318  2.661478  3.032100"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>1.24</td>\n",
        "      <td>0.23</td>\n",
        "      <td>2.11</td>\n",
        "      <td>2.07</td>\n",
        "      <td>1.82</td>\n",
        "      <td>1.13</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "     1st   2nd   3rd   4th   5th   6th\n",
        "Rt  1.24  0.23  2.11  2.07  1.82  1.13"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>252</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>435253</td>\n",
        "      <td>2444</td>\n",
        "      <td>58177</td>\n",
        "      <td>374632</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>253</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>440612</td>\n",
        "      <td>2464</td>\n",
        "      <td>58797</td>\n",
        "      <td>379351</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>254</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>446026</td>\n",
        "      <td>2483</td>\n",
        "      <td>59422</td>\n",
        "      <td>384121</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>451498</td>\n",
        "      <td>2503</td>\n",
        "      <td>60054</td>\n",
        "      <td>388941</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>457027</td>\n",
        "      <td>2523</td>\n",
        "      <td>60692</td>\n",
        "      <td>393812</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "252 2020-12-29     435253   2444     58177     374632\n",
        "253 2020-12-30     440612   2464     58797     379351\n",
        "254 2020-12-31     446026   2483     59422     384121\n",
        "255 2021-01-01     451498   2503     60054     388941\n",
        "256 2021-01-02     457027   2523     60692     393812"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.08068664573753147"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.16137329147506294"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"7\" valign=\"top\">Main</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.059879</td>\n",
        "      <td>0.000473</td>\n",
        "      <td>0.035801</td>\n",
        "      <td>0.026611</td>\n",
        "      <td>1440</td>\n",
        "      <td>2114</td>\n",
        "      <td>37</td>\n",
        "      <td>27</td>\n",
        "      <td>0.060</td>\n",
        "      <td>0.130628</td>\n",
        "      <td>1604</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.23</td>\n",
        "      <td>0.149533</td>\n",
        "      <td>0.000132</td>\n",
        "      <td>0.019111</td>\n",
        "      <td>0.071759</td>\n",
        "      <td>1440</td>\n",
        "      <td>7583</td>\n",
        "      <td>13</td>\n",
        "      <td>52</td>\n",
        "      <td>0.150</td>\n",
        "      <td>0.640597</td>\n",
        "      <td>1566</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.000826</td>\n",
        "      <td>0.000225</td>\n",
        "      <td>0.146909</td>\n",
        "      <td>0.069205</td>\n",
        "      <td>1440</td>\n",
        "      <td>4442</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0361409</td>\n",
        "      <td>1614</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.000884</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.143342</td>\n",
        "      <td>0.069143</td>\n",
        "      <td>1440</td>\n",
        "      <td>14040</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0212907</td>\n",
        "      <td>233</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.82</td>\n",
        "      <td>0.000902</td>\n",
        "      <td>0.000108</td>\n",
        "      <td>0.129400</td>\n",
        "      <td>0.070824</td>\n",
        "      <td>1440</td>\n",
        "      <td>9281</td>\n",
        "      <td>14</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0297866</td>\n",
        "      <td>1570</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.001228</td>\n",
        "      <td>0.000218</td>\n",
        "      <td>0.091922</td>\n",
        "      <td>0.080687</td>\n",
        "      <td>1440</td>\n",
        "      <td>4578</td>\n",
        "      <td>12</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0408592</td>\n",
        "      <td>1695</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.001228</td>\n",
        "      <td>0.000218</td>\n",
        "      <td>0.091922</td>\n",
        "      <td>0.080687</td>\n",
        "      <td>1440</td>\n",
        "      <td>4578</td>\n",
        "      <td>12</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Medicine</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.24</td>\n",
        "      <td>0.059879</td>\n",
        "      <td>0.000473</td>\n",
        "      <td>0.035801</td>\n",
        "      <td>0.026611</td>\n",
        "      <td>1440</td>\n",
        "      <td>2114</td>\n",
        "      <td>37</td>\n",
        "      <td>27</td>\n",
        "      <td>0.060</td>\n",
        "      <td>0.130628</td>\n",
        "      <td>1604</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.23</td>\n",
        "      <td>0.149533</td>\n",
        "      <td>0.000132</td>\n",
        "      <td>0.019111</td>\n",
        "      <td>0.071759</td>\n",
        "      <td>1440</td>\n",
        "      <td>7583</td>\n",
        "      <td>13</td>\n",
        "      <td>52</td>\n",
        "      <td>0.150</td>\n",
        "      <td>0.640597</td>\n",
        "      <td>1566</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.000826</td>\n",
        "      <td>0.000225</td>\n",
        "      <td>0.146909</td>\n",
        "      <td>0.069205</td>\n",
        "      <td>1440</td>\n",
        "      <td>4442</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0361409</td>\n",
        "      <td>1614</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.000884</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.143342</td>\n",
        "      <td>0.069143</td>\n",
        "      <td>1440</td>\n",
        "      <td>14040</td>\n",
        "      <td>14</td>\n",
        "      <td>6</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0212907</td>\n",
        "      <td>233</td>\n",
        "      <td>0 min  5 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.82</td>\n",
        "      <td>0.000902</td>\n",
        "      <td>0.000108</td>\n",
        "      <td>0.129400</td>\n",
        "      <td>0.070824</td>\n",
        "      <td>1440</td>\n",
        "      <td>9281</td>\n",
        "      <td>14</td>\n",
        "      <td>7</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0297866</td>\n",
        "      <td>1570</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.001228</td>\n",
        "      <td>0.000218</td>\n",
        "      <td>0.091922</td>\n",
        "      <td>0.080687</td>\n",
        "      <td>1440</td>\n",
        "      <td>4578</td>\n",
        "      <td>12</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>0.0408592</td>\n",
        "      <td>1695</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.13</td>\n",
        "      <td>0.001228</td>\n",
        "      <td>0.000218</td>\n",
        "      <td>0.091922</td>\n",
        "      <td>0.080687</td>\n",
        "      <td>1440</td>\n",
        "      <td>4578</td>\n",
        "      <td>12</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.57</td>\n",
        "      <td>0.001228</td>\n",
        "      <td>0.000218</td>\n",
        "      <td>0.091922</td>\n",
        "      <td>0.161373</td>\n",
        "      <td>1440</td>\n",
        "      <td>4578</td>\n",
        "      <td>6</td>\n",
        "      <td>10</td>\n",
        "      <td>0.001</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE    Rt  \\\n",
        "Scenario Phase                                                          \n",
        "Main     1st      Past  21Apr2020  01May2020   126529100  SIR-F  1.24   \n",
        "         2nd      Past  02May2020  02Jul2020   126529100  SIR-F  0.23   \n",
        "         3rd      Past  03Jul2020  16Jul2020   126529100  SIR-F  2.11   \n",
        "         4th      Past  17Jul2020  25Jul2020   126529100  SIR-F  2.07   \n",
        "         5th      Past  26Jul2020  04Aug2020   126529100  SIR-F  1.82   \n",
        "         6th      Past  05Aug2020  17Aug2020   126529100  SIR-F  1.13   \n",
        "         7th    Future  18Aug2020  01Jan2021   126529100  SIR-F  1.13   \n",
        "Medicine 1st      Past  21Apr2020  01May2020   126529100  SIR-F  1.24   \n",
        "         2nd      Past  02May2020  02Jul2020   126529100  SIR-F  0.23   \n",
        "         3rd      Past  03Jul2020  16Jul2020   126529100  SIR-F  2.11   \n",
        "         4th      Past  17Jul2020  25Jul2020   126529100  SIR-F  2.07   \n",
        "         5th      Past  26Jul2020  04Aug2020   126529100  SIR-F  1.82   \n",
        "         6th      Past  05Aug2020  17Aug2020   126529100  SIR-F  1.13   \n",
        "         7th    Future  18Aug2020  17Sep2020   126529100  SIR-F  1.13   \n",
        "         8th    Future  18Sep2020  01Jan2021   126529100  SIR-F  0.57   \n",
        "\n",
        "                   theta     kappa       rho     sigma   tau  1/alpha2 [day]  \\\n",
        "Scenario Phase                                                                 \n",
        "Main     1st    0.059879  0.000473  0.035801  0.026611  1440            2114   \n",
        "         2nd    0.149533  0.000132  0.019111  0.071759  1440            7583   \n",
        "         3rd    0.000826  0.000225  0.146909  0.069205  1440            4442   \n",
        "         4th    0.000884  0.000071  0.143342  0.069143  1440           14040   \n",
        "         5th    0.000902  0.000108  0.129400  0.070824  1440            9281   \n",
        "         6th    0.001228  0.000218  0.091922  0.080687  1440            4578   \n",
        "         7th    0.001228  0.000218  0.091922  0.080687  1440            4578   \n",
        "Medicine 1st    0.059879  0.000473  0.035801  0.026611  1440            2114   \n",
        "         2nd    0.149533  0.000132  0.019111  0.071759  1440            7583   \n",
        "         3rd    0.000826  0.000225  0.146909  0.069205  1440            4442   \n",
        "         4th    0.000884  0.000071  0.143342  0.069143  1440           14040   \n",
        "         5th    0.000902  0.000108  0.129400  0.070824  1440            9281   \n",
        "         6th    0.001228  0.000218  0.091922  0.080687  1440            4578   \n",
        "         7th    0.001228  0.000218  0.091922  0.080687  1440            4578   \n",
        "         8th    0.001228  0.000218  0.091922  0.161373  1440            4578   \n",
        "\n",
        "                1/gamma [day]  1/beta [day]  alpha1 [-]      RMSLE Trials  \\\n",
        "Scenario Phase                                                              \n",
        "Main     1st               37            27       0.060   0.130628   1604   \n",
        "         2nd               13            52       0.150   0.640597   1566   \n",
        "         3rd               14             6       0.001  0.0361409   1614   \n",
        "         4th               14             6       0.001  0.0212907    233   \n",
        "         5th               14             7       0.001  0.0297866   1570   \n",
        "         6th               12            10       0.001  0.0408592   1695   \n",
        "         7th               12            10       0.001          -      -   \n",
        "Medicine 1st               37            27       0.060   0.130628   1604   \n",
        "         2nd               13            52       0.150   0.640597   1566   \n",
        "         3rd               14             6       0.001  0.0361409   1614   \n",
        "         4th               14             6       0.001  0.0212907    233   \n",
        "         5th               14             7       0.001  0.0297866   1570   \n",
        "         6th               12            10       0.001  0.0408592   1695   \n",
        "         7th               12            10       0.001          -      -   \n",
        "         8th                6            10       0.001          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    1 min  0 sec  \n",
        "         4th    0 min  5 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th               -  \n",
        "Medicine 1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    1 min  0 sec  \n",
        "         4th    0 min  5 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th               -  \n",
        "         8th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>252</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>129301</td>\n",
        "      <td>1340</td>\n",
        "      <td>16</td>\n",
        "      <td>127945</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>253</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>129302</td>\n",
        "      <td>1340</td>\n",
        "      <td>15</td>\n",
        "      <td>127947</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>254</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>129303</td>\n",
        "      <td>1340</td>\n",
        "      <td>14</td>\n",
        "      <td>127949</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>129304</td>\n",
        "      <td>1340</td>\n",
        "      <td>13</td>\n",
        "      <td>127951</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>129305</td>\n",
        "      <td>1340</td>\n",
        "      <td>12</td>\n",
        "      <td>127953</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "252 2020-12-29     129301   1340        16     127945\n",
        "253 2020-12-30     129302   1340        15     127947\n",
        "254 2020-12-31     129303   1340        14     127949\n",
        "255 2021-01-01     129304   1340        13     127951\n",
        "256 2021-01-02     129305   1340        12     127953"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 02Jan2021</th>\n",
        "      <th>Fatal on 02Jan2021</th>\n",
        "      <th>8th_Rt</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>60692</td>\n",
        "      <td>02Jan2021</td>\n",
        "      <td>60692</td>\n",
        "      <td>2523</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>19473</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>12</td>\n",
        "      <td>1340</td>\n",
        "      <td>0.57</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 02Jan2021  \\\n",
        "Main              60692        02Jan2021                  60692   \n",
        "Medicine          19473        18Sep2020                     12   \n",
        "\n",
        "          Fatal on 02Jan2021 8th_Rt  \n",
        "Main                    2523      -  \n",
        "Medicine                1340   0.57  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
