{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('covid19-sir': pipenv)",
   "name": "python_defaultSpec_1597313350107"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": 3
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Usage (quick version)"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import warnings"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.7.0'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically.\n",
      "Download the datasets to \"input\" direcotry and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=True)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=True)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Detailed citaition list:"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The number of cases (JHU style)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Australian Bureau of Statistics (2019), https://www.abs.gov.au/\n",
        "CIA - Central Intelligence Agency (2018), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2019), https://www.cia.gov/\n",
        "CIA - Central Intelligence Agency (2020), https://www.cia.gov/\n",
        "COVID-19 Peru Data Repository (2019), https://github.com/\n",
        "COVID-19 Peru Data Repository (2020), https://github.com/\n",
        "COVID-19 Turkey API (2020), https://github.com/\n",
        "COVID-19_plus_Russia GitHub repository (2020), https://github.com/\n",
        "COVID19-India API (2020), https://www.covid19india.org/\n",
        "Canada's National Statistical Agency (2020), https://www150.statcan.gc.ca/\n",
        "Centre of Excellence in Economics and Data Science, University of Milano (2020), https://github.com/\n",
        "Covid19data.com.au (2020), https://github.com/\n",
        "Czech Statistical Office (2018), https://www.czso.cz/\n",
        "Data Science for Social Impact research group, University of Pretoria (2020), https://github.com/\n",
        "Epistat, Belgian Infectious Diseases (2020), https://epistat.sciensano.be/\n",
        "Eurostat (2019), https://ec.europa.eu/\n",
        "GADM (2019), https://public.opendatasoft.com/\n",
        "Geloky (2019), https://geloky.com/\n",
        "Istituto Nazionale di Statistica, Italia (2018), https://www.istat.it/\n",
        "Japan COVID-19 Bulletin Board (2020), https://github.com/\n",
        "Johns Hopkins Center for Systems Science and Engineering (2020), https://github.com/\n",
        "Ministerio de Salud y Protecci\u00c3\u00b3n Social de Colombia (2020), https://www.datos.gov.co/\n",
        "Ministero della Salute, Italia (2020), https://github.com/\n",
        "Ministery of Health of Czech Republic (2020), https://onemocneni-aktualne.mzcr.cz/\n",
        "Ministery of Health, Slovenia (2020), https://www.gov.si/\n",
        "Ministry of Public Health and Population of Haiti (2020), https://proxy.hxlstandard.org/\n",
        "National Bureau of Statistics of China NBS (2018), http://data.stats.gov.cn/\n",
        "Open Government Data, Austria (2020), https://info.gesundheitsministerium.at/\n",
        "Open Government Data, Latvia (2020), https://data.gov.lv/\n",
        "Open Government Data, Liechtenstein (2020), https://github.com/\n",
        "Open Government Data, Switzerland (2020), https://github.com/\n",
        "Open Government Data, United Kingdom (2020), https://coronavirus.data.gov.uk/\n",
        "OpenCOVID19 France (2020), https://github.com/\n",
        "Our World in Data (2020), https://github.com/\n",
        "Hale Thomas, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n",
        "Public Health Agency, Sweden (2020), https://oppnadata.se/\n",
        "Public Health Infobase, Government of Canada (2020), https://health-infobase.canada.ca/\n",
        "Robert Koch-Institut (2020), https://npgeo-corona-npgeo-de.hub.arcgis.com/\n",
        "Statbel, Belgium in Figures (2019), https://statbel.fgov.be/\n",
        "Swiss Federal Statistical Office (2018), https://www.bfs.admin.ch/\n",
        "The COVID Tracking Project (2020), https://covidtracking.com/\n",
        "The New York Times (2020), https://github.com/\n",
        "Wikipedia (2006), https://it.wikipedia.org/\n",
        "Wikipedia (2010), https://en.wikipedia.org/\n",
        "Wikipedia (2010), https://it.wikipedia.org/\n",
        "Wikipedia (2013), https://en.wikipedia.org/\n",
        "Wikipedia (2015), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://en.wikipedia.org/\n",
        "Wikipedia (2016), https://it.wikipedia.org/\n",
        "Wikipedia (2017), https://www.wikipedia.org/\n",
        "Wikipedia (2018), https://en.wikipedia.org/\n",
        "Wikipedia (2018), https://www.wikipedia.org/\n",
        "Wikipedia (2019), https://en.wikipedia.org/\n",
        "Wikipedia (2019), https://www.wikipedia.org/\n",
        "Wikipedia (2020), https://en.wikipedia.org/\n",
        "Wikipedia (2020), https://it.wikipedia.org/\n",
        "Wikipedia (2020), https://www.wikipedia.org/\n",
        "World Bank Open Data (2018), https://data.worldbank.org/\n",
        "World Health Organization (2020), https://covid19.who.int/\n",
        "Worldometer (2018), https://www.worldometers.info/\n",
        "Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "178407      2020-08-13          6          2       0    107808.0  COL   \n",
        "178408      2020-08-14          6          5       0    107808.0  COL   \n",
        "178409      2020-08-15          6          5       0    107808.0  COL   \n",
        "178410      2020-08-16          6          5       0    107808.0  COL   \n",
        "178411      2020-08-17          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "178407        Vichada       Colombia               3                  3   \n",
        "178408        Vichada       Colombia               3                  3   \n",
        "178409        Vichada       Colombia               3                  3   \n",
        "178410        Vichada       Colombia               3                  3   \n",
        "178411        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>6</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "             Date   Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "178407 2020-08-13  Colombia  Vichada          6         4      0          2\n",
        "178408 2020-08-14  Colombia  Vichada          6         1      0          5\n",
        "178409 2020-08-15  Colombia  Vichada          6         1      0          5\n",
        "178410 2020-08-16  Colombia  Vichada          6         1      0          5\n",
        "178411 2020-08-17  Colombia  Vichada          6         1      0          5"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "jhu_data.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>211</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>16680</td>\n",
        "      <td>3816</td>\n",
        "      <td>338</td>\n",
        "      <td>12526</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>212</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>17069</td>\n",
        "      <td>3883</td>\n",
        "      <td>338</td>\n",
        "      <td>12848</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>213</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>17454</td>\n",
        "      <td>3842</td>\n",
        "      <td>338</td>\n",
        "      <td>13274</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>214</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>17714</td>\n",
        "      <td>3778</td>\n",
        "      <td>340</td>\n",
        "      <td>13596</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>215</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>17875</td>\n",
        "      <td>3775</td>\n",
        "      <td>341</td>\n",
        "      <td>13759</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "211 2020-08-13      16680      3816    338      12526\n",
        "212 2020-08-14      17069      3883    338      12848\n",
        "213 2020-08-15      17454      3842    338      13274\n",
        "214 2020-08-16      17714      3778    340      13596\n",
        "215 2020-08-17      17875      3775    341      13759"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Total\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-08-13</th>\n",
        "      <td>20933705</td>\n",
        "      <td>7257248</td>\n",
        "      <td>761051</td>\n",
        "      <td>12915406</td>\n",
        "      <td>0.018178</td>\n",
        "      <td>0.308484</td>\n",
        "      <td>0.055647</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-14</th>\n",
        "      <td>21149830</td>\n",
        "      <td>7177822</td>\n",
        "      <td>766182</td>\n",
        "      <td>13205826</td>\n",
        "      <td>0.018113</td>\n",
        "      <td>0.312197</td>\n",
        "      <td>0.054837</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-15</th>\n",
        "      <td>21451686</td>\n",
        "      <td>7319097</td>\n",
        "      <td>772478</td>\n",
        "      <td>13360111</td>\n",
        "      <td>0.018005</td>\n",
        "      <td>0.311400</td>\n",
        "      <td>0.054659</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-16</th>\n",
        "      <td>21651999</td>\n",
        "      <td>7285819</td>\n",
        "      <td>776182</td>\n",
        "      <td>13589998</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.313828</td>\n",
        "      <td>0.054028</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-08-17</th>\n",
        "      <td>21652276</td>\n",
        "      <td>7326171</td>\n",
        "      <td>776182</td>\n",
        "      <td>13549923</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.312898</td>\n",
        "      <td>0.054180</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Confirmed  Infected   Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                      \n",
        "2020-08-13   20933705   7257248  761051   12915406             0.018178   \n",
        "2020-08-14   21149830   7177822  766182   13205826             0.018113   \n",
        "2020-08-15   21451686   7319097  772478   13360111             0.018005   \n",
        "2020-08-16   21651999   7285819  776182   13589998             0.017924   \n",
        "2020-08-17   21652276   7326171  776182   13549923             0.017924   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-08-13                 0.308484                        0.055647  \n",
        "2020-08-14                 0.312197                        0.054837  \n",
        "2020-08-15                 0.311400                        0.054659  \n",
        "2020-08-16                 0.313828                        0.054028  \n",
        "2020-08-17                 0.312898                        0.054180  "
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### (Optional) Replace the dataset in Japan\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>52534</td>\n",
        "      <td>15344</td>\n",
        "      <td>1076</td>\n",
        "      <td>36114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>53894</td>\n",
        "      <td>15338</td>\n",
        "      <td>1085</td>\n",
        "      <td>37471</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>55121</td>\n",
        "      <td>15097</td>\n",
        "      <td>1092</td>\n",
        "      <td>38932</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>56140</td>\n",
        "      <td>14962</td>\n",
        "      <td>1103</td>\n",
        "      <td>40075</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>226</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>56416</td>\n",
        "      <td>55313</td>\n",
        "      <td>1117</td>\n",
        "      <td>40633</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "222 2020-08-13      52534     15344   1076      36114\n",
        "223 2020-08-14      53894     15338   1085      37471\n",
        "224 2020-08-15      55121     15097   1092      38932\n",
        "225 2020-08-16      56140     14962   1103      40075\n",
        "226 2020-08-17      56416     55313   1117      40633"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "japan_data = data_loader.japan()\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.replace(japan_data)\n",
      "jhu_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>51147</td>\n",
        "      <td>13950</td>\n",
        "      <td>1063</td>\n",
        "      <td>36134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>185</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>52217</td>\n",
        "      <td>13665</td>\n",
        "      <td>1073</td>\n",
        "      <td>37479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>186</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>53577</td>\n",
        "      <td>13547</td>\n",
        "      <td>1085</td>\n",
        "      <td>38945</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>187</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>54714</td>\n",
        "      <td>13546</td>\n",
        "      <td>1088</td>\n",
        "      <td>40080</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>188</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>55667</td>\n",
        "      <td>13372</td>\n",
        "      <td>1099</td>\n",
        "      <td>41196</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "184 2020-08-13      51147     13950   1063      36134\n",
        "185 2020-08-14      52217     13665   1073      37479\n",
        "186 2020-08-15      53577     13547   1085      38945\n",
        "187 2020-08-16      54714     13546   1088      40080\n",
        "188 2020-08-17      55667     13372   1099      41196"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Population in each country"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "178407      2020-08-13          6          2       0    107808.0  COL   \n",
        "178408      2020-08-14          6          5       0    107808.0  COL   \n",
        "178409      2020-08-15          6          5       0    107808.0  COL   \n",
        "178410      2020-08-16          6          5       0    107808.0  COL   \n",
        "178411      2020-08-17          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "178407        Vichada       Colombia               3                  3   \n",
        "178408        Vichada       Colombia               3                  3   \n",
        "178409        Vichada       Colombia               3                  3   \n",
        "178410        Vichada       Colombia               3                  3   \n",
        "178411        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>174951</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174952</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174953</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174954</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>174955</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "174951  COL  Colombia  Vichada 2020-08-13      107808\n",
        "174952  COL  Colombia  Vichada 2020-08-14      107808\n",
        "174953  COL  Colombia  Vichada 2020-08-15      107808\n",
        "174954  COL  Colombia  Vichada 2020-08-16      107808\n",
        "174955  COL  Colombia  Vichada 2020-08-17      107808"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "population_data.value(\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "14002973"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Government Response Tracker (OxCGRT)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Working paper, doi: 10.13140/RG.2.2.11649.81763.\n",
        "We can get Citation list of primary sources with DataLoader(...).covid19dh_citation"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>workplace_closing</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>6</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>6</td>\n",
        "      <td>5</td>\n",
        "      <td>0</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "       ObservationDate  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "178407      2020-08-13          6          2       0    107808.0  COL   \n",
        "178408      2020-08-14          6          5       0    107808.0  COL   \n",
        "178409      2020-08-15          6          5       0    107808.0  COL   \n",
        "178410      2020-08-16          6          5       0    107808.0  COL   \n",
        "178411      2020-08-17          6          5       0    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  workplace_closing  \\\n",
        "178407        Vichada       Colombia               3                  3   \n",
        "178408        Vichada       Colombia               3                  3   \n",
        "178409        Vichada       Colombia               3                  3   \n",
        "178410        Vichada       Colombia               3                  3   \n",
        "178411        Vichada       Colombia               3                  3   \n",
        "\n",
        "        cancel_events  gatherings_restrictions  transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        stay_home_restrictions  internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        international_movement_restrictions  information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        testing_policy  contact_tracing  stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>178407</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178408</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178409</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178410</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>178411</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>87.04</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "178407 2020-08-13  Colombia  COL               3                  3   \n",
        "178408 2020-08-14  Colombia  COL               3                  3   \n",
        "178409 2020-08-15  Colombia  COL               3                  3   \n",
        "178410 2020-08-16  Colombia  COL               3                  3   \n",
        "178411 2020-08-17  Colombia  COL               3                  3   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "178407              2                        4                  1   \n",
        "178408              2                        4                  1   \n",
        "178409              2                        4                  1   \n",
        "178410              2                        4                  1   \n",
        "178411              2                        4                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "178407                       2                               2   \n",
        "178408                       2                               2   \n",
        "178409                       2                               2   \n",
        "178410                       2                               2   \n",
        "178411                       2                               2   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "178407                                    4                      2   \n",
        "178408                                    4                      2   \n",
        "178409                                    4                      2   \n",
        "178410                                    4                      2   \n",
        "178411                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "178407               2                2             87.04  \n",
        "178408               2                2             87.04  \n",
        "178409               2                2             87.04  \n",
        "178410               2                2             87.04  \n",
        "178411               2                2             87.04  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>226</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "225 2020-08-16               1                  1              1   \n",
        "226 2020-08-17               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "225                        0                  0                       1   \n",
        "226                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "225                               1                                    3   \n",
        "226                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  \n",
        "225                      2               2                1             30.56  \n",
        "226                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country (using ISO3 code)\n",
      "oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>222</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>223</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>224</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>225</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>226</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>30.56</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "222 2020-08-13               1                  1              1   \n",
        "223 2020-08-14               1                  1              1   \n",
        "224 2020-08-15               1                  1              1   \n",
        "225 2020-08-16               1                  1              1   \n",
        "226 2020-08-17               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "222                        0                  0                       1   \n",
        "223                        0                  0                       1   \n",
        "224                        0                  0                       1   \n",
        "225                        0                  0                       1   \n",
        "226                        0                  0                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "222                               1                                    3   \n",
        "223                               1                                    3   \n",
        "224                               1                                    3   \n",
        "225                               1                                    3   \n",
        "226                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "222                      2               2                1             30.56  \n",
        "223                      2               2                1             30.56  \n",
        "224                      2               2                1             30.56  \n",
        "225                      2               2                1             30.56  \n",
        "226                      2               2                1             30.56  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Scenario analysis\n",
      "As an example, we will analysis the number of cases in Japan."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario = cs.Scenario(jhu_data, population_data, country=\"Japan\", province=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Check records"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import matplotlib\n",
      "warnings.filterwarnings(\"ignore\", category=matplotlib.MatplotlibDeprecationWarning)\n",
      "record_df = scenario.records()\n",
      "record_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>184</th>\n",
        "      <td>2020-08-13</td>\n",
        "      <td>51147</td>\n",
        "      <td>13950</td>\n",
        "      <td>1063</td>\n",
        "      <td>36134</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>185</th>\n",
        "      <td>2020-08-14</td>\n",
        "      <td>52217</td>\n",
        "      <td>13665</td>\n",
        "      <td>1073</td>\n",
        "      <td>37479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>186</th>\n",
        "      <td>2020-08-15</td>\n",
        "      <td>53577</td>\n",
        "      <td>13547</td>\n",
        "      <td>1085</td>\n",
        "      <td>38945</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>187</th>\n",
        "      <td>2020-08-16</td>\n",
        "      <td>54714</td>\n",
        "      <td>13546</td>\n",
        "      <td>1088</td>\n",
        "      <td>40080</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>188</th>\n",
        "      <td>2020-08-17</td>\n",
        "      <td>55667</td>\n",
        "      <td>13372</td>\n",
        "      <td>1099</td>\n",
        "      <td>41196</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "184 2020-08-13      51147     13950   1063      36134\n",
        "185 2020-08-14      52217     13665   1073      37479\n",
        "186 2020-08-15      53577     13547   1085      38945\n",
        "187 2020-08-16      54714     13546   1088      40080\n",
        "188 2020-08-17      55667     13372   1099      41196"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "S-R trend analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.trend(set_phases=True)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "     Type      Start        End  Population\n",
        "1st  Past  21Apr2020  01May2020   126529100\n",
        "2nd  Past  02May2020  02Jul2020   126529100\n",
        "3rd  Past  03Jul2020  16Jul2020   126529100\n",
        "4th  Past  17Jul2020  25Jul2020   126529100\n",
        "5th  Past  26Jul2020  04Aug2020   126529100\n",
        "6th  Past  05Aug2020  17Aug2020   126529100"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Hyperparameter estimation of ODE models\n",
      "As an example, use SIR-F model.\n",
      "We can use SIR, SIRD, (SIRFV), (SEWIRF)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate(cs.SIRF)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Running optimization with 4 CPUs..."
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t6th phase (05Aug2020 - 17Aug2020): finished 1336 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t4th phase (17Jul2020 - 25Jul2020): finished  269 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t1st phase (21Apr2020 - 01May2020): finished 1199 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t2nd phase (02May2020 - 02Jul2020): finished 1173 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t3rd phase (03Jul2020 - 16Jul2020): finished 1199 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\t5th phase (26Jul2020 - 04Aug2020): finished 1212 trials in 1 min  0 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 2 min 11 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.062911</td>\n",
        "      <td>0.000392</td>\n",
        "      <td>0.036335</td>\n",
        "      <td>0.026541</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.063</td>\n",
        "      <td>37</td>\n",
        "      <td>2552</td>\n",
        "      <td>27</td>\n",
        "      <td>0.128628</td>\n",
        "      <td>1199</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.22</td>\n",
        "      <td>0.153302</td>\n",
        "      <td>0.000105</td>\n",
        "      <td>0.018859</td>\n",
        "      <td>0.071146</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.153</td>\n",
        "      <td>14</td>\n",
        "      <td>9556</td>\n",
        "      <td>53</td>\n",
        "      <td>0.631129</td>\n",
        "      <td>1173</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.000826</td>\n",
        "      <td>0.000225</td>\n",
        "      <td>0.146909</td>\n",
        "      <td>0.069205</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>4442</td>\n",
        "      <td>6</td>\n",
        "      <td>0.036141</td>\n",
        "      <td>1199</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.000884</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.143342</td>\n",
        "      <td>0.069143</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>14040</td>\n",
        "      <td>6</td>\n",
        "      <td>0.021291</td>\n",
        "      <td>269</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.81</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.130755</td>\n",
        "      <td>0.072004</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>5319</td>\n",
        "      <td>7</td>\n",
        "      <td>0.029771</td>\n",
        "      <td>1212</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.15</td>\n",
        "      <td>0.000442</td>\n",
        "      <td>0.000323</td>\n",
        "      <td>0.091611</td>\n",
        "      <td>0.079331</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>12</td>\n",
        "      <td>3097</td>\n",
        "      <td>10</td>\n",
        "      <td>0.038301</td>\n",
        "      <td>1336</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "     Type      Start        End  Population    ODE    Rt     theta     kappa  \\\n",
        "1st  Past  21Apr2020  01May2020   126529100  SIR-F  1.26  0.062911  0.000392   \n",
        "2nd  Past  02May2020  02Jul2020   126529100  SIR-F  0.22  0.153302  0.000105   \n",
        "3rd  Past  03Jul2020  16Jul2020   126529100  SIR-F  2.11  0.000826  0.000225   \n",
        "4th  Past  17Jul2020  25Jul2020   126529100  SIR-F  2.07  0.000884  0.000071   \n",
        "5th  Past  26Jul2020  04Aug2020   126529100  SIR-F  1.81  0.000248  0.000188   \n",
        "6th  Past  05Aug2020  17Aug2020   126529100  SIR-F  1.15  0.000442  0.000323   \n",
        "\n",
        "          rho     sigma   tau  alpha1 [-]  1/gamma [day]  1/alpha2 [day]  \\\n",
        "1st  0.036335  0.026541  1440       0.063             37            2552   \n",
        "2nd  0.018859  0.071146  1440       0.153             14            9556   \n",
        "3rd  0.146909  0.069205  1440       0.001             14            4442   \n",
        "4th  0.143342  0.069143  1440       0.001             14           14040   \n",
        "5th  0.130755  0.072004  1440       0.000             13            5319   \n",
        "6th  0.091611  0.079331  1440       0.000             12            3097   \n",
        "\n",
        "     1/beta [day]     RMSLE  Trials       Runtime  \n",
        "1st            27  0.128628    1199  1 min  0 sec  \n",
        "2nd            53  0.631129    1173  1 min  0 sec  \n",
        "3rd             6  0.036141    1199  1 min  0 sec  \n",
        "4th             6  0.021291     269  0 min 10 sec  \n",
        "5th             7  0.029771    1212  1 min  0 sec  \n",
        "6th            10  0.038301    1336  1 min  0 sec  "
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Accuracy of estimation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.estimate_accuracy(phase=\"1st\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x864 with 4 Axes>"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Get parameter value"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.get(\"Rt\", phase=\"4th\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "2.07"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show parameter history"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"rho\", \"sigma\"])\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>rho</th>\n",
        "      <td>1.0</td>\n",
        "      <td>0.519021</td>\n",
        "      <td>4.043180</td>\n",
        "      <td>3.945010</td>\n",
        "      <td>3.598616</td>\n",
        "      <td>2.521293</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>sigma</th>\n",
        "      <td>1.0</td>\n",
        "      <td>2.680578</td>\n",
        "      <td>2.607435</td>\n",
        "      <td>2.605128</td>\n",
        "      <td>2.712915</td>\n",
        "      <td>2.988954</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       1st       2nd       3rd       4th       5th       6th\n",
        "rho    1.0  0.519021  4.043180  3.945010  3.598616  2.521293\n",
        "sigma  1.0  2.680578  2.607435  2.605128  2.712915  2.988954"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Show the history of reproduction number"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = scenario.param_history(targets=[\"Rt\"], divide_by_first=False, show_box_plot=True)\n",
      "df.T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>1st</th>\n",
        "      <th>2nd</th>\n",
        "      <th>3rd</th>\n",
        "      <th>4th</th>\n",
        "      <th>5th</th>\n",
        "      <th>6th</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Rt</th>\n",
        "      <td>1.26</td>\n",
        "      <td>0.22</td>\n",
        "      <td>2.11</td>\n",
        "      <td>2.07</td>\n",
        "      <td>1.81</td>\n",
        "      <td>1.15</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "     1st   2nd   3rd   4th   5th   6th\n",
        "Rt  1.26  0.22  2.11  2.07  1.81  1.15"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Simulate the number of cases"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Main\")\n",
      "scenario.add(end_date=\"01Jan2021\", name=\"Main\")\n",
      "main_sim_df = scenario.simulate(name=\"Main\")\n",
      "main_sim_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>252</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>472188</td>\n",
        "      <td>2735</td>\n",
        "      <td>67392</td>\n",
        "      <td>402061</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>253</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>478374</td>\n",
        "      <td>2760</td>\n",
        "      <td>68176</td>\n",
        "      <td>407438</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>254</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>484632</td>\n",
        "      <td>2785</td>\n",
        "      <td>68969</td>\n",
        "      <td>412878</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>490963</td>\n",
        "      <td>2810</td>\n",
        "      <td>69772</td>\n",
        "      <td>418381</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>497366</td>\n",
        "      <td>2835</td>\n",
        "      <td>70583</td>\n",
        "      <td>423948</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "252 2020-12-29     472188   2735     67392     402061\n",
        "253 2020-12-30     478374   2760     68176     407438\n",
        "254 2020-12-31     484632   2785     68969     412878\n",
        "255 2021-01-01     490963   2810     69772     418381\n",
        "256 2021-01-02     497366   2835     70583     423948"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Simulate another scenario\n",
      "If $\\sigma$ will be double in 30 days, how many cases will be?"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_current = scenario.get(\"sigma\", name=\"Main\", phase=\"last\")\n",
      "sigma_current"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "0.07933057383863634"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sigma_new = sigma_current * 2\n",
      "sigma_new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "0.15866114767727268"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.clear(name=\"Medicine\")\n",
      "scenario.add(name=\"Medicine\", days=30, sigma=sigma_current)\n",
      "scenario.add(name=\"Medicine\", end_date=\"01Jan2021\", sigma=sigma_new)\n",
      "scenario.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Scenario</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"7\" valign=\"top\">Main</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.062911</td>\n",
        "      <td>0.000392</td>\n",
        "      <td>0.036335</td>\n",
        "      <td>0.026541</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.063</td>\n",
        "      <td>37</td>\n",
        "      <td>2552</td>\n",
        "      <td>27</td>\n",
        "      <td>0.128628</td>\n",
        "      <td>1199</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.22</td>\n",
        "      <td>0.153302</td>\n",
        "      <td>0.000105</td>\n",
        "      <td>0.018859</td>\n",
        "      <td>0.071146</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.153</td>\n",
        "      <td>14</td>\n",
        "      <td>9556</td>\n",
        "      <td>53</td>\n",
        "      <td>0.631129</td>\n",
        "      <td>1173</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.000826</td>\n",
        "      <td>0.000225</td>\n",
        "      <td>0.146909</td>\n",
        "      <td>0.069205</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>4442</td>\n",
        "      <td>6</td>\n",
        "      <td>0.0361409</td>\n",
        "      <td>1199</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.000884</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.143342</td>\n",
        "      <td>0.069143</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>14040</td>\n",
        "      <td>6</td>\n",
        "      <td>0.0212907</td>\n",
        "      <td>269</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.81</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.130755</td>\n",
        "      <td>0.072004</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>5319</td>\n",
        "      <td>7</td>\n",
        "      <td>0.0297709</td>\n",
        "      <td>1212</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.15</td>\n",
        "      <td>0.000442</td>\n",
        "      <td>0.000323</td>\n",
        "      <td>0.091611</td>\n",
        "      <td>0.079331</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>12</td>\n",
        "      <td>3097</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0383013</td>\n",
        "      <td>1336</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.15</td>\n",
        "      <td>0.000442</td>\n",
        "      <td>0.000323</td>\n",
        "      <td>0.091611</td>\n",
        "      <td>0.079331</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>12</td>\n",
        "      <td>3097</td>\n",
        "      <td>10</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th rowspan=\"8\" valign=\"top\">Medicine</th>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>21Apr2020</td>\n",
        "      <td>01May2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.26</td>\n",
        "      <td>0.062911</td>\n",
        "      <td>0.000392</td>\n",
        "      <td>0.036335</td>\n",
        "      <td>0.026541</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.063</td>\n",
        "      <td>37</td>\n",
        "      <td>2552</td>\n",
        "      <td>27</td>\n",
        "      <td>0.128628</td>\n",
        "      <td>1199</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>02May2020</td>\n",
        "      <td>02Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.22</td>\n",
        "      <td>0.153302</td>\n",
        "      <td>0.000105</td>\n",
        "      <td>0.018859</td>\n",
        "      <td>0.071146</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.153</td>\n",
        "      <td>14</td>\n",
        "      <td>9556</td>\n",
        "      <td>53</td>\n",
        "      <td>0.631129</td>\n",
        "      <td>1173</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Jul2020</td>\n",
        "      <td>16Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.11</td>\n",
        "      <td>0.000826</td>\n",
        "      <td>0.000225</td>\n",
        "      <td>0.146909</td>\n",
        "      <td>0.069205</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>4442</td>\n",
        "      <td>6</td>\n",
        "      <td>0.0361409</td>\n",
        "      <td>1199</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>17Jul2020</td>\n",
        "      <td>25Jul2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.07</td>\n",
        "      <td>0.000884</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.143342</td>\n",
        "      <td>0.069143</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.001</td>\n",
        "      <td>14</td>\n",
        "      <td>14040</td>\n",
        "      <td>6</td>\n",
        "      <td>0.0212907</td>\n",
        "      <td>269</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Jul2020</td>\n",
        "      <td>04Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.81</td>\n",
        "      <td>0.000248</td>\n",
        "      <td>0.000188</td>\n",
        "      <td>0.130755</td>\n",
        "      <td>0.072004</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>13</td>\n",
        "      <td>5319</td>\n",
        "      <td>7</td>\n",
        "      <td>0.0297709</td>\n",
        "      <td>1212</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>05Aug2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.15</td>\n",
        "      <td>0.000442</td>\n",
        "      <td>0.000323</td>\n",
        "      <td>0.091611</td>\n",
        "      <td>0.079331</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>12</td>\n",
        "      <td>3097</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0383013</td>\n",
        "      <td>1336</td>\n",
        "      <td>1 min  0 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Future</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.15</td>\n",
        "      <td>0.000442</td>\n",
        "      <td>0.000323</td>\n",
        "      <td>0.091611</td>\n",
        "      <td>0.079331</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>12</td>\n",
        "      <td>3097</td>\n",
        "      <td>10</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Future</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>01Jan2021</td>\n",
        "      <td>126529100</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.58</td>\n",
        "      <td>0.000442</td>\n",
        "      <td>0.000323</td>\n",
        "      <td>0.091611</td>\n",
        "      <td>0.158661</td>\n",
        "      <td>1440</td>\n",
        "      <td>0.000</td>\n",
        "      <td>6</td>\n",
        "      <td>3097</td>\n",
        "      <td>10</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "                  Type      Start        End  Population    ODE    Rt  \\\n",
        "Scenario Phase                                                          \n",
        "Main     1st      Past  21Apr2020  01May2020   126529100  SIR-F  1.26   \n",
        "         2nd      Past  02May2020  02Jul2020   126529100  SIR-F  0.22   \n",
        "         3rd      Past  03Jul2020  16Jul2020   126529100  SIR-F  2.11   \n",
        "         4th      Past  17Jul2020  25Jul2020   126529100  SIR-F  2.07   \n",
        "         5th      Past  26Jul2020  04Aug2020   126529100  SIR-F  1.81   \n",
        "         6th      Past  05Aug2020  17Aug2020   126529100  SIR-F  1.15   \n",
        "         7th    Future  18Aug2020  01Jan2021   126529100  SIR-F  1.15   \n",
        "Medicine 1st      Past  21Apr2020  01May2020   126529100  SIR-F  1.26   \n",
        "         2nd      Past  02May2020  02Jul2020   126529100  SIR-F  0.22   \n",
        "         3rd      Past  03Jul2020  16Jul2020   126529100  SIR-F  2.11   \n",
        "         4th      Past  17Jul2020  25Jul2020   126529100  SIR-F  2.07   \n",
        "         5th      Past  26Jul2020  04Aug2020   126529100  SIR-F  1.81   \n",
        "         6th      Past  05Aug2020  17Aug2020   126529100  SIR-F  1.15   \n",
        "         7th    Future  18Aug2020  17Sep2020   126529100  SIR-F  1.15   \n",
        "         8th    Future  18Sep2020  01Jan2021   126529100  SIR-F  0.58   \n",
        "\n",
        "                   theta     kappa       rho     sigma   tau  alpha1 [-]  \\\n",
        "Scenario Phase                                                             \n",
        "Main     1st    0.062911  0.000392  0.036335  0.026541  1440       0.063   \n",
        "         2nd    0.153302  0.000105  0.018859  0.071146  1440       0.153   \n",
        "         3rd    0.000826  0.000225  0.146909  0.069205  1440       0.001   \n",
        "         4th    0.000884  0.000071  0.143342  0.069143  1440       0.001   \n",
        "         5th    0.000248  0.000188  0.130755  0.072004  1440       0.000   \n",
        "         6th    0.000442  0.000323  0.091611  0.079331  1440       0.000   \n",
        "         7th    0.000442  0.000323  0.091611  0.079331  1440       0.000   \n",
        "Medicine 1st    0.062911  0.000392  0.036335  0.026541  1440       0.063   \n",
        "         2nd    0.153302  0.000105  0.018859  0.071146  1440       0.153   \n",
        "         3rd    0.000826  0.000225  0.146909  0.069205  1440       0.001   \n",
        "         4th    0.000884  0.000071  0.143342  0.069143  1440       0.001   \n",
        "         5th    0.000248  0.000188  0.130755  0.072004  1440       0.000   \n",
        "         6th    0.000442  0.000323  0.091611  0.079331  1440       0.000   \n",
        "         7th    0.000442  0.000323  0.091611  0.079331  1440       0.000   \n",
        "         8th    0.000442  0.000323  0.091611  0.158661  1440       0.000   \n",
        "\n",
        "                1/gamma [day]  1/alpha2 [day]  1/beta [day]      RMSLE Trials  \\\n",
        "Scenario Phase                                                                  \n",
        "Main     1st               37            2552            27   0.128628   1199   \n",
        "         2nd               14            9556            53   0.631129   1173   \n",
        "         3rd               14            4442             6  0.0361409   1199   \n",
        "         4th               14           14040             6  0.0212907    269   \n",
        "         5th               13            5319             7  0.0297709   1212   \n",
        "         6th               12            3097            10  0.0383013   1336   \n",
        "         7th               12            3097            10          -      -   \n",
        "Medicine 1st               37            2552            27   0.128628   1199   \n",
        "         2nd               14            9556            53   0.631129   1173   \n",
        "         3rd               14            4442             6  0.0361409   1199   \n",
        "         4th               14           14040             6  0.0212907    269   \n",
        "         5th               13            5319             7  0.0297709   1212   \n",
        "         6th               12            3097            10  0.0383013   1336   \n",
        "         7th               12            3097            10          -      -   \n",
        "         8th                6            3097            10          -      -   \n",
        "\n",
        "                     Runtime  \n",
        "Scenario Phase                \n",
        "Main     1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    1 min  0 sec  \n",
        "         4th    0 min 10 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th               -  \n",
        "Medicine 1st    1 min  0 sec  \n",
        "         2nd    1 min  0 sec  \n",
        "         3rd    1 min  0 sec  \n",
        "         4th    0 min 10 sec  \n",
        "         5th    1 min  0 sec  \n",
        "         6th    1 min  0 sec  \n",
        "         7th               -  \n",
        "         8th               -  "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.simulate(name=\"Medicine\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>252</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>132618</td>\n",
        "      <td>1385</td>\n",
        "      <td>21</td>\n",
        "      <td>131212</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>253</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>132620</td>\n",
        "      <td>1385</td>\n",
        "      <td>20</td>\n",
        "      <td>131215</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>254</th>\n",
        "      <td>2020-12-31</td>\n",
        "      <td>132621</td>\n",
        "      <td>1385</td>\n",
        "      <td>18</td>\n",
        "      <td>131218</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>255</th>\n",
        "      <td>2021-01-01</td>\n",
        "      <td>132623</td>\n",
        "      <td>1385</td>\n",
        "      <td>17</td>\n",
        "      <td>131221</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>256</th>\n",
        "      <td>2021-01-02</td>\n",
        "      <td>132626</td>\n",
        "      <td>1386</td>\n",
        "      <td>16</td>\n",
        "      <td>131224</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "          Date  Confirmed  Fatal  Infected  Recovered\n",
        "252 2020-12-29     132618   1385        21     131212\n",
        "253 2020-12-30     132620   1385        20     131215\n",
        "254 2020-12-31     132621   1385        18     131218\n",
        "255 2021-01-01     132623   1385        17     131221\n",
        "256 2021-01-02     132626   1386        16     131224"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Compare the scenarios"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "scenario.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>max(Infected)</th>\n",
        "      <th>argmax(Infected)</th>\n",
        "      <th>Infected on 02Jan2021</th>\n",
        "      <th>Fatal on 02Jan2021</th>\n",
        "      <th>8th_Rt</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Main</th>\n",
        "      <td>70583</td>\n",
        "      <td>02Jan2021</td>\n",
        "      <td>70583</td>\n",
        "      <td>2835</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Medicine</th>\n",
        "      <td>20361</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>16</td>\n",
        "      <td>1386</td>\n",
        "      <td>0.58</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          max(Infected) argmax(Infected)  Infected on 02Jan2021  \\\n",
        "Main              70583        02Jan2021                  70583   \n",
        "Medicine          20361        18Sep2020                     16   \n",
        "\n",
        "          Fatal on 02Jan2021 8th_Rt  \n",
        "Main                    2835      -  \n",
        "Medicine                1386   0.58  "
       ]
      }
     ],
     "prompt_number": 39
    }
   ],
   "metadata": {}
  }
 ]
}
